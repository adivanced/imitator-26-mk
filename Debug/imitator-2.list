
imitator-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015838  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dd8  08015a08  08015a08  00025a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080187e0  080187e0  000319d8  2**0
                  CONTENTS
  4 .ARM          00000008  080187e0  080187e0  000287e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080187e8  080187e8  000319d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080187e8  080187e8  000287e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080187ec  080187ec  000287ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001898  20000000  080187f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20001898  0801a088  00031898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20001938  0801a128  00031938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0004d914  200019d8  0801a1c8  000319d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2004f2ec  0801a1c8  0003f2ec  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000319d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000306de  00000000  00000000  00031a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007143  00000000  00000000  000620e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002280  00000000  00000000  00069230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002128  00000000  00000000  0006b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00010a21  00000000  00000000  0006d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00035084  00000000  00000000  0007dff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114f8f  00000000  00000000  000b307d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c800c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000982c  00000000  00000000  001c805c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200019d8 	.word	0x200019d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080159f0 	.word	0x080159f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200019dc 	.word	0x200019dc
 800020c:	080159f0 	.word	0x080159f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <keyboard_GPIO_init>:
uint32_t key_count[4][3] = {0};
uint32_t stage = 0;
uint16_t keyboard_state = 0;


void keyboard_GPIO_init(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2110      	movs	r1, #16
 80005dc:	4826      	ldr	r0, [pc, #152]	; (8000678 <keyboard_GPIO_init+0xb4>)
 80005de:	f003 fbef 	bl	8003dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2101      	movs	r1, #1
 80005e6:	4825      	ldr	r0, [pc, #148]	; (800067c <keyboard_GPIO_init+0xb8>)
 80005e8:	f003 fbea 	bl	8003dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	21c0      	movs	r1, #192	; 0xc0
 80005f0:	4823      	ldr	r0, [pc, #140]	; (8000680 <keyboard_GPIO_init+0xbc>)
 80005f2:	f003 fbe5 	bl	8003dc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005f6:	2310      	movs	r3, #16
 80005f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	481b      	ldr	r0, [pc, #108]	; (8000678 <keyboard_GPIO_init+0xb4>)
 800060c:	f003 fa14 	bl	8003a38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI2 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000610:	230c      	movs	r3, #12
 8000612:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000618:	2302      	movs	r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <keyboard_GPIO_init+0xb8>)
 8000622:	f003 fa09 	bl	8003a38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000626:	2301      	movs	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800062e:	2302      	movs	r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <keyboard_GPIO_init+0xb8>)
 800063c:	f003 f9fc 	bl	8003a38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG7 PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000640:	23c0      	movs	r3, #192	; 0xc0
 8000642:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000648:	2302      	movs	r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <keyboard_GPIO_init+0xbc>)
 8000656:	f003 f9ef 	bl	8003a38 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <keyboard_GPIO_init+0xc0>)
 800066c:	f003 f9e4 	bl	8003a38 <HAL_GPIO_Init>
}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40020400 	.word	0x40020400
 800067c:	40022000 	.word	0x40022000
 8000680:	40021800 	.word	0x40021800
 8000684:	40021c00 	.word	0x40021c00

08000688 <get_current_keyboard_state>:

void get_current_keyboard_state(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	stage = (stage+1)%8;
 800068c:	4b95      	ldr	r3, [pc, #596]	; (80008e4 <get_current_keyboard_state+0x25c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	4a93      	ldr	r2, [pc, #588]	; (80008e4 <get_current_keyboard_state+0x25c>)
 8000698:	6013      	str	r3, [r2, #0]
	switch(stage){
 800069a:	4b92      	ldr	r3, [pc, #584]	; (80008e4 <get_current_keyboard_state+0x25c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	f200 82a3 	bhi.w	8000bea <get_current_keyboard_state+0x562>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <get_current_keyboard_state+0x24>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006cd 	.word	0x080006cd
 80006b0:	080006f7 	.word	0x080006f7
 80006b4:	08000807 	.word	0x08000807
 80006b8:	08000831 	.word	0x08000831
 80006bc:	0800095d 	.word	0x0800095d
 80006c0:	08000987 	.word	0x08000987
 80006c4:	08000a97 	.word	0x08000a97
 80006c8:	08000ac1 	.word	0x08000ac1
		case 0:{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4885      	ldr	r0, [pc, #532]	; (80008e8 <get_current_keyboard_state+0x260>)
 80006d2:	f003 fb75 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);			
 80006d6:	2200      	movs	r2, #0
 80006d8:	2110      	movs	r1, #16
 80006da:	4884      	ldr	r0, [pc, #528]	; (80008ec <get_current_keyboard_state+0x264>)
 80006dc:	f003 fb70 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	4882      	ldr	r0, [pc, #520]	; (80008f0 <get_current_keyboard_state+0x268>)
 80006e6:	f003 fb6b 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	487e      	ldr	r0, [pc, #504]	; (80008e8 <get_current_keyboard_state+0x260>)
 80006f0:	f003 fb66 	bl	8003dc0 <HAL_GPIO_WritePin>
			break;
 80006f4:	e279      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[0][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][0]++;}}else{if(key_count[0][0]){key_count[0][0]--;}}
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	487e      	ldr	r0, [pc, #504]	; (80008f4 <get_current_keyboard_state+0x26c>)
 80006fa:	f003 fb49 	bl	8003d90 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d109      	bne.n	8000718 <get_current_keyboard_state+0x90>
 8000704:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b15      	cmp	r3, #21
 800070a:	d80e      	bhi.n	800072a <get_current_keyboard_state+0xa2>
 800070c:	4b7a      	ldr	r3, [pc, #488]	; (80008f8 <get_current_keyboard_state+0x270>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a79      	ldr	r2, [pc, #484]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	e008      	b.n	800072a <get_current_keyboard_state+0xa2>
 8000718:	4b77      	ldr	r3, [pc, #476]	; (80008f8 <get_current_keyboard_state+0x270>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <get_current_keyboard_state+0xa2>
 8000720:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3b01      	subs	r3, #1
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000728:	6013      	str	r3, [r2, #0]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[0][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][1]++;}}else{if(key_count[0][1]){key_count[0][1]--;}}
 800072a:	2108      	movs	r1, #8
 800072c:	4870      	ldr	r0, [pc, #448]	; (80008f0 <get_current_keyboard_state+0x268>)
 800072e:	f003 fb2f 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	d109      	bne.n	800074c <get_current_keyboard_state+0xc4>
 8000738:	4b6f      	ldr	r3, [pc, #444]	; (80008f8 <get_current_keyboard_state+0x270>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2b15      	cmp	r3, #21
 800073e:	d80e      	bhi.n	800075e <get_current_keyboard_state+0xd6>
 8000740:	4b6d      	ldr	r3, [pc, #436]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000748:	6053      	str	r3, [r2, #4]
 800074a:	e008      	b.n	800075e <get_current_keyboard_state+0xd6>
 800074c:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <get_current_keyboard_state+0x270>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d004      	beq.n	800075e <get_current_keyboard_state+0xd6>
 8000754:	4b68      	ldr	r3, [pc, #416]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	3b01      	subs	r3, #1
 800075a:	4a67      	ldr	r2, [pc, #412]	; (80008f8 <get_current_keyboard_state+0x270>)
 800075c:	6053      	str	r3, [r2, #4]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[0][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][2]++;}}else{if(key_count[0][2]){key_count[0][2]--;}}
 800075e:	2104      	movs	r1, #4
 8000760:	4863      	ldr	r0, [pc, #396]	; (80008f0 <get_current_keyboard_state+0x268>)
 8000762:	f003 fb15 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d109      	bne.n	8000780 <get_current_keyboard_state+0xf8>
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <get_current_keyboard_state+0x270>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	2b15      	cmp	r3, #21
 8000772:	d80e      	bhi.n	8000792 <get_current_keyboard_state+0x10a>
 8000774:	4b60      	ldr	r3, [pc, #384]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	3301      	adds	r3, #1
 800077a:	4a5f      	ldr	r2, [pc, #380]	; (80008f8 <get_current_keyboard_state+0x270>)
 800077c:	6093      	str	r3, [r2, #8]
 800077e:	e008      	b.n	8000792 <get_current_keyboard_state+0x10a>
 8000780:	4b5d      	ldr	r3, [pc, #372]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d004      	beq.n	8000792 <get_current_keyboard_state+0x10a>
 8000788:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <get_current_keyboard_state+0x270>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a5a      	ldr	r2, [pc, #360]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000790:	6093      	str	r3, [r2, #8]

			if(key_count[0][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_TEST;}else{keyboard_state&=~BUTTON_TEST;}
 8000792:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b0e      	cmp	r3, #14
 8000798:	d907      	bls.n	80007aa <get_current_keyboard_state+0x122>
 800079a:	4b58      	ldr	r3, [pc, #352]	; (80008fc <get_current_keyboard_state+0x274>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b55      	ldr	r3, [pc, #340]	; (80008fc <get_current_keyboard_state+0x274>)
 80007a6:	801a      	strh	r2, [r3, #0]
 80007a8:	e006      	b.n	80007b8 <get_current_keyboard_state+0x130>
 80007aa:	4b54      	ldr	r3, [pc, #336]	; (80008fc <get_current_keyboard_state+0x274>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <get_current_keyboard_state+0x274>)
 80007b6:	801a      	strh	r2, [r3, #0]
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 80007b8:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <get_current_keyboard_state+0x270>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b0e      	cmp	r3, #14
 80007be:	d907      	bls.n	80007d0 <get_current_keyboard_state+0x148>
 80007c0:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <get_current_keyboard_state+0x274>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <get_current_keyboard_state+0x274>)
 80007cc:	801a      	strh	r2, [r3, #0]
 80007ce:	e006      	b.n	80007de <get_current_keyboard_state+0x156>
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <get_current_keyboard_state+0x274>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	f023 0302 	bic.w	r3, r3, #2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b48      	ldr	r3, [pc, #288]	; (80008fc <get_current_keyboard_state+0x274>)
 80007dc:	801a      	strh	r2, [r3, #0]
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80007de:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <get_current_keyboard_state+0x270>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b0e      	cmp	r3, #14
 80007e4:	d907      	bls.n	80007f6 <get_current_keyboard_state+0x16e>
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <get_current_keyboard_state+0x274>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	4b42      	ldr	r3, [pc, #264]	; (80008fc <get_current_keyboard_state+0x274>)
 80007f2:	801a      	strh	r2, [r3, #0]
			break;
 80007f4:	e1f9      	b.n	8000bea <get_current_keyboard_state+0x562>
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <get_current_keyboard_state+0x274>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f023 0304 	bic.w	r3, r3, #4
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <get_current_keyboard_state+0x274>)
 8000802:	801a      	strh	r2, [r3, #0]
			break;
 8000804:	e1f1      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 2:{	
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4837      	ldr	r0, [pc, #220]	; (80008e8 <get_current_keyboard_state+0x260>)
 800080c:	f003 fad8 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	4834      	ldr	r0, [pc, #208]	; (80008e8 <get_current_keyboard_state+0x260>)
 8000816:	f003 fad3 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);	
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	4834      	ldr	r0, [pc, #208]	; (80008f0 <get_current_keyboard_state+0x268>)
 8000820:	f003 face 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);			
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	4830      	ldr	r0, [pc, #192]	; (80008ec <get_current_keyboard_state+0x264>)
 800082a:	f003 fac9 	bl	8003dc0 <HAL_GPIO_WritePin>
			break;
 800082e:	e1dc      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[1][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][0]++;}}else{if(key_count[1][0]){key_count[1][0]--;}}
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	4830      	ldr	r0, [pc, #192]	; (80008f4 <get_current_keyboard_state+0x26c>)
 8000834:	f003 faac 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d109      	bne.n	8000852 <get_current_keyboard_state+0x1ca>
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	2b15      	cmp	r3, #21
 8000844:	d80e      	bhi.n	8000864 <get_current_keyboard_state+0x1dc>
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <get_current_keyboard_state+0x270>)
 800084e:	60d3      	str	r3, [r2, #12]
 8000850:	e008      	b.n	8000864 <get_current_keyboard_state+0x1dc>
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <get_current_keyboard_state+0x1dc>
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <get_current_keyboard_state+0x270>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	3b01      	subs	r3, #1
 8000860:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000862:	60d3      	str	r3, [r2, #12]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[1][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][1]++;}}else{if(key_count[1][1]){key_count[1][1]--;}}
 8000864:	2108      	movs	r1, #8
 8000866:	4822      	ldr	r0, [pc, #136]	; (80008f0 <get_current_keyboard_state+0x268>)
 8000868:	f003 fa92 	bl	8003d90 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d109      	bne.n	8000886 <get_current_keyboard_state+0x1fe>
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	2b15      	cmp	r3, #21
 8000878:	d80e      	bhi.n	8000898 <get_current_keyboard_state+0x210>
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <get_current_keyboard_state+0x270>)
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	3301      	adds	r3, #1
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000882:	6113      	str	r3, [r2, #16]
 8000884:	e008      	b.n	8000898 <get_current_keyboard_state+0x210>
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d004      	beq.n	8000898 <get_current_keyboard_state+0x210>
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000896:	6113      	str	r3, [r2, #16]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[1][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][2]++;}}else{if(key_count[1][2]){key_count[1][2]--;}}
 8000898:	2104      	movs	r1, #4
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <get_current_keyboard_state+0x268>)
 800089c:	f003 fa78 	bl	8003d90 <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d109      	bne.n	80008ba <get_current_keyboard_state+0x232>
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	2b15      	cmp	r3, #21
 80008ac:	d80e      	bhi.n	80008cc <get_current_keyboard_state+0x244>
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008b6:	6153      	str	r3, [r2, #20]
 80008b8:	e008      	b.n	80008cc <get_current_keyboard_state+0x244>
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d004      	beq.n	80008cc <get_current_keyboard_state+0x244>
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008ca:	6153      	str	r3, [r2, #20]
	
			if(key_count[1][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_CALIBRATION;}else{keyboard_state&=~BUTTON_CALIBRATION;}
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	2b0e      	cmp	r3, #14
 80008d2:	d915      	bls.n	8000900 <get_current_keyboard_state+0x278>
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <get_current_keyboard_state+0x274>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <get_current_keyboard_state+0x274>)
 80008e0:	801a      	strh	r2, [r3, #0]
 80008e2:	e014      	b.n	800090e <get_current_keyboard_state+0x286>
 80008e4:	20001a24 	.word	0x20001a24
 80008e8:	40021800 	.word	0x40021800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40022000 	.word	0x40022000
 80008f4:	40021c00 	.word	0x40021c00
 80008f8:	200019f4 	.word	0x200019f4
 80008fc:	20001a28 	.word	0x20001a28
 8000900:	4b92      	ldr	r3, [pc, #584]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	f023 0308 	bic.w	r3, r3, #8
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b90      	ldr	r3, [pc, #576]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 800090c:	801a      	strh	r2, [r3, #0]
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 800090e:	4b90      	ldr	r3, [pc, #576]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	2b0e      	cmp	r3, #14
 8000914:	d907      	bls.n	8000926 <get_current_keyboard_state+0x29e>
 8000916:	4b8d      	ldr	r3, [pc, #564]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b8a      	ldr	r3, [pc, #552]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000922:	801a      	strh	r2, [r3, #0]
 8000924:	e006      	b.n	8000934 <get_current_keyboard_state+0x2ac>
 8000926:	4b89      	ldr	r3, [pc, #548]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	f023 0310 	bic.w	r3, r3, #16
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b86      	ldr	r3, [pc, #536]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000932:	801a      	strh	r2, [r3, #0]
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 8000934:	4b86      	ldr	r3, [pc, #536]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	2b0e      	cmp	r3, #14
 800093a:	d907      	bls.n	800094c <get_current_keyboard_state+0x2c4>
 800093c:	4b83      	ldr	r3, [pc, #524]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b81      	ldr	r3, [pc, #516]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000948:	801a      	strh	r2, [r3, #0]
			break;
 800094a:	e14e      	b.n	8000bea <get_current_keyboard_state+0x562>
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 800094c:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	f023 0320 	bic.w	r3, r3, #32
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b7d      	ldr	r3, [pc, #500]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000958:	801a      	strh	r2, [r3, #0]
			break;
 800095a:	e146      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 4:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2110      	movs	r1, #16
 8000960:	487c      	ldr	r0, [pc, #496]	; (8000b54 <get_current_keyboard_state+0x4cc>)
 8000962:	f003 fa2d 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	487b      	ldr	r0, [pc, #492]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 800096c:	f003 fa28 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2101      	movs	r1, #1
 8000974:	4879      	ldr	r0, [pc, #484]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000976:	f003 fa23 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);			
 800097a:	2201      	movs	r2, #1
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	4876      	ldr	r0, [pc, #472]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 8000980:	f003 fa1e 	bl	8003dc0 <HAL_GPIO_WritePin>
			break;
 8000984:	e131      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[2][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][0]++;}}else{if(key_count[2][0]){key_count[2][0]--;}}
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	4875      	ldr	r0, [pc, #468]	; (8000b60 <get_current_keyboard_state+0x4d8>)
 800098a:	f003 fa01 	bl	8003d90 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d109      	bne.n	80009a8 <get_current_keyboard_state+0x320>
 8000994:	4b6e      	ldr	r3, [pc, #440]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	2b15      	cmp	r3, #21
 800099a:	d80e      	bhi.n	80009ba <get_current_keyboard_state+0x332>
 800099c:	4b6c      	ldr	r3, [pc, #432]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a6b      	ldr	r2, [pc, #428]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	e008      	b.n	80009ba <get_current_keyboard_state+0x332>
 80009a8:	4b69      	ldr	r3, [pc, #420]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d004      	beq.n	80009ba <get_current_keyboard_state+0x332>
 80009b0:	4b67      	ldr	r3, [pc, #412]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	4a66      	ldr	r2, [pc, #408]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009b8:	6193      	str	r3, [r2, #24]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[2][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][1]++;}}else{if(key_count[2][1]){key_count[2][1]--;}}
 80009ba:	2108      	movs	r1, #8
 80009bc:	4867      	ldr	r0, [pc, #412]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 80009be:	f003 f9e7 	bl	8003d90 <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d109      	bne.n	80009dc <get_current_keyboard_state+0x354>
 80009c8:	4b61      	ldr	r3, [pc, #388]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	2b15      	cmp	r3, #21
 80009ce:	d80e      	bhi.n	80009ee <get_current_keyboard_state+0x366>
 80009d0:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a5e      	ldr	r2, [pc, #376]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	e008      	b.n	80009ee <get_current_keyboard_state+0x366>
 80009dc:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <get_current_keyboard_state+0x366>
 80009e4:	4b5a      	ldr	r3, [pc, #360]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a59      	ldr	r2, [pc, #356]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009ec:	61d3      	str	r3, [r2, #28]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[2][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][2]++;}}else{if(key_count[2][2]){key_count[2][2]--;}}
 80009ee:	2104      	movs	r1, #4
 80009f0:	485a      	ldr	r0, [pc, #360]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 80009f2:	f003 f9cd 	bl	8003d90 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d109      	bne.n	8000a10 <get_current_keyboard_state+0x388>
 80009fc:	4b54      	ldr	r3, [pc, #336]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009fe:	6a1b      	ldr	r3, [r3, #32]
 8000a00:	2b15      	cmp	r3, #21
 8000a02:	d80e      	bhi.n	8000a22 <get_current_keyboard_state+0x39a>
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a51      	ldr	r2, [pc, #324]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a0c:	6213      	str	r3, [r2, #32]
 8000a0e:	e008      	b.n	8000a22 <get_current_keyboard_state+0x39a>
 8000a10:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a12:	6a1b      	ldr	r3, [r3, #32]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d004      	beq.n	8000a22 <get_current_keyboard_state+0x39a>
 8000a18:	4b4d      	ldr	r3, [pc, #308]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a1a:	6a1b      	ldr	r3, [r3, #32]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a20:	6213      	str	r3, [r2, #32]

			if(key_count[2][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_BRIGHTNESS;}else{keyboard_state&=~BUTTON_BRIGHTNESS;}
 8000a22:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	2b0e      	cmp	r3, #14
 8000a28:	d907      	bls.n	8000a3a <get_current_keyboard_state+0x3b2>
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a36:	801a      	strh	r2, [r3, #0]
 8000a38:	e006      	b.n	8000a48 <get_current_keyboard_state+0x3c0>
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a46:	801a      	strh	r2, [r3, #0]
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8000a48:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	2b0e      	cmp	r3, #14
 8000a4e:	d907      	bls.n	8000a60 <get_current_keyboard_state+0x3d8>
 8000a50:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a5c:	801a      	strh	r2, [r3, #0]
 8000a5e:	e006      	b.n	8000a6e <get_current_keyboard_state+0x3e6>
 8000a60:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a6c:	801a      	strh	r2, [r3, #0]
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8000a6e:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	2b0e      	cmp	r3, #14
 8000a74:	d907      	bls.n	8000a86 <get_current_keyboard_state+0x3fe>
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a82:	801a      	strh	r2, [r3, #0]
			break;
 8000a84:	e0b1      	b.n	8000bea <get_current_keyboard_state+0x562>
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a92:	801a      	strh	r2, [r3, #0]
			break;
 8000a94:	e0a9      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 6:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2110      	movs	r1, #16
 8000a9a:	482e      	ldr	r0, [pc, #184]	; (8000b54 <get_current_keyboard_state+0x4cc>)
 8000a9c:	f003 f990 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	482c      	ldr	r0, [pc, #176]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 8000aa6:	f003 f98b 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	482a      	ldr	r0, [pc, #168]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 8000ab0:	f003 f986 	bl	8003dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);			
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4828      	ldr	r0, [pc, #160]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000aba:	f003 f981 	bl	8003dc0 <HAL_GPIO_WritePin>
			break;
 8000abe:	e094      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 7:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[3][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][0]++;}}else{if(key_count[3][0]){key_count[3][0]--;}}
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	4827      	ldr	r0, [pc, #156]	; (8000b60 <get_current_keyboard_state+0x4d8>)
 8000ac4:	f003 f964 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d109      	bne.n	8000ae2 <get_current_keyboard_state+0x45a>
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	2b15      	cmp	r3, #21
 8000ad4:	d80e      	bhi.n	8000af4 <get_current_keyboard_state+0x46c>
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ade:	6253      	str	r3, [r2, #36]	; 0x24
 8000ae0:	e008      	b.n	8000af4 <get_current_keyboard_state+0x46c>
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d004      	beq.n	8000af4 <get_current_keyboard_state+0x46c>
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	3b01      	subs	r3, #1
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000af2:	6253      	str	r3, [r2, #36]	; 0x24
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
 8000af4:	2108      	movs	r1, #8
 8000af6:	4819      	ldr	r0, [pc, #100]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000af8:	f003 f94a 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d109      	bne.n	8000b16 <get_current_keyboard_state+0x48e>
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b06:	2b15      	cmp	r3, #21
 8000b08:	d80e      	bhi.n	8000b28 <get_current_keyboard_state+0x4a0>
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b12:	6293      	str	r3, [r2, #40]	; 0x28
 8000b14:	e008      	b.n	8000b28 <get_current_keyboard_state+0x4a0>
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d004      	beq.n	8000b28 <get_current_keyboard_state+0x4a0>
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b22:	3b01      	subs	r3, #1
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b26:	6293      	str	r3, [r2, #40]	; 0x28
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}
 8000b28:	2104      	movs	r1, #4
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000b2c:	f003 f930 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d116      	bne.n	8000b64 <get_current_keyboard_state+0x4dc>
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	2b15      	cmp	r3, #21
 8000b3c:	d81b      	bhi.n	8000b76 <get_current_keyboard_state+0x4ee>
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a02      	ldr	r2, [pc, #8]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b48:	e015      	b.n	8000b76 <get_current_keyboard_state+0x4ee>
 8000b4a:	bf00      	nop
 8000b4c:	20001a28 	.word	0x20001a28
 8000b50:	200019f4 	.word	0x200019f4
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40022000 	.word	0x40022000
 8000b60:	40021c00 	.word	0x40021c00
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d004      	beq.n	8000b76 <get_current_keyboard_state+0x4ee>
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b74:	62d3      	str	r3, [r2, #44]	; 0x2c

			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	2b0e      	cmp	r3, #14
 8000b7c:	d907      	bls.n	8000b8e <get_current_keyboard_state+0x506>
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b8a:	801a      	strh	r2, [r3, #0]
 8000b8c:	e006      	b.n	8000b9c <get_current_keyboard_state+0x514>
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b9a:	801a      	strh	r2, [r3, #0]
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba0:	2b0e      	cmp	r3, #14
 8000ba2:	d907      	bls.n	8000bb4 <get_current_keyboard_state+0x52c>
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e006      	b.n	8000bc2 <get_current_keyboard_state+0x53a>
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bc0:	801a      	strh	r2, [r3, #0]
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc6:	2b0e      	cmp	r3, #14
 8000bc8:	d907      	bls.n	8000bda <get_current_keyboard_state+0x552>
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bd6:	801a      	strh	r2, [r3, #0]
			break;
 8000bd8:	e006      	b.n	8000be8 <get_current_keyboard_state+0x560>
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000be6:	801a      	strh	r2, [r3, #0]
			break;
 8000be8:	bf00      	nop
		}

	}
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200019f4 	.word	0x200019f4
 8000bf4:	20001a28 	.word	0x20001a28

08000bf8 <spinner_GPIO_init>:

uint32_t pluscnt = 0;
uint32_t minuscnt = 0;


void spinner_GPIO_init(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pins : PF8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <spinner_GPIO_init+0x60>)
 8000c20:	f002 ff0a 	bl	8003a38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <spinner_GPIO_init+0x64>)
 8000c36:	f002 feff 	bl	8003a38 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <spinner_GPIO_init+0x64>)
 8000c4c:	f002 fef4 	bl	8003a38 <HAL_GPIO_Init>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021400 	.word	0x40021400
 8000c5c:	40020800 	.word	0x40020800

08000c60 <get_current_spinner_button_state>:

void get_current_spinner_button_state(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <get_current_spinner_button_state+0x60>)
 8000c6c:	f003 f890 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_RESET){
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d109      	bne.n	8000c8e <get_current_spinner_button_state+0x2e>
		if(spinner_button_count < SPINNER_COUNT_BOUNDRY+SPINNER_COUNT_BOUNDRY/2){
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b3b      	cmp	r3, #59	; 0x3b
 8000c80:	d80e      	bhi.n	8000ca0 <get_current_spinner_button_state+0x40>
				spinner_button_count++;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e008      	b.n	8000ca0 <get_current_spinner_button_state+0x40>
		}
	}else{
		if(spinner_button_count >= 3){
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d904      	bls.n	8000ca0 <get_current_spinner_button_state+0x40>
			spinner_button_count-=3;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3b03      	subs	r3, #3
 8000c9c:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c9e:	6013      	str	r3, [r2, #0]
		}
	}
	if(spinner_button_count >= SPINNER_COUNT_BOUNDRY){
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b27      	cmp	r3, #39	; 0x27
 8000ca6:	d903      	bls.n	8000cb0 <get_current_spinner_button_state+0x50>
		spinner_button_state=1;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <get_current_spinner_button_state+0x68>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
	}else{
		spinner_button_state=0;
	}
}
 8000cae:	e002      	b.n	8000cb6 <get_current_spinner_button_state+0x56>
		spinner_button_state=0;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <get_current_spinner_button_state+0x68>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40021400 	.word	0x40021400
 8000cc4:	20001a30 	.word	0x20001a30
 8000cc8:	20001a2c 	.word	0x20001a2c

08000ccc <get_spinner_position_change>:


void get_spinner_position_change(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	switch(spinner_stage){
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <get_spinner_position_change+0x130>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	f200 808f 	bhi.w	8000df8 <get_spinner_position_change+0x12c>
 8000cda:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <get_spinner_position_change+0x14>)
 8000cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce0:	08000cf9 	.word	0x08000cf9
 8000ce4:	08000d25 	.word	0x08000d25
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d79 	.word	0x08000d79
 8000cf0:	08000db7 	.word	0x08000db7
 8000cf4:	08000dcd 	.word	0x08000dcd
		case 0:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4841      	ldr	r0, [pc, #260]	; (8000e00 <get_spinner_position_change+0x134>)
 8000cfc:	f003 f848 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d16d      	bne.n	8000de2 <get_spinner_position_change+0x116>
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	483d      	ldr	r0, [pc, #244]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d0a:	f003 f841 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <get_spinner_position_change+0x50>
					spinner_stage = 1;
 8000d14:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
				}else{
					spinner_stage = 3;
				}
			}
			break;
 8000d1a:	e062      	b.n	8000de2 <get_spinner_position_change+0x116>
					spinner_stage = 3;
 8000d1c:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d1e:	2203      	movs	r2, #3
 8000d20:	601a      	str	r2, [r3, #0]
			break;
 8000d22:	e05e      	b.n	8000de2 <get_spinner_position_change+0x116>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	4836      	ldr	r0, [pc, #216]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d28:	f003 f832 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d159      	bne.n	8000de6 <get_spinner_position_change+0x11a>
				//if(spinner_position){
					//spinner_position--;
				minuscnt++;
 8000d32:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d3a:	6013      	str	r3, [r2, #0]
				pluscnt=0;
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
				if(minuscnt >= 4){
 8000d42:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d907      	bls.n	8000d5a <get_spinner_position_change+0x8e>
					spinner_position--;
 8000d4a:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <get_spinner_position_change+0x140>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a2e      	ldr	r2, [pc, #184]	; (8000e0c <get_spinner_position_change+0x140>)
 8000d52:	6013      	str	r3, [r2, #0]
					minuscnt=0;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
				}
				//}
				spinner_stage = 2;
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000d60:	e041      	b.n	8000de6 <get_spinner_position_change+0x11a>
		}
		case 2:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	4826      	ldr	r0, [pc, #152]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d66:	f003 f813 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d13c      	bne.n	8000dea <get_spinner_position_change+0x11e>
				spinner_stage = 0;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000d76:	e038      	b.n	8000dea <get_spinner_position_change+0x11e>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d7c:	f003 f808 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d133      	bne.n	8000dee <get_spinner_position_change+0x122>
				//if(spinner_position < 1000){
					//spinner_position++;
				pluscnt++;
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d8e:	6013      	str	r3, [r2, #0]
				minuscnt=0;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
				if(pluscnt>=2){
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d907      	bls.n	8000dae <get_spinner_position_change+0xe2>
					spinner_position++;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <get_spinner_position_change+0x140>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <get_spinner_position_change+0x140>)
 8000da6:	6013      	str	r3, [r2, #0]
					pluscnt=0;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
				}
				//}				
				spinner_stage = 4;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <get_spinner_position_change+0x130>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000db4:	e01b      	b.n	8000dee <get_spinner_position_change+0x122>
		}
		case 4:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <get_spinner_position_change+0x134>)
 8000dba:	f002 ffe9 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d116      	bne.n	8000df2 <get_spinner_position_change+0x126>
				spinner_stage = 5;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <get_spinner_position_change+0x130>)
 8000dc6:	2205      	movs	r2, #5
 8000dc8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000dca:	e012      	b.n	8000df2 <get_spinner_position_change+0x126>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <get_spinner_position_change+0x134>)
 8000dd0:	f002 ffde 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10d      	bne.n	8000df6 <get_spinner_position_change+0x12a>
				spinner_stage = 0;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <get_spinner_position_change+0x130>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
			}
			break;
 8000de0:	e009      	b.n	8000df6 <get_spinner_position_change+0x12a>
			break;
 8000de2:	bf00      	nop
 8000de4:	e008      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;			
 8000de6:	bf00      	nop
 8000de8:	e006      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;			
 8000dea:	bf00      	nop
 8000dec:	e004      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;			
 8000dee:	bf00      	nop
 8000df0:	e002      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;
 8000df2:	bf00      	nop
 8000df4:	e000      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;
 8000df6:	bf00      	nop
		}
	}
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20001a34 	.word	0x20001a34
 8000e00:	40020800 	.word	0x40020800
 8000e04:	20001a3c 	.word	0x20001a3c
 8000e08:	20001a38 	.word	0x20001a38
 8000e0c:	20000000 	.word	0x20000000

08000e10 <switch_GPIO_init>:
// SWITCH PORTS:
// IN: F10 (PULLUP)

uint32_t switch_state = 0;

void switch_GPIO_init(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e28:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <switch_GPIO_init+0x34>)
 8000e38:	f002 fdfe 	bl	8003a38 <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021400 	.word	0x40021400

08000e48 <get_current_switch_state>:

void get_current_switch_state(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <get_current_switch_state+0x30>)
 8000e54:	f002 ff9c 	bl	8003d90 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_SET){
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d103      	bne.n	8000e6a <get_current_switch_state+0x22>
		switch_state = 0;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <get_current_switch_state+0x34>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
	}else{
		switch_state = 1;
	}
}
 8000e68:	e002      	b.n	8000e70 <get_current_switch_state+0x28>
		switch_state = 1;
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <get_current_switch_state+0x34>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021400 	.word	0x40021400
 8000e7c:	20001a40 	.word	0x20001a40

08000e80 <print_char>:
		}
	}
}


void print_char(uint32_t x, uint32_t y, uint8_t index, uint16_t color){
 8000e80:	b480      	push	{r7}
 8000e82:	b08f      	sub	sp, #60	; 0x3c
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	460b      	mov	r3, r1
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	4613      	mov	r3, r2
 8000e94:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b4b      	ldr	r3, [pc, #300]	; (8000fd0 <print_char+0x150>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
 8000eb0:	e03c      	b.n	8000f2c <print_char+0xac>
		uint32_t yiter = y;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t mask = 0b00000001;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(uint32_t i = 0; i < 8; i++){
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec0:	e02b      	b.n	8000f1a <print_char+0x9a>
			if(*fptr & mask){
 8000ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000eca:	4013      	ands	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00c      	beq.n	8000eec <print_char+0x6c>
				framebuf[yiter * SCRWIDTH + xiter] = color;
 8000ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	1a9b      	subs	r3, r3, r2
 8000eda:	015b      	lsls	r3, r3, #5
 8000edc:	461a      	mov	r2, r3
 8000ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee0:	4413      	add	r3, r2
 8000ee2:	493c      	ldr	r1, [pc, #240]	; (8000fd4 <print_char+0x154>)
 8000ee4:	88ba      	ldrh	r2, [r7, #4]
 8000ee6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000eea:	e00b      	b.n	8000f04 <print_char+0x84>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 8000eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eee:	4613      	mov	r3, r2
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	015b      	lsls	r3, r3, #5
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efa:	4413      	add	r3, r2
 8000efc:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <print_char+0x154>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 8000f04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			yiter++;
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	3301      	adds	r3, #1
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i = 0; i < 8; i++){
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	3301      	adds	r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	d9d0      	bls.n	8000ec2 <print_char+0x42>
		}
		xiter++;
 8000f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f22:	3301      	adds	r3, #1
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f28:	3301      	adds	r3, #1
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	330c      	adds	r3, #12
 8000f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3bd      	bcc.n	8000eb2 <print_char+0x32>
	}
	xiter = x;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	330c      	adds	r3, #12
 8000f3e:	623b      	str	r3, [r7, #32]
 8000f40:	e039      	b.n	8000fb6 <print_char+0x136>
		uint32_t yiter = y+8;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3308      	adds	r3, #8
 8000f46:	61fb      	str	r3, [r7, #28]
		uint8_t mask = 0b00000001;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	76fb      	strb	r3, [r7, #27]
		for(uint32_t i = 0; i < 8; i++){
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	e028      	b.n	8000fa4 <print_char+0x124>
			if(*fptr & mask){
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	7efb      	ldrb	r3, [r7, #27]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00c      	beq.n	8000f7a <print_char+0xfa>
				framebuf[yiter * 480 + xiter] = color;
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	4613      	mov	r3, r2
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	015b      	lsls	r3, r3, #5
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6e:	4413      	add	r3, r2
 8000f70:	4918      	ldr	r1, [pc, #96]	; (8000fd4 <print_char+0x154>)
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000f78:	e00b      	b.n	8000f92 <print_char+0x112>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	015b      	lsls	r3, r3, #5
 8000f84:	461a      	mov	r2, r3
 8000f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <print_char+0x154>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 8000f92:	7efb      	ldrb	r3, [r7, #27]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	76fb      	strb	r3, [r7, #27]
			yiter++;
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < 8; i++){
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d9d3      	bls.n	8000f52 <print_char+0xd2>
		}
		xiter++;
 8000faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fac:	3301      	adds	r3, #1
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	3318      	adds	r3, #24
 8000fba:	6a3a      	ldr	r2, [r7, #32]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3c0      	bcc.n	8000f42 <print_char+0xc2>
	}

}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	373c      	adds	r7, #60	; 0x3c
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	20001a44 	.word	0x20001a44

08000fd8 <print_string>:
		}
		xiter++;
	}
}

void print_string(uint32_t x, uint32_t y, char* string, uint16_t color){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff f912 	bl	8000210 <strlen>
 8000fec:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e00c      	b.n	800100e <print_string+0x36>
		print_char(x, y, *i, color);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff ff3f 	bl	8000e80 <print_char>
		x += 12;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	330c      	adds	r3, #12
 8001006:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4413      	add	r3, r2
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	429a      	cmp	r2, r3
 8001018:	d3ec      	bcc.n	8000ff4 <print_string+0x1c>
		//y += 16;
	}
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f001 f96b 	bl	8002302 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f822 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 f90a 	bl	8001248 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001034:	f000 f886 	bl	8001144 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuf, LTDC_LAYER_1);
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <main+0x3c>)
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <main+0x40>)
 8001040:	f003 f8a8 	bl	8004194 <HAL_LTDC_SetAddress>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001044:	f005 fc06 	bl	8006854 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <main+0x44>)
 800104a:	2100      	movs	r1, #0
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <main+0x48>)
 800104e:	f005 fc93 	bl	8006978 <osThreadNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <main+0x4c>)
 8001056:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001058:	f005 fc30 	bl	80068bc <osKernelStart>
  /* USER CODE BEGIN WHILE */




	while (1)
 800105c:	e7fe      	b.n	800105c <main+0x38>
 800105e:	bf00      	nop
 8001060:	20001a44 	.word	0x20001a44
 8001064:	20041644 	.word	0x20041644
 8001068:	0801852c 	.word	0x0801852c
 800106c:	08001a81 	.word	0x08001a81
 8001070:	200416ec 	.word	0x200416ec

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	; 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2230      	movs	r2, #48	; 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f013 fceb 	bl	8014a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemClock_Config+0xc8>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <SystemClock_Config+0xc8>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <SystemClock_Config+0xc8>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <SystemClock_Config+0xcc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <SystemClock_Config+0xcc>)
 80010ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <SystemClock_Config+0xcc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d4:	2310      	movs	r3, #16
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010dc:	2300      	movs	r3, #0
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80010e0:	230f      	movs	r3, #15
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010e4:	23d8      	movs	r3, #216	; 0xd8
 80010e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fa1d 	bl	8004534 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001100:	f000 fcde 	bl	8001ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2302      	movs	r3, #2
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2103      	movs	r1, #3
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fcaa 	bl	8004a7c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800112e:	f000 fcc7 	bl	8001ac0 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2234      	movs	r2, #52	; 0x34
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f013 fc84 	bl	8014a5e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <MX_LTDC_Init+0xfc>)
 8001158:	4a3a      	ldr	r2, [pc, #232]	; (8001244 <MX_LTDC_Init+0x100>)
 800115a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800115c:	4b38      	ldr	r3, [pc, #224]	; (8001240 <MX_LTDC_Init+0xfc>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <MX_LTDC_Init+0xfc>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001168:	4b35      	ldr	r3, [pc, #212]	; (8001240 <MX_LTDC_Init+0xfc>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <MX_LTDC_Init+0xfc>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <MX_LTDC_Init+0xfc>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <MX_LTDC_Init+0xfc>)
 800117c:	2209      	movs	r2, #9
 800117e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <MX_LTDC_Init+0xfc>)
 8001182:	222b      	movs	r2, #43	; 0x2b
 8001184:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <MX_LTDC_Init+0xfc>)
 8001188:	2215      	movs	r2, #21
 800118a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_LTDC_Init+0xfc>)
 800118e:	f240 220b 	movw	r2, #523	; 0x20b
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_LTDC_Init+0xfc>)
 8001196:	f240 1225 	movw	r2, #293	; 0x125
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <MX_LTDC_Init+0xfc>)
 800119e:	f240 2213 	movw	r2, #531	; 0x213
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_LTDC_Init+0xfc>)
 80011a6:	f240 1229 	movw	r2, #297	; 0x129
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_LTDC_Init+0xfc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <MX_LTDC_Init+0xfc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MX_LTDC_Init+0xfc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011c4:	481e      	ldr	r0, [pc, #120]	; (8001240 <MX_LTDC_Init+0xfc>)
 80011c6:	f002 fe15 	bl	8003df4 <HAL_LTDC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80011d0:	f000 fc76 	bl	8001ac0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80011d8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011dc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80011e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011e6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80011e8:	2302      	movs	r3, #2
 80011ea:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80011ec:	23ff      	movs	r3, #255	; 0xff
 80011ee:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011fa:	2305      	movs	r3, #5
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001202:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001208:	f44f 7388 	mov.w	r3, #272	; 0x110
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_LTDC_Init+0xfc>)
 8001228:	f002 ff76 	bl	8004118 <HAL_LTDC_ConfigLayer>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8001232:	f000 fc45 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	3738      	adds	r7, #56	; 0x38
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20041644 	.word	0x20041644
 8001244:	40016800 	.word	0x40016800

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b090      	sub	sp, #64	; 0x40
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	4bae      	ldr	r3, [pc, #696]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4aad      	ldr	r2, [pc, #692]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4bab      	ldr	r3, [pc, #684]	; (8001518 <MX_GPIO_Init+0x2d0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001276:	4ba8      	ldr	r3, [pc, #672]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4aa7      	ldr	r2, [pc, #668]	; (8001518 <MX_GPIO_Init+0x2d0>)
 800127c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4ba5      	ldr	r3, [pc, #660]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4ba2      	ldr	r3, [pc, #648]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4aa1      	ldr	r2, [pc, #644]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b9f      	ldr	r3, [pc, #636]	; (8001518 <MX_GPIO_Init+0x2d0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
 80012a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a6:	4b9c      	ldr	r3, [pc, #624]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a9b      	ldr	r2, [pc, #620]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b99      	ldr	r3, [pc, #612]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b96      	ldr	r3, [pc, #600]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a95      	ldr	r2, [pc, #596]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b93      	ldr	r3, [pc, #588]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b90      	ldr	r3, [pc, #576]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a8f      	ldr	r2, [pc, #572]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b8d      	ldr	r3, [pc, #564]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012ee:	4b8a      	ldr	r3, [pc, #552]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a89      	ldr	r2, [pc, #548]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b87      	ldr	r3, [pc, #540]	; (8001518 <MX_GPIO_Init+0x2d0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001306:	4b84      	ldr	r3, [pc, #528]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a83      	ldr	r2, [pc, #524]	; (8001518 <MX_GPIO_Init+0x2d0>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b81      	ldr	r3, [pc, #516]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800131e:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a7d      	ldr	r2, [pc, #500]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001324:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b7b      	ldr	r3, [pc, #492]	; (8001518 <MX_GPIO_Init+0x2d0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001336:	4b78      	ldr	r3, [pc, #480]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a77      	ldr	r2, [pc, #476]	; (8001518 <MX_GPIO_Init+0x2d0>)
 800133c:	f043 0320 	orr.w	r3, r3, #32
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b75      	ldr	r3, [pc, #468]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	4b72      	ldr	r3, [pc, #456]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a71      	ldr	r2, [pc, #452]	; (8001518 <MX_GPIO_Init+0x2d0>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b6f      	ldr	r3, [pc, #444]	; (8001518 <MX_GPIO_Init+0x2d0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2120      	movs	r1, #32
 800136a:	486c      	ldr	r0, [pc, #432]	; (800151c <MX_GPIO_Init+0x2d4>)
 800136c:	f002 fd28 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	210c      	movs	r1, #12
 8001374:	486a      	ldr	r0, [pc, #424]	; (8001520 <MX_GPIO_Init+0x2d8>)
 8001376:	f002 fd23 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	2108      	movs	r1, #8
 800137e:	4869      	ldr	r0, [pc, #420]	; (8001524 <MX_GPIO_Init+0x2dc>)
 8001380:	f002 fd1e 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138a:	4865      	ldr	r0, [pc, #404]	; (8001520 <MX_GPIO_Init+0x2d8>)
 800138c:	f002 fd18 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001396:	4864      	ldr	r0, [pc, #400]	; (8001528 <MX_GPIO_Init+0x2e0>)
 8001398:	f002 fd12 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	21c8      	movs	r1, #200	; 0xc8
 80013a0:	4862      	ldr	r0, [pc, #392]	; (800152c <MX_GPIO_Init+0x2e4>)
 80013a2:	f002 fd0d 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80013a6:	2308      	movs	r3, #8
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b6:	4619      	mov	r1, r3
 80013b8:	485d      	ldr	r0, [pc, #372]	; (8001530 <MX_GPIO_Init+0x2e8>)
 80013ba:	f002 fb3d 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80013be:	2304      	movs	r3, #4
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013ce:	2309      	movs	r3, #9
 80013d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d6:	4619      	mov	r1, r3
 80013d8:	4855      	ldr	r0, [pc, #340]	; (8001530 <MX_GPIO_Init+0x2e8>)
 80013da:	f002 fb2d 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80013de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f0:	230c      	movs	r3, #12
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f8:	4619      	mov	r1, r3
 80013fa:	484d      	ldr	r0, [pc, #308]	; (8001530 <MX_GPIO_Init+0x2e8>)
 80013fc:	f002 fb1c 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001400:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001412:	2304      	movs	r3, #4
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	4845      	ldr	r0, [pc, #276]	; (8001534 <MX_GPIO_Init+0x2ec>)
 800141e:	f002 fb0b 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001422:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001434:	230a      	movs	r3, #10
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143c:	4619      	mov	r1, r3
 800143e:	483d      	ldr	r0, [pc, #244]	; (8001534 <MX_GPIO_Init+0x2ec>)
 8001440:	f002 fafa 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001444:	2310      	movs	r3, #16
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001454:	2302      	movs	r3, #2
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145c:	4619      	mov	r1, r3
 800145e:	4835      	ldr	r0, [pc, #212]	; (8001534 <MX_GPIO_Init+0x2ec>)
 8001460:	f002 faea 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001474:	2308      	movs	r3, #8
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147c:	4619      	mov	r1, r3
 800147e:	4827      	ldr	r0, [pc, #156]	; (800151c <MX_GPIO_Init+0x2d4>)
 8001480:	f002 fada 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001484:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001496:	230c      	movs	r3, #12
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149e:	4619      	mov	r1, r3
 80014a0:	4825      	ldr	r0, [pc, #148]	; (8001538 <MX_GPIO_Init+0x2f0>)
 80014a2:	f002 fac9 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80014a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014b8:	2301      	movs	r3, #1
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c0:	4619      	mov	r1, r3
 80014c2:	481e      	ldr	r0, [pc, #120]	; (800153c <MX_GPIO_Init+0x2f4>)
 80014c4:	f002 fab8 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80014c8:	2360      	movs	r3, #96	; 0x60
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014d8:	230d      	movs	r3, #13
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e0:	4619      	mov	r1, r3
 80014e2:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_GPIO_Init+0x2e8>)
 80014e4:	f002 faa8 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f8:	2307      	movs	r3, #7
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001500:	4619      	mov	r1, r3
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_GPIO_Init+0x2ec>)
 8001504:	f002 fa98 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001508:	2340      	movs	r3, #64	; 0x40
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
 8001514:	e014      	b.n	8001540 <MX_GPIO_Init+0x2f8>
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40022000 	.word	0x40022000
 8001524:	40022800 	.word	0x40022800
 8001528:	40021c00 	.word	0x40021c00
 800152c:	40021800 	.word	0x40021800
 8001530:	40021000 	.word	0x40021000
 8001534:	40020400 	.word	0x40020400
 8001538:	40020800 	.word	0x40020800
 800153c:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001544:	230a      	movs	r3, #10
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154c:	4619      	mov	r1, r3
 800154e:	48bd      	ldr	r0, [pc, #756]	; (8001844 <MX_GPIO_Init+0x5fc>)
 8001550:	f002 fa72 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001554:	f248 1333 	movw	r3, #33075	; 0x8133
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001566:	230c      	movs	r3, #12
 8001568:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800156a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156e:	4619      	mov	r1, r3
 8001570:	48b5      	ldr	r0, [pc, #724]	; (8001848 <MX_GPIO_Init+0x600>)
 8001572:	f002 fa61 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001588:	4619      	mov	r1, r3
 800158a:	48b0      	ldr	r0, [pc, #704]	; (800184c <MX_GPIO_Init+0x604>)
 800158c:	f002 fa54 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001594:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a2:	4619      	mov	r1, r3
 80015a4:	48aa      	ldr	r0, [pc, #680]	; (8001850 <MX_GPIO_Init+0x608>)
 80015a6:	f002 fa47 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80015aa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015bc:	230c      	movs	r3, #12
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c4:	4619      	mov	r1, r3
 80015c6:	48a2      	ldr	r0, [pc, #648]	; (8001850 <MX_GPIO_Init+0x608>)
 80015c8:	f002 fa36 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80015cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015de:	230a      	movs	r3, #10
 80015e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e6:	4619      	mov	r1, r3
 80015e8:	489a      	ldr	r0, [pc, #616]	; (8001854 <MX_GPIO_Init+0x60c>)
 80015ea:	f002 fa25 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80015ee:	23f0      	movs	r3, #240	; 0xf0
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015fe:	230a      	movs	r3, #10
 8001600:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001606:	4619      	mov	r1, r3
 8001608:	4893      	ldr	r0, [pc, #588]	; (8001858 <MX_GPIO_Init+0x610>)
 800160a:	f002 fa15 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800160e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001620:	230a      	movs	r3, #10
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001628:	4619      	mov	r1, r3
 800162a:	4887      	ldr	r0, [pc, #540]	; (8001848 <MX_GPIO_Init+0x600>)
 800162c:	f002 fa04 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001630:	2320      	movs	r3, #32
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001644:	4619      	mov	r1, r3
 8001646:	4882      	ldr	r0, [pc, #520]	; (8001850 <MX_GPIO_Init+0x608>)
 8001648:	f002 f9f6 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800164c:	2308      	movs	r3, #8
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800165c:	230d      	movs	r3, #13
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001664:	4619      	mov	r1, r3
 8001666:	487a      	ldr	r0, [pc, #488]	; (8001850 <MX_GPIO_Init+0x608>)
 8001668:	f002 f9e6 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800166c:	f241 030c 	movw	r3, #4108	; 0x100c
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800167e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	4874      	ldr	r0, [pc, #464]	; (8001858 <MX_GPIO_Init+0x610>)
 8001686:	f002 f9d7 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800168a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169c:	4619      	mov	r1, r3
 800169e:	486f      	ldr	r0, [pc, #444]	; (800185c <MX_GPIO_Init+0x614>)
 80016a0:	f002 f9ca 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80016a4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b6:	230c      	movs	r3, #12
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016be:	4619      	mov	r1, r3
 80016c0:	4867      	ldr	r0, [pc, #412]	; (8001860 <MX_GPIO_Init+0x618>)
 80016c2:	f002 f9b9 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80016c6:	2308      	movs	r3, #8
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016da:	4619      	mov	r1, r3
 80016dc:	4861      	ldr	r0, [pc, #388]	; (8001864 <MX_GPIO_Init+0x61c>)
 80016de:	f002 f9ab 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80016e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016f4:	230d      	movs	r3, #13
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fc:	4619      	mov	r1, r3
 80016fe:	4852      	ldr	r0, [pc, #328]	; (8001848 <MX_GPIO_Init+0x600>)
 8001700:	f002 f99a 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001704:	2310      	movs	r3, #16
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001714:	4619      	mov	r1, r3
 8001716:	484e      	ldr	r0, [pc, #312]	; (8001850 <MX_GPIO_Init+0x608>)
 8001718:	f002 f98e 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800171c:	2304      	movs	r3, #4
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800172c:	230c      	movs	r3, #12
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001734:	4619      	mov	r1, r3
 8001736:	4846      	ldr	r0, [pc, #280]	; (8001850 <MX_GPIO_Init+0x608>)
 8001738:	f002 f97e 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800173c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800174a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174e:	4619      	mov	r1, r3
 8001750:	4845      	ldr	r0, [pc, #276]	; (8001868 <MX_GPIO_Init+0x620>)
 8001752:	f002 f971 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001756:	2302      	movs	r3, #2
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001766:	2305      	movs	r3, #5
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	4839      	ldr	r0, [pc, #228]	; (8001858 <MX_GPIO_Init+0x610>)
 8001772:	f002 f961 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178c:	4619      	mov	r1, r3
 800178e:	4836      	ldr	r0, [pc, #216]	; (8001868 <MX_GPIO_Init+0x620>)
 8001790:	f002 f952 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001794:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017a6:	230d      	movs	r3, #13
 80017a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	4619      	mov	r1, r3
 80017b0:	482d      	ldr	r0, [pc, #180]	; (8001868 <MX_GPIO_Init+0x620>)
 80017b2:	f002 f941 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80017b6:	2301      	movs	r3, #1
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017c6:	2302      	movs	r3, #2
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	4821      	ldr	r0, [pc, #132]	; (8001858 <MX_GPIO_Init+0x610>)
 80017d2:	f002 f931 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80017d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e8:	2307      	movs	r3, #7
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f0:	4619      	mov	r1, r3
 80017f2:	4818      	ldr	r0, [pc, #96]	; (8001854 <MX_GPIO_Init+0x60c>)
 80017f4:	f002 f920 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80017f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800180a:	2301      	movs	r3, #1
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001812:	4619      	mov	r1, r3
 8001814:	480f      	ldr	r0, [pc, #60]	; (8001854 <MX_GPIO_Init+0x60c>)
 8001816:	f002 f90f 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800181a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001820:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <MX_GPIO_Init+0x610>)
 8001832:	f002 f901 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001836:	23c0      	movs	r3, #192	; 0xc0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	e014      	b.n	800186c <MX_GPIO_Init+0x624>
 8001842:	bf00      	nop
 8001844:	40020400 	.word	0x40020400
 8001848:	40021800 	.word	0x40021800
 800184c:	40022400 	.word	0x40022400
 8001850:	40020c00 	.word	0x40020c00
 8001854:	40020000 	.word	0x40020000
 8001858:	40022000 	.word	0x40022000
 800185c:	40020800 	.word	0x40020800
 8001860:	40021400 	.word	0x40021400
 8001864:	40022800 	.word	0x40022800
 8001868:	40021c00 	.word	0x40021c00
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001872:	2308      	movs	r3, #8
 8001874:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187a:	4619      	mov	r1, r3
 800187c:	4879      	ldr	r0, [pc, #484]	; (8001a64 <MX_GPIO_Init+0x81c>)
 800187e:	f002 f8db 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001882:	2310      	movs	r3, #16
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001892:	230a      	movs	r3, #10
 8001894:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189a:	4619      	mov	r1, r3
 800189c:	4872      	ldr	r0, [pc, #456]	; (8001a68 <MX_GPIO_Init+0x820>)
 800189e:	f002 f8cb 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80018a2:	2328      	movs	r3, #40	; 0x28
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b2:	230c      	movs	r3, #12
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ba:	4619      	mov	r1, r3
 80018bc:	486a      	ldr	r0, [pc, #424]	; (8001a68 <MX_GPIO_Init+0x820>)
 80018be:	f002 f8bb 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80018c2:	23c8      	movs	r3, #200	; 0xc8
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4864      	ldr	r0, [pc, #400]	; (8001a6c <MX_GPIO_Init+0x824>)
 80018da:	f002 f8ad 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80018de:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	485f      	ldr	r0, [pc, #380]	; (8001a70 <MX_GPIO_Init+0x828>)
 80018f4:	f002 f8a0 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80018f8:	2308      	movs	r3, #8
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001908:	230c      	movs	r3, #12
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	4854      	ldr	r0, [pc, #336]	; (8001a64 <MX_GPIO_Init+0x81c>)
 8001914:	f002 f890 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001918:	2305      	movs	r3, #5
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001928:	230a      	movs	r3, #10
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001930:	4619      	mov	r1, r3
 8001932:	484c      	ldr	r0, [pc, #304]	; (8001a64 <MX_GPIO_Init+0x81c>)
 8001934:	f002 f880 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001938:	2304      	movs	r3, #4
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001948:	2309      	movs	r3, #9
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	4848      	ldr	r0, [pc, #288]	; (8001a74 <MX_GPIO_Init+0x82c>)
 8001954:	f002 f870 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001958:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800196a:	2309      	movs	r3, #9
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001972:	4619      	mov	r1, r3
 8001974:	4840      	ldr	r0, [pc, #256]	; (8001a78 <MX_GPIO_Init+0x830>)
 8001976:	f002 f85f 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800197a:	2304      	movs	r3, #4
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197e:	2300      	movs	r3, #0
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198a:	4619      	mov	r1, r3
 800198c:	4837      	ldr	r0, [pc, #220]	; (8001a6c <MX_GPIO_Init+0x824>)
 800198e:	f002 f853 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001992:	2301      	movs	r3, #1
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001996:	2303      	movs	r3, #3
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	4835      	ldr	r0, [pc, #212]	; (8001a7c <MX_GPIO_Init+0x834>)
 80019a6:	f002 f847 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80019aa:	2350      	movs	r3, #80	; 0x50
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019ba:	230d      	movs	r3, #13
 80019bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c2:	4619      	mov	r1, r3
 80019c4:	482d      	ldr	r0, [pc, #180]	; (8001a7c <MX_GPIO_Init+0x834>)
 80019c6:	f002 f837 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80019ca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d0:	2312      	movs	r3, #18
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019dc:	2304      	movs	r3, #4
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4619      	mov	r1, r3
 80019e6:	4820      	ldr	r0, [pc, #128]	; (8001a68 <MX_GPIO_Init+0x820>)
 80019e8:	f002 f826 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80019ec:	2328      	movs	r3, #40	; 0x28
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019fc:	230a      	movs	r3, #10
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a04:	4619      	mov	r1, r3
 8001a06:	481d      	ldr	r0, [pc, #116]	; (8001a7c <MX_GPIO_Init+0x834>)
 8001a08:	f002 f816 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001a0c:	2340      	movs	r3, #64	; 0x40
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001a1c:	2309      	movs	r3, #9
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a24:	4619      	mov	r1, r3
 8001a26:	4810      	ldr	r0, [pc, #64]	; (8001a68 <MX_GPIO_Init+0x820>)
 8001a28:	f002 f806 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001a2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a3e:	2305      	movs	r3, #5
 8001a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a46:	4619      	mov	r1, r3
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <MX_GPIO_Init+0x82c>)
 8001a4a:	f001 fff5 	bl	8003a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	keyboard_GPIO_init();
 8001a4e:	f7fe fdb9 	bl	80005c4 <keyboard_GPIO_init>
	switch_GPIO_init();
 8001a52:	f7ff f9dd 	bl	8000e10 <switch_GPIO_init>
	spinner_GPIO_init();
 8001a56:	f7ff f8cf 	bl	8000bf8 <spinner_GPIO_init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3740      	adds	r7, #64	; 0x40
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40021c00 	.word	0x40021c00
 8001a6c:	40021800 	.word	0x40021800
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40020000 	.word	0x40020000

08001a80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001a88:	f004 f8c0 	bl	8005c0c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

osDelay(1);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f005 f819 	bl	8006ac4 <osDelay>
  /* Infinite loop */
  for(;;)
  {
  	//state_machine();
  	//state_ether();
    osDelay(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f005 f816 	bl	8006ac4 <osDelay>
 8001a98:	e7fb      	b.n	8001a92 <StartDefaultTask+0x12>
	...

08001a9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aae:	f000 fc35 	bl	800231c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40001000 	.word	0x40001000

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_MspInit+0x5c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <HAL_MspInit+0x5c>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_MspInit+0x5c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_MspInit+0x5c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_MspInit+0x5c>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_MspInit+0x5c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	210f      	movs	r1, #15
 8001b06:	f06f 0001 	mvn.w	r0, #1
 8001b0a:	f000 fd03 	bl	8002514 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2105      	movs	r1, #5
 8001b12:	2005      	movs	r0, #5
 8001b14:	f000 fcfe 	bl	8002514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b18:	2005      	movs	r0, #5
 8001b1a:	f000 fd17 	bl	800254c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0ae      	sub	sp, #184	; 0xb8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	2284      	movs	r2, #132	; 0x84
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f012 ff86 	bl	8014a5e <memset>
  if(hltdc->Instance==LTDC)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a72      	ldr	r2, [pc, #456]	; (8001d20 <HAL_LTDC_MspInit+0x1f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	f040 80dd 	bne.w	8001d18 <HAL_LTDC_MspInit+0x1ec>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b5e:	2308      	movs	r3, #8
 8001b60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 249;
 8001b62:	23f9      	movs	r3, #249	; 0xf9
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001b66:	2302      	movs	r3, #2
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 f97f 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8001b8c:	f7ff ff98 	bl	8001ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b90:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	4a63      	ldr	r2, [pc, #396]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9c:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a5d      	ldr	r2, [pc, #372]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001bc0:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a57      	ldr	r2, [pc, #348]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001bd8:	4b52      	ldr	r3, [pc, #328]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	4a51      	ldr	r2, [pc, #324]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be2:	6313      	str	r3, [r2, #48]	; 0x30
 8001be4:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bf0:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a4b      	ldr	r2, [pc, #300]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c08:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4a45      	ldr	r2, [pc, #276]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	6313      	str	r3, [r2, #48]	; 0x30
 8001c14:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_LTDC_MspInit+0x1f8>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001c20:	2310      	movs	r3, #16
 8001c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c38:	230e      	movs	r3, #14
 8001c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4838      	ldr	r0, [pc, #224]	; (8001d28 <HAL_LTDC_MspInit+0x1fc>)
 8001c46:	f001 fef7 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001c4a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c64:	230e      	movs	r3, #14
 8001c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	482e      	ldr	r0, [pc, #184]	; (8001d2c <HAL_LTDC_MspInit+0x200>)
 8001c72:	f001 fee1 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001c76:	23f7      	movs	r3, #247	; 0xf7
 8001c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c8e:	230e      	movs	r3, #14
 8001c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4825      	ldr	r0, [pc, #148]	; (8001d30 <HAL_LTDC_MspInit+0x204>)
 8001c9c:	f001 fecc 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cba:	2309      	movs	r3, #9
 8001cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	481b      	ldr	r0, [pc, #108]	; (8001d34 <HAL_LTDC_MspInit+0x208>)
 8001cc8:	f001 feb6 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001ccc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ce6:	230e      	movs	r3, #14
 8001ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <HAL_LTDC_MspInit+0x20c>)
 8001cf4:	f001 fea0 	bl	8003a38 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2105      	movs	r1, #5
 8001cfc:	2058      	movs	r0, #88	; 0x58
 8001cfe:	f000 fc09 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d02:	2058      	movs	r0, #88	; 0x58
 8001d04:	f000 fc22 	bl	800254c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2105      	movs	r1, #5
 8001d0c:	2059      	movs	r0, #89	; 0x59
 8001d0e:	f000 fc01 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001d12:	2059      	movs	r0, #89	; 0x59
 8001d14:	f000 fc1a 	bl	800254c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	37b8      	adds	r7, #184	; 0xb8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40016800 	.word	0x40016800
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40022400 	.word	0x40022400
 8001d30:	40022800 	.word	0x40022800
 8001d34:	40021800 	.word	0x40021800
 8001d38:	40022000 	.word	0x40022000

08001d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_InitTick+0xe0>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	4a32      	ldr	r2, [pc, #200]	; (8001e1c <HAL_InitTick+0xe0>)
 8001d52:	f043 0310 	orr.w	r3, r3, #16
 8001d56:	6413      	str	r3, [r2, #64]	; 0x40
 8001d58:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <HAL_InitTick+0xe0>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d64:	f107 0210 	add.w	r2, r7, #16
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 f856 	bl	8004e20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d7e:	f003 f83b 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8001d82:	6378      	str	r0, [r7, #52]	; 0x34
 8001d84:	e004      	b.n	8001d90 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d86:	f003 f837 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d92:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_InitTick+0xe4>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	0c9b      	lsrs	r3, r3, #18
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_InitTick+0xe8>)
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <HAL_InitTick+0xec>)
 8001da2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_InitTick+0xe8>)
 8001da6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001daa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dac:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_InitTick+0xe8>)
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_InitTick+0xe8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_InitTick+0xe8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_InitTick+0xe8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001dc4:	4817      	ldr	r0, [pc, #92]	; (8001e24 <HAL_InitTick+0xe8>)
 8001dc6:	f003 fc4d 	bl	8005664 <HAL_TIM_Base_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11b      	bne.n	8001e10 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001dd8:	4812      	ldr	r0, [pc, #72]	; (8001e24 <HAL_InitTick+0xe8>)
 8001dda:	f003 fca5 	bl	8005728 <HAL_TIM_Base_Start_IT>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001de4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d111      	bne.n	8001e10 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dec:	2036      	movs	r0, #54	; 0x36
 8001dee:	f000 fbad 	bl	800254c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d808      	bhi.n	8001e0a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	2036      	movs	r0, #54	; 0x36
 8001dfe:	f000 fb89 	bl	8002514 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_InitTick+0xf0>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e002      	b.n	8001e10 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3738      	adds	r7, #56	; 0x38
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	200416f0 	.word	0x200416f0
 8001e28:	40001000 	.word	0x40001000
 8001e2c:	20001808 	.word	0x20001808

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>
	...

08001e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    uint8_t reason = *((uint8_t*)0xE000ED2A);
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HardFault_Handler+0x1c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
    print_string(10, 40, "HARDFAULT!", 0x797);
 8001e44:	f240 7397 	movw	r3, #1943	; 0x797
 8001e48:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <HardFault_Handler+0x20>)
 8001e4a:	2128      	movs	r1, #40	; 0x28
 8001e4c:	200a      	movs	r0, #10
 8001e4e:	f7ff f8c3 	bl	8000fd8 <print_string>
  {
 8001e52:	e7f4      	b.n	8001e3e <HardFault_Handler+0x6>
 8001e54:	e000ed2a 	.word	0xe000ed2a
 8001e58:	08015a1c 	.word	0x08015a1c

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler+0x4>

08001e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  get_current_keyboard_state();
 8001e90:	f7fe fbfa 	bl	8000688 <get_current_keyboard_state>
  get_current_spinner_button_state();
 8001e94:	f7fe fee4 	bl	8000c60 <get_current_spinner_button_state>
  get_spinner_position_change();
 8001e98:	f7fe ff18 	bl	8000ccc <get_spinner_position_change>
  get_current_switch_state();
 8001e9c:	f7fe ffd4 	bl	8000e48 <get_current_switch_state>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <TIM6_DAC_IRQHandler+0x20>)
 8001ea2:	f003 fcb9 	bl	8005818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200416f0 	.word	0x200416f0

08001eb0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <ETH_IRQHandler+0x10>)
 8001eb6:	f000 fee5 	bl	8002c84 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20046148 	.word	0x20046148

08001ec4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <LTDC_IRQHandler+0x10>)
 8001eca:	f002 f863 	bl	8003f94 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20041644 	.word	0x20041644

08001ed8 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <LTDC_ER_IRQHandler+0x10>)
 8001ede:	f002 f859 	bl	8003f94 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20041644 	.word	0x20041644

08001eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return 1;
 8001ef0:	2301      	movs	r3, #1
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_kill>:

int _kill(int pid, int sig)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <_kill+0x20>)
 8001f08:	2216      	movs	r2, #22
 8001f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	2004f2e8 	.word	0x2004f2e8

08001f20 <_exit>:

void _exit (int status)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ffe5 	bl	8001efc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f32:	e7fe      	b.n	8001f32 <_exit+0x12>

08001f34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e00a      	b.n	8001f5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f46:	f3af 8000 	nop.w
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60ba      	str	r2, [r7, #8]
 8001f52:	b2ca      	uxtb	r2, r1
 8001f54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf0      	blt.n	8001f46 <_read+0x12>
  }

  return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e009      	b.n	8001f94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	60ba      	str	r2, [r7, #8]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf1      	blt.n	8001f80 <_write+0x12>
  }
  return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_close>:

int _close(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fce:	605a      	str	r2, [r3, #4]
  return 0;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_isatty>:

int _isatty(int file)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <_sbrk+0x5c>)
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <_sbrk+0x60>)
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <_sbrk+0x64>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <_sbrk+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d205      	bcs.n	800204c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <_sbrk+0x6c>)
 8002042:	220c      	movs	r2, #12
 8002044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204a:	e009      	b.n	8002060 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	4a06      	ldr	r2, [pc, #24]	; (8002074 <_sbrk+0x64>)
 800205c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	4618      	mov	r0, r3
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	20050000 	.word	0x20050000
 8002070:	00000400 	.word	0x00000400
 8002074:	2004173c 	.word	0x2004173c
 8002078:	2004f2f0 	.word	0x2004f2f0
 800207c:	2004f2e8 	.word	0x2004f2e8

08002080 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <SystemInit+0x20>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <SystemInit+0x20>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a8:	f7ff ffea 	bl	8002080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ae:	490d      	ldr	r1, [pc, #52]	; (80020e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020c4:	4c0a      	ldr	r4, [pc, #40]	; (80020f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020d2:	f012 fc7f 	bl	80149d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d6:	f7fe ffa5 	bl	8001024 <main>
  bx  lr    
 80020da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e4:	20001898 	.word	0x20001898
  ldr r2, =_sidata
 80020e8:	080187f0 	.word	0x080187f0
  ldr r2, =_sbss
 80020ec:	200019d8 	.word	0x200019d8
  ldr r4, =_ebss
 80020f0:	2004f2ec 	.word	0x2004f2ec

080020f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC_IRQHandler>

080020f6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <LAN8742_RegisterBusIO+0x28>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <LAN8742_RegisterBusIO+0x28>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <LAN8742_RegisterBusIO+0x28>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002122:	e014      	b.n	800214e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d139      	bne.n	80021ea <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e01c      	b.n	80021ca <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f107 020c 	add.w	r2, r7, #12
 8002198:	2112      	movs	r1, #18
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	4798      	blx	r3
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da03      	bge.n	80021ac <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80021a4:	f06f 0304 	mvn.w	r3, #4
 80021a8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80021aa:	e00b      	b.n	80021c4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d105      	bne.n	80021c4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
         break;
 80021c2:	e005      	b.n	80021d0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b1f      	cmp	r3, #31
 80021ce:	d9df      	bls.n	8002190 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b1f      	cmp	r3, #31
 80021d6:	d902      	bls.n	80021de <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80021d8:	f06f 0302 	mvn.w	r3, #2
 80021dc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80021ea:	693b      	ldr	r3, [r7, #16]
 }
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6810      	ldr	r0, [r2, #0]
 8002208:	f107 020c 	add.w	r2, r7, #12
 800220c:	2101      	movs	r1, #1
 800220e:	4798      	blx	r3
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	da02      	bge.n	800221c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002216:	f06f 0304 	mvn.w	r3, #4
 800221a:	e06e      	b.n	80022fa <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6810      	ldr	r0, [r2, #0]
 8002224:	f107 020c 	add.w	r2, r7, #12
 8002228:	2101      	movs	r1, #1
 800222a:	4798      	blx	r3
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	da02      	bge.n	8002238 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002232:	f06f 0304 	mvn.w	r3, #4
 8002236:	e060      	b.n	80022fa <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002242:	2301      	movs	r3, #1
 8002244:	e059      	b.n	80022fa <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6810      	ldr	r0, [r2, #0]
 800224e:	f107 020c 	add.w	r2, r7, #12
 8002252:	2100      	movs	r1, #0
 8002254:	4798      	blx	r3
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	da02      	bge.n	8002262 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800225c:	f06f 0304 	mvn.w	r3, #4
 8002260:	e04b      	b.n	80022fa <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d11b      	bne.n	80022a4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <LAN8742_GetLinkState+0x90>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002280:	2302      	movs	r3, #2
 8002282:	e03a      	b.n	80022fa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800228e:	2303      	movs	r3, #3
 8002290:	e033      	b.n	80022fa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800229c:	2304      	movs	r3, #4
 800229e:	e02c      	b.n	80022fa <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022a0:	2305      	movs	r3, #5
 80022a2:	e02a      	b.n	80022fa <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6810      	ldr	r0, [r2, #0]
 80022ac:	f107 020c 	add.w	r2, r7, #12
 80022b0:	211f      	movs	r1, #31
 80022b2:	4798      	blx	r3
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da02      	bge.n	80022c0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80022ba:	f06f 0304 	mvn.w	r3, #4
 80022be:	e01c      	b.n	80022fa <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80022ca:	2306      	movs	r3, #6
 80022cc:	e015      	b.n	80022fa <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 031c 	and.w	r3, r3, #28
 80022d4:	2b18      	cmp	r3, #24
 80022d6:	d101      	bne.n	80022dc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022d8:	2302      	movs	r3, #2
 80022da:	e00e      	b.n	80022fa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 031c 	and.w	r3, r3, #28
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d101      	bne.n	80022ea <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e007      	b.n	80022fa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 031c 	and.w	r3, r3, #28
 80022f0:	2b14      	cmp	r3, #20
 80022f2:	d101      	bne.n	80022f8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022f4:	2304      	movs	r3, #4
 80022f6:	e000      	b.n	80022fa <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022f8:	2305      	movs	r3, #5
    }
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002306:	2003      	movs	r0, #3
 8002308:	f000 f8f9 	bl	80024fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230c:	200f      	movs	r0, #15
 800230e:	f7ff fd15 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002312:	f7ff fbdb 	bl	8001acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	2000180c 	.word	0x2000180c
 8002340:	20041740 	.word	0x20041740

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20041740 	.word	0x20041740

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000180c 	.word	0x2000180c

080023a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <__NVIC_SetPriorityGrouping+0x40>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x40>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00
 80023e8:	05fa0000 	.word	0x05fa0000

080023ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4907      	ldr	r1, [pc, #28]	; (8002440 <__NVIC_EnableIRQ+0x38>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db0a      	blt.n	800246e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	490c      	ldr	r1, [pc, #48]	; (8002490 <__NVIC_SetPriority+0x4c>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	440b      	add	r3, r1
 8002468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800246c:	e00a      	b.n	8002484 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <__NVIC_SetPriority+0x50>)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3b04      	subs	r3, #4
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	440b      	add	r3, r1
 8002482:	761a      	strb	r2, [r3, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000e100 	.word	0xe000e100
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f1c3 0307 	rsb	r3, r3, #7
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	bf28      	it	cs
 80024b6:	2304      	movcs	r3, #4
 80024b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3304      	adds	r3, #4
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d902      	bls.n	80024c8 <NVIC_EncodePriority+0x30>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3b03      	subs	r3, #3
 80024c6:	e000      	b.n	80024ca <NVIC_EncodePriority+0x32>
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	401a      	ands	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	4313      	orrs	r3, r2
         );
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ff4c 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002526:	f7ff ff61 	bl	80023ec <__NVIC_GetPriorityGrouping>
 800252a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	6978      	ldr	r0, [r7, #20]
 8002532:	f7ff ffb1 	bl	8002498 <NVIC_EncodePriority>
 8002536:	4602      	mov	r2, r0
 8002538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff80 	bl	8002444 <__NVIC_SetPriority>
}
 8002544:	bf00      	nop
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff54 	bl	8002408 <__NVIC_EnableIRQ>
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e086      	b.n	8002688 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2223      	movs	r2, #35	; 0x23
 8002588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f003 ff5f 	bl	8006450 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <HAL_ETH_Init+0x128>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a3e      	ldr	r2, [pc, #248]	; (8002690 <HAL_ETH_Init+0x128>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <HAL_ETH_Init+0x128>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025aa:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <HAL_ETH_Init+0x12c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a39      	ldr	r2, [pc, #228]	; (8002694 <HAL_ETH_Init+0x12c>)
 80025b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <HAL_ETH_Init+0x12c>)
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4935      	ldr	r1, [pc, #212]	; (8002694 <HAL_ETH_Init+0x12c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025c4:	4b33      	ldr	r3, [pc, #204]	; (8002694 <HAL_ETH_Init+0x12c>)
 80025c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e0:	f7ff feb0 	bl	8002344 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025e6:	e011      	b.n	800260c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025e8:	f7ff feac 	bl	8002344 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025f6:	d909      	bls.n	800260c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2204      	movs	r2, #4
 80025fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	22e0      	movs	r2, #224	; 0xe0
 8002604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e03d      	b.n	8002688 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e4      	bne.n	80025e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 ff4e 	bl	80034c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fff9 	bl	800361c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f001 f84f 	bl	80036ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	461a      	mov	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 ffb7 	bl	80035ac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_ETH_Init+0x130>)
 800265c:	430b      	orrs	r3, r1
 800265e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002672:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2210      	movs	r2, #16
 8002682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	40013800 	.word	0x40013800
 8002698:	00020060 	.word	0x00020060

0800269c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d15f      	bne.n	800276e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2223      	movs	r2, #35	; 0x23
 80026b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2204      	movs	r2, #4
 80026c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f9f6 	bl	8002ab4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff fe43 	bl	800235c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026f4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800270c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fd73 	bl	80031fa <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0208 	orr.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800272c:	2001      	movs	r0, #1
 800272e:	f7ff fe15 	bl	800235c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0204 	orr.w	r2, r2, #4
 8002748:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002752:	69d9      	ldr	r1, [r3, #28]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_ETH_Start_IT+0xdc>)
 800275a:	430b      	orrs	r3, r1
 800275c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002760:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2223      	movs	r2, #35	; 0x23
 8002766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
  }
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	0001a0c1 	.word	0x0001a0c1

0800277c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278a:	2b23      	cmp	r3, #35	; 0x23
 800278c:	d16e      	bne.n	800286c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2223      	movs	r2, #35	; 0x23
 8002792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	69d9      	ldr	r1, [r3, #28]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b34      	ldr	r3, [pc, #208]	; (8002878 <HAL_ETH_Stop_IT+0xfc>)
 80027a6:	400b      	ands	r3, r1
 80027a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027ac:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027c4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f023 0302 	bic.w	r3, r3, #2
 80027d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027dc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0204 	bic.w	r2, r2, #4
 80027ec:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f6:	2001      	movs	r0, #1
 80027f8:	f7ff fdb0 	bl	800235c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fcf8 	bl	80031fa <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0208 	bic.w	r2, r2, #8
 8002818:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002822:	2001      	movs	r0, #1
 8002824:	f7ff fd9a 	bl	800235c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	e00e      	b.n	8002854 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	3212      	adds	r2, #18
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d9ed      	bls.n	8002836 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2210      	movs	r2, #16
 8002864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	fffe5f3e 	.word	0xfffe5f3e

0800287c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e045      	b.n	800292c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a6:	2b23      	cmp	r3, #35	; 0x23
 80028a8:	d13f      	bne.n	800292a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80028b2:	2201      	movs	r2, #1
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 ff78 	bl	80037ac <ETH_Prepare_Tx_Descriptors>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f043 0202 	orr.w	r2, r3, #2
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e02a      	b.n	800292c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028d6:	f3bf 8f4f 	dsb	sy
}
 80028da:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	629a      	str	r2, [r3, #40]	; 0x28
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d904      	bls.n	80028f8 <HAL_ETH_Transmit_IT+0x7c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	1f1a      	subs	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002912:	461a      	mov	r2, r3
 8002914:	2304      	movs	r3, #4
 8002916:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002920:	461a      	mov	r2, r3
 8002922:	2300      	movs	r3, #0
 8002924:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0a4      	b.n	8002aaa <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002966:	2b23      	cmp	r3, #35	; 0x23
 8002968:	d001      	beq.n	800296e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e09d      	b.n	8002aaa <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	3212      	adds	r2, #18
 800297a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002984:	f1c3 0304 	rsb	r3, r3, #4
 8002988:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800298a:	e066      	b.n	8002a5a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <HAL_ETH_ReadData+0x88>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03c      	beq.n	8002a36 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80029de:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80029f4:	2301      	movs	r3, #1
 80029f6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f003 fec9 	bl	80067ac <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	441a      	add	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d902      	bls.n	8002a48 <HAL_ETH_ReadData+0x114>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3b04      	subs	r3, #4
 8002a46:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	3212      	adds	r2, #18
 8002a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a52:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	db06      	blt.n	8002a70 <HAL_ETH_ReadData+0x13c>
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d202      	bcs.n	8002a70 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d08d      	beq.n	800298c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	441a      	add	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f815 	bl	8002ab4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d108      	bne.n	8002aa8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	3212      	adds	r2, #18
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ada:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002adc:	e042      	b.n	8002b64 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d112      	bne.n	8002b0c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002ae6:	f107 0308 	add.w	r3, r7, #8
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 fe2e 	bl	800674c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	74fb      	strb	r3, [r7, #19]
 8002afa:	e007      	b.n	8002b0c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	461a      	mov	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	461a      	mov	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d028      	beq.n	8002b64 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <ETH_UpdateDescriptor+0x104>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	6053      	str	r3, [r2, #4]
 8002b26:	e005      	b.n	8002b34 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d902      	bls.n	8002b52 <ETH_UpdateDescriptor+0x9e>
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	3212      	adds	r2, #18
 8002b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <ETH_UpdateDescriptor+0xbc>
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1b6      	bne.n	8002ade <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d01a      	beq.n	8002bb0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002b84:	f3bf 8f5f 	dmb	sy
}
 8002b88:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	18ca      	adds	r2, r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	80004000 	.word	0x80004000

08002bbc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002bda:	e047      	b.n	8002c6c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	3304      	adds	r3, #4
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d902      	bls.n	8002c08 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	3b04      	subs	r3, #4
 8002c06:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d02c      	beq.n	8002c6c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68d9      	ldr	r1, [r3, #12]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db1f      	blt.n	8002c68 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fdfb 	bl	8006830 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d902      	bls.n	8002c5a <HAL_ETH_ReleaseTxPacket+0x9e>
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	3b04      	subs	r3, #4
 8002c58:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c66:	e001      	b.n	8002c6c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1b1      	bne.n	8002bdc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002cac:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <HAL_ETH_IRQHandler+0x158>)
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00e      	beq.n	8002cda <HAL_ETH_IRQHandler+0x56>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_ETH_IRQHandler+0x15c>)
 8002cd2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f003 f91d 	bl	8005f14 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00f      	beq.n	8002d04 <HAL_ETH_IRQHandler+0x80>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002cfc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f003 f918 	bl	8005f34 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d042      	beq.n	8002d94 <HAL_ETH_IRQHandler+0x110>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d03d      	beq.n	8002d94 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f043 0208 	orr.w	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01a      	beq.n	8002d68 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_ETH_IRQHandler+0x160>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002d58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d5c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	22e0      	movs	r2, #224	; 0xe0
 8002d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002d66:	e012      	b.n	8002d8e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	f248 6380 	movw	r3, #34432	; 0x8680
 8002d76:	4013      	ands	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d86:	461a      	mov	r2, r3
 8002d88:	f248 6380 	movw	r3, #34432	; 0x8680
 8002d8c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f003 f8e0 	bl	8005f54 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00e      	beq.n	8002dbc <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f81a 	bl	8002de8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_ETH_IRQHandler+0x158>)
 8002dc8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002dcc:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f814 	bl	8002dfc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40013c00 	.word	0x40013c00
 8002de0:	00010040 	.word	0x00010040
 8002de4:	007e2000 	.word	0x007e2000

08002de8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 031c 	and.w	r3, r3, #28
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	02db      	lsls	r3, r3, #11
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f023 0302 	bic.w	r3, r3, #2
 8002e4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002e60:	f7ff fa70 	bl	8002344 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e66:	e00d      	b.n	8002e84 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002e68:	f7ff fa6c 	bl	8002344 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e76:	d301      	bcc.n	8002e7c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e010      	b.n	8002e9e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ec      	bne.n	8002e68 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 031c 	and.w	r3, r3, #28
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	02db      	lsls	r3, r3, #11
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	019b      	lsls	r3, r3, #6
 8002ed4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f00:	f7ff fa20 	bl	8002344 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f06:	e00d      	b.n	8002f24 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002f08:	f7ff fa1c 	bl	8002344 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f16:	d301      	bcc.n	8002f1c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e009      	b.n	8002f30 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ec      	bne.n	8002f08 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0e6      	b.n	800311a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	b29a      	uxth	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e00b      	b.n	8003152 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003140:	2b10      	cmp	r3, #16
 8003142:	d105      	bne.n	8003150 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f87c 	bl	8003244 <ETH_SetMACConfig>

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 031c 	bic.w	r3, r3, #28
 8003172:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003174:	f001 fe34 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8003178:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d804      	bhi.n	800318c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f043 0308 	orr.w	r3, r3, #8
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e019      	b.n	80031c0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d204      	bcs.n	800319e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f043 030c 	orr.w	r3, r3, #12
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e010      	b.n	80031c0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d90c      	bls.n	80031c0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <HAL_ETH_SetMDIOClockRange+0x80>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d804      	bhi.n	80031b8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e003      	b.n	80031c0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f043 0310 	orr.w	r3, r3, #16
 80031be:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	611a      	str	r2, [r3, #16]
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	02160ebf 	.word	0x02160ebf
 80031d4:	03938700 	.word	0x03938700
 80031d8:	05f5e0ff 	.word	0x05f5e0ff
 80031dc:	08f0d17f 	.word	0x08f0d17f

080031e0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003218:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800321c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800322a:	2001      	movs	r0, #1
 800322c:	f7ff f896 	bl	800235c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800323a:	6193      	str	r3, [r2, #24]
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <ETH_SetMACConfig+0x164>)
 800325a:	4013      	ands	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	7b9b      	ldrb	r3, [r3, #14]
 8003262:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	7c12      	ldrb	r2, [r2, #16]
 8003268:	2a00      	cmp	r2, #0
 800326a:	d102      	bne.n	8003272 <ETH_SetMACConfig+0x2e>
 800326c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003270:	e000      	b.n	8003274 <ETH_SetMACConfig+0x30>
 8003272:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003274:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	7c52      	ldrb	r2, [r2, #17]
 800327a:	2a00      	cmp	r2, #0
 800327c:	d102      	bne.n	8003284 <ETH_SetMACConfig+0x40>
 800327e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003282:	e000      	b.n	8003286 <ETH_SetMACConfig+0x42>
 8003284:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003286:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800328c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	7fdb      	ldrb	r3, [r3, #31]
 8003292:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003294:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800329a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	7f92      	ldrb	r2, [r2, #30]
 80032a0:	2a00      	cmp	r2, #0
 80032a2:	d102      	bne.n	80032aa <ETH_SetMACConfig+0x66>
 80032a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032a8:	e000      	b.n	80032ac <ETH_SetMACConfig+0x68>
 80032aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80032ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	7f1b      	ldrb	r3, [r3, #28]
 80032b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80032b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80032ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	791b      	ldrb	r3, [r3, #4]
 80032c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80032c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80032ca:	2a00      	cmp	r2, #0
 80032cc:	d102      	bne.n	80032d4 <ETH_SetMACConfig+0x90>
 80032ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d2:	e000      	b.n	80032d6 <ETH_SetMACConfig+0x92>
 80032d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80032d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	7bdb      	ldrb	r3, [r3, #15]
 80032dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80032ee:	4313      	orrs	r3, r2
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003306:	2001      	movs	r0, #1
 8003308:	f7ff f828 	bl	800235c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003322:	4013      	ands	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003332:	2a00      	cmp	r2, #0
 8003334:	d101      	bne.n	800333a <ETH_SetMACConfig+0xf6>
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	e000      	b.n	800333c <ETH_SetMACConfig+0xf8>
 800333a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800333c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003342:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800334a:	2a01      	cmp	r2, #1
 800334c:	d101      	bne.n	8003352 <ETH_SetMACConfig+0x10e>
 800334e:	2208      	movs	r2, #8
 8003350:	e000      	b.n	8003354 <ETH_SetMACConfig+0x110>
 8003352:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003354:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800335c:	2a01      	cmp	r2, #1
 800335e:	d101      	bne.n	8003364 <ETH_SetMACConfig+0x120>
 8003360:	2204      	movs	r2, #4
 8003362:	e000      	b.n	8003366 <ETH_SetMACConfig+0x122>
 8003364:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003366:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800336e:	2a01      	cmp	r2, #1
 8003370:	d101      	bne.n	8003376 <ETH_SetMACConfig+0x132>
 8003372:	2202      	movs	r2, #2
 8003374:	e000      	b.n	8003378 <ETH_SetMACConfig+0x134>
 8003376:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003378:	4313      	orrs	r3, r2
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003390:	2001      	movs	r0, #1
 8003392:	f7fe ffe3 	bl	800235c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	619a      	str	r2, [r3, #24]
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	fd20810f 	.word	0xfd20810f

080033ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <ETH_SetDMAConfig+0x110>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	7b1b      	ldrb	r3, [r3, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <ETH_SetDMAConfig+0x2c>
 80033d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033d6:	e000      	b.n	80033da <ETH_SetDMAConfig+0x2e>
 80033d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	7b5b      	ldrb	r3, [r3, #13]
 80033de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	7f52      	ldrb	r2, [r2, #29]
 80033e6:	2a00      	cmp	r2, #0
 80033e8:	d102      	bne.n	80033f0 <ETH_SetDMAConfig+0x44>
 80033ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033ee:	e000      	b.n	80033f2 <ETH_SetDMAConfig+0x46>
 80033f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	7b9b      	ldrb	r3, [r3, #14]
 80033f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003400:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	7f1b      	ldrb	r3, [r3, #28]
 8003406:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003408:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	7f9b      	ldrb	r3, [r3, #30]
 800340e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003410:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003416:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800341e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003420:	4313      	orrs	r3, r2
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003430:	461a      	mov	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003442:	2001      	movs	r0, #1
 8003444:	f7fe ff8a 	bl	800235c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003450:	461a      	mov	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	791b      	ldrb	r3, [r3, #4]
 800345a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003460:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003466:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800346c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003474:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003476:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800347e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003484:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800348e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003492:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034a0:	2001      	movs	r0, #1
 80034a2:	f7fe ff5b 	bl	800235c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	f8de3f23 	.word	0xf8de3f23

080034c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b0a6      	sub	sp, #152	; 0x98
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80034d4:	2300      	movs	r3, #0
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003502:	2300      	movs	r3, #0
 8003504:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003506:	2300      	movs	r3, #0
 8003508:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800350c:	2300      	movs	r3, #0
 800350e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003510:	2300      	movs	r3, #0
 8003512:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800352c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800352e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003534:	2300      	movs	r3, #0
 8003536:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800353a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fe7f 	bl	8003244 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003546:	2301      	movs	r3, #1
 8003548:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800354a:	2301      	movs	r3, #1
 800354c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003554:	2301      	movs	r3, #1
 8003556:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003568:	2300      	movs	r3, #0
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003572:	2301      	movs	r3, #1
 8003574:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800357a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800357c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003580:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003586:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800358e:	2300      	movs	r3, #0
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003596:	f107 0308 	add.w	r3, r7, #8
 800359a:	4619      	mov	r1, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff05 	bl	80033ac <ETH_SetDMAConfig>
}
 80035a2:	bf00      	nop
 80035a4:	3798      	adds	r7, #152	; 0x98
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3305      	adds	r3, #5
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	3204      	adds	r2, #4
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <ETH_MACAddressConfig+0x68>)
 80035ce:	4413      	add	r3, r2
 80035d0:	461a      	mov	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3303      	adds	r3, #3
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	061a      	lsls	r2, r3, #24
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3302      	adds	r3, #2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3301      	adds	r3, #1
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	4313      	orrs	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	7812      	ldrb	r2, [r2, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <ETH_MACAddressConfig+0x6c>)
 80035fe:	4413      	add	r3, r2
 8003600:	461a      	mov	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	6013      	str	r3, [r2, #0]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40028040 	.word	0x40028040
 8003618:	40028044 	.word	0x40028044

0800361c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e03e      	b.n	80036a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68d9      	ldr	r1, [r3, #12]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	3206      	adds	r2, #6
 800365c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d80c      	bhi.n	800368c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68d9      	ldr	r1, [r3, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	e004      	b.n	8003696 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	461a      	mov	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3301      	adds	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d9bd      	bls.n	800362a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c0:	611a      	str	r2, [r3, #16]
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e048      	b.n	800376e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6919      	ldr	r1, [r3, #16]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2200      	movs	r2, #0
 8003704:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003718:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	3212      	adds	r2, #18
 800373a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d80c      	bhi.n	800375e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6919      	ldr	r1, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	440b      	add	r3, r1
 8003756:	461a      	mov	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	60da      	str	r2, [r3, #12]
 800375c:	e004      	b.n	8003768 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d9b3      	bls.n	80036dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379e:	60da      	str	r2, [r3, #12]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b091      	sub	sp, #68	; 0x44
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3318      	adds	r3, #24
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ee:	d007      	beq.n	8003800 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80037f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f4:	3304      	adds	r3, #4
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003800:	2302      	movs	r3, #2
 8003802:	e111      	b.n	8003a28 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	3301      	adds	r3, #1
 8003808:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4b86      	ldr	r3, [pc, #536]	; (8003a34 <ETH_Prepare_Tx_Descriptors+0x288>)
 800381a:	4013      	ands	r3, r2
 800381c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800381e:	6852      	ldr	r2, [r2, #4]
 8003820:	431a      	orrs	r2, r3
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	431a      	orrs	r2, r3
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	431a      	orrs	r2, r3
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003886:	e082      	b.n	800398e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d006      	beq.n	80038a8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e005      	b.n	80038b4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80038b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b6:	3301      	adds	r3, #1
 80038b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d902      	bls.n	80038c6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80038c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c2:	3b04      	subs	r3, #4
 80038c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038dc:	d007      	beq.n	80038ee <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e2:	3304      	adds	r3, #4
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d029      	beq.n	8003942 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80038fc:	2300      	movs	r3, #0
 80038fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003900:	e019      	b.n	8003936 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003902:	f3bf 8f5f 	dmb	sy
}
 8003906:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	3301      	adds	r3, #1
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391c:	2b03      	cmp	r3, #3
 800391e:	d902      	bls.n	8003926 <ETH_Prepare_Tx_Descriptors+0x17a>
 8003920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003922:	3b04      	subs	r3, #4
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800392a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392e:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	3301      	adds	r3, #1
 8003934:	63bb      	str	r3, [r7, #56]	; 0x38
 8003936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393a:	429a      	cmp	r2, r3
 800393c:	d3e1      	bcc.n	8003902 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800393e:	2302      	movs	r3, #2
 8003940:	e072      	b.n	8003a28 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003950:	3301      	adds	r3, #1
 8003952:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <ETH_Prepare_Tx_Descriptors+0x288>)
 800396a:	4013      	ands	r3, r2
 800396c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396e:	6852      	ldr	r2, [r2, #4]
 8003970:	431a      	orrs	r2, r3
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	3301      	adds	r3, #1
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800397c:	f3bf 8f5f 	dmb	sy
}
 8003980:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f47f af78 	bne.w	8003888 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d006      	beq.n	80039ac <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e005      	b.n	80039b8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	6a3a      	ldr	r2, [r7, #32]
 80039c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80039ce:	f3bf 8f5f 	dmb	sy
}
 80039d2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e8:	3304      	adds	r3, #4
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039f4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f6:	f3ef 8310 	mrs	r3, PRIMASK
 80039fa:	613b      	str	r3, [r7, #16]
  return(result);
 80039fc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	2301      	movs	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	4413      	add	r3, r2
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	629a      	str	r2, [r3, #40]	; 0x28
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f383 8810 	msr	PRIMASK, r3
}
 8003a24:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3744      	adds	r7, #68	; 0x44
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	ffffe000 	.word	0xffffe000

08003a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e175      	b.n	8003d44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a58:	2201      	movs	r2, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	f040 8164 	bne.w	8003d3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d005      	beq.n	8003a8e <HAL_GPIO_Init+0x56>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d130      	bne.n	8003af0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 0201 	and.w	r2, r3, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d017      	beq.n	8003b2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2203      	movs	r2, #3
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d123      	bne.n	8003b80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	08da      	lsrs	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3208      	adds	r2, #8
 8003b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	220f      	movs	r2, #15
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3208      	adds	r2, #8
 8003b7a:	69b9      	ldr	r1, [r7, #24]
 8003b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0203 	and.w	r2, r3, #3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80be 	beq.w	8003d3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc2:	4b66      	ldr	r3, [pc, #408]	; (8003d5c <HAL_GPIO_Init+0x324>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	4a65      	ldr	r2, [pc, #404]	; (8003d5c <HAL_GPIO_Init+0x324>)
 8003bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bce:	4b63      	ldr	r3, [pc, #396]	; (8003d5c <HAL_GPIO_Init+0x324>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bda:	4a61      	ldr	r2, [pc, #388]	; (8003d60 <HAL_GPIO_Init+0x328>)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	3302      	adds	r3, #2
 8003be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	220f      	movs	r2, #15
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a58      	ldr	r2, [pc, #352]	; (8003d64 <HAL_GPIO_Init+0x32c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d037      	beq.n	8003c76 <HAL_GPIO_Init+0x23e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a57      	ldr	r2, [pc, #348]	; (8003d68 <HAL_GPIO_Init+0x330>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d031      	beq.n	8003c72 <HAL_GPIO_Init+0x23a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a56      	ldr	r2, [pc, #344]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d02b      	beq.n	8003c6e <HAL_GPIO_Init+0x236>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a55      	ldr	r2, [pc, #340]	; (8003d70 <HAL_GPIO_Init+0x338>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d025      	beq.n	8003c6a <HAL_GPIO_Init+0x232>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a54      	ldr	r2, [pc, #336]	; (8003d74 <HAL_GPIO_Init+0x33c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01f      	beq.n	8003c66 <HAL_GPIO_Init+0x22e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a53      	ldr	r2, [pc, #332]	; (8003d78 <HAL_GPIO_Init+0x340>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d019      	beq.n	8003c62 <HAL_GPIO_Init+0x22a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a52      	ldr	r2, [pc, #328]	; (8003d7c <HAL_GPIO_Init+0x344>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_GPIO_Init+0x226>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a51      	ldr	r2, [pc, #324]	; (8003d80 <HAL_GPIO_Init+0x348>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00d      	beq.n	8003c5a <HAL_GPIO_Init+0x222>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a50      	ldr	r2, [pc, #320]	; (8003d84 <HAL_GPIO_Init+0x34c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <HAL_GPIO_Init+0x21e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a4f      	ldr	r2, [pc, #316]	; (8003d88 <HAL_GPIO_Init+0x350>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_GPIO_Init+0x21a>
 8003c4e:	2309      	movs	r3, #9
 8003c50:	e012      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c52:	230a      	movs	r3, #10
 8003c54:	e010      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c56:	2308      	movs	r3, #8
 8003c58:	e00e      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c5a:	2307      	movs	r3, #7
 8003c5c:	e00c      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c5e:	2306      	movs	r3, #6
 8003c60:	e00a      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c62:	2305      	movs	r3, #5
 8003c64:	e008      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c66:	2304      	movs	r3, #4
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e004      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_Init+0x240>
 8003c76:	2300      	movs	r3, #0
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	f002 0203 	and.w	r2, r2, #3
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	4093      	lsls	r3, r2
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c88:	4935      	ldr	r1, [pc, #212]	; (8003d60 <HAL_GPIO_Init+0x328>)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	3302      	adds	r3, #2
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c96:	4b3d      	ldr	r3, [pc, #244]	; (8003d8c <HAL_GPIO_Init+0x354>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cba:	4a34      	ldr	r2, [pc, #208]	; (8003d8c <HAL_GPIO_Init+0x354>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc0:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <HAL_GPIO_Init+0x354>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce4:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <HAL_GPIO_Init+0x354>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cea:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_GPIO_Init+0x354>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d0e:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_GPIO_Init+0x354>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <HAL_GPIO_Init+0x354>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <HAL_GPIO_Init+0x354>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	f67f ae86 	bls.w	8003a58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40013800 	.word	0x40013800
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40020400 	.word	0x40020400
 8003d6c:	40020800 	.word	0x40020800
 8003d70:	40020c00 	.word	0x40020c00
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40021400 	.word	0x40021400
 8003d7c:	40021800 	.word	0x40021800
 8003d80:	40021c00 	.word	0x40021c00
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40022400 	.word	0x40022400
 8003d8c:	40013c00 	.word	0x40013c00

08003d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	887b      	ldrh	r3, [r7, #2]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	e001      	b.n	8003db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dd0:	787b      	ldrb	r3, [r7, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ddc:	e003      	b.n	8003de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	041a      	lsls	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	619a      	str	r2, [r3, #24]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0bf      	b.n	8003f86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd fe86 	bl	8001b2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003e36:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6999      	ldr	r1, [r3, #24]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e4c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6899      	ldr	r1, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_LTDC_Init+0x19c>)
 8003e68:	400b      	ands	r3, r1
 8003e6a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6899      	ldr	r1, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68d9      	ldr	r1, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <HAL_LTDC_Init+0x19c>)
 8003e96:	400b      	ands	r3, r1
 8003e98:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68d9      	ldr	r1, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1a      	ldr	r2, [r3, #32]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6919      	ldr	r1, [r3, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_LTDC_Init+0x19c>)
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	041b      	lsls	r3, r3, #16
 8003ece:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6919      	ldr	r1, [r3, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6959      	ldr	r1, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_LTDC_Init+0x19c>)
 8003ef2:	400b      	ands	r3, r1
 8003ef4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6959      	ldr	r1, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0206 	orr.w	r2, r2, #6
 8003f62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	f000f800 	.word	0xf000f800

08003f94 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003faa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d023      	beq.n	8003ffe <HAL_LTDC_IRQHandler+0x6a>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01e      	beq.n	8003ffe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fde:	f043 0201 	orr.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2204      	movs	r2, #4
 8003fec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f86f 	bl	80040dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d023      	beq.n	8004050 <HAL_LTDC_IRQHandler+0xbc>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01e      	beq.n	8004050 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0202 	bic.w	r2, r2, #2
 8004020:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2202      	movs	r2, #2
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004030:	f043 0202 	orr.w	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2204      	movs	r2, #4
 800403e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f846 	bl	80040dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01b      	beq.n	8004092 <HAL_LTDC_IRQHandler+0xfe>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d016      	beq.n	8004092 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0201 	bic.w	r2, r2, #1
 8004072:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2201      	movs	r2, #1
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f82f 	bl	80040f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01b      	beq.n	80040d4 <HAL_LTDC_IRQHandler+0x140>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0208 	bic.w	r2, r2, #8
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2208      	movs	r2, #8
 80040bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f818 	bl	8004104 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004118:	b5b0      	push	{r4, r5, r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_LTDC_ConfigLayer+0x1a>
 800412e:	2302      	movs	r3, #2
 8004130:	e02c      	b.n	800418c <HAL_LTDC_ConfigLayer+0x74>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2134      	movs	r1, #52	; 0x34
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4614      	mov	r4, r2
 8004156:	461d      	mov	r5, r3
 8004158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800415a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800415c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800415e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f847 	bl	8004200 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2201      	movs	r2, #1
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bdb0      	pop	{r4, r5, r7, pc}

08004194 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_LTDC_SetAddress+0x1a>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e024      	b.n	80041f8 <HAL_LTDC_SetAddress+0x64>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2234      	movs	r2, #52	; 0x34
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	3338      	adds	r3, #56	; 0x38
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6979      	ldr	r1, [r7, #20]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f811 	bl	8004200 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2201      	movs	r2, #1
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004200:	b480      	push	{r7}
 8004202:	b089      	sub	sp, #36	; 0x24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	0c1b      	lsrs	r3, r3, #16
 8004218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421c:	4413      	add	r3, r2
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	01db      	lsls	r3, r3, #7
 800422c:	4413      	add	r3, r2
 800422e:	3384      	adds	r3, #132	; 0x84
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	4611      	mov	r1, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	01d2      	lsls	r2, r2, #7
 800423c:	440a      	add	r2, r1
 800423e:	3284      	adds	r2, #132	; 0x84
 8004240:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004244:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004256:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004258:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4619      	mov	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	01db      	lsls	r3, r3, #7
 8004264:	440b      	add	r3, r1
 8004266:	3384      	adds	r3, #132	; 0x84
 8004268:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800426e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800427e:	4413      	add	r3, r2
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	01db      	lsls	r3, r3, #7
 800428e:	4413      	add	r3, r2
 8004290:	3384      	adds	r3, #132	; 0x84
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	4611      	mov	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	01d2      	lsls	r2, r2, #7
 800429e:	440a      	add	r2, r1
 80042a0:	3284      	adds	r2, #132	; 0x84
 80042a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042b6:	4413      	add	r3, r2
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4619      	mov	r1, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	01db      	lsls	r3, r3, #7
 80042c4:	440b      	add	r3, r1
 80042c6:	3384      	adds	r3, #132	; 0x84
 80042c8:	4619      	mov	r1, r3
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	01db      	lsls	r3, r3, #7
 80042da:	4413      	add	r3, r2
 80042dc:	3384      	adds	r3, #132	; 0x84
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	4611      	mov	r1, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	01d2      	lsls	r2, r2, #7
 80042ea:	440a      	add	r2, r1
 80042ec:	3284      	adds	r2, #132	; 0x84
 80042ee:	f023 0307 	bic.w	r3, r3, #7
 80042f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	01db      	lsls	r3, r3, #7
 80042fe:	4413      	add	r3, r2
 8004300:	3384      	adds	r3, #132	; 0x84
 8004302:	461a      	mov	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	01db      	lsls	r3, r3, #7
 8004330:	4413      	add	r3, r2
 8004332:	3384      	adds	r3, #132	; 0x84
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	01db      	lsls	r3, r3, #7
 8004340:	4413      	add	r3, r2
 8004342:	3384      	adds	r3, #132	; 0x84
 8004344:	461a      	mov	r2, r3
 8004346:	2300      	movs	r3, #0
 8004348:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004350:	461a      	mov	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	431a      	orrs	r2, r3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	01db      	lsls	r3, r3, #7
 8004364:	440b      	add	r3, r1
 8004366:	3384      	adds	r3, #132	; 0x84
 8004368:	4619      	mov	r1, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	01db      	lsls	r3, r3, #7
 800437a:	4413      	add	r3, r2
 800437c:	3384      	adds	r3, #132	; 0x84
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	4611      	mov	r1, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	01d2      	lsls	r2, r2, #7
 800438a:	440a      	add	r2, r1
 800438c:	3284      	adds	r2, #132	; 0x84
 800438e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004392:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	01db      	lsls	r3, r3, #7
 800439e:	4413      	add	r3, r2
 80043a0:	3384      	adds	r3, #132	; 0x84
 80043a2:	461a      	mov	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	01db      	lsls	r3, r3, #7
 80043b4:	4413      	add	r3, r2
 80043b6:	3384      	adds	r3, #132	; 0x84
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	01db      	lsls	r3, r3, #7
 80043c4:	440b      	add	r3, r1
 80043c6:	3384      	adds	r3, #132	; 0x84
 80043c8:	4619      	mov	r1, r3
 80043ca:	4b58      	ldr	r3, [pc, #352]	; (800452c <LTDC_SetConfig+0x32c>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	68f9      	ldr	r1, [r7, #12]
 80043da:	6809      	ldr	r1, [r1, #0]
 80043dc:	4608      	mov	r0, r1
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	01c9      	lsls	r1, r1, #7
 80043e2:	4401      	add	r1, r0
 80043e4:	3184      	adds	r1, #132	; 0x84
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	01db      	lsls	r3, r3, #7
 80043f4:	4413      	add	r3, r2
 80043f6:	3384      	adds	r3, #132	; 0x84
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	01db      	lsls	r3, r3, #7
 8004404:	4413      	add	r3, r2
 8004406:	3384      	adds	r3, #132	; 0x84
 8004408:	461a      	mov	r2, r3
 800440a:	2300      	movs	r3, #0
 800440c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	01db      	lsls	r3, r3, #7
 8004418:	4413      	add	r3, r2
 800441a:	3384      	adds	r3, #132	; 0x84
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800442c:	2304      	movs	r3, #4
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	e01b      	b.n	800446a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d102      	bne.n	8004440 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800443a:	2303      	movs	r3, #3
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e014      	b.n	800446a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d00b      	beq.n	8004460 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800444c:	2b02      	cmp	r3, #2
 800444e:	d007      	beq.n	8004460 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004454:	2b03      	cmp	r3, #3
 8004456:	d003      	beq.n	8004460 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800445c:	2b07      	cmp	r3, #7
 800445e:	d102      	bne.n	8004466 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004460:	2302      	movs	r3, #2
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	e001      	b.n	800446a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004466:	2301      	movs	r3, #1
 8004468:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	01db      	lsls	r3, r3, #7
 8004474:	4413      	add	r3, r2
 8004476:	3384      	adds	r3, #132	; 0x84
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	4611      	mov	r1, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	01d2      	lsls	r2, r2, #7
 8004484:	440a      	add	r2, r1
 8004486:	3284      	adds	r2, #132	; 0x84
 8004488:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800448c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	6859      	ldr	r1, [r3, #4]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	1acb      	subs	r3, r1, r3
 80044a4:	69f9      	ldr	r1, [r7, #28]
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	6809      	ldr	r1, [r1, #0]
 80044b0:	4608      	mov	r0, r1
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	01c9      	lsls	r1, r1, #7
 80044b6:	4401      	add	r1, r0
 80044b8:	3184      	adds	r1, #132	; 0x84
 80044ba:	4313      	orrs	r3, r2
 80044bc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	01db      	lsls	r3, r3, #7
 80044c8:	4413      	add	r3, r2
 80044ca:	3384      	adds	r3, #132	; 0x84
 80044cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4619      	mov	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	01db      	lsls	r3, r3, #7
 80044d8:	440b      	add	r3, r1
 80044da:	3384      	adds	r3, #132	; 0x84
 80044dc:	4619      	mov	r1, r3
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <LTDC_SetConfig+0x330>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	01db      	lsls	r3, r3, #7
 80044ee:	4413      	add	r3, r2
 80044f0:	3384      	adds	r3, #132	; 0x84
 80044f2:	461a      	mov	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	01db      	lsls	r3, r3, #7
 8004504:	4413      	add	r3, r2
 8004506:	3384      	adds	r3, #132	; 0x84
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	4611      	mov	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	01d2      	lsls	r2, r2, #7
 8004514:	440a      	add	r2, r1
 8004516:	3284      	adds	r2, #132	; 0x84
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6013      	str	r3, [r2, #0]
}
 800451e:	bf00      	nop
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	fffff8f8 	.word	0xfffff8f8
 8004530:	fffff800 	.word	0xfffff800

08004534 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800453c:	2300      	movs	r3, #0
 800453e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e291      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8087 	beq.w	8004666 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004558:	4b96      	ldr	r3, [pc, #600]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b04      	cmp	r3, #4
 8004562:	d00c      	beq.n	800457e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004564:	4b93      	ldr	r3, [pc, #588]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 030c 	and.w	r3, r3, #12
 800456c:	2b08      	cmp	r3, #8
 800456e:	d112      	bne.n	8004596 <HAL_RCC_OscConfig+0x62>
 8004570:	4b90      	ldr	r3, [pc, #576]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457c:	d10b      	bne.n	8004596 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457e:	4b8d      	ldr	r3, [pc, #564]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d06c      	beq.n	8004664 <HAL_RCC_OscConfig+0x130>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d168      	bne.n	8004664 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e26b      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459e:	d106      	bne.n	80045ae <HAL_RCC_OscConfig+0x7a>
 80045a0:	4b84      	ldr	r3, [pc, #528]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a83      	ldr	r2, [pc, #524]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e02e      	b.n	800460c <HAL_RCC_OscConfig+0xd8>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x9c>
 80045b6:	4b7f      	ldr	r3, [pc, #508]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a7e      	ldr	r2, [pc, #504]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	4b7c      	ldr	r3, [pc, #496]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a7b      	ldr	r2, [pc, #492]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e01d      	b.n	800460c <HAL_RCC_OscConfig+0xd8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCC_OscConfig+0xc0>
 80045da:	4b76      	ldr	r3, [pc, #472]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a75      	ldr	r2, [pc, #468]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	4b73      	ldr	r3, [pc, #460]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a72      	ldr	r2, [pc, #456]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e00b      	b.n	800460c <HAL_RCC_OscConfig+0xd8>
 80045f4:	4b6f      	ldr	r3, [pc, #444]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6e      	ldr	r2, [pc, #440]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b6c      	ldr	r3, [pc, #432]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a6b      	ldr	r2, [pc, #428]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d013      	beq.n	800463c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd fe96 	bl	8002344 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fd fe92 	bl	8002344 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e21f      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b61      	ldr	r3, [pc, #388]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0xe8>
 800463a:	e014      	b.n	8004666 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd fe82 	bl	8002344 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fd fe7e 	bl	8002344 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e20b      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	4b57      	ldr	r3, [pc, #348]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x110>
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d069      	beq.n	8004746 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004672:	4b50      	ldr	r3, [pc, #320]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467e:	4b4d      	ldr	r3, [pc, #308]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b08      	cmp	r3, #8
 8004688:	d11c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x190>
 800468a:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d116      	bne.n	80046c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004696:	4b47      	ldr	r3, [pc, #284]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_RCC_OscConfig+0x17a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d001      	beq.n	80046ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e1df      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	493d      	ldr	r1, [pc, #244]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c2:	e040      	b.n	8004746 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d023      	beq.n	8004714 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046cc:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a38      	ldr	r2, [pc, #224]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd fe34 	bl	8002344 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e0:	f7fd fe30 	bl	8002344 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1bd      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f2:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fe:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4929      	ldr	r1, [pc, #164]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]
 8004712:	e018      	b.n	8004746 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004714:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fd fe10 	bl	8002344 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004728:	f7fd fe0c 	bl	8002344 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e199      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473a:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d038      	beq.n	80047c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d019      	beq.n	800478e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fd fded 	bl	8002344 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476e:	f7fd fde9 	bl	8002344 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e176      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x23a>
 800478c:	e01a      	b.n	80047c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478e:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004792:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fd fdd3 	bl	8002344 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a0:	e00a      	b.n	80047b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a2:	f7fd fdcf 	bl	8002344 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d903      	bls.n	80047b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e15c      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
 80047b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b8:	4b91      	ldr	r3, [pc, #580]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80047ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1ee      	bne.n	80047a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80a4 	beq.w	800491a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d2:	4b8b      	ldr	r3, [pc, #556]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10d      	bne.n	80047fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80047de:	4b88      	ldr	r3, [pc, #544]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a87      	ldr	r2, [pc, #540]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ea:	4b85      	ldr	r3, [pc, #532]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fa:	4b82      	ldr	r3, [pc, #520]	; (8004a04 <HAL_RCC_OscConfig+0x4d0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d118      	bne.n	8004838 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004806:	4b7f      	ldr	r3, [pc, #508]	; (8004a04 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a7e      	ldr	r2, [pc, #504]	; (8004a04 <HAL_RCC_OscConfig+0x4d0>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004812:	f7fd fd97 	bl	8002344 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fd fd93 	bl	8002344 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b64      	cmp	r3, #100	; 0x64
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e120      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482c:	4b75      	ldr	r3, [pc, #468]	; (8004a04 <HAL_RCC_OscConfig+0x4d0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x31a>
 8004840:	4b6f      	ldr	r3, [pc, #444]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a6e      	ldr	r2, [pc, #440]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	e02d      	b.n	80048aa <HAL_RCC_OscConfig+0x376>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x33c>
 8004856:	4b6a      	ldr	r3, [pc, #424]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a69      	ldr	r2, [pc, #420]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	4b67      	ldr	r3, [pc, #412]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a66      	ldr	r2, [pc, #408]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004868:	f023 0304 	bic.w	r3, r3, #4
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
 800486e:	e01c      	b.n	80048aa <HAL_RCC_OscConfig+0x376>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b05      	cmp	r3, #5
 8004876:	d10c      	bne.n	8004892 <HAL_RCC_OscConfig+0x35e>
 8004878:	4b61      	ldr	r3, [pc, #388]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a60      	ldr	r2, [pc, #384]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 800487e:	f043 0304 	orr.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
 8004884:	4b5e      	ldr	r3, [pc, #376]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004888:	4a5d      	ldr	r2, [pc, #372]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	6713      	str	r3, [r2, #112]	; 0x70
 8004890:	e00b      	b.n	80048aa <HAL_RCC_OscConfig+0x376>
 8004892:	4b5b      	ldr	r3, [pc, #364]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	4a5a      	ldr	r2, [pc, #360]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	6713      	str	r3, [r2, #112]	; 0x70
 800489e:	4b58      	ldr	r3, [pc, #352]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	4a57      	ldr	r2, [pc, #348]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d015      	beq.n	80048de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fd fd47 	bl	8002344 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b8:	e00a      	b.n	80048d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fd fd43 	bl	8002344 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0ce      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d0:	4b4b      	ldr	r3, [pc, #300]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ee      	beq.n	80048ba <HAL_RCC_OscConfig+0x386>
 80048dc:	e014      	b.n	8004908 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fd fd31 	bl	8002344 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fd fd2d 	bl	8002344 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0b8      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fc:	4b40      	ldr	r3, [pc, #256]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ee      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d105      	bne.n	800491a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490e:	4b3c      	ldr	r3, [pc, #240]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	4a3b      	ldr	r2, [pc, #236]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004918:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80a4 	beq.w	8004a6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004924:	4b36      	ldr	r3, [pc, #216]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	2b08      	cmp	r3, #8
 800492e:	d06b      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d149      	bne.n	80049cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004938:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a30      	ldr	r2, [pc, #192]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 800493e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fd fcfe 	bl	8002344 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494c:	f7fd fcfa 	bl	8002344 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e087      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	3b01      	subs	r3, #1
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	061b      	lsls	r3, r3, #24
 800498e:	4313      	orrs	r3, r2
 8004990:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 8004992:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004996:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004998:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fd fcce 	bl	8002344 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fd fcca 	bl	8002344 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e057      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x478>
 80049ca:	e04f      	b.n	8004a6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80049d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd fcb4 	bl	8002344 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fd fcb0 	bl	8002344 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e03d      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f2:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_RCC_OscConfig+0x4cc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4ac>
 80049fe:	e035      	b.n	8004a6c <HAL_RCC_OscConfig+0x538>
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a08:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_RCC_OscConfig+0x544>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d028      	beq.n	8004a68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d121      	bne.n	8004a68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d11a      	bne.n	8004a68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d111      	bne.n	8004a68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	3b01      	subs	r3, #1
 8004a52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800

08004a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0d0      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a94:	4b6a      	ldr	r3, [pc, #424]	; (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d910      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b67      	ldr	r3, [pc, #412]	; (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 020f 	bic.w	r2, r3, #15
 8004aaa:	4965      	ldr	r1, [pc, #404]	; (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b63      	ldr	r3, [pc, #396]	; (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0b8      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d020      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004adc:	4b59      	ldr	r3, [pc, #356]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a58      	ldr	r2, [pc, #352]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004af4:	4b53      	ldr	r3, [pc, #332]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a52      	ldr	r2, [pc, #328]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004afe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b00:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	494d      	ldr	r1, [pc, #308]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d040      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d107      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	4b47      	ldr	r3, [pc, #284]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d115      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e07f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3e:	4b41      	ldr	r3, [pc, #260]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e073      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4e:	4b3d      	ldr	r3, [pc, #244]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e06b      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b5e:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f023 0203 	bic.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4936      	ldr	r1, [pc, #216]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b70:	f7fd fbe8 	bl	8002344 <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b78:	f7fd fbe4 	bl	8002344 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e053      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8e:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 020c 	and.w	r2, r3, #12
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d1eb      	bne.n	8004b78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d210      	bcs.n	8004bd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b24      	ldr	r3, [pc, #144]	; (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 020f 	bic.w	r2, r3, #15
 8004bb6:	4922      	ldr	r1, [pc, #136]	; (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e032      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bdc:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4916      	ldr	r1, [pc, #88]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	490e      	ldr	r1, [pc, #56]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c0e:	f000 f821 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8004c12:	4602      	mov	r2, r0
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	490a      	ldr	r1, [pc, #40]	; (8004c48 <HAL_RCC_ClockConfig+0x1cc>)
 8004c20:	5ccb      	ldrb	r3, [r1, r3]
 8004c22:	fa22 f303 	lsr.w	r3, r2, r3
 8004c26:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <HAL_RCC_ClockConfig+0x1d0>)
 8004c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_RCC_ClockConfig+0x1d4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fd f884 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023c00 	.word	0x40023c00
 8004c44:	40023800 	.word	0x40023800
 8004c48:	08018550 	.word	0x08018550
 8004c4c:	20001804 	.word	0x20001804
 8004c50:	20001808 	.word	0x20001808

08004c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c58:	b090      	sub	sp, #64	; 0x40
 8004c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c60:	2300      	movs	r3, #0
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c64:	2300      	movs	r3, #0
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c6c:	4b59      	ldr	r3, [pc, #356]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d00d      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0x40>
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	f200 80a1 	bhi.w	8004dc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x34>
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c86:	e09b      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c88:	4b53      	ldr	r3, [pc, #332]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c8c:	e09b      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c8e:	4b53      	ldr	r3, [pc, #332]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8004c90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c92:	e098      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c94:	4b4f      	ldr	r3, [pc, #316]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c9e:	4b4d      	ldr	r3, [pc, #308]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d028      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004caa:	4b4a      	ldr	r3, [pc, #296]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	099b      	lsrs	r3, r3, #6
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	627a      	str	r2, [r7, #36]	; 0x24
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4b47      	ldr	r3, [pc, #284]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8004cc0:	fb03 f201 	mul.w	r2, r3, r1
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	fb00 f303 	mul.w	r3, r0, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	4a43      	ldr	r2, [pc, #268]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8004cce:	fba0 1202 	umull	r1, r2, r0, r2
 8004cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cd4:	460a      	mov	r2, r1
 8004cd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cda:	4413      	add	r3, r2
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	61fa      	str	r2, [r7, #28]
 8004ce6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004cee:	f7fb fae7 	bl	80002c0 <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cfa:	e053      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfc:	4b35      	ldr	r3, [pc, #212]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	099b      	lsrs	r3, r3, #6
 8004d02:	2200      	movs	r2, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	617a      	str	r2, [r7, #20]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d0e:	f04f 0b00 	mov.w	fp, #0
 8004d12:	4652      	mov	r2, sl
 8004d14:	465b      	mov	r3, fp
 8004d16:	f04f 0000 	mov.w	r0, #0
 8004d1a:	f04f 0100 	mov.w	r1, #0
 8004d1e:	0159      	lsls	r1, r3, #5
 8004d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d24:	0150      	lsls	r0, r2, #5
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	ebb2 080a 	subs.w	r8, r2, sl
 8004d2e:	eb63 090b 	sbc.w	r9, r3, fp
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d46:	ebb2 0408 	subs.w	r4, r2, r8
 8004d4a:	eb63 0509 	sbc.w	r5, r3, r9
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	00eb      	lsls	r3, r5, #3
 8004d58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5c:	00e2      	lsls	r2, r4, #3
 8004d5e:	4614      	mov	r4, r2
 8004d60:	461d      	mov	r5, r3
 8004d62:	eb14 030a 	adds.w	r3, r4, sl
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	eb45 030b 	adc.w	r3, r5, fp
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	028b      	lsls	r3, r1, #10
 8004d7e:	4621      	mov	r1, r4
 8004d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d84:	4621      	mov	r1, r4
 8004d86:	028a      	lsls	r2, r1, #10
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	60fa      	str	r2, [r7, #12]
 8004d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d98:	f7fb fa92 	bl	80002c0 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004da4:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	3301      	adds	r3, #1
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004db4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004dc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3740      	adds	r7, #64	; 0x40
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	017d7840 	.word	0x017d7840

08004de0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20001804 	.word	0x20001804

08004df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dfc:	f7ff fff0 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0a9b      	lsrs	r3, r3, #10
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4903      	ldr	r1, [pc, #12]	; (8004e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	08018560 	.word	0x08018560

08004e20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	220f      	movs	r2, #15
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e30:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0203 	and.w	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	08db      	lsrs	r3, r3, #3
 8004e5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_RCC_GetClockConfig+0x60>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 020f 	and.w	r2, r3, #15
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	601a      	str	r2, [r3, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40023c00 	.word	0x40023c00

08004e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eac:	4b69      	ldr	r3, [pc, #420]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a68      	ldr	r2, [pc, #416]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004eb6:	6093      	str	r3, [r2, #8]
 8004eb8:	4b66      	ldr	r3, [pc, #408]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec0:	4964      	ldr	r1, [pc, #400]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d017      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ede:	4b5d      	ldr	r3, [pc, #372]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eec:	4959      	ldr	r1, [pc, #356]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004efc:	d101      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004efe:	2301      	movs	r3, #1
 8004f00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d017      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f1a:	4b4e      	ldr	r3, [pc, #312]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	494a      	ldr	r1, [pc, #296]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f38:	d101      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f46:	2301      	movs	r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f56:	2301      	movs	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 808b 	beq.w	800507e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f68:	4b3a      	ldr	r3, [pc, #232]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	4a39      	ldr	r2, [pc, #228]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f72:	6413      	str	r3, [r2, #64]	; 0x40
 8004f74:	4b37      	ldr	r3, [pc, #220]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f80:	4b35      	ldr	r3, [pc, #212]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a34      	ldr	r2, [pc, #208]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fd f9da 	bl	8002344 <HAL_GetTick>
 8004f90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f94:	f7fd f9d6 	bl	8002344 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	; 0x64
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e357      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fa6:	4b2c      	ldr	r3, [pc, #176]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fb2:	4b28      	ldr	r3, [pc, #160]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d035      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d02e      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fd0:	4b20      	ldr	r3, [pc, #128]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe6:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ff2:	4a18      	ldr	r2, [pc, #96]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ff8:	4b16      	ldr	r3, [pc, #88]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d114      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fd f99e 	bl	8002344 <HAL_GetTick>
 8005008:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500a:	e00a      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500c:	f7fd f99a 	bl	8002344 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	; 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e319      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ee      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503a:	d111      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800504a:	400b      	ands	r3, r1
 800504c:	4901      	ldr	r1, [pc, #4]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504e:	4313      	orrs	r3, r2
 8005050:	608b      	str	r3, [r1, #8]
 8005052:	e00b      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005054:	40023800 	.word	0x40023800
 8005058:	40007000 	.word	0x40007000
 800505c:	0ffffcff 	.word	0x0ffffcff
 8005060:	4baa      	ldr	r3, [pc, #680]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4aa9      	ldr	r2, [pc, #676]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005066:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800506a:	6093      	str	r3, [r2, #8]
 800506c:	4ba7      	ldr	r3, [pc, #668]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005078:	49a4      	ldr	r1, [pc, #656]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800507a:	4313      	orrs	r3, r2
 800507c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	d010      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800508a:	4ba0      	ldr	r3, [pc, #640]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800508c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005090:	4a9e      	ldr	r2, [pc, #632]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005096:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800509a:	4b9c      	ldr	r3, [pc, #624]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800509c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	4999      	ldr	r1, [pc, #612]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050b8:	4b94      	ldr	r3, [pc, #592]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c6:	4991      	ldr	r1, [pc, #580]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050da:	4b8c      	ldr	r3, [pc, #560]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050e8:	4988      	ldr	r1, [pc, #544]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050fc:	4b83      	ldr	r3, [pc, #524]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800510a:	4980      	ldr	r1, [pc, #512]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800511e:	4b7b      	ldr	r3, [pc, #492]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	4977      	ldr	r1, [pc, #476]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005140:	4b72      	ldr	r3, [pc, #456]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f023 0203 	bic.w	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	496f      	ldr	r1, [pc, #444]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005162:	4b6a      	ldr	r3, [pc, #424]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f023 020c 	bic.w	r2, r3, #12
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005170:	4966      	ldr	r1, [pc, #408]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005184:	4b61      	ldr	r3, [pc, #388]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005192:	495e      	ldr	r1, [pc, #376]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051a6:	4b59      	ldr	r3, [pc, #356]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b4:	4955      	ldr	r1, [pc, #340]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051c8:	4b50      	ldr	r3, [pc, #320]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	494d      	ldr	r1, [pc, #308]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051ea:	4b48      	ldr	r3, [pc, #288]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f8:	4944      	ldr	r1, [pc, #272]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800520c:	4b3f      	ldr	r3, [pc, #252]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521a:	493c      	ldr	r1, [pc, #240]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800522e:	4b37      	ldr	r3, [pc, #220]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523c:	4933      	ldr	r1, [pc, #204]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005250:	4b2e      	ldr	r3, [pc, #184]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005256:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800525e:	492b      	ldr	r1, [pc, #172]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d011      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005272:	4b26      	ldr	r3, [pc, #152]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005278:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005280:	4922      	ldr	r1, [pc, #136]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800528c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005290:	d101      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005292:	2301      	movs	r3, #1
 8005294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80052a2:	2301      	movs	r3, #1
 80052a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052b2:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c0:	4912      	ldr	r1, [pc, #72]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052d4:	4b0d      	ldr	r3, [pc, #52]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e4:	4909      	ldr	r1, [pc, #36]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d006      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80d9 	beq.w	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005300:	4b02      	ldr	r3, [pc, #8]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a01      	ldr	r2, [pc, #4]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800530a:	e001      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800530c:	40023800 	.word	0x40023800
 8005310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005312:	f7fd f817 	bl	8002344 <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005318:	e008      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800531a:	f7fd f813 	bl	8002344 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b64      	cmp	r3, #100	; 0x64
 8005326:	d901      	bls.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e194      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800532c:	4b6c      	ldr	r3, [pc, #432]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f0      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d021      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11d      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800534c:	4b64      	ldr	r3, [pc, #400]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800534e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800535a:	4b61      	ldr	r3, [pc, #388]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005360:	0e1b      	lsrs	r3, r3, #24
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	019a      	lsls	r2, r3, #6
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	431a      	orrs	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	061b      	lsls	r3, r3, #24
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	071b      	lsls	r3, r3, #28
 8005380:	4957      	ldr	r1, [pc, #348]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d02e      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b2:	d129      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053b4:	4b4a      	ldr	r3, [pc, #296]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053c2:	4b47      	ldr	r3, [pc, #284]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c8:	0f1b      	lsrs	r3, r3, #28
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	019a      	lsls	r2, r3, #6
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	061b      	lsls	r3, r3, #24
 80053e2:	431a      	orrs	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	071b      	lsls	r3, r3, #28
 80053e8:	493d      	ldr	r1, [pc, #244]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053f0:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f6:	f023 021f 	bic.w	r2, r3, #31
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	3b01      	subs	r3, #1
 8005400:	4937      	ldr	r1, [pc, #220]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01d      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005414:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541a:	0e1b      	lsrs	r3, r3, #24
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005422:	4b2f      	ldr	r3, [pc, #188]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005428:	0f1b      	lsrs	r3, r3, #28
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	019a      	lsls	r2, r3, #6
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	431a      	orrs	r2, r3
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	431a      	orrs	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	071b      	lsls	r3, r3, #28
 8005448:	4925      	ldr	r1, [pc, #148]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d011      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	019a      	lsls	r2, r3, #6
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	061b      	lsls	r3, r3, #24
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	071b      	lsls	r3, r3, #28
 8005478:	4919      	ldr	r1, [pc, #100]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005480:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005486:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800548a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548c:	f7fc ff5a 	bl	8002344 <HAL_GetTick>
 8005490:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005494:	f7fc ff56 	bl	8002344 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	; 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e0d7      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	f040 80cd 	bne.w	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c6:	f7fc ff3d 	bl	8002344 <HAL_GetTick>
 80054ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054cc:	e00a      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054ce:	f7fc ff39 	bl	8002344 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b64      	cmp	r3, #100	; 0x64
 80054da:	d903      	bls.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e0ba      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80054e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054e4:	4b5e      	ldr	r3, [pc, #376]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f0:	d0ed      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800550e:	2b00      	cmp	r3, #0
 8005510:	d02e      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d12a      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800551a:	4b51      	ldr	r3, [pc, #324]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005528:	4b4d      	ldr	r3, [pc, #308]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	0f1b      	lsrs	r3, r3, #28
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	019a      	lsls	r2, r3, #6
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	061b      	lsls	r3, r3, #24
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	4944      	ldr	r1, [pc, #272]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005556:	4b42      	ldr	r3, [pc, #264]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800555c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	493d      	ldr	r1, [pc, #244]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d022      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005584:	d11d      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005586:	4b36      	ldr	r3, [pc, #216]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	0e1b      	lsrs	r3, r3, #24
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005594:	4b32      	ldr	r3, [pc, #200]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	0f1b      	lsrs	r3, r3, #28
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	019a      	lsls	r2, r3, #6
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	431a      	orrs	r2, r3
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	061b      	lsls	r3, r3, #24
 80055b4:	431a      	orrs	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	071b      	lsls	r3, r3, #28
 80055ba:	4929      	ldr	r1, [pc, #164]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d028      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055ce:	4b24      	ldr	r3, [pc, #144]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	0e1b      	lsrs	r3, r3, #24
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055dc:	4b20      	ldr	r3, [pc, #128]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	019a      	lsls	r2, r3, #6
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	431a      	orrs	r2, r3
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	071b      	lsls	r3, r3, #28
 8005602:	4917      	ldr	r1, [pc, #92]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800560a:	4b15      	ldr	r3, [pc, #84]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800560c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	4911      	ldr	r1, [pc, #68]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0e      	ldr	r2, [pc, #56]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800562c:	f7fc fe8a 	bl	8002344 <HAL_GetTick>
 8005630:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005634:	f7fc fe86 	bl	8002344 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e007      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800564e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005652:	d1ef      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	40023800 	.word	0x40023800

08005664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e049      	b.n	800570a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f841 	bl	8005712 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f000 f9e8 	bl	8005a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
	...

08005728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d001      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e054      	b.n	80057ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d022      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0x80>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576a:	d01d      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0x80>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d018      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0x80>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a21      	ldr	r2, [pc, #132]	; (8005800 <HAL_TIM_Base_Start_IT+0xd8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0x80>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <HAL_TIM_Base_Start_IT+0xdc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00e      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0x80>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <HAL_TIM_Base_Start_IT+0xe0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0x80>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1c      	ldr	r2, [pc, #112]	; (800580c <HAL_TIM_Base_Start_IT+0xe4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0x80>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <HAL_TIM_Base_Start_IT+0xe8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d115      	bne.n	80057d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	4b19      	ldr	r3, [pc, #100]	; (8005814 <HAL_TIM_Base_Start_IT+0xec>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b06      	cmp	r3, #6
 80057b8:	d015      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0xbe>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c0:	d011      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d2:	e008      	b.n	80057e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e000      	b.n	80057e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800
 8005804:	40000c00 	.word	0x40000c00
 8005808:	40010400 	.word	0x40010400
 800580c:	40014000 	.word	0x40014000
 8005810:	40001800 	.word	0x40001800
 8005814:	00010007 	.word	0x00010007

08005818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d020      	beq.n	800587c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01b      	beq.n	800587c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0202 	mvn.w	r2, #2
 800584c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8e9 	bl	8005a3a <HAL_TIM_IC_CaptureCallback>
 8005868:	e005      	b.n	8005876 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f8db 	bl	8005a26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f8ec 	bl	8005a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d020      	beq.n	80058c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01b      	beq.n	80058c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0204 	mvn.w	r2, #4
 8005898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f8c3 	bl	8005a3a <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f8b5 	bl	8005a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f8c6 	bl	8005a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0208 	mvn.w	r2, #8
 80058e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2204      	movs	r2, #4
 80058ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f89d 	bl	8005a3a <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f88f 	bl	8005a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f8a0 	bl	8005a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b00      	cmp	r3, #0
 800591c:	d020      	beq.n	8005960 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0210 	mvn.w	r2, #16
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2208      	movs	r2, #8
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f877 	bl	8005a3a <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f869 	bl	8005a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f87a 	bl	8005a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0201 	mvn.w	r2, #1
 800597c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fc f88c 	bl	8001a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00c      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80059aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f919 	bl	8005be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00c      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f911 	bl	8005bf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f834 	bl	8005a62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f06f 0220 	mvn.w	r2, #32
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8d9 	bl	8005bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a46      	ldr	r2, [pc, #280]	; (8005ba4 <TIM_Base_SetConfig+0x12c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d013      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a96:	d00f      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a43      	ldr	r2, [pc, #268]	; (8005ba8 <TIM_Base_SetConfig+0x130>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00b      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a42      	ldr	r2, [pc, #264]	; (8005bac <TIM_Base_SetConfig+0x134>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a41      	ldr	r2, [pc, #260]	; (8005bb0 <TIM_Base_SetConfig+0x138>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a40      	ldr	r2, [pc, #256]	; (8005bb4 <TIM_Base_SetConfig+0x13c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d108      	bne.n	8005aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a35      	ldr	r2, [pc, #212]	; (8005ba4 <TIM_Base_SetConfig+0x12c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d02b      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad8:	d027      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a32      	ldr	r2, [pc, #200]	; (8005ba8 <TIM_Base_SetConfig+0x130>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d023      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a31      	ldr	r2, [pc, #196]	; (8005bac <TIM_Base_SetConfig+0x134>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01f      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a30      	ldr	r2, [pc, #192]	; (8005bb0 <TIM_Base_SetConfig+0x138>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01b      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2f      	ldr	r2, [pc, #188]	; (8005bb4 <TIM_Base_SetConfig+0x13c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d017      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2e      	ldr	r2, [pc, #184]	; (8005bb8 <TIM_Base_SetConfig+0x140>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2d      	ldr	r2, [pc, #180]	; (8005bbc <TIM_Base_SetConfig+0x144>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00f      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2c      	ldr	r2, [pc, #176]	; (8005bc0 <TIM_Base_SetConfig+0x148>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2b      	ldr	r2, [pc, #172]	; (8005bc4 <TIM_Base_SetConfig+0x14c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <TIM_Base_SetConfig+0x150>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a29      	ldr	r2, [pc, #164]	; (8005bcc <TIM_Base_SetConfig+0x154>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d108      	bne.n	8005b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a10      	ldr	r2, [pc, #64]	; (8005ba4 <TIM_Base_SetConfig+0x12c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_Base_SetConfig+0xf8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <TIM_Base_SetConfig+0x13c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d103      	bne.n	8005b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d105      	bne.n	8005b96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f023 0201 	bic.w	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	611a      	str	r2, [r3, #16]
  }
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	40000c00 	.word	0x40000c00
 8005bb4:	40010400 	.word	0x40010400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800
 8005bc4:	40001800 	.word	0x40001800
 8005bc8:	40001c00 	.word	0x40001c00
 8005bcc:	40002000 	.word	0x40002000

08005bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005c12:	4b98      	ldr	r3, [pc, #608]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c14:	22c0      	movs	r2, #192	; 0xc0
 8005c16:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005c18:	4b96      	ldr	r3, [pc, #600]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c1a:	22a8      	movs	r2, #168	; 0xa8
 8005c1c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005c1e:	4b95      	ldr	r3, [pc, #596]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8005c24:	4b93      	ldr	r3, [pc, #588]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c26:	227b      	movs	r2, #123	; 0x7b
 8005c28:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005c2a:	4b93      	ldr	r3, [pc, #588]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005c2c:	22ff      	movs	r2, #255	; 0xff
 8005c2e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005c30:	4b91      	ldr	r3, [pc, #580]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005c32:	22ff      	movs	r2, #255	; 0xff
 8005c34:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005c36:	4b90      	ldr	r3, [pc, #576]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005c38:	22ff      	movs	r2, #255	; 0xff
 8005c3a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005c3c:	4b8e      	ldr	r3, [pc, #568]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005c42:	4b8e      	ldr	r3, [pc, #568]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005c44:	22c0      	movs	r2, #192	; 0xc0
 8005c46:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005c48:	4b8c      	ldr	r3, [pc, #560]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005c4a:	22a8      	movs	r2, #168	; 0xa8
 8005c4c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005c4e:	4b8b      	ldr	r3, [pc, #556]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005c54:	4b89      	ldr	r3, [pc, #548]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	f004 fea5 	bl	800a9ac <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005c62:	4b84      	ldr	r3, [pc, #528]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	061a      	lsls	r2, r3, #24
 8005c68:	4b82      	ldr	r3, [pc, #520]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	4b80      	ldr	r3, [pc, #512]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c72:	789b      	ldrb	r3, [r3, #2]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	4313      	orrs	r3, r2
 8005c78:	4a7e      	ldr	r2, [pc, #504]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c7a:	78d2      	ldrb	r2, [r2, #3]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	061a      	lsls	r2, r3, #24
 8005c80:	4b7c      	ldr	r3, [pc, #496]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	0619      	lsls	r1, r3, #24
 8005c86:	4b7b      	ldr	r3, [pc, #492]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	041b      	lsls	r3, r3, #16
 8005c8c:	4319      	orrs	r1, r3
 8005c8e:	4b79      	ldr	r3, [pc, #484]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c90:	789b      	ldrb	r3, [r3, #2]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	430b      	orrs	r3, r1
 8005c96:	4977      	ldr	r1, [pc, #476]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005c98:	78c9      	ldrb	r1, [r1, #3]
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	4b73      	ldr	r3, [pc, #460]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	0619      	lsls	r1, r3, #24
 8005caa:	4b72      	ldr	r3, [pc, #456]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	4319      	orrs	r1, r3
 8005cb2:	4b70      	ldr	r3, [pc, #448]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005cb4:	789b      	ldrb	r3, [r3, #2]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	496e      	ldr	r1, [pc, #440]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005cbc:	78c9      	ldrb	r1, [r1, #3]
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	4b6a      	ldr	r3, [pc, #424]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	0619      	lsls	r1, r3, #24
 8005cce:	4b69      	ldr	r3, [pc, #420]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	4319      	orrs	r1, r3
 8005cd6:	4b67      	ldr	r3, [pc, #412]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005cd8:	789b      	ldrb	r3, [r3, #2]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	4965      	ldr	r1, [pc, #404]	; (8005e74 <MX_LWIP_Init+0x268>)
 8005ce0:	78c9      	ldrb	r1, [r1, #3]
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	0e1b      	lsrs	r3, r3, #24
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	4a65      	ldr	r2, [pc, #404]	; (8005e80 <MX_LWIP_Init+0x274>)
 8005cea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005cec:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	061a      	lsls	r2, r3, #24
 8005cf2:	4b61      	ldr	r3, [pc, #388]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	041b      	lsls	r3, r3, #16
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	4b5f      	ldr	r3, [pc, #380]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005cfc:	789b      	ldrb	r3, [r3, #2]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	4313      	orrs	r3, r2
 8005d02:	4a5d      	ldr	r2, [pc, #372]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d04:	78d2      	ldrb	r2, [r2, #3]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	061a      	lsls	r2, r3, #24
 8005d0a:	4b5b      	ldr	r3, [pc, #364]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	0619      	lsls	r1, r3, #24
 8005d10:	4b59      	ldr	r3, [pc, #356]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	4319      	orrs	r1, r3
 8005d18:	4b57      	ldr	r3, [pc, #348]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d1a:	789b      	ldrb	r3, [r3, #2]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	4955      	ldr	r1, [pc, #340]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d22:	78c9      	ldrb	r1, [r1, #3]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	4b52      	ldr	r3, [pc, #328]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	0619      	lsls	r1, r3, #24
 8005d34:	4b50      	ldr	r3, [pc, #320]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	041b      	lsls	r3, r3, #16
 8005d3a:	4319      	orrs	r1, r3
 8005d3c:	4b4e      	ldr	r3, [pc, #312]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d3e:	789b      	ldrb	r3, [r3, #2]
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	430b      	orrs	r3, r1
 8005d44:	494c      	ldr	r1, [pc, #304]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d46:	78c9      	ldrb	r1, [r1, #3]
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d50:	431a      	orrs	r2, r3
 8005d52:	4b49      	ldr	r3, [pc, #292]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	0619      	lsls	r1, r3, #24
 8005d58:	4b47      	ldr	r3, [pc, #284]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	4319      	orrs	r1, r3
 8005d60:	4b45      	ldr	r3, [pc, #276]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d62:	789b      	ldrb	r3, [r3, #2]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	430b      	orrs	r3, r1
 8005d68:	4943      	ldr	r1, [pc, #268]	; (8005e78 <MX_LWIP_Init+0x26c>)
 8005d6a:	78c9      	ldrb	r1, [r1, #3]
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	0e1b      	lsrs	r3, r3, #24
 8005d70:	4313      	orrs	r3, r2
 8005d72:	4a44      	ldr	r2, [pc, #272]	; (8005e84 <MX_LWIP_Init+0x278>)
 8005d74:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	061a      	lsls	r2, r3, #24
 8005d7c:	4b3f      	ldr	r3, [pc, #252]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	041b      	lsls	r3, r3, #16
 8005d82:	431a      	orrs	r2, r3
 8005d84:	4b3d      	ldr	r3, [pc, #244]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005d86:	789b      	ldrb	r3, [r3, #2]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	4a3b      	ldr	r2, [pc, #236]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005d8e:	78d2      	ldrb	r2, [r2, #3]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	061a      	lsls	r2, r3, #24
 8005d94:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	0619      	lsls	r1, r3, #24
 8005d9a:	4b38      	ldr	r3, [pc, #224]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	4319      	orrs	r1, r3
 8005da2:	4b36      	ldr	r3, [pc, #216]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005da4:	789b      	ldrb	r3, [r3, #2]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	430b      	orrs	r3, r1
 8005daa:	4934      	ldr	r1, [pc, #208]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005dac:	78c9      	ldrb	r1, [r1, #3]
 8005dae:	430b      	orrs	r3, r1
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005db6:	431a      	orrs	r2, r3
 8005db8:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	0619      	lsls	r1, r3, #24
 8005dbe:	4b2f      	ldr	r3, [pc, #188]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	041b      	lsls	r3, r3, #16
 8005dc4:	4319      	orrs	r1, r3
 8005dc6:	4b2d      	ldr	r3, [pc, #180]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005dc8:	789b      	ldrb	r3, [r3, #2]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	492b      	ldr	r1, [pc, #172]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005dd0:	78c9      	ldrb	r1, [r1, #3]
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	0619      	lsls	r1, r3, #24
 8005de2:	4b26      	ldr	r3, [pc, #152]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	041b      	lsls	r3, r3, #16
 8005de8:	4319      	orrs	r1, r3
 8005dea:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005dec:	789b      	ldrb	r3, [r3, #2]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	430b      	orrs	r3, r1
 8005df2:	4922      	ldr	r1, [pc, #136]	; (8005e7c <MX_LWIP_Init+0x270>)
 8005df4:	78c9      	ldrb	r1, [r1, #3]
 8005df6:	430b      	orrs	r3, r1
 8005df8:	0e1b      	lsrs	r3, r3, #24
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <MX_LWIP_Init+0x27c>)
 8005dfe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005e00:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <MX_LWIP_Init+0x280>)
 8005e02:	9302      	str	r3, [sp, #8]
 8005e04:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <MX_LWIP_Init+0x284>)
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <MX_LWIP_Init+0x27c>)
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <MX_LWIP_Init+0x278>)
 8005e10:	491b      	ldr	r1, [pc, #108]	; (8005e80 <MX_LWIP_Init+0x274>)
 8005e12:	4820      	ldr	r0, [pc, #128]	; (8005e94 <MX_LWIP_Init+0x288>)
 8005e14:	f005 fb94 	bl	800b540 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005e18:	481e      	ldr	r0, [pc, #120]	; (8005e94 <MX_LWIP_Init+0x288>)
 8005e1a:	f005 fd43 	bl	800b8a4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005e1e:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <MX_LWIP_Init+0x288>)
 8005e20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e24:	089b      	lsrs	r3, r3, #2
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005e30:	4818      	ldr	r0, [pc, #96]	; (8005e94 <MX_LWIP_Init+0x288>)
 8005e32:	f005 fd47 	bl	800b8c4 <netif_set_up>
 8005e36:	e002      	b.n	8005e3e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005e38:	4816      	ldr	r0, [pc, #88]	; (8005e94 <MX_LWIP_Init+0x288>)
 8005e3a:	f005 fdaf 	bl	800b99c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005e3e:	4916      	ldr	r1, [pc, #88]	; (8005e98 <MX_LWIP_Init+0x28c>)
 8005e40:	4814      	ldr	r0, [pc, #80]	; (8005e94 <MX_LWIP_Init+0x288>)
 8005e42:	f005 fe41 	bl	800bac8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005e46:	2224      	movs	r2, #36	; 0x24
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4814      	ldr	r0, [pc, #80]	; (8005e9c <MX_LWIP_Init+0x290>)
 8005e4c:	f00e fe07 	bl	8014a5e <memset>
  attributes.name = "EthLink";
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <MX_LWIP_Init+0x290>)
 8005e52:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <MX_LWIP_Init+0x294>)
 8005e54:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005e56:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <MX_LWIP_Init+0x290>)
 8005e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e5c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <MX_LWIP_Init+0x290>)
 8005e60:	2210      	movs	r2, #16
 8005e62:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005e64:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <MX_LWIP_Init+0x290>)
 8005e66:	490b      	ldr	r1, [pc, #44]	; (8005e94 <MX_LWIP_Init+0x288>)
 8005e68:	480e      	ldr	r0, [pc, #56]	; (8005ea4 <MX_LWIP_Init+0x298>)
 8005e6a:	f000 fd85 	bl	8006978 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005e6e:	bf00      	nop
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20041784 	.word	0x20041784
 8005e78:	20041788 	.word	0x20041788
 8005e7c:	2004178c 	.word	0x2004178c
 8005e80:	20041778 	.word	0x20041778
 8005e84:	2004177c 	.word	0x2004177c
 8005e88:	20041780 	.word	0x20041780
 8005e8c:	0800a8e9 	.word	0x0800a8e9
 8005e90:	080063a5 	.word	0x080063a5
 8005e94:	20041744 	.word	0x20041744
 8005e98:	08005ea9 	.word	0x08005ea9
 8005e9c:	20041790 	.word	0x20041790
 8005ea0:	08015a28 	.word	0x08015a28
 8005ea4:	08006631 	.word	0x08006631

08005ea8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005ece:	2320      	movs	r3, #32
 8005ed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ed2:	f3bf 8f4f 	dsb	sy
}
 8005ed6:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005ed8:	e00b      	b.n	8005ef2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005eda:	4a0d      	ldr	r2, [pc, #52]	; (8005f10 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dcf0      	bgt.n	8005eda <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ef8:	f3bf 8f4f 	dsb	sy
}
 8005efc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005efe:	f3bf 8f6f 	isb	sy
}
 8005f02:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	e000ed00 	.word	0xe000ed00

08005f14 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <HAL_ETH_RxCpltCallback+0x1c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 f847 	bl	8006fb4 <osSemaphoreRelease>
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20046140 	.word	0x20046140

08005f34 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <HAL_ETH_TxCpltCallback+0x1c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 f837 	bl	8006fb4 <osSemaphoreRelease>
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20046144 	.word	0x20046144

08005f54 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7fd f93f 	bl	80031e0 <HAL_ETH_GetDMAError>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f68:	2b80      	cmp	r3, #128	; 0x80
 8005f6a:	d104      	bne.n	8005f76 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005f6c:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <HAL_ETH_ErrorCallback+0x2c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f81f 	bl	8006fb4 <osSemaphoreRelease>
  }
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20046140 	.word	0x20046140

08005f84 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b0aa      	sub	sp, #168	; 0xa8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8005f9e:	f107 0310 	add.w	r3, r7, #16
 8005fa2:	2264      	movs	r2, #100	; 0x64
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f00e fd59 	bl	8014a5e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005fac:	4b85      	ldr	r3, [pc, #532]	; (80061c4 <low_level_init+0x240>)
 8005fae:	4a86      	ldr	r2, [pc, #536]	; (80061c8 <low_level_init+0x244>)
 8005fb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005fba:	23e1      	movs	r3, #225	; 0xe1
 8005fbc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005fca:	4a7e      	ldr	r2, [pc, #504]	; (80061c4 <low_level_init+0x240>)
 8005fcc:	f107 0308 	add.w	r3, r7, #8
 8005fd0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005fd2:	4b7c      	ldr	r3, [pc, #496]	; (80061c4 <low_level_init+0x240>)
 8005fd4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005fd8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005fda:	4b7a      	ldr	r3, [pc, #488]	; (80061c4 <low_level_init+0x240>)
 8005fdc:	4a7b      	ldr	r2, [pc, #492]	; (80061cc <low_level_init+0x248>)
 8005fde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005fe0:	4b78      	ldr	r3, [pc, #480]	; (80061c4 <low_level_init+0x240>)
 8005fe2:	4a7b      	ldr	r2, [pc, #492]	; (80061d0 <low_level_init+0x24c>)
 8005fe4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005fe6:	4b77      	ldr	r3, [pc, #476]	; (80061c4 <low_level_init+0x240>)
 8005fe8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005fec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005fee:	4875      	ldr	r0, [pc, #468]	; (80061c4 <low_level_init+0x240>)
 8005ff0:	f7fc faba 	bl	8002568 <HAL_ETH_Init>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005ffa:	2238      	movs	r2, #56	; 0x38
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4875      	ldr	r0, [pc, #468]	; (80061d4 <low_level_init+0x250>)
 8006000:	f00e fd2d 	bl	8014a5e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006004:	4b73      	ldr	r3, [pc, #460]	; (80061d4 <low_level_init+0x250>)
 8006006:	2221      	movs	r2, #33	; 0x21
 8006008:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800600a:	4b72      	ldr	r3, [pc, #456]	; (80061d4 <low_level_init+0x250>)
 800600c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006010:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006012:	4b70      	ldr	r3, [pc, #448]	; (80061d4 <low_level_init+0x250>)
 8006014:	2200      	movs	r2, #0
 8006016:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006018:	486f      	ldr	r0, [pc, #444]	; (80061d8 <low_level_init+0x254>)
 800601a:	f005 f94b 	bl	800b2b4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2206      	movs	r2, #6
 8006022:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006026:	4b67      	ldr	r3, [pc, #412]	; (80061c4 <low_level_init+0x240>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	781a      	ldrb	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006032:	4b64      	ldr	r3, [pc, #400]	; (80061c4 <low_level_init+0x240>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	785a      	ldrb	r2, [r3, #1]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800603e:	4b61      	ldr	r3, [pc, #388]	; (80061c4 <low_level_init+0x240>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	789a      	ldrb	r2, [r3, #2]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800604a:	4b5e      	ldr	r3, [pc, #376]	; (80061c4 <low_level_init+0x240>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	78da      	ldrb	r2, [r3, #3]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006056:	4b5b      	ldr	r3, [pc, #364]	; (80061c4 <low_level_init+0x240>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	791a      	ldrb	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006062:	4b58      	ldr	r3, [pc, #352]	; (80061c4 <low_level_init+0x240>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	795a      	ldrb	r2, [r3, #5]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006074:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800607c:	f043 030a 	orr.w	r3, r3, #10
 8006080:	b2da      	uxtb	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006088:	2200      	movs	r2, #0
 800608a:	2101      	movs	r1, #1
 800608c:	2001      	movs	r0, #1
 800608e:	f000 fe8f 	bl	8006db0 <osSemaphoreNew>
 8006092:	4603      	mov	r3, r0
 8006094:	4a51      	ldr	r2, [pc, #324]	; (80061dc <low_level_init+0x258>)
 8006096:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006098:	2200      	movs	r2, #0
 800609a:	2101      	movs	r1, #1
 800609c:	2001      	movs	r0, #1
 800609e:	f000 fe87 	bl	8006db0 <osSemaphoreNew>
 80060a2:	4603      	mov	r3, r0
 80060a4:	4a4e      	ldr	r2, [pc, #312]	; (80061e0 <low_level_init+0x25c>)
 80060a6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80060a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060ac:	2224      	movs	r2, #36	; 0x24
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f00e fcd4 	bl	8014a5e <memset>
  attributes.name = "EthIf";
 80060b6:	4b4b      	ldr	r3, [pc, #300]	; (80061e4 <low_level_init+0x260>)
 80060b8:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80060ba:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80060be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 80060c2:	2330      	movs	r3, #48	; 0x30
 80060c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80060c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060cc:	461a      	mov	r2, r3
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	4845      	ldr	r0, [pc, #276]	; (80061e8 <low_level_init+0x264>)
 80060d2:	f000 fc51 	bl	8006978 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80060d6:	4945      	ldr	r1, [pc, #276]	; (80061ec <low_level_init+0x268>)
 80060d8:	4845      	ldr	r0, [pc, #276]	; (80061f0 <low_level_init+0x26c>)
 80060da:	f7fc f80c 	bl	80020f6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80060de:	4844      	ldr	r0, [pc, #272]	; (80061f0 <low_level_init+0x26c>)
 80060e0:	f7fc f83b 	bl	800215a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80060e4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d164      	bne.n	80061b6 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80060ec:	4840      	ldr	r0, [pc, #256]	; (80061f0 <low_level_init+0x26c>)
 80060ee:	f7fc f881 	bl	80021f4 <LAN8742_GetLinkState>
 80060f2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80060f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	dc06      	bgt.n	800610c <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f005 fcb2 	bl	800ba68 <netif_set_link_down>
      netif_set_down(netif);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f005 fc49 	bl	800b99c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800610a:	e056      	b.n	80061ba <low_level_init+0x236>
      switch (PHYLinkState)
 800610c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006110:	3b02      	subs	r3, #2
 8006112:	2b03      	cmp	r3, #3
 8006114:	d82a      	bhi.n	800616c <low_level_init+0x1e8>
 8006116:	a201      	add	r2, pc, #4	; (adr r2, 800611c <low_level_init+0x198>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	0800612d 	.word	0x0800612d
 8006120:	0800613f 	.word	0x0800613f
 8006124:	0800614f 	.word	0x0800614f
 8006128:	0800615f 	.word	0x0800615f
        duplex = ETH_FULLDUPLEX_MODE;
 800612c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8006134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800613c:	e01f      	b.n	800617e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800613e:	2300      	movs	r3, #0
 8006140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8006144:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006148:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800614c:	e017      	b.n	800617e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800614e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8006156:	2300      	movs	r3, #0
 8006158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800615c:	e00f      	b.n	800617e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800615e:	2300      	movs	r3, #0
 8006160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800616a:	e008      	b.n	800617e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800616c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8006174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006178:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800617c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800617e:	f107 0310 	add.w	r3, r7, #16
 8006182:	4619      	mov	r1, r3
 8006184:	480f      	ldr	r0, [pc, #60]	; (80061c4 <low_level_init+0x240>)
 8006186:	f7fc fed7 	bl	8002f38 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800618a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8006190:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006196:	f107 0310 	add.w	r3, r7, #16
 800619a:	4619      	mov	r1, r3
 800619c:	4809      	ldr	r0, [pc, #36]	; (80061c4 <low_level_init+0x240>)
 800619e:	f7fc ffc2 	bl	8003126 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80061a2:	4808      	ldr	r0, [pc, #32]	; (80061c4 <low_level_init+0x240>)
 80061a4:	f7fc fa7a 	bl	800269c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f005 fb8b 	bl	800b8c4 <netif_set_up>
    netif_set_link_up(netif);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f005 fc26 	bl	800ba00 <netif_set_link_up>
}
 80061b4:	e001      	b.n	80061ba <low_level_init+0x236>
    Error_Handler();
 80061b6:	f7fb fc83 	bl	8001ac0 <Error_Handler>
}
 80061ba:	bf00      	nop
 80061bc:	37a8      	adds	r7, #168	; 0xa8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20046148 	.word	0x20046148
 80061c8:	40028000 	.word	0x40028000
 80061cc:	20001938 	.word	0x20001938
 80061d0:	20001898 	.word	0x20001898
 80061d4:	200461f8 	.word	0x200461f8
 80061d8:	08018568 	.word	0x08018568
 80061dc:	20046140 	.word	0x20046140
 80061e0:	20046144 	.word	0x20046144
 80061e4:	08015a30 	.word	0x08015a30
 80061e8:	08006351 	.word	0x08006351
 80061ec:	20001810 	.word	0x20001810
 80061f0:	20046230 	.word	0x20046230

080061f4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b092      	sub	sp, #72	; 0x48
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800620c:	f107 030c 	add.w	r3, r7, #12
 8006210:	2230      	movs	r2, #48	; 0x30
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f00e fc22 	bl	8014a5e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	2230      	movs	r2, #48	; 0x30
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f00e fc1b 	bl	8014a5e <memset>

  for(q = p; q != NULL; q = q->next)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	643b      	str	r3, [r7, #64]	; 0x40
 800622c:	e045      	b.n	80062ba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800622e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006230:	2b03      	cmp	r3, #3
 8006232:	d902      	bls.n	800623a <low_level_output+0x46>
      return ERR_IF;
 8006234:	f06f 030b 	mvn.w	r3, #11
 8006238:	e065      	b.n	8006306 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800623a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623c:	6859      	ldr	r1, [r3, #4]
 800623e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006240:	4613      	mov	r3, r2
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	3348      	adds	r3, #72	; 0x48
 800624a:	443b      	add	r3, r7
 800624c:	3b3c      	subs	r3, #60	; 0x3c
 800624e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006252:	895b      	ldrh	r3, [r3, #10]
 8006254:	4619      	mov	r1, r3
 8006256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006258:	4613      	mov	r3, r2
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	3348      	adds	r3, #72	; 0x48
 8006262:	443b      	add	r3, r7
 8006264:	3b38      	subs	r3, #56	; 0x38
 8006266:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800626a:	2b00      	cmp	r3, #0
 800626c:	d011      	beq.n	8006292 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800626e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006270:	1e5a      	subs	r2, r3, #1
 8006272:	f107 000c 	add.w	r0, r7, #12
 8006276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006278:	460b      	mov	r3, r1
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	440b      	add	r3, r1
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	18c1      	adds	r1, r0, r3
 8006282:	4613      	mov	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	3348      	adds	r3, #72	; 0x48
 800628c:	443b      	add	r3, r7
 800628e:	3b34      	subs	r3, #52	; 0x34
 8006290:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800629a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800629c:	4613      	mov	r3, r2
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	4413      	add	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	3348      	adds	r3, #72	; 0x48
 80062a6:	443b      	add	r3, r7
 80062a8:	3b34      	subs	r3, #52	; 0x34
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
    }

    i++;
 80062ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b0:	3301      	adds	r3, #1
 80062b2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80062b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	643b      	str	r3, [r7, #64]	; 0x40
 80062ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1b6      	bne.n	800622e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	891b      	ldrh	r3, [r3, #8]
 80062c4:	461a      	mov	r2, r3
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <low_level_output+0x11c>)
 80062c8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80062ca:	4a11      	ldr	r2, [pc, #68]	; (8006310 <low_level_output+0x11c>)
 80062cc:	f107 030c 	add.w	r3, r7, #12
 80062d0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80062d2:	4a0f      	ldr	r2, [pc, #60]	; (8006310 <low_level_output+0x11c>)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80062d8:	6838      	ldr	r0, [r7, #0]
 80062da:	f006 f849 	bl	800c370 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80062de:	490c      	ldr	r1, [pc, #48]	; (8006310 <low_level_output+0x11c>)
 80062e0:	480c      	ldr	r0, [pc, #48]	; (8006314 <low_level_output+0x120>)
 80062e2:	f7fc facb 	bl	800287c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80062e6:	bf00      	nop
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <low_level_output+0x124>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fdf9 	bl	8006ee8 <osSemaphoreAcquire>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1f5      	bne.n	80062e8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80062fc:	4805      	ldr	r0, [pc, #20]	; (8006314 <low_level_output+0x120>)
 80062fe:	f7fc fc5d 	bl	8002bbc <HAL_ETH_ReleaseTxPacket>

  return errval;
 8006302:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006306:	4618      	mov	r0, r3
 8006308:	3748      	adds	r7, #72	; 0x48
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200461f8 	.word	0x200461f8
 8006314:	20046148 	.word	0x20046148
 8006318:	20046144 	.word	0x20046144

0800631c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <low_level_input+0x2c>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006330:	f107 030c 	add.w	r3, r7, #12
 8006334:	4619      	mov	r1, r3
 8006336:	4805      	ldr	r0, [pc, #20]	; (800634c <low_level_input+0x30>)
 8006338:	f7fc fafc 	bl	8002934 <HAL_ETH_ReadData>
  }

  return p;
 800633c:	68fb      	ldr	r3, [r7, #12]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	2004613c 	.word	0x2004613c
 800634c:	20046148 	.word	0x20046148

08006350 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006360:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <ethernetif_input+0x50>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fdbd 	bl	8006ee8 <osSemaphoreAcquire>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1f5      	bne.n	8006360 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006374:	68b8      	ldr	r0, [r7, #8]
 8006376:	f7ff ffd1 	bl	800631c <low_level_input>
 800637a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	4798      	blx	r3
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f005 ff46 	bl	800c224 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1ea      	bne.n	8006374 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800639e:	e7df      	b.n	8006360 <ethernetif_input+0x10>
 80063a0:	20046140 	.word	0x20046140

080063a4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <ethernetif_init+0x1c>
 80063b2:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <ethernetif_init+0x48>)
 80063b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80063b8:	490d      	ldr	r1, [pc, #52]	; (80063f0 <ethernetif_init+0x4c>)
 80063ba:	480e      	ldr	r0, [pc, #56]	; (80063f4 <ethernetif_init+0x50>)
 80063bc:	f00e fbec 	bl	8014b98 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2273      	movs	r2, #115	; 0x73
 80063c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2274      	movs	r2, #116	; 0x74
 80063cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <ethernetif_init+0x54>)
 80063d4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a08      	ldr	r2, [pc, #32]	; (80063fc <ethernetif_init+0x58>)
 80063da:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fdd1 	bl	8005f84 <low_level_init>

  return ERR_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	08015a38 	.word	0x08015a38
 80063f0:	08015a54 	.word	0x08015a54
 80063f4:	08015a64 	.word	0x08015a64
 80063f8:	08012911 	.word	0x08012911
 80063fc:	080061f5 	.word	0x080061f5

08006400 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800640c:	68f9      	ldr	r1, [r7, #12]
 800640e:	4809      	ldr	r0, [pc, #36]	; (8006434 <pbuf_free_custom+0x34>)
 8006410:	f005 f840 	bl	800b494 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006414:	4b08      	ldr	r3, [pc, #32]	; (8006438 <pbuf_free_custom+0x38>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d107      	bne.n	800642c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <pbuf_free_custom+0x38>)
 800641e:	2200      	movs	r2, #0
 8006420:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006422:	4b06      	ldr	r3, [pc, #24]	; (800643c <pbuf_free_custom+0x3c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fdc4 	bl	8006fb4 <osSemaphoreRelease>
  }
}
 800642c:	bf00      	nop
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	08018568 	.word	0x08018568
 8006438:	2004613c 	.word	0x2004613c
 800643c:	20046140 	.word	0x20046140

08006440 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006444:	f7fb ff7e 	bl	8002344 <HAL_GetTick>
 8006448:	4603      	mov	r3, r0
}
 800644a:	4618      	mov	r0, r3
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08e      	sub	sp, #56	; 0x38
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	60da      	str	r2, [r3, #12]
 8006466:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a44      	ldr	r2, [pc, #272]	; (8006580 <HAL_ETH_MspInit+0x130>)
 800646e:	4293      	cmp	r3, r2
 8006470:	f040 8081 	bne.w	8006576 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006474:	4b43      	ldr	r3, [pc, #268]	; (8006584 <HAL_ETH_MspInit+0x134>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	4a42      	ldr	r2, [pc, #264]	; (8006584 <HAL_ETH_MspInit+0x134>)
 800647a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800647e:	6313      	str	r3, [r2, #48]	; 0x30
 8006480:	4b40      	ldr	r3, [pc, #256]	; (8006584 <HAL_ETH_MspInit+0x134>)
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006488:	623b      	str	r3, [r7, #32]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	4b3d      	ldr	r3, [pc, #244]	; (8006584 <HAL_ETH_MspInit+0x134>)
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	4a3c      	ldr	r2, [pc, #240]	; (8006584 <HAL_ETH_MspInit+0x134>)
 8006492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006496:	6313      	str	r3, [r2, #48]	; 0x30
 8006498:	4b3a      	ldr	r3, [pc, #232]	; (8006584 <HAL_ETH_MspInit+0x134>)
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4b37      	ldr	r3, [pc, #220]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	4a36      	ldr	r2, [pc, #216]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064ae:	6313      	str	r3, [r2, #48]	; 0x30
 80064b0:	4b34      	ldr	r3, [pc, #208]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80064bc:	4b31      	ldr	r3, [pc, #196]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	4a30      	ldr	r2, [pc, #192]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c6:	6313      	str	r3, [r2, #48]	; 0x30
 80064c8:	4b2e      	ldr	r3, [pc, #184]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064d4:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064da:	f043 0304 	orr.w	r3, r3, #4
 80064de:	6313      	str	r3, [r2, #48]	; 0x30
 80064e0:	4b28      	ldr	r3, [pc, #160]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ec:	4b25      	ldr	r3, [pc, #148]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	4a24      	ldr	r2, [pc, #144]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	6313      	str	r3, [r2, #48]	; 0x30
 80064f8:	4b22      	ldr	r3, [pc, #136]	; (8006584 <HAL_ETH_MspInit+0x134>)
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8006504:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650a:	2302      	movs	r3, #2
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650e:	2300      	movs	r3, #0
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006512:	2303      	movs	r3, #3
 8006514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006516:	230b      	movs	r3, #11
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800651a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800651e:	4619      	mov	r1, r3
 8006520:	4819      	ldr	r0, [pc, #100]	; (8006588 <HAL_ETH_MspInit+0x138>)
 8006522:	f7fd fa89 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006526:	2332      	movs	r3, #50	; 0x32
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800652a:	2302      	movs	r3, #2
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652e:	2300      	movs	r3, #0
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006532:	2303      	movs	r3, #3
 8006534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006536:	230b      	movs	r3, #11
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800653a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800653e:	4619      	mov	r1, r3
 8006540:	4812      	ldr	r0, [pc, #72]	; (800658c <HAL_ETH_MspInit+0x13c>)
 8006542:	f7fd fa79 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006546:	2386      	movs	r3, #134	; 0x86
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800654a:	2302      	movs	r3, #2
 800654c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654e:	2300      	movs	r3, #0
 8006550:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006552:	2303      	movs	r3, #3
 8006554:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006556:	230b      	movs	r3, #11
 8006558:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800655a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800655e:	4619      	mov	r1, r3
 8006560:	480b      	ldr	r0, [pc, #44]	; (8006590 <HAL_ETH_MspInit+0x140>)
 8006562:	f7fd fa69 	bl	8003a38 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006566:	2200      	movs	r2, #0
 8006568:	2105      	movs	r1, #5
 800656a:	203d      	movs	r0, #61	; 0x3d
 800656c:	f7fb ffd2 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006570:	203d      	movs	r0, #61	; 0x3d
 8006572:	f7fb ffeb 	bl	800254c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006576:	bf00      	nop
 8006578:	3738      	adds	r7, #56	; 0x38
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40028000 	.word	0x40028000
 8006584:	40023800 	.word	0x40023800
 8006588:	40021800 	.word	0x40021800
 800658c:	40020800 	.word	0x40020800
 8006590:	40020000 	.word	0x40020000

08006594 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006598:	4802      	ldr	r0, [pc, #8]	; (80065a4 <ETH_PHY_IO_Init+0x10>)
 800659a:	f7fc fddf 	bl	800315c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20046148 	.word	0x20046148

080065a8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  return 0;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	68f9      	ldr	r1, [r7, #12]
 80065ca:	4807      	ldr	r0, [pc, #28]	; (80065e8 <ETH_PHY_IO_ReadReg+0x30>)
 80065cc:	f7fc fc20 	bl	8002e10 <HAL_ETH_ReadPHYRegister>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80065d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065da:	e000      	b.n	80065de <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20046148 	.word	0x20046148

080065ec <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	68f9      	ldr	r1, [r7, #12]
 80065fe:	4807      	ldr	r0, [pc, #28]	; (800661c <ETH_PHY_IO_WriteReg+0x30>)
 8006600:	f7fc fc51 	bl	8002ea6 <HAL_ETH_WritePHYRegister>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800660e:	e000      	b.n	8006612 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20046148 	.word	0x20046148

08006620 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006624:	f7fb fe8e 	bl	8002344 <HAL_GetTick>
 8006628:	4603      	mov	r3, r0
}
 800662a:	4618      	mov	r0, r3
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b0a0      	sub	sp, #128	; 0x80
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006638:	f107 0308 	add.w	r3, r7, #8
 800663c:	2264      	movs	r2, #100	; 0x64
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f00e fa0c 	bl	8014a5e <memset>
  int32_t PHYLinkState = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800664e:	2300      	movs	r3, #0
 8006650:	67bb      	str	r3, [r7, #120]	; 0x78
 8006652:	2300      	movs	r3, #0
 8006654:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800665a:	483a      	ldr	r0, [pc, #232]	; (8006744 <ethernet_link_thread+0x114>)
 800665c:	f7fb fdca 	bl	80021f4 <LAN8742_GetLinkState>
 8006660:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006668:	089b      	lsrs	r3, r3, #2
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00c      	beq.n	800668e <ethernet_link_thread+0x5e>
 8006674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006676:	2b01      	cmp	r3, #1
 8006678:	dc09      	bgt.n	800668e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800667a:	4833      	ldr	r0, [pc, #204]	; (8006748 <ethernet_link_thread+0x118>)
 800667c:	f7fc f87e 	bl	800277c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006680:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006682:	f005 f98b 	bl	800b99c <netif_set_down>
    netif_set_link_down(netif);
 8006686:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006688:	f005 f9ee 	bl	800ba68 <netif_set_link_down>
 800668c:	e055      	b.n	800673a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800668e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006690:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d14e      	bne.n	800673a <ethernet_link_thread+0x10a>
 800669c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800669e:	2b01      	cmp	r3, #1
 80066a0:	dd4b      	ble.n	800673a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80066a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a4:	3b02      	subs	r3, #2
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d82a      	bhi.n	8006700 <ethernet_link_thread+0xd0>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <ethernet_link_thread+0x80>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066d3 	.word	0x080066d3
 80066b8:	080066e3 	.word	0x080066e3
 80066bc:	080066f3 	.word	0x080066f3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80066c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80066c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80066cc:	2301      	movs	r3, #1
 80066ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80066d0:	e017      	b.n	8006702 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80066d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80066dc:	2301      	movs	r3, #1
 80066de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80066e0:	e00f      	b.n	8006702 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80066e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066e6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80066e8:	2300      	movs	r3, #0
 80066ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80066ec:	2301      	movs	r3, #1
 80066ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80066f0:	e007      	b.n	8006702 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80066f6:	2300      	movs	r3, #0
 80066f8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80066fa:	2301      	movs	r3, #1
 80066fc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80066fe:	e000      	b.n	8006702 <ethernet_link_thread+0xd2>
    default:
      break;
 8006700:	bf00      	nop
    }

    if(linkchanged)
 8006702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d018      	beq.n	800673a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006708:	f107 0308 	add.w	r3, r7, #8
 800670c:	4619      	mov	r1, r3
 800670e:	480e      	ldr	r0, [pc, #56]	; (8006748 <ethernet_link_thread+0x118>)
 8006710:	f7fc fc12 	bl	8002f38 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006716:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800671a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4619      	mov	r1, r3
 8006722:	4809      	ldr	r0, [pc, #36]	; (8006748 <ethernet_link_thread+0x118>)
 8006724:	f7fc fcff 	bl	8003126 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006728:	4807      	ldr	r0, [pc, #28]	; (8006748 <ethernet_link_thread+0x118>)
 800672a:	f7fb ffb7 	bl	800269c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800672e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006730:	f005 f8c8 	bl	800b8c4 <netif_set_up>
      netif_set_link_up(netif);
 8006734:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006736:	f005 f963 	bl	800ba00 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800673a:	2064      	movs	r0, #100	; 0x64
 800673c:	f000 f9c2 	bl	8006ac4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006740:	e78b      	b.n	800665a <ethernet_link_thread+0x2a>
 8006742:	bf00      	nop
 8006744:	20046230 	.word	0x20046230
 8006748:	20046148 	.word	0x20046148

0800674c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006754:	4812      	ldr	r0, [pc, #72]	; (80067a0 <HAL_ETH_RxAllocateCallback+0x54>)
 8006756:	f004 fe29 	bl	800b3ac <memp_malloc_pool>
 800675a:	60f8      	str	r0, [r7, #12]
  if (p)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d014      	beq.n	800678c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f103 0220 	add.w	r2, r3, #32
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a0d      	ldr	r2, [pc, #52]	; (80067a4 <HAL_ETH_RxAllocateCallback+0x58>)
 8006770:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800677a:	9201      	str	r2, [sp, #4]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2241      	movs	r2, #65	; 0x41
 8006782:	2100      	movs	r1, #0
 8006784:	2000      	movs	r0, #0
 8006786:	f005 fb93 	bl	800beb0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800678a:	e005      	b.n	8006798 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	08018568 	.word	0x08018568
 80067a4:	08006401 	.word	0x08006401
 80067a8:	2004613c 	.word	0x2004613c

080067ac <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3b20      	subs	r3, #32
 80067ca:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2200      	movs	r2, #0
 80067d6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	887a      	ldrh	r2, [r7, #2]
 80067dc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e003      	b.n	80067f6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	e009      	b.n	8006818 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	891a      	ldrh	r2, [r3, #8]
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	4413      	add	r3, r2
 800680c:	b29a      	uxth	r2, r3
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f2      	bne.n	8006804 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800681e:	887b      	ldrh	r3, [r7, #2]
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff fb4a 	bl	8005ebc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006828:	bf00      	nop
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f005 fcf3 	bl	800c224 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006846:	b480      	push	{r7}
 8006848:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800684a:	bf00      	nop
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800685a:	f3ef 8305 	mrs	r3, IPSR
 800685e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006860:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006866:	f3ef 8310 	mrs	r3, PRIMASK
 800686a:	607b      	str	r3, [r7, #4]
  return(result);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006872:	f3ef 8311 	mrs	r3, BASEPRI
 8006876:	603b      	str	r3, [r7, #0]
  return(result);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <osKernelInitialize+0x3a>
 800687e:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <osKernelInitialize+0x64>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d103      	bne.n	800688e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006886:	f06f 0305 	mvn.w	r3, #5
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	e00c      	b.n	80068a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <osKernelInitialize+0x64>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d105      	bne.n	80068a2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <osKernelInitialize+0x64>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	e002      	b.n	80068a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20046250 	.word	0x20046250

080068bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c2:	f3ef 8305 	mrs	r3, IPSR
 80068c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80068c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10f      	bne.n	80068ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ce:	f3ef 8310 	mrs	r3, PRIMASK
 80068d2:	607b      	str	r3, [r7, #4]
  return(result);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d105      	bne.n	80068e6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068da:	f3ef 8311 	mrs	r3, BASEPRI
 80068de:	603b      	str	r3, [r7, #0]
  return(result);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <osKernelStart+0x3a>
 80068e6:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <osKernelStart+0x68>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d103      	bne.n	80068f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80068ee:	f06f 0305 	mvn.w	r3, #5
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	e010      	b.n	8006918 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <osKernelStart+0x68>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d109      	bne.n	8006912 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068fe:	f7ff ffa2 	bl	8006846 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <osKernelStart+0x68>)
 8006904:	2202      	movs	r2, #2
 8006906:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006908:	f002 f906 	bl	8008b18 <vTaskStartScheduler>
      stat = osOK;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e002      	b.n	8006918 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006916:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006918:	68fb      	ldr	r3, [r7, #12]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20046250 	.word	0x20046250

08006928 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800692e:	f3ef 8305 	mrs	r3, IPSR
 8006932:	60bb      	str	r3, [r7, #8]
  return(result);
 8006934:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10f      	bne.n	800695a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800693a:	f3ef 8310 	mrs	r3, PRIMASK
 800693e:	607b      	str	r3, [r7, #4]
  return(result);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d105      	bne.n	8006952 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006946:	f3ef 8311 	mrs	r3, BASEPRI
 800694a:	603b      	str	r3, [r7, #0]
  return(result);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <osKernelGetTickCount+0x3a>
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <osKernelGetTickCount+0x4c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d103      	bne.n	8006962 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800695a:	f002 fa0f 	bl	8008d7c <xTaskGetTickCountFromISR>
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	e002      	b.n	8006968 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006962:	f002 f9fb 	bl	8008d5c <xTaskGetTickCount>
 8006966:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006968:	68fb      	ldr	r3, [r7, #12]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20046250 	.word	0x20046250

08006978 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006978:	b580      	push	{r7, lr}
 800697a:	b090      	sub	sp, #64	; 0x40
 800697c:	af04      	add	r7, sp, #16
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006988:	f3ef 8305 	mrs	r3, IPSR
 800698c:	61fb      	str	r3, [r7, #28]
  return(result);
 800698e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006990:	2b00      	cmp	r3, #0
 8006992:	f040 808f 	bne.w	8006ab4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006996:	f3ef 8310 	mrs	r3, PRIMASK
 800699a:	61bb      	str	r3, [r7, #24]
  return(result);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d105      	bne.n	80069ae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069a2:	f3ef 8311 	mrs	r3, BASEPRI
 80069a6:	617b      	str	r3, [r7, #20]
  return(result);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <osThreadNew+0x3e>
 80069ae:	4b44      	ldr	r3, [pc, #272]	; (8006ac0 <osThreadNew+0x148>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d07e      	beq.n	8006ab4 <osThreadNew+0x13c>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d07b      	beq.n	8006ab4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80069bc:	2380      	movs	r3, #128	; 0x80
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80069c0:	2318      	movs	r3, #24
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80069c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d045      	beq.n	8006a60 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <osThreadNew+0x6a>
        name = attr->name;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <osThreadNew+0x90>
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	2b38      	cmp	r3, #56	; 0x38
 80069fa:	d805      	bhi.n	8006a08 <osThreadNew+0x90>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <osThreadNew+0x94>
        return (NULL);
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e054      	b.n	8006ab6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	089b      	lsrs	r3, r3, #2
 8006a1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <osThreadNew+0xca>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2bbb      	cmp	r3, #187	; 0xbb
 8006a2a:	d90a      	bls.n	8006a42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d006      	beq.n	8006a42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <osThreadNew+0xca>
        mem = 1;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	623b      	str	r3, [r7, #32]
 8006a40:	e010      	b.n	8006a64 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10c      	bne.n	8006a64 <osThreadNew+0xec>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d108      	bne.n	8006a64 <osThreadNew+0xec>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <osThreadNew+0xec>
          mem = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	e001      	b.n	8006a64 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d110      	bne.n	8006a8c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a72:	9202      	str	r2, [sp, #8]
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f001 fe53 	bl	800872c <xTaskCreateStatic>
 8006a86:	4603      	mov	r3, r0
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	e013      	b.n	8006ab4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d110      	bne.n	8006ab4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	f107 0310 	add.w	r3, r7, #16
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f001 fea4 	bl	80087f2 <xTaskCreate>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d001      	beq.n	8006ab4 <osThreadNew+0x13c>
          hTask = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ab4:	693b      	ldr	r3, [r7, #16]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3730      	adds	r7, #48	; 0x30
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20046250 	.word	0x20046250

08006ac4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006acc:	f3ef 8305 	mrs	r3, IPSR
 8006ad0:	613b      	str	r3, [r7, #16]
  return(result);
 8006ad2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10f      	bne.n	8006af8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8006adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ae4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <osDelay+0x3c>
 8006af0:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <osDelay+0x58>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d103      	bne.n	8006b00 <osDelay+0x3c>
    stat = osErrorISR;
 8006af8:	f06f 0305 	mvn.w	r3, #5
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	e007      	b.n	8006b10 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 ffce 	bl	8008aac <vTaskDelay>
    }
  }

  return (stat);
 8006b10:	697b      	ldr	r3, [r7, #20]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20046250 	.word	0x20046250

08006b20 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	; 0x28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b2c:	f3ef 8305 	mrs	r3, IPSR
 8006b30:	613b      	str	r3, [r7, #16]
  return(result);
 8006b32:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 8085 	bne.w	8006c44 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b46:	f3ef 8311 	mrs	r3, BASEPRI
 8006b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <osMutexNew+0x3a>
 8006b52:	4b3f      	ldr	r3, [pc, #252]	; (8006c50 <osMutexNew+0x130>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d074      	beq.n	8006c44 <osMutexNew+0x124>
    if (attr != NULL) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	623b      	str	r3, [r7, #32]
 8006b66:	e001      	b.n	8006b6c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <osMutexNew+0x5c>
      rmtx = 1U;
 8006b76:	2301      	movs	r3, #1
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	e001      	b.n	8006b80 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d15c      	bne.n	8006c44 <osMutexNew+0x124>
      mem = -1;
 8006b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b8e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d015      	beq.n	8006bc2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d006      	beq.n	8006bac <osMutexNew+0x8c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b4f      	cmp	r3, #79	; 0x4f
 8006ba4:	d902      	bls.n	8006bac <osMutexNew+0x8c>
          mem = 1;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	61bb      	str	r3, [r7, #24]
 8006baa:	e00c      	b.n	8006bc6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d108      	bne.n	8006bc6 <osMutexNew+0xa6>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <osMutexNew+0xa6>
            mem = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	e001      	b.n	8006bc6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d112      	bne.n	8006bf2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	2004      	movs	r0, #4
 8006bda:	f000 fe1a 	bl	8007812 <xQueueCreateMutexStatic>
 8006bde:	6278      	str	r0, [r7, #36]	; 0x24
 8006be0:	e016      	b.n	8006c10 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	4619      	mov	r1, r3
 8006be8:	2001      	movs	r0, #1
 8006bea:	f000 fe12 	bl	8007812 <xQueueCreateMutexStatic>
 8006bee:	6278      	str	r0, [r7, #36]	; 0x24
 8006bf0:	e00e      	b.n	8006c10 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10b      	bne.n	8006c10 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006bfe:	2004      	movs	r0, #4
 8006c00:	f000 fdef 	bl	80077e2 <xQueueCreateMutex>
 8006c04:	6278      	str	r0, [r7, #36]	; 0x24
 8006c06:	e003      	b.n	8006c10 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f000 fdea 	bl	80077e2 <xQueueCreateMutex>
 8006c0e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00c      	beq.n	8006c30 <osMutexNew+0x110>
        if (attr != NULL) {
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <osMutexNew+0x104>
          name = attr->name;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	e001      	b.n	8006c28 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006c28:	6979      	ldr	r1, [r7, #20]
 8006c2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c2c:	f001 fcf6 	bl	800861c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d006      	beq.n	8006c44 <osMutexNew+0x124>
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3728      	adds	r7, #40	; 0x28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20046250 	.word	0x20046250

08006c54 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f023 0301 	bic.w	r3, r3, #1
 8006c64:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c72:	f3ef 8305 	mrs	r3, IPSR
 8006c76:	613b      	str	r3, [r7, #16]
  return(result);
 8006c78:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10f      	bne.n	8006c9e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c82:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d105      	bne.n	8006c96 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <osMutexAcquire+0x52>
 8006c96:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <osMutexAcquire+0xb8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d103      	bne.n	8006ca6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006c9e:	f06f 0305 	mvn.w	r3, #5
 8006ca2:	61fb      	str	r3, [r7, #28]
 8006ca4:	e02c      	b.n	8006d00 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d103      	bne.n	8006cb4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006cac:	f06f 0303 	mvn.w	r3, #3
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	e025      	b.n	8006d00 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d011      	beq.n	8006cde <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	69b8      	ldr	r0, [r7, #24]
 8006cbe:	f000 fdf9 	bl	80078b4 <xQueueTakeMutexRecursive>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d01b      	beq.n	8006d00 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006cce:	f06f 0301 	mvn.w	r3, #1
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	e014      	b.n	8006d00 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006cd6:	f06f 0302 	mvn.w	r3, #2
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	e010      	b.n	8006d00 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	69b8      	ldr	r0, [r7, #24]
 8006ce2:	f001 f9b3 	bl	800804c <xQueueSemaphoreTake>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d009      	beq.n	8006d00 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006cf2:	f06f 0301 	mvn.w	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e002      	b.n	8006d00 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006cfa:	f06f 0302 	mvn.w	r3, #2
 8006cfe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006d00:	69fb      	ldr	r3, [r7, #28]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20046250 	.word	0x20046250

08006d10 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f023 0301 	bic.w	r3, r3, #1
 8006d1e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d2c:	f3ef 8305 	mrs	r3, IPSR
 8006d30:	613b      	str	r3, [r7, #16]
  return(result);
 8006d32:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10f      	bne.n	8006d58 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d38:	f3ef 8310 	mrs	r3, PRIMASK
 8006d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d105      	bne.n	8006d50 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d44:	f3ef 8311 	mrs	r3, BASEPRI
 8006d48:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <osMutexRelease+0x50>
 8006d50:	4b16      	ldr	r3, [pc, #88]	; (8006dac <osMutexRelease+0x9c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d103      	bne.n	8006d60 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006d58:	f06f 0305 	mvn.w	r3, #5
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	e01f      	b.n	8006da0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d103      	bne.n	8006d6e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006d66:	f06f 0303 	mvn.w	r3, #3
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	e018      	b.n	8006da0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d009      	beq.n	8006d88 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006d74:	69b8      	ldr	r0, [r7, #24]
 8006d76:	f000 fd67 	bl	8007848 <xQueueGiveMutexRecursive>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d00f      	beq.n	8006da0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006d80:	f06f 0302 	mvn.w	r3, #2
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	e00b      	b.n	8006da0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	69b8      	ldr	r0, [r7, #24]
 8006d90:	f000 fe3a 	bl	8007a08 <xQueueGenericSend>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d002      	beq.n	8006da0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006d9a:	f06f 0302 	mvn.w	r3, #2
 8006d9e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006da0:	69fb      	ldr	r3, [r7, #28]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20046250 	.word	0x20046250

08006db0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	; 0x30
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dc0:	f3ef 8305 	mrs	r3, IPSR
 8006dc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006dc6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 8086 	bne.w	8006eda <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dce:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd2:	617b      	str	r3, [r7, #20]
  return(result);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dda:	f3ef 8311 	mrs	r3, BASEPRI
 8006dde:	613b      	str	r3, [r7, #16]
  return(result);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <osSemaphoreNew+0x3e>
 8006de6:	4b3f      	ldr	r3, [pc, #252]	; (8006ee4 <osSemaphoreNew+0x134>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d075      	beq.n	8006eda <osSemaphoreNew+0x12a>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d072      	beq.n	8006eda <osSemaphoreNew+0x12a>
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d86e      	bhi.n	8006eda <osSemaphoreNew+0x12a>
    mem = -1;
 8006dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d015      	beq.n	8006e34 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d006      	beq.n	8006e1e <osSemaphoreNew+0x6e>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2b4f      	cmp	r3, #79	; 0x4f
 8006e16:	d902      	bls.n	8006e1e <osSemaphoreNew+0x6e>
        mem = 1;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	623b      	str	r3, [r7, #32]
 8006e1c:	e00c      	b.n	8006e38 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d108      	bne.n	8006e38 <osSemaphoreNew+0x88>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d104      	bne.n	8006e38 <osSemaphoreNew+0x88>
          mem = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	623b      	str	r3, [r7, #32]
 8006e32:	e001      	b.n	8006e38 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e3e:	d04c      	beq.n	8006eda <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d128      	bne.n	8006e98 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d10a      	bne.n	8006e62 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2203      	movs	r2, #3
 8006e52:	9200      	str	r2, [sp, #0]
 8006e54:	2200      	movs	r2, #0
 8006e56:	2100      	movs	r1, #0
 8006e58:	2001      	movs	r0, #1
 8006e5a:	f000 fbc1 	bl	80075e0 <xQueueGenericCreateStatic>
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e60:	e005      	b.n	8006e6e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006e62:	2203      	movs	r2, #3
 8006e64:	2100      	movs	r1, #0
 8006e66:	2001      	movs	r0, #1
 8006e68:	f000 fc3c 	bl	80076e4 <xQueueGenericCreate>
 8006e6c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d022      	beq.n	8006eba <osSemaphoreNew+0x10a>
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01f      	beq.n	8006eba <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2100      	movs	r1, #0
 8006e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e82:	f000 fdc1 	bl	8007a08 <xQueueGenericSend>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d016      	beq.n	8006eba <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e8e:	f001 fa77 	bl	8008380 <vQueueDelete>
            hSemaphore = NULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
 8006e96:	e010      	b.n	8006eba <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d108      	bne.n	8006eb0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fd3c 	bl	8007924 <xQueueCreateCountingSemaphoreStatic>
 8006eac:	6278      	str	r0, [r7, #36]	; 0x24
 8006eae:	e004      	b.n	8006eba <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fd71 	bl	800799a <xQueueCreateCountingSemaphore>
 8006eb8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00c      	beq.n	8006eda <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <osSemaphoreNew+0x11e>
          name = attr->name;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	61fb      	str	r3, [r7, #28]
 8006ecc:	e001      	b.n	8006ed2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006ed2:	69f9      	ldr	r1, [r7, #28]
 8006ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ed6:	f001 fba1 	bl	800861c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3728      	adds	r7, #40	; 0x28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20046250 	.word	0x20046250

08006ee8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006f00:	f06f 0303 	mvn.w	r3, #3
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	e04b      	b.n	8006fa0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f08:	f3ef 8305 	mrs	r3, IPSR
 8006f0c:	617b      	str	r3, [r7, #20]
  return(result);
 8006f0e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10f      	bne.n	8006f34 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f14:	f3ef 8310 	mrs	r3, PRIMASK
 8006f18:	613b      	str	r3, [r7, #16]
  return(result);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d105      	bne.n	8006f2c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f20:	f3ef 8311 	mrs	r3, BASEPRI
 8006f24:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d026      	beq.n	8006f7a <osSemaphoreAcquire+0x92>
 8006f2c:	4b1f      	ldr	r3, [pc, #124]	; (8006fac <osSemaphoreAcquire+0xc4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d122      	bne.n	8006f7a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006f3a:	f06f 0303 	mvn.w	r3, #3
 8006f3e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006f40:	e02d      	b.n	8006f9e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	69b8      	ldr	r0, [r7, #24]
 8006f50:	f001 f990 	bl	8008274 <xQueueReceiveFromISR>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d003      	beq.n	8006f62 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006f5a:	f06f 0302 	mvn.w	r3, #2
 8006f5e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006f60:	e01d      	b.n	8006f9e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01a      	beq.n	8006f9e <osSemaphoreAcquire+0xb6>
 8006f68:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <osSemaphoreAcquire+0xc8>)
 8006f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006f78:	e011      	b.n	8006f9e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	69b8      	ldr	r0, [r7, #24]
 8006f7e:	f001 f865 	bl	800804c <xQueueSemaphoreTake>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d00b      	beq.n	8006fa0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006f8e:	f06f 0301 	mvn.w	r3, #1
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	e004      	b.n	8006fa0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006f96:	f06f 0302 	mvn.w	r3, #2
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	e000      	b.n	8006fa0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006f9e:	bf00      	nop
      }
    }
  }

  return (stat);
 8006fa0:	69fb      	ldr	r3, [r7, #28]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20046250 	.word	0x20046250
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006fca:	f06f 0303 	mvn.w	r3, #3
 8006fce:	61fb      	str	r3, [r7, #28]
 8006fd0:	e03e      	b.n	8007050 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd2:	f3ef 8305 	mrs	r3, IPSR
 8006fd6:	617b      	str	r3, [r7, #20]
  return(result);
 8006fd8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10f      	bne.n	8006ffe <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fde:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe2:	613b      	str	r3, [r7, #16]
  return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fea:	f3ef 8311 	mrs	r3, BASEPRI
 8006fee:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d01e      	beq.n	8007034 <osSemaphoreRelease+0x80>
 8006ff6:	4b19      	ldr	r3, [pc, #100]	; (800705c <osSemaphoreRelease+0xa8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d11a      	bne.n	8007034 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007002:	f107 0308 	add.w	r3, r7, #8
 8007006:	4619      	mov	r1, r3
 8007008:	69b8      	ldr	r0, [r7, #24]
 800700a:	f000 fea3 	bl	8007d54 <xQueueGiveFromISR>
 800700e:	4603      	mov	r3, r0
 8007010:	2b01      	cmp	r3, #1
 8007012:	d003      	beq.n	800701c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007014:	f06f 0302 	mvn.w	r3, #2
 8007018:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800701a:	e018      	b.n	800704e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d015      	beq.n	800704e <osSemaphoreRelease+0x9a>
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <osSemaphoreRelease+0xac>)
 8007024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007032:	e00c      	b.n	800704e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007034:	2300      	movs	r3, #0
 8007036:	2200      	movs	r2, #0
 8007038:	2100      	movs	r1, #0
 800703a:	69b8      	ldr	r0, [r7, #24]
 800703c:	f000 fce4 	bl	8007a08 <xQueueGenericSend>
 8007040:	4603      	mov	r3, r0
 8007042:	2b01      	cmp	r3, #1
 8007044:	d004      	beq.n	8007050 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007046:	f06f 0302 	mvn.w	r3, #2
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e000      	b.n	8007050 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800704e:	bf00      	nop
    }
  }

  return (stat);
 8007050:	69fb      	ldr	r3, [r7, #28]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20046250 	.word	0x20046250
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b08c      	sub	sp, #48	; 0x30
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007074:	f3ef 8305 	mrs	r3, IPSR
 8007078:	61bb      	str	r3, [r7, #24]
  return(result);
 800707a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800707c:	2b00      	cmp	r3, #0
 800707e:	d16f      	bne.n	8007160 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007080:	f3ef 8310 	mrs	r3, PRIMASK
 8007084:	617b      	str	r3, [r7, #20]
  return(result);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d105      	bne.n	8007098 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800708c:	f3ef 8311 	mrs	r3, BASEPRI
 8007090:	613b      	str	r3, [r7, #16]
  return(result);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <osMessageQueueNew+0x3c>
 8007098:	4b34      	ldr	r3, [pc, #208]	; (800716c <osMessageQueueNew+0x108>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d05f      	beq.n	8007160 <osMessageQueueNew+0xfc>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d05c      	beq.n	8007160 <osMessageQueueNew+0xfc>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d059      	beq.n	8007160 <osMessageQueueNew+0xfc>
    mem = -1;
 80070ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d029      	beq.n	800710c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d012      	beq.n	80070e6 <osMessageQueueNew+0x82>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b4f      	cmp	r3, #79	; 0x4f
 80070c6:	d90e      	bls.n	80070e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00a      	beq.n	80070e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	695a      	ldr	r2, [r3, #20]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	fb01 f303 	mul.w	r3, r1, r3
 80070dc:	429a      	cmp	r2, r3
 80070de:	d302      	bcc.n	80070e6 <osMessageQueueNew+0x82>
        mem = 1;
 80070e0:	2301      	movs	r3, #1
 80070e2:	623b      	str	r3, [r7, #32]
 80070e4:	e014      	b.n	8007110 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d110      	bne.n	8007110 <osMessageQueueNew+0xac>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10c      	bne.n	8007110 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d108      	bne.n	8007110 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d104      	bne.n	8007110 <osMessageQueueNew+0xac>
          mem = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	623b      	str	r3, [r7, #32]
 800710a:	e001      	b.n	8007110 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10b      	bne.n	800712e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691a      	ldr	r2, [r3, #16]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	2100      	movs	r1, #0
 8007120:	9100      	str	r1, [sp, #0]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fa5b 	bl	80075e0 <xQueueGenericCreateStatic>
 800712a:	6278      	str	r0, [r7, #36]	; 0x24
 800712c:	e008      	b.n	8007140 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007134:	2200      	movs	r2, #0
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 fad3 	bl	80076e4 <xQueueGenericCreate>
 800713e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00c      	beq.n	8007160 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <osMessageQueueNew+0xf0>
        name = attr->name;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e001      	b.n	8007158 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007154:	2300      	movs	r3, #0
 8007156:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007158:	69f9      	ldr	r1, [r7, #28]
 800715a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800715c:	f001 fa5e 	bl	800861c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007162:	4618      	mov	r0, r3
 8007164:	3728      	adds	r7, #40	; 0x28
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20046250 	.word	0x20046250

08007170 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007170:	b580      	push	{r7, lr}
 8007172:	b08a      	sub	sp, #40	; 0x28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	4613      	mov	r3, r2
 800717e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007184:	2300      	movs	r3, #0
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007188:	f3ef 8305 	mrs	r3, IPSR
 800718c:	61fb      	str	r3, [r7, #28]
  return(result);
 800718e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10f      	bne.n	80071b4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007194:	f3ef 8310 	mrs	r3, PRIMASK
 8007198:	61bb      	str	r3, [r7, #24]
  return(result);
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071a0:	f3ef 8311 	mrs	r3, BASEPRI
 80071a4:	617b      	str	r3, [r7, #20]
  return(result);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02c      	beq.n	8007206 <osMessageQueuePut+0x96>
 80071ac:	4b28      	ldr	r3, [pc, #160]	; (8007250 <osMessageQueuePut+0xe0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d128      	bne.n	8007206 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <osMessageQueuePut+0x56>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <osMessageQueuePut+0x56>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80071c6:	f06f 0303 	mvn.w	r3, #3
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071cc:	e039      	b.n	8007242 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80071ce:	2300      	movs	r3, #0
 80071d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80071d2:	f107 0210 	add.w	r2, r7, #16
 80071d6:	2300      	movs	r3, #0
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	6a38      	ldr	r0, [r7, #32]
 80071dc:	f000 fd1a 	bl	8007c14 <xQueueGenericSendFromISR>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d003      	beq.n	80071ee <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80071e6:	f06f 0302 	mvn.w	r3, #2
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071ec:	e029      	b.n	8007242 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d026      	beq.n	8007242 <osMessageQueuePut+0xd2>
 80071f4:	4b17      	ldr	r3, [pc, #92]	; (8007254 <osMessageQueuePut+0xe4>)
 80071f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007204:	e01d      	b.n	8007242 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <osMessageQueuePut+0xa2>
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007212:	f06f 0303 	mvn.w	r3, #3
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
 8007218:	e014      	b.n	8007244 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800721a:	2300      	movs	r3, #0
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	6a38      	ldr	r0, [r7, #32]
 8007222:	f000 fbf1 	bl	8007a08 <xQueueGenericSend>
 8007226:	4603      	mov	r3, r0
 8007228:	2b01      	cmp	r3, #1
 800722a:	d00b      	beq.n	8007244 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007232:	f06f 0301 	mvn.w	r3, #1
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
 8007238:	e004      	b.n	8007244 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800723a:	f06f 0302 	mvn.w	r3, #2
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
 8007240:	e000      	b.n	8007244 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007242:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007246:	4618      	mov	r0, r3
 8007248:	3728      	adds	r7, #40	; 0x28
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20046250 	.word	0x20046250
 8007254:	e000ed04 	.word	0xe000ed04

08007258 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	; 0x28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800726e:	f3ef 8305 	mrs	r3, IPSR
 8007272:	61fb      	str	r3, [r7, #28]
  return(result);
 8007274:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10f      	bne.n	800729a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727a:	f3ef 8310 	mrs	r3, PRIMASK
 800727e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d105      	bne.n	8007292 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007286:	f3ef 8311 	mrs	r3, BASEPRI
 800728a:	617b      	str	r3, [r7, #20]
  return(result);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d02c      	beq.n	80072ec <osMessageQueueGet+0x94>
 8007292:	4b28      	ldr	r3, [pc, #160]	; (8007334 <osMessageQueueGet+0xdc>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d128      	bne.n	80072ec <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <osMessageQueueGet+0x54>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <osMessageQueueGet+0x54>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80072ac:	f06f 0303 	mvn.w	r3, #3
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072b2:	e038      	b.n	8007326 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80072b8:	f107 0310 	add.w	r3, r7, #16
 80072bc:	461a      	mov	r2, r3
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	6a38      	ldr	r0, [r7, #32]
 80072c2:	f000 ffd7 	bl	8008274 <xQueueReceiveFromISR>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d003      	beq.n	80072d4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80072cc:	f06f 0302 	mvn.w	r3, #2
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072d2:	e028      	b.n	8007326 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d025      	beq.n	8007326 <osMessageQueueGet+0xce>
 80072da:	4b17      	ldr	r3, [pc, #92]	; (8007338 <osMessageQueueGet+0xe0>)
 80072dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072ea:	e01c      	b.n	8007326 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <osMessageQueueGet+0xa0>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80072f8:	f06f 0303 	mvn.w	r3, #3
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
 80072fe:	e013      	b.n	8007328 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	6a38      	ldr	r0, [r7, #32]
 8007306:	f000 fdbb 	bl	8007e80 <xQueueReceive>
 800730a:	4603      	mov	r3, r0
 800730c:	2b01      	cmp	r3, #1
 800730e:	d00b      	beq.n	8007328 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007316:	f06f 0301 	mvn.w	r3, #1
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
 800731c:	e004      	b.n	8007328 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800731e:	f06f 0302 	mvn.w	r3, #2
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
 8007324:	e000      	b.n	8007328 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007326:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800732a:	4618      	mov	r0, r3
 800732c:	3728      	adds	r7, #40	; 0x28
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20046250 	.word	0x20046250
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4a07      	ldr	r2, [pc, #28]	; (8007368 <vApplicationGetIdleTaskMemory+0x2c>)
 800734c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4a06      	ldr	r2, [pc, #24]	; (800736c <vApplicationGetIdleTaskMemory+0x30>)
 8007352:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2280      	movs	r2, #128	; 0x80
 8007358:	601a      	str	r2, [r3, #0]
}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20046254 	.word	0x20046254
 800736c:	20046310 	.word	0x20046310

08007370 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a07      	ldr	r2, [pc, #28]	; (800739c <vApplicationGetTimerTaskMemory+0x2c>)
 8007380:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4a06      	ldr	r2, [pc, #24]	; (80073a0 <vApplicationGetTimerTaskMemory+0x30>)
 8007386:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800738e:	601a      	str	r2, [r3, #0]
}
 8007390:	bf00      	nop
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20046510 	.word	0x20046510
 80073a0:	200465cc 	.word	0x200465cc

080073a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f103 0208 	add.w	r2, r3, #8
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f103 0208 	add.w	r2, r3, #8
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f103 0208 	add.w	r2, r3, #8
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	601a      	str	r2, [r3, #0]
}
 800743a:	bf00      	nop
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800745c:	d103      	bne.n	8007466 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e00c      	b.n	8007480 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3308      	adds	r3, #8
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e002      	b.n	8007474 <vListInsert+0x2e>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	429a      	cmp	r2, r3
 800747e:	d2f6      	bcs.n	800746e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	601a      	str	r2, [r3, #0]
}
 80074ac:	bf00      	nop
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6892      	ldr	r2, [r2, #8]
 80074ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6852      	ldr	r2, [r2, #4]
 80074d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d103      	bne.n	80074ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	1e5a      	subs	r2, r3, #1
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10c      	bne.n	800753a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	b672      	cpsid	i
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	b662      	cpsie	i
 8007534:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800753a:	f002 fdcf 	bl	800a0dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007546:	68f9      	ldr	r1, [r7, #12]
 8007548:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800754a:	fb01 f303 	mul.w	r3, r1, r3
 800754e:	441a      	add	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756a:	3b01      	subs	r3, #1
 800756c:	68f9      	ldr	r1, [r7, #12]
 800756e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007570:	fb01 f303 	mul.w	r3, r1, r3
 8007574:	441a      	add	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	22ff      	movs	r2, #255	; 0xff
 800757e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	22ff      	movs	r2, #255	; 0xff
 8007586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d114      	bne.n	80075ba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01a      	beq.n	80075ce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3310      	adds	r3, #16
 800759c:	4618      	mov	r0, r3
 800759e:	f001 fd75 	bl	800908c <xTaskRemoveFromEventList>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d012      	beq.n	80075ce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075a8:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <xQueueGenericReset+0xd0>)
 80075aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	e009      	b.n	80075ce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3310      	adds	r3, #16
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff fef0 	bl	80073a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff feeb 	bl	80073a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075ce:	f002 fdb9 	bl	800a144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075d2:	2301      	movs	r3, #1
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08e      	sub	sp, #56	; 0x38
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10c      	bne.n	800760e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	b672      	cpsid	i
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	b662      	cpsie	i
 8007608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800760a:	bf00      	nop
 800760c:	e7fe      	b.n	800760c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10c      	bne.n	800762e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	b672      	cpsid	i
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	b662      	cpsie	i
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <xQueueGenericCreateStatic+0x5a>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <xQueueGenericCreateStatic+0x5e>
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <xQueueGenericCreateStatic+0x60>
 800763e:	2300      	movs	r3, #0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10c      	bne.n	800765e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	b672      	cpsid	i
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	b662      	cpsie	i
 8007658:	623b      	str	r3, [r7, #32]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d102      	bne.n	800766a <xQueueGenericCreateStatic+0x8a>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <xQueueGenericCreateStatic+0x8e>
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <xQueueGenericCreateStatic+0x90>
 800766e:	2300      	movs	r3, #0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10c      	bne.n	800768e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	b672      	cpsid	i
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	b662      	cpsie	i
 8007688:	61fb      	str	r3, [r7, #28]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800768e:	2350      	movs	r3, #80	; 0x50
 8007690:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b50      	cmp	r3, #80	; 0x50
 8007696:	d00c      	beq.n	80076b2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	b672      	cpsid	i
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	b662      	cpsie	i
 80076ac:	61bb      	str	r3, [r7, #24]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00d      	beq.n	80076da <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	4613      	mov	r3, r2
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f847 	bl	8007768 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80076dc:	4618      	mov	r0, r3
 80076de:	3730      	adds	r7, #48	; 0x30
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	4613      	mov	r3, r2
 80076f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10c      	bne.n	8007712 <xQueueGenericCreate+0x2e>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	b672      	cpsid	i
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	b662      	cpsie	i
 800770c:	613b      	str	r3, [r7, #16]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
 800771c:	e004      	b.n	8007728 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	fb02 f303 	mul.w	r3, r2, r3
 8007726:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	3350      	adds	r3, #80	; 0x50
 800772c:	4618      	mov	r0, r3
 800772e:	f002 fe01 	bl	800a334 <pvPortMalloc>
 8007732:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d011      	beq.n	800775e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	3350      	adds	r3, #80	; 0x50
 8007742:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800774c:	79fa      	ldrb	r2, [r7, #7]
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 f805 	bl	8007768 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800775e:	69bb      	ldr	r3, [r7, #24]
	}
 8007760:	4618      	mov	r0, r3
 8007762:	3720      	adds	r7, #32
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d103      	bne.n	8007784 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e002      	b.n	800778a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007796:	2101      	movs	r1, #1
 8007798:	69b8      	ldr	r0, [r7, #24]
 800779a:	f7ff feb7 	bl	800750c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	78fa      	ldrb	r2, [r7, #3]
 80077a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00e      	beq.n	80077da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80077ce:	2300      	movs	r3, #0
 80077d0:	2200      	movs	r2, #0
 80077d2:	2100      	movs	r1, #0
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f917 	bl	8007a08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b086      	sub	sp, #24
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	4603      	mov	r3, r0
 80077ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80077ec:	2301      	movs	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	2300      	movs	r3, #0
 80077f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	461a      	mov	r2, r3
 80077f8:	6939      	ldr	r1, [r7, #16]
 80077fa:	6978      	ldr	r0, [r7, #20]
 80077fc:	f7ff ff72 	bl	80076e4 <xQueueGenericCreate>
 8007800:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff ffd3 	bl	80077ae <prvInitialiseMutex>

		return xNewQueue;
 8007808:	68fb      	ldr	r3, [r7, #12]
	}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007812:	b580      	push	{r7, lr}
 8007814:	b088      	sub	sp, #32
 8007816:	af02      	add	r7, sp, #8
 8007818:	4603      	mov	r3, r0
 800781a:	6039      	str	r1, [r7, #0]
 800781c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800781e:	2301      	movs	r3, #1
 8007820:	617b      	str	r3, [r7, #20]
 8007822:	2300      	movs	r3, #0
 8007824:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2200      	movs	r2, #0
 800782e:	6939      	ldr	r1, [r7, #16]
 8007830:	6978      	ldr	r0, [r7, #20]
 8007832:	f7ff fed5 	bl	80075e0 <xQueueGenericCreateStatic>
 8007836:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f7ff ffb8 	bl	80077ae <prvInitialiseMutex>

		return xNewQueue;
 800783e:	68fb      	ldr	r3, [r7, #12]
	}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007848:	b590      	push	{r4, r7, lr}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10c      	bne.n	8007874 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	b672      	cpsid	i
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	b662      	cpsie	i
 800786e:	60fb      	str	r3, [r7, #12]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	689c      	ldr	r4, [r3, #8]
 8007878:	f001 fdd2 	bl	8009420 <xTaskGetCurrentTaskHandle>
 800787c:	4603      	mov	r3, r0
 800787e:	429c      	cmp	r4, r3
 8007880:	d111      	bne.n	80078a6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	1e5a      	subs	r2, r3, #1
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d105      	bne.n	80078a0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007894:	2300      	movs	r3, #0
 8007896:	2200      	movs	r2, #0
 8007898:	2100      	movs	r1, #0
 800789a:	6938      	ldr	r0, [r7, #16]
 800789c:	f000 f8b4 	bl	8007a08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80078a0:	2301      	movs	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e001      	b.n	80078aa <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80078aa:	697b      	ldr	r3, [r7, #20]
	}
 80078ac:	4618      	mov	r0, r3
 80078ae:	371c      	adds	r7, #28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd90      	pop	{r4, r7, pc}

080078b4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80078b4:	b590      	push	{r4, r7, lr}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10c      	bne.n	80078e2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	b672      	cpsid	i
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	b662      	cpsie	i
 80078dc:	60fb      	str	r3, [r7, #12]
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	689c      	ldr	r4, [r3, #8]
 80078e6:	f001 fd9b 	bl	8009420 <xTaskGetCurrentTaskHandle>
 80078ea:	4603      	mov	r3, r0
 80078ec:	429c      	cmp	r4, r3
 80078ee:	d107      	bne.n	8007900 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80078fa:	2301      	movs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	e00c      	b.n	800791a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6938      	ldr	r0, [r7, #16]
 8007904:	f000 fba2 	bl	800804c <xQueueSemaphoreTake>
 8007908:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800791a:	697b      	ldr	r3, [r7, #20]
	}
 800791c:	4618      	mov	r0, r3
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	bd90      	pop	{r4, r7, pc}

08007924 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08a      	sub	sp, #40	; 0x28
 8007928:	af02      	add	r7, sp, #8
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10c      	bne.n	8007950 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	b672      	cpsid	i
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	b662      	cpsie	i
 800794a:	61bb      	str	r3, [r7, #24]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	429a      	cmp	r2, r3
 8007956:	d90c      	bls.n	8007972 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	b672      	cpsid	i
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	b662      	cpsie	i
 800796c:	617b      	str	r3, [r7, #20]
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007972:	2302      	movs	r3, #2
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	2100      	movs	r1, #0
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff fe2f 	bl	80075e0 <xQueueGenericCreateStatic>
 8007982:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007990:	69fb      	ldr	r3, [r7, #28]
	}
 8007992:	4618      	mov	r0, r3
 8007994:	3720      	adds	r7, #32
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10c      	bne.n	80079c4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	b672      	cpsid	i
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	b662      	cpsie	i
 80079be:	613b      	str	r3, [r7, #16]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d90c      	bls.n	80079e6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	b672      	cpsid	i
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	b662      	cpsie	i
 80079e0:	60fb      	str	r3, [r7, #12]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80079e6:	2202      	movs	r2, #2
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff fe7a 	bl	80076e4 <xQueueGenericCreate>
 80079f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80079fe:	697b      	ldr	r3, [r7, #20]
	}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08e      	sub	sp, #56	; 0x38
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10c      	bne.n	8007a3e <xQueueGenericSend+0x36>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	b672      	cpsid	i
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	b662      	cpsie	i
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <xQueueGenericSend+0x44>
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <xQueueGenericSend+0x48>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <xQueueGenericSend+0x4a>
 8007a50:	2300      	movs	r3, #0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10c      	bne.n	8007a70 <xQueueGenericSend+0x68>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	b672      	cpsid	i
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	b662      	cpsie	i
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d103      	bne.n	8007a7e <xQueueGenericSend+0x76>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d101      	bne.n	8007a82 <xQueueGenericSend+0x7a>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <xQueueGenericSend+0x7c>
 8007a82:	2300      	movs	r3, #0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10c      	bne.n	8007aa2 <xQueueGenericSend+0x9a>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	b672      	cpsid	i
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	b662      	cpsie	i
 8007a9c:	623b      	str	r3, [r7, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aa2:	f001 fccd 	bl	8009440 <xTaskGetSchedulerState>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <xQueueGenericSend+0xaa>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <xQueueGenericSend+0xae>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <xQueueGenericSend+0xb0>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10c      	bne.n	8007ad6 <xQueueGenericSend+0xce>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	b672      	cpsid	i
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	b662      	cpsie	i
 8007ad0:	61fb      	str	r3, [r7, #28]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ad6:	f002 fb01 	bl	800a0dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d302      	bcc.n	8007aec <xQueueGenericSend+0xe4>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d129      	bne.n	8007b40 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007af2:	f000 fc82 	bl	80083fa <prvCopyDataToQueue>
 8007af6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d010      	beq.n	8007b22 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	3324      	adds	r3, #36	; 0x24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 fac1 	bl	800908c <xTaskRemoveFromEventList>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d013      	beq.n	8007b38 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b10:	4b3f      	ldr	r3, [pc, #252]	; (8007c10 <xQueueGenericSend+0x208>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	e00a      	b.n	8007b38 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d007      	beq.n	8007b38 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b28:	4b39      	ldr	r3, [pc, #228]	; (8007c10 <xQueueGenericSend+0x208>)
 8007b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b38:	f002 fb04 	bl	800a144 <vPortExitCritical>
				return pdPASS;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e063      	b.n	8007c08 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d103      	bne.n	8007b4e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b46:	f002 fafd 	bl	800a144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e05c      	b.n	8007c08 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b54:	f107 0314 	add.w	r3, r7, #20
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 fafd 	bl	8009158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b62:	f002 faef 	bl	800a144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b66:	f001 f84b 	bl	8008c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b6a:	f002 fab7 	bl	800a0dc <vPortEnterCritical>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b74:	b25b      	sxtb	r3, r3
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b7a:	d103      	bne.n	8007b84 <xQueueGenericSend+0x17c>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b8a:	b25b      	sxtb	r3, r3
 8007b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b90:	d103      	bne.n	8007b9a <xQueueGenericSend+0x192>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b9a:	f002 fad3 	bl	800a144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b9e:	1d3a      	adds	r2, r7, #4
 8007ba0:	f107 0314 	add.w	r3, r7, #20
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 faec 	bl	8009184 <xTaskCheckForTimeOut>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d124      	bne.n	8007bfc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb4:	f000 fd19 	bl	80085ea <prvIsQueueFull>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d018      	beq.n	8007bf0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	3310      	adds	r3, #16
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f001 fa0c 	bl	8008fe4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bce:	f000 fca4 	bl	800851a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bd2:	f001 f823 	bl	8008c1c <xTaskResumeAll>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f47f af7c 	bne.w	8007ad6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007bde:	4b0c      	ldr	r3, [pc, #48]	; (8007c10 <xQueueGenericSend+0x208>)
 8007be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	e772      	b.n	8007ad6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bf2:	f000 fc92 	bl	800851a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bf6:	f001 f811 	bl	8008c1c <xTaskResumeAll>
 8007bfa:	e76c      	b.n	8007ad6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bfe:	f000 fc8c 	bl	800851a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c02:	f001 f80b 	bl	8008c1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3738      	adds	r7, #56	; 0x38
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	e000ed04 	.word	0xe000ed04

08007c14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08e      	sub	sp, #56	; 0x38
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10c      	bne.n	8007c46 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	b672      	cpsid	i
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	b662      	cpsie	i
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <xQueueGenericSendFromISR+0x40>
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <xQueueGenericSendFromISR+0x44>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <xQueueGenericSendFromISR+0x46>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10c      	bne.n	8007c78 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	b672      	cpsid	i
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	b662      	cpsie	i
 8007c72:	623b      	str	r3, [r7, #32]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d103      	bne.n	8007c86 <xQueueGenericSendFromISR+0x72>
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <xQueueGenericSendFromISR+0x76>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <xQueueGenericSendFromISR+0x78>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10c      	bne.n	8007caa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	61fb      	str	r3, [r7, #28]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007caa:	f002 faff 	bl	800a2ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007cae:	f3ef 8211 	mrs	r2, BASEPRI
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	b672      	cpsid	i
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	b662      	cpsie	i
 8007cc6:	61ba      	str	r2, [r7, #24]
 8007cc8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d302      	bcc.n	8007ce0 <xQueueGenericSendFromISR+0xcc>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d12c      	bne.n	8007d3a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cf0:	f000 fb83 	bl	80083fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cf4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cfc:	d112      	bne.n	8007d24 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d016      	beq.n	8007d34 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	3324      	adds	r3, #36	; 0x24
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f001 f9be 	bl	800908c <xTaskRemoveFromEventList>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00e      	beq.n	8007d34 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00b      	beq.n	8007d34 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	e007      	b.n	8007d34 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d28:	3301      	adds	r3, #1
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	b25a      	sxtb	r2, r3
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d34:	2301      	movs	r3, #1
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007d38:	e001      	b.n	8007d3e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3738      	adds	r7, #56	; 0x38
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08e      	sub	sp, #56	; 0x38
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10c      	bne.n	8007d82 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	b672      	cpsid	i
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	b662      	cpsie	i
 8007d7c:	623b      	str	r3, [r7, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00c      	beq.n	8007da4 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	b672      	cpsid	i
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	b662      	cpsie	i
 8007d9e:	61fb      	str	r3, [r7, #28]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d103      	bne.n	8007db4 <xQueueGiveFromISR+0x60>
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <xQueueGiveFromISR+0x64>
 8007db4:	2301      	movs	r3, #1
 8007db6:	e000      	b.n	8007dba <xQueueGiveFromISR+0x66>
 8007db8:	2300      	movs	r3, #0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10c      	bne.n	8007dd8 <xQueueGiveFromISR+0x84>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	b672      	cpsid	i
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	b662      	cpsie	i
 8007dd2:	61bb      	str	r3, [r7, #24]
}
 8007dd4:	bf00      	nop
 8007dd6:	e7fe      	b.n	8007dd6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007dd8:	f002 fa68 	bl	800a2ac <vPortValidateInterruptPriority>
	__asm volatile
 8007ddc:	f3ef 8211 	mrs	r2, BASEPRI
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	b672      	cpsid	i
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	b662      	cpsie	i
 8007df4:	617a      	str	r2, [r7, #20]
 8007df6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007df8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e00:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d22b      	bcs.n	8007e64 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e26:	d112      	bne.n	8007e4e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d016      	beq.n	8007e5e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	3324      	adds	r3, #36	; 0x24
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 f929 	bl	800908c <xTaskRemoveFromEventList>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00e      	beq.n	8007e5e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	e007      	b.n	8007e5e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e52:	3301      	adds	r3, #1
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	b25a      	sxtb	r2, r3
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	637b      	str	r3, [r7, #52]	; 0x34
 8007e62:	e001      	b.n	8007e68 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	637b      	str	r3, [r7, #52]	; 0x34
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f383 8811 	msr	BASEPRI, r3
}
 8007e72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3738      	adds	r7, #56	; 0x38
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08c      	sub	sp, #48	; 0x30
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10c      	bne.n	8007eb4 <xQueueReceive+0x34>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	b672      	cpsid	i
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	b662      	cpsie	i
 8007eae:	623b      	str	r3, [r7, #32]
}
 8007eb0:	bf00      	nop
 8007eb2:	e7fe      	b.n	8007eb2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d103      	bne.n	8007ec2 <xQueueReceive+0x42>
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <xQueueReceive+0x46>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <xQueueReceive+0x48>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10c      	bne.n	8007ee6 <xQueueReceive+0x66>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	b672      	cpsid	i
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	b662      	cpsie	i
 8007ee0:	61fb      	str	r3, [r7, #28]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ee6:	f001 faab 	bl	8009440 <xTaskGetSchedulerState>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <xQueueReceive+0x76>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <xQueueReceive+0x7a>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <xQueueReceive+0x7c>
 8007efa:	2300      	movs	r3, #0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10c      	bne.n	8007f1a <xQueueReceive+0x9a>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	b672      	cpsid	i
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	b662      	cpsie	i
 8007f14:	61bb      	str	r3, [r7, #24]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f1a:	f002 f8df 	bl	800a0dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01f      	beq.n	8007f6a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f2e:	f000 face 	bl	80084ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	1e5a      	subs	r2, r3, #1
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00f      	beq.n	8007f62 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	3310      	adds	r3, #16
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 f8a0 	bl	800908c <xTaskRemoveFromEventList>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f52:	4b3d      	ldr	r3, [pc, #244]	; (8008048 <xQueueReceive+0x1c8>)
 8007f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f62:	f002 f8ef 	bl	800a144 <vPortExitCritical>
				return pdPASS;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e069      	b.n	800803e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d103      	bne.n	8007f78 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f70:	f002 f8e8 	bl	800a144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e062      	b.n	800803e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d106      	bne.n	8007f8c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f7e:	f107 0310 	add.w	r3, r7, #16
 8007f82:	4618      	mov	r0, r3
 8007f84:	f001 f8e8 	bl	8009158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f8c:	f002 f8da 	bl	800a144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f90:	f000 fe36 	bl	8008c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f94:	f002 f8a2 	bl	800a0dc <vPortEnterCritical>
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f9e:	b25b      	sxtb	r3, r3
 8007fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fa4:	d103      	bne.n	8007fae <xQueueReceive+0x12e>
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fb4:	b25b      	sxtb	r3, r3
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fba:	d103      	bne.n	8007fc4 <xQueueReceive+0x144>
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fc4:	f002 f8be 	bl	800a144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fc8:	1d3a      	adds	r2, r7, #4
 8007fca:	f107 0310 	add.w	r3, r7, #16
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 f8d7 	bl	8009184 <xTaskCheckForTimeOut>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d123      	bne.n	8008024 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fde:	f000 faee 	bl	80085be <prvIsQueueEmpty>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d017      	beq.n	8008018 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	3324      	adds	r3, #36	; 0x24
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 fff7 	bl	8008fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff8:	f000 fa8f 	bl	800851a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ffc:	f000 fe0e 	bl	8008c1c <xTaskResumeAll>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d189      	bne.n	8007f1a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008006:	4b10      	ldr	r3, [pc, #64]	; (8008048 <xQueueReceive+0x1c8>)
 8008008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	e780      	b.n	8007f1a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800801a:	f000 fa7e 	bl	800851a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800801e:	f000 fdfd 	bl	8008c1c <xTaskResumeAll>
 8008022:	e77a      	b.n	8007f1a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008026:	f000 fa78 	bl	800851a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800802a:	f000 fdf7 	bl	8008c1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800802e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008030:	f000 fac5 	bl	80085be <prvIsQueueEmpty>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	f43f af6f 	beq.w	8007f1a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800803c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800803e:	4618      	mov	r0, r3
 8008040:	3730      	adds	r7, #48	; 0x30
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08e      	sub	sp, #56	; 0x38
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008056:	2300      	movs	r3, #0
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800805e:	2300      	movs	r3, #0
 8008060:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10c      	bne.n	8008082 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	b672      	cpsid	i
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	b662      	cpsie	i
 800807c:	623b      	str	r3, [r7, #32]
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00c      	beq.n	80080a4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	b672      	cpsid	i
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	b662      	cpsie	i
 800809e:	61fb      	str	r3, [r7, #28]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080a4:	f001 f9cc 	bl	8009440 <xTaskGetSchedulerState>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d102      	bne.n	80080b4 <xQueueSemaphoreTake+0x68>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <xQueueSemaphoreTake+0x6c>
 80080b4:	2301      	movs	r3, #1
 80080b6:	e000      	b.n	80080ba <xQueueSemaphoreTake+0x6e>
 80080b8:	2300      	movs	r3, #0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10c      	bne.n	80080d8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	b672      	cpsid	i
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	b662      	cpsie	i
 80080d2:	61bb      	str	r3, [r7, #24]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080d8:	f002 f800 	bl	800a0dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d024      	beq.n	8008132 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	1e5a      	subs	r2, r3, #1
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80080f8:	f001 fb20 	bl	800973c <pvTaskIncrementMutexHeldCount>
 80080fc:	4602      	mov	r2, r0
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00f      	beq.n	800812a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800810a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810c:	3310      	adds	r3, #16
 800810e:	4618      	mov	r0, r3
 8008110:	f000 ffbc 	bl	800908c <xTaskRemoveFromEventList>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800811a:	4b55      	ldr	r3, [pc, #340]	; (8008270 <xQueueSemaphoreTake+0x224>)
 800811c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800812a:	f002 f80b 	bl	800a144 <vPortExitCritical>
				return pdPASS;
 800812e:	2301      	movs	r3, #1
 8008130:	e099      	b.n	8008266 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d113      	bne.n	8008160 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00c      	beq.n	8008158 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	b672      	cpsid	i
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	b662      	cpsie	i
 8008152:	617b      	str	r3, [r7, #20]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008158:	f001 fff4 	bl	800a144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800815c:	2300      	movs	r3, #0
 800815e:	e082      	b.n	8008266 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008166:	f107 030c 	add.w	r3, r7, #12
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fff4 	bl	8009158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008170:	2301      	movs	r3, #1
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008174:	f001 ffe6 	bl	800a144 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008178:	f000 fd42 	bl	8008c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800817c:	f001 ffae 	bl	800a0dc <vPortEnterCritical>
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008186:	b25b      	sxtb	r3, r3
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800818c:	d103      	bne.n	8008196 <xQueueSemaphoreTake+0x14a>
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800819c:	b25b      	sxtb	r3, r3
 800819e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081a2:	d103      	bne.n	80081ac <xQueueSemaphoreTake+0x160>
 80081a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ac:	f001 ffca 	bl	800a144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081b0:	463a      	mov	r2, r7
 80081b2:	f107 030c 	add.w	r3, r7, #12
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 ffe3 	bl	8009184 <xTaskCheckForTimeOut>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d132      	bne.n	800822a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081c6:	f000 f9fa 	bl	80085be <prvIsQueueEmpty>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d026      	beq.n	800821e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80081d8:	f001 ff80 	bl	800a0dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f001 f94b 	bl	800947c <xTaskPriorityInherit>
 80081e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80081e8:	f001 ffac 	bl	800a144 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	3324      	adds	r3, #36	; 0x24
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	4611      	mov	r1, r2
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fef5 	bl	8008fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081fc:	f000 f98d 	bl	800851a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008200:	f000 fd0c 	bl	8008c1c <xTaskResumeAll>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	f47f af66 	bne.w	80080d8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800820c:	4b18      	ldr	r3, [pc, #96]	; (8008270 <xQueueSemaphoreTake+0x224>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	e75c      	b.n	80080d8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800821e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008220:	f000 f97b 	bl	800851a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008224:	f000 fcfa 	bl	8008c1c <xTaskResumeAll>
 8008228:	e756      	b.n	80080d8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800822a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800822c:	f000 f975 	bl	800851a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008230:	f000 fcf4 	bl	8008c1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008236:	f000 f9c2 	bl	80085be <prvIsQueueEmpty>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	f43f af4b 	beq.w	80080d8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00d      	beq.n	8008264 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008248:	f001 ff48 	bl	800a0dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800824c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800824e:	f000 f8bc 	bl	80083ca <prvGetDisinheritPriorityAfterTimeout>
 8008252:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800825a:	4618      	mov	r0, r3
 800825c:	f001 f9e8 	bl	8009630 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008260:	f001 ff70 	bl	800a144 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008264:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008266:	4618      	mov	r0, r3
 8008268:	3738      	adds	r7, #56	; 0x38
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	e000ed04 	.word	0xe000ed04

08008274 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08e      	sub	sp, #56	; 0x38
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10c      	bne.n	80082a4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	b672      	cpsid	i
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	b662      	cpsie	i
 800829e:	623b      	str	r3, [r7, #32]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d103      	bne.n	80082b2 <xQueueReceiveFromISR+0x3e>
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <xQueueReceiveFromISR+0x42>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e000      	b.n	80082b8 <xQueueReceiveFromISR+0x44>
 80082b6:	2300      	movs	r3, #0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10c      	bne.n	80082d6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	b672      	cpsid	i
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	b662      	cpsie	i
 80082d0:	61fb      	str	r3, [r7, #28]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082d6:	f001 ffe9 	bl	800a2ac <vPortValidateInterruptPriority>
	__asm volatile
 80082da:	f3ef 8211 	mrs	r2, BASEPRI
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	b672      	cpsid	i
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	b662      	cpsie	i
 80082f2:	61ba      	str	r2, [r7, #24]
 80082f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80082f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	d02f      	beq.n	8008366 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800830c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008310:	68b9      	ldr	r1, [r7, #8]
 8008312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008314:	f000 f8db 	bl	80084ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	1e5a      	subs	r2, r3, #1
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008328:	d112      	bne.n	8008350 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d016      	beq.n	8008360 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	3310      	adds	r3, #16
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fea8 	bl	800908c <xTaskRemoveFromEventList>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00e      	beq.n	8008360 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00b      	beq.n	8008360 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e007      	b.n	8008360 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008354:	3301      	adds	r3, #1
 8008356:	b2db      	uxtb	r3, r3
 8008358:	b25a      	sxtb	r2, r3
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008360:	2301      	movs	r3, #1
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
 8008364:	e001      	b.n	800836a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8008366:	2300      	movs	r3, #0
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f383 8811 	msr	BASEPRI, r3
}
 8008374:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008378:	4618      	mov	r0, r3
 800837a:	3738      	adds	r7, #56	; 0x38
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10c      	bne.n	80083ac <vQueueDelete+0x2c>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	b672      	cpsid	i
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	b662      	cpsie	i
 80083a6:	60bb      	str	r3, [r7, #8]
}
 80083a8:	bf00      	nop
 80083aa:	e7fe      	b.n	80083aa <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 f95f 	bl	8008670 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d102      	bne.n	80083c2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f002 f883 	bl	800a4c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	e001      	b.n	80083ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80083ec:	68fb      	ldr	r3, [r7, #12]
	}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b086      	sub	sp, #24
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10d      	bne.n	8008434 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d14d      	bne.n	80084bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	4618      	mov	r0, r3
 8008426:	f001 f891 	bl	800954c <xTaskPriorityDisinherit>
 800842a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	609a      	str	r2, [r3, #8]
 8008432:	e043      	b.n	80084bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d119      	bne.n	800846e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6858      	ldr	r0, [r3, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	461a      	mov	r2, r3
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	f00c fafc 	bl	8014a42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	441a      	add	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	429a      	cmp	r2, r3
 8008462:	d32b      	bcc.n	80084bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	605a      	str	r2, [r3, #4]
 800846c:	e026      	b.n	80084bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	68d8      	ldr	r0, [r3, #12]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	461a      	mov	r2, r3
 8008478:	68b9      	ldr	r1, [r7, #8]
 800847a:	f00c fae2 	bl	8014a42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008486:	425b      	negs	r3, r3
 8008488:	441a      	add	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d207      	bcs.n	80084aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689a      	ldr	r2, [r3, #8]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	425b      	negs	r3, r3
 80084a4:	441a      	add	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d105      	bne.n	80084bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80084c4:	697b      	ldr	r3, [r7, #20]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d018      	beq.n	8008512 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	441a      	add	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d303      	bcc.n	8008502 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68d9      	ldr	r1, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	461a      	mov	r2, r3
 800850c:	6838      	ldr	r0, [r7, #0]
 800850e:	f00c fa98 	bl	8014a42 <memcpy>
	}
}
 8008512:	bf00      	nop
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008522:	f001 fddb 	bl	800a0dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800852c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800852e:	e011      	b.n	8008554 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	2b00      	cmp	r3, #0
 8008536:	d012      	beq.n	800855e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3324      	adds	r3, #36	; 0x24
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fda5 	bl	800908c <xTaskRemoveFromEventList>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008548:	f000 fe82 	bl	8009250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	3b01      	subs	r3, #1
 8008550:	b2db      	uxtb	r3, r3
 8008552:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008558:	2b00      	cmp	r3, #0
 800855a:	dce9      	bgt.n	8008530 <prvUnlockQueue+0x16>
 800855c:	e000      	b.n	8008560 <prvUnlockQueue+0x46>
					break;
 800855e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	22ff      	movs	r2, #255	; 0xff
 8008564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008568:	f001 fdec 	bl	800a144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800856c:	f001 fdb6 	bl	800a0dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008576:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008578:	e011      	b.n	800859e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d012      	beq.n	80085a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3310      	adds	r3, #16
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fd80 	bl	800908c <xTaskRemoveFromEventList>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008592:	f000 fe5d 	bl	8009250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	3b01      	subs	r3, #1
 800859a:	b2db      	uxtb	r3, r3
 800859c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800859e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dce9      	bgt.n	800857a <prvUnlockQueue+0x60>
 80085a6:	e000      	b.n	80085aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	22ff      	movs	r2, #255	; 0xff
 80085ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80085b2:	f001 fdc7 	bl	800a144 <vPortExitCritical>
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085c6:	f001 fd89 	bl	800a0dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085d2:	2301      	movs	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]
 80085d6:	e001      	b.n	80085dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085dc:	f001 fdb2 	bl	800a144 <vPortExitCritical>

	return xReturn;
 80085e0:	68fb      	ldr	r3, [r7, #12]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085f2:	f001 fd73 	bl	800a0dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fe:	429a      	cmp	r2, r3
 8008600:	d102      	bne.n	8008608 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008602:	2301      	movs	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	e001      	b.n	800860c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800860c:	f001 fd9a 	bl	800a144 <vPortExitCritical>

	return xReturn;
 8008610:	68fb      	ldr	r3, [r7, #12]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e014      	b.n	8008656 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800862c:	4a0f      	ldr	r2, [pc, #60]	; (800866c <vQueueAddToRegistry+0x50>)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10b      	bne.n	8008650 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008638:	490c      	ldr	r1, [pc, #48]	; (800866c <vQueueAddToRegistry+0x50>)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008642:	4a0a      	ldr	r2, [pc, #40]	; (800866c <vQueueAddToRegistry+0x50>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	4413      	add	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800864e:	e006      	b.n	800865e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b07      	cmp	r3, #7
 800865a:	d9e7      	bls.n	800862c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	200469cc 	.word	0x200469cc

08008670 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	e016      	b.n	80086ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800867e:	4a10      	ldr	r2, [pc, #64]	; (80086c0 <vQueueUnregisterQueue+0x50>)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	4413      	add	r3, r2
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	429a      	cmp	r2, r3
 800868c:	d10b      	bne.n	80086a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800868e:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <vQueueUnregisterQueue+0x50>)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2100      	movs	r1, #0
 8008694:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008698:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <vQueueUnregisterQueue+0x50>)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	4413      	add	r3, r2
 80086a0:	2200      	movs	r2, #0
 80086a2:	605a      	str	r2, [r3, #4]
				break;
 80086a4:	e006      	b.n	80086b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3301      	adds	r3, #1
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b07      	cmp	r3, #7
 80086b0:	d9e5      	bls.n	800867e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	200469cc 	.word	0x200469cc

080086c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80086d4:	f001 fd02 	bl	800a0dc <vPortEnterCritical>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086de:	b25b      	sxtb	r3, r3
 80086e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086e4:	d103      	bne.n	80086ee <vQueueWaitForMessageRestricted+0x2a>
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086f4:	b25b      	sxtb	r3, r3
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086fa:	d103      	bne.n	8008704 <vQueueWaitForMessageRestricted+0x40>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008704:	f001 fd1e 	bl	800a144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	2b00      	cmp	r3, #0
 800870e:	d106      	bne.n	800871e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	3324      	adds	r3, #36	; 0x24
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fc89 	bl	8009030 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800871e:	6978      	ldr	r0, [r7, #20]
 8008720:	f7ff fefb 	bl	800851a <prvUnlockQueue>
	}
 8008724:	bf00      	nop
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08e      	sub	sp, #56	; 0x38
 8008730:	af04      	add	r7, sp, #16
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800873a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10c      	bne.n	800875a <xTaskCreateStatic+0x2e>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	b672      	cpsid	i
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	b662      	cpsie	i
 8008754:	623b      	str	r3, [r7, #32]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10c      	bne.n	800877a <xTaskCreateStatic+0x4e>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	b672      	cpsid	i
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	b662      	cpsie	i
 8008774:	61fb      	str	r3, [r7, #28]
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800877a:	23bc      	movs	r3, #188	; 0xbc
 800877c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	2bbc      	cmp	r3, #188	; 0xbc
 8008782:	d00c      	beq.n	800879e <xTaskCreateStatic+0x72>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	b672      	cpsid	i
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	b662      	cpsie	i
 8008798:	61bb      	str	r3, [r7, #24]
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800879e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d01e      	beq.n	80087e4 <xTaskCreateStatic+0xb8>
 80087a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d01b      	beq.n	80087e4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	2202      	movs	r2, #2
 80087ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087be:	2300      	movs	r3, #0
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	9302      	str	r3, [sp, #8]
 80087c6:	f107 0314 	add.w	r3, r7, #20
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 f850 	bl	800887c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087de:	f000 f8f5 	bl	80089cc <prvAddNewTaskToReadyList>
 80087e2:	e001      	b.n	80087e8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087e8:	697b      	ldr	r3, [r7, #20]
	}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3728      	adds	r7, #40	; 0x28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b08c      	sub	sp, #48	; 0x30
 80087f6:	af04      	add	r7, sp, #16
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	603b      	str	r3, [r7, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4618      	mov	r0, r3
 8008808:	f001 fd94 	bl	800a334 <pvPortMalloc>
 800880c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00e      	beq.n	8008832 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008814:	20bc      	movs	r0, #188	; 0xbc
 8008816:	f001 fd8d 	bl	800a334 <pvPortMalloc>
 800881a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	631a      	str	r2, [r3, #48]	; 0x30
 8008828:	e005      	b.n	8008836 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800882a:	6978      	ldr	r0, [r7, #20]
 800882c:	f001 fe4c 	bl	800a4c8 <vPortFree>
 8008830:	e001      	b.n	8008836 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d017      	beq.n	800886c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008844:	88fa      	ldrh	r2, [r7, #6]
 8008846:	2300      	movs	r3, #0
 8008848:	9303      	str	r3, [sp, #12]
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	9302      	str	r3, [sp, #8]
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f80e 	bl	800887c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008860:	69f8      	ldr	r0, [r7, #28]
 8008862:	f000 f8b3 	bl	80089cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008866:	2301      	movs	r3, #1
 8008868:	61bb      	str	r3, [r7, #24]
 800886a:	e002      	b.n	8008872 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800886c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008870:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008872:	69bb      	ldr	r3, [r7, #24]
	}
 8008874:	4618      	mov	r0, r3
 8008876:	3720      	adds	r7, #32
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	461a      	mov	r2, r3
 8008894:	21a5      	movs	r1, #165	; 0xa5
 8008896:	f00c f8e2 	bl	8014a5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80088a4:	440b      	add	r3, r1
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	f023 0307 	bic.w	r3, r3, #7
 80088b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00c      	beq.n	80088d8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	b672      	cpsid	i
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	b662      	cpsie	i
 80088d2:	617b      	str	r3, [r7, #20]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d01f      	beq.n	800891e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088de:	2300      	movs	r3, #0
 80088e0:	61fb      	str	r3, [r7, #28]
 80088e2:	e012      	b.n	800890a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4413      	add	r3, r2
 80088ea:	7819      	ldrb	r1, [r3, #0]
 80088ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	4413      	add	r3, r2
 80088f2:	3334      	adds	r3, #52	; 0x34
 80088f4:	460a      	mov	r2, r1
 80088f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	4413      	add	r3, r2
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d006      	beq.n	8008912 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	3301      	adds	r3, #1
 8008908:	61fb      	str	r3, [r7, #28]
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	2b0f      	cmp	r3, #15
 800890e:	d9e9      	bls.n	80088e4 <prvInitialiseNewTask+0x68>
 8008910:	e000      	b.n	8008914 <prvInitialiseNewTask+0x98>
			{
				break;
 8008912:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800891c:	e003      	b.n	8008926 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008928:	2b37      	cmp	r3, #55	; 0x37
 800892a:	d901      	bls.n	8008930 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800892c:	2337      	movs	r3, #55	; 0x37
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008934:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800893a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	2200      	movs	r2, #0
 8008940:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	3304      	adds	r3, #4
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fd4c 	bl	80073e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	3318      	adds	r3, #24
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe fd47 	bl	80073e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800895a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800896a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	2200      	movs	r2, #0
 8008970:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	2200      	movs	r2, #0
 8008978:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	3354      	adds	r3, #84	; 0x54
 8008980:	2260      	movs	r2, #96	; 0x60
 8008982:	2100      	movs	r1, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f00c f86a 	bl	8014a5e <memset>
 800898a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898c:	4a0c      	ldr	r2, [pc, #48]	; (80089c0 <prvInitialiseNewTask+0x144>)
 800898e:	659a      	str	r2, [r3, #88]	; 0x58
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	4a0c      	ldr	r2, [pc, #48]	; (80089c4 <prvInitialiseNewTask+0x148>)
 8008994:	65da      	str	r2, [r3, #92]	; 0x5c
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	4a0b      	ldr	r2, [pc, #44]	; (80089c8 <prvInitialiseNewTask+0x14c>)
 800899a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	69b8      	ldr	r0, [r7, #24]
 80089a2:	f001 fa8f 	bl	8009ec4 <pxPortInitialiseStack>
 80089a6:	4602      	mov	r2, r0
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089b8:	bf00      	nop
 80089ba:	3720      	adds	r7, #32
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	080186b8 	.word	0x080186b8
 80089c4:	080186d8 	.word	0x080186d8
 80089c8:	08018698 	.word	0x08018698

080089cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089d4:	f001 fb82 	bl	800a0dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089d8:	4b2d      	ldr	r3, [pc, #180]	; (8008a90 <prvAddNewTaskToReadyList+0xc4>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3301      	adds	r3, #1
 80089de:	4a2c      	ldr	r2, [pc, #176]	; (8008a90 <prvAddNewTaskToReadyList+0xc4>)
 80089e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089e2:	4b2c      	ldr	r3, [pc, #176]	; (8008a94 <prvAddNewTaskToReadyList+0xc8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d109      	bne.n	80089fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089ea:	4a2a      	ldr	r2, [pc, #168]	; (8008a94 <prvAddNewTaskToReadyList+0xc8>)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089f0:	4b27      	ldr	r3, [pc, #156]	; (8008a90 <prvAddNewTaskToReadyList+0xc4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d110      	bne.n	8008a1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089f8:	f000 fc4e 	bl	8009298 <prvInitialiseTaskLists>
 80089fc:	e00d      	b.n	8008a1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089fe:	4b26      	ldr	r3, [pc, #152]	; (8008a98 <prvAddNewTaskToReadyList+0xcc>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d109      	bne.n	8008a1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a06:	4b23      	ldr	r3, [pc, #140]	; (8008a94 <prvAddNewTaskToReadyList+0xc8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d802      	bhi.n	8008a1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a14:	4a1f      	ldr	r2, [pc, #124]	; (8008a94 <prvAddNewTaskToReadyList+0xc8>)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a1a:	4b20      	ldr	r3, [pc, #128]	; (8008a9c <prvAddNewTaskToReadyList+0xd0>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	4a1e      	ldr	r2, [pc, #120]	; (8008a9c <prvAddNewTaskToReadyList+0xd0>)
 8008a22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a24:	4b1d      	ldr	r3, [pc, #116]	; (8008a9c <prvAddNewTaskToReadyList+0xd0>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a30:	4b1b      	ldr	r3, [pc, #108]	; (8008aa0 <prvAddNewTaskToReadyList+0xd4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d903      	bls.n	8008a40 <prvAddNewTaskToReadyList+0x74>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	4a18      	ldr	r2, [pc, #96]	; (8008aa0 <prvAddNewTaskToReadyList+0xd4>)
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a44:	4613      	mov	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4a15      	ldr	r2, [pc, #84]	; (8008aa4 <prvAddNewTaskToReadyList+0xd8>)
 8008a4e:	441a      	add	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3304      	adds	r3, #4
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	f7fe fcd1 	bl	80073fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a5c:	f001 fb72 	bl	800a144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a60:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <prvAddNewTaskToReadyList+0xcc>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00e      	beq.n	8008a86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <prvAddNewTaskToReadyList+0xc8>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d207      	bcs.n	8008a86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a76:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <prvAddNewTaskToReadyList+0xdc>)
 8008a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20046ee0 	.word	0x20046ee0
 8008a94:	20046a0c 	.word	0x20046a0c
 8008a98:	20046eec 	.word	0x20046eec
 8008a9c:	20046efc 	.word	0x20046efc
 8008aa0:	20046ee8 	.word	0x20046ee8
 8008aa4:	20046a10 	.word	0x20046a10
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d019      	beq.n	8008af2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008abe:	4b14      	ldr	r3, [pc, #80]	; (8008b10 <vTaskDelay+0x64>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00c      	beq.n	8008ae0 <vTaskDelay+0x34>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	b672      	cpsid	i
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	b662      	cpsie	i
 8008ada:	60bb      	str	r3, [r7, #8]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008ae0:	f000 f88e 	bl	8008c00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fe3c 	bl	8009764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008aec:	f000 f896 	bl	8008c1c <xTaskResumeAll>
 8008af0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d107      	bne.n	8008b08 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008af8:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <vTaskDelay+0x68>)
 8008afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20046f08 	.word	0x20046f08
 8008b14:	e000ed04 	.word	0xe000ed04

08008b18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08a      	sub	sp, #40	; 0x28
 8008b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b26:	463a      	mov	r2, r7
 8008b28:	1d39      	adds	r1, r7, #4
 8008b2a:	f107 0308 	add.w	r3, r7, #8
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fc04 	bl	800733c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	9202      	str	r2, [sp, #8]
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	2300      	movs	r3, #0
 8008b44:	460a      	mov	r2, r1
 8008b46:	4926      	ldr	r1, [pc, #152]	; (8008be0 <vTaskStartScheduler+0xc8>)
 8008b48:	4826      	ldr	r0, [pc, #152]	; (8008be4 <vTaskStartScheduler+0xcc>)
 8008b4a:	f7ff fdef 	bl	800872c <xTaskCreateStatic>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4a25      	ldr	r2, [pc, #148]	; (8008be8 <vTaskStartScheduler+0xd0>)
 8008b52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b54:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <vTaskStartScheduler+0xd0>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	e001      	b.n	8008b66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d102      	bne.n	8008b72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b6c:	f000 fe4e 	bl	800980c <xTimerCreateTimerTask>
 8008b70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d11d      	bne.n	8008bb4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	b672      	cpsid	i
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	b662      	cpsie	i
 8008b8c:	613b      	str	r3, [r7, #16]
}
 8008b8e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b90:	4b16      	ldr	r3, [pc, #88]	; (8008bec <vTaskStartScheduler+0xd4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3354      	adds	r3, #84	; 0x54
 8008b96:	4a16      	ldr	r2, [pc, #88]	; (8008bf0 <vTaskStartScheduler+0xd8>)
 8008b98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b9a:	4b16      	ldr	r3, [pc, #88]	; (8008bf4 <vTaskStartScheduler+0xdc>)
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ba0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ba2:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <vTaskStartScheduler+0xe0>)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ba8:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <vTaskStartScheduler+0xe4>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bae:	f001 fa17 	bl	8009fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bb2:	e010      	b.n	8008bd6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bba:	d10c      	bne.n	8008bd6 <vTaskStartScheduler+0xbe>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	b672      	cpsid	i
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	b662      	cpsie	i
 8008bd0:	60fb      	str	r3, [r7, #12]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <vTaskStartScheduler+0xbc>
}
 8008bd6:	bf00      	nop
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	08015a8c 	.word	0x08015a8c
 8008be4:	08009269 	.word	0x08009269
 8008be8:	20046f04 	.word	0x20046f04
 8008bec:	20046a0c 	.word	0x20046a0c
 8008bf0:	20001834 	.word	0x20001834
 8008bf4:	20046f00 	.word	0x20046f00
 8008bf8:	20046eec 	.word	0x20046eec
 8008bfc:	20046ee4 	.word	0x20046ee4

08008c00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008c04:	4b04      	ldr	r3, [pc, #16]	; (8008c18 <vTaskSuspendAll+0x18>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	4a03      	ldr	r2, [pc, #12]	; (8008c18 <vTaskSuspendAll+0x18>)
 8008c0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008c0e:	bf00      	nop
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	20046f08 	.word	0x20046f08

08008c1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c2a:	4b43      	ldr	r3, [pc, #268]	; (8008d38 <xTaskResumeAll+0x11c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10c      	bne.n	8008c4c <xTaskResumeAll+0x30>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	b672      	cpsid	i
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	b662      	cpsie	i
 8008c46:	603b      	str	r3, [r7, #0]
}
 8008c48:	bf00      	nop
 8008c4a:	e7fe      	b.n	8008c4a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c4c:	f001 fa46 	bl	800a0dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c50:	4b39      	ldr	r3, [pc, #228]	; (8008d38 <xTaskResumeAll+0x11c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	4a38      	ldr	r2, [pc, #224]	; (8008d38 <xTaskResumeAll+0x11c>)
 8008c58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c5a:	4b37      	ldr	r3, [pc, #220]	; (8008d38 <xTaskResumeAll+0x11c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d162      	bne.n	8008d28 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c62:	4b36      	ldr	r3, [pc, #216]	; (8008d3c <xTaskResumeAll+0x120>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d05e      	beq.n	8008d28 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c6a:	e02f      	b.n	8008ccc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c6c:	4b34      	ldr	r3, [pc, #208]	; (8008d40 <xTaskResumeAll+0x124>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3318      	adds	r3, #24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fe fc1d 	bl	80074b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3304      	adds	r3, #4
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fc18 	bl	80074b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8c:	4b2d      	ldr	r3, [pc, #180]	; (8008d44 <xTaskResumeAll+0x128>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d903      	bls.n	8008c9c <xTaskResumeAll+0x80>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	4a2a      	ldr	r2, [pc, #168]	; (8008d44 <xTaskResumeAll+0x128>)
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4a27      	ldr	r2, [pc, #156]	; (8008d48 <xTaskResumeAll+0x12c>)
 8008caa:	441a      	add	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	f7fe fba3 	bl	80073fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cbc:	4b23      	ldr	r3, [pc, #140]	; (8008d4c <xTaskResumeAll+0x130>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d302      	bcc.n	8008ccc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008cc6:	4b22      	ldr	r3, [pc, #136]	; (8008d50 <xTaskResumeAll+0x134>)
 8008cc8:	2201      	movs	r2, #1
 8008cca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ccc:	4b1c      	ldr	r3, [pc, #112]	; (8008d40 <xTaskResumeAll+0x124>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1cb      	bne.n	8008c6c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008cda:	f000 fb81 	bl	80093e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008cde:	4b1d      	ldr	r3, [pc, #116]	; (8008d54 <xTaskResumeAll+0x138>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d010      	beq.n	8008d0c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008cea:	f000 f859 	bl	8008da0 <xTaskIncrementTick>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008cf4:	4b16      	ldr	r3, [pc, #88]	; (8008d50 <xTaskResumeAll+0x134>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1f1      	bne.n	8008cea <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008d06:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <xTaskResumeAll+0x138>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d0c:	4b10      	ldr	r3, [pc, #64]	; (8008d50 <xTaskResumeAll+0x134>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d14:	2301      	movs	r3, #1
 8008d16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d18:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <xTaskResumeAll+0x13c>)
 8008d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d28:	f001 fa0c 	bl	800a144 <vPortExitCritical>

	return xAlreadyYielded;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20046f08 	.word	0x20046f08
 8008d3c:	20046ee0 	.word	0x20046ee0
 8008d40:	20046ea0 	.word	0x20046ea0
 8008d44:	20046ee8 	.word	0x20046ee8
 8008d48:	20046a10 	.word	0x20046a10
 8008d4c:	20046a0c 	.word	0x20046a0c
 8008d50:	20046ef4 	.word	0x20046ef4
 8008d54:	20046ef0 	.word	0x20046ef0
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d62:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <xTaskGetTickCount+0x1c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d68:	687b      	ldr	r3, [r7, #4]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	20046ee4 	.word	0x20046ee4

08008d7c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d82:	f001 fa93 	bl	800a2ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008d86:	2300      	movs	r3, #0
 8008d88:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008d8a:	4b04      	ldr	r3, [pc, #16]	; (8008d9c <xTaskGetTickCountFromISR+0x20>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d90:	683b      	ldr	r3, [r7, #0]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20046ee4 	.word	0x20046ee4

08008da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008daa:	4b50      	ldr	r3, [pc, #320]	; (8008eec <xTaskIncrementTick+0x14c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f040 808b 	bne.w	8008eca <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008db4:	4b4e      	ldr	r3, [pc, #312]	; (8008ef0 <xTaskIncrementTick+0x150>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dbc:	4a4c      	ldr	r2, [pc, #304]	; (8008ef0 <xTaskIncrementTick+0x150>)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d122      	bne.n	8008e0e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dc8:	4b4a      	ldr	r3, [pc, #296]	; (8008ef4 <xTaskIncrementTick+0x154>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00c      	beq.n	8008dec <xTaskIncrementTick+0x4c>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	b672      	cpsid	i
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	b662      	cpsie	i
 8008de6:	603b      	str	r3, [r7, #0]
}
 8008de8:	bf00      	nop
 8008dea:	e7fe      	b.n	8008dea <xTaskIncrementTick+0x4a>
 8008dec:	4b41      	ldr	r3, [pc, #260]	; (8008ef4 <xTaskIncrementTick+0x154>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	60fb      	str	r3, [r7, #12]
 8008df2:	4b41      	ldr	r3, [pc, #260]	; (8008ef8 <xTaskIncrementTick+0x158>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a3f      	ldr	r2, [pc, #252]	; (8008ef4 <xTaskIncrementTick+0x154>)
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	4a3f      	ldr	r2, [pc, #252]	; (8008ef8 <xTaskIncrementTick+0x158>)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	4b3e      	ldr	r3, [pc, #248]	; (8008efc <xTaskIncrementTick+0x15c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3301      	adds	r3, #1
 8008e06:	4a3d      	ldr	r2, [pc, #244]	; (8008efc <xTaskIncrementTick+0x15c>)
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	f000 fae9 	bl	80093e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e0e:	4b3c      	ldr	r3, [pc, #240]	; (8008f00 <xTaskIncrementTick+0x160>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d349      	bcc.n	8008eac <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e18:	4b36      	ldr	r3, [pc, #216]	; (8008ef4 <xTaskIncrementTick+0x154>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d104      	bne.n	8008e2c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e22:	4b37      	ldr	r3, [pc, #220]	; (8008f00 <xTaskIncrementTick+0x160>)
 8008e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e28:	601a      	str	r2, [r3, #0]
					break;
 8008e2a:	e03f      	b.n	8008eac <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e2c:	4b31      	ldr	r3, [pc, #196]	; (8008ef4 <xTaskIncrementTick+0x154>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d203      	bcs.n	8008e4c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e44:	4a2e      	ldr	r2, [pc, #184]	; (8008f00 <xTaskIncrementTick+0x160>)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e4a:	e02f      	b.n	8008eac <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fe fb31 	bl	80074b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	3318      	adds	r3, #24
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe fb28 	bl	80074b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6c:	4b25      	ldr	r3, [pc, #148]	; (8008f04 <xTaskIncrementTick+0x164>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d903      	bls.n	8008e7c <xTaskIncrementTick+0xdc>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	4a22      	ldr	r2, [pc, #136]	; (8008f04 <xTaskIncrementTick+0x164>)
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e80:	4613      	mov	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4a1f      	ldr	r2, [pc, #124]	; (8008f08 <xTaskIncrementTick+0x168>)
 8008e8a:	441a      	add	r2, r3
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f7fe fab3 	bl	80073fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9c:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <xTaskIncrementTick+0x16c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d3b8      	bcc.n	8008e18 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eaa:	e7b5      	b.n	8008e18 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008eac:	4b17      	ldr	r3, [pc, #92]	; (8008f0c <xTaskIncrementTick+0x16c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb2:	4915      	ldr	r1, [pc, #84]	; (8008f08 <xTaskIncrementTick+0x168>)
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d907      	bls.n	8008ed4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	e004      	b.n	8008ed4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008eca:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <xTaskIncrementTick+0x170>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	4a0f      	ldr	r2, [pc, #60]	; (8008f10 <xTaskIncrementTick+0x170>)
 8008ed2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008ed4:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <xTaskIncrementTick+0x174>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008edc:	2301      	movs	r3, #1
 8008ede:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008ee0:	697b      	ldr	r3, [r7, #20]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20046f08 	.word	0x20046f08
 8008ef0:	20046ee4 	.word	0x20046ee4
 8008ef4:	20046e98 	.word	0x20046e98
 8008ef8:	20046e9c 	.word	0x20046e9c
 8008efc:	20046ef8 	.word	0x20046ef8
 8008f00:	20046f00 	.word	0x20046f00
 8008f04:	20046ee8 	.word	0x20046ee8
 8008f08:	20046a10 	.word	0x20046a10
 8008f0c:	20046a0c 	.word	0x20046a0c
 8008f10:	20046ef0 	.word	0x20046ef0
 8008f14:	20046ef4 	.word	0x20046ef4

08008f18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f1e:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <vTaskSwitchContext+0xb4>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f26:	4b2a      	ldr	r3, [pc, #168]	; (8008fd0 <vTaskSwitchContext+0xb8>)
 8008f28:	2201      	movs	r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f2c:	e048      	b.n	8008fc0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008f2e:	4b28      	ldr	r3, [pc, #160]	; (8008fd0 <vTaskSwitchContext+0xb8>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f34:	4b27      	ldr	r3, [pc, #156]	; (8008fd4 <vTaskSwitchContext+0xbc>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	e012      	b.n	8008f62 <vTaskSwitchContext+0x4a>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10c      	bne.n	8008f5c <vTaskSwitchContext+0x44>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	b672      	cpsid	i
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	b662      	cpsie	i
 8008f56:	607b      	str	r3, [r7, #4]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <vTaskSwitchContext+0x42>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	491d      	ldr	r1, [pc, #116]	; (8008fd8 <vTaskSwitchContext+0xc0>)
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	440b      	add	r3, r1
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0e2      	beq.n	8008f3c <vTaskSwitchContext+0x24>
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4a15      	ldr	r2, [pc, #84]	; (8008fd8 <vTaskSwitchContext+0xc0>)
 8008f82:	4413      	add	r3, r2
 8008f84:	60bb      	str	r3, [r7, #8]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	605a      	str	r2, [r3, #4]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	3308      	adds	r3, #8
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d104      	bne.n	8008fa6 <vTaskSwitchContext+0x8e>
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	605a      	str	r2, [r3, #4]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	4a0b      	ldr	r2, [pc, #44]	; (8008fdc <vTaskSwitchContext+0xc4>)
 8008fae:	6013      	str	r3, [r2, #0]
 8008fb0:	4a08      	ldr	r2, [pc, #32]	; (8008fd4 <vTaskSwitchContext+0xbc>)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fb6:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <vTaskSwitchContext+0xc4>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3354      	adds	r3, #84	; 0x54
 8008fbc:	4a08      	ldr	r2, [pc, #32]	; (8008fe0 <vTaskSwitchContext+0xc8>)
 8008fbe:	6013      	str	r3, [r2, #0]
}
 8008fc0:	bf00      	nop
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	20046f08 	.word	0x20046f08
 8008fd0:	20046ef4 	.word	0x20046ef4
 8008fd4:	20046ee8 	.word	0x20046ee8
 8008fd8:	20046a10 	.word	0x20046a10
 8008fdc:	20046a0c 	.word	0x20046a0c
 8008fe0:	20001834 	.word	0x20001834

08008fe4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10c      	bne.n	800900e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	b672      	cpsid	i
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	b662      	cpsie	i
 8009008:	60fb      	str	r3, [r7, #12]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800900e:	4b07      	ldr	r3, [pc, #28]	; (800902c <vTaskPlaceOnEventList+0x48>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3318      	adds	r3, #24
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fe fa15 	bl	8007446 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800901c:	2101      	movs	r1, #1
 800901e:	6838      	ldr	r0, [r7, #0]
 8009020:	f000 fba0 	bl	8009764 <prvAddCurrentTaskToDelayedList>
}
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	20046a0c 	.word	0x20046a0c

08009030 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10c      	bne.n	800905c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	b672      	cpsid	i
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	b662      	cpsie	i
 8009056:	617b      	str	r3, [r7, #20]
}
 8009058:	bf00      	nop
 800905a:	e7fe      	b.n	800905a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800905c:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <vTaskPlaceOnEventListRestricted+0x58>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3318      	adds	r3, #24
 8009062:	4619      	mov	r1, r3
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7fe f9ca 	bl	80073fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009074:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	68b8      	ldr	r0, [r7, #8]
 800907a:	f000 fb73 	bl	8009764 <prvAddCurrentTaskToDelayedList>
	}
 800907e:	bf00      	nop
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20046a0c 	.word	0x20046a0c

0800908c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10c      	bne.n	80090bc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	b672      	cpsid	i
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	b662      	cpsie	i
 80090b6:	60fb      	str	r3, [r7, #12]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	3318      	adds	r3, #24
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe f9f9 	bl	80074b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c6:	4b1e      	ldr	r3, [pc, #120]	; (8009140 <xTaskRemoveFromEventList+0xb4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d11d      	bne.n	800910a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe f9f0 	bl	80074b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4b19      	ldr	r3, [pc, #100]	; (8009144 <xTaskRemoveFromEventList+0xb8>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d903      	bls.n	80090ec <xTaskRemoveFromEventList+0x60>
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	4a16      	ldr	r2, [pc, #88]	; (8009144 <xTaskRemoveFromEventList+0xb8>)
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4a13      	ldr	r2, [pc, #76]	; (8009148 <xTaskRemoveFromEventList+0xbc>)
 80090fa:	441a      	add	r2, r3
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	3304      	adds	r3, #4
 8009100:	4619      	mov	r1, r3
 8009102:	4610      	mov	r0, r2
 8009104:	f7fe f97b 	bl	80073fe <vListInsertEnd>
 8009108:	e005      	b.n	8009116 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3318      	adds	r3, #24
 800910e:	4619      	mov	r1, r3
 8009110:	480e      	ldr	r0, [pc, #56]	; (800914c <xTaskRemoveFromEventList+0xc0>)
 8009112:	f7fe f974 	bl	80073fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911a:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <xTaskRemoveFromEventList+0xc4>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	429a      	cmp	r2, r3
 8009122:	d905      	bls.n	8009130 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009128:	4b0a      	ldr	r3, [pc, #40]	; (8009154 <xTaskRemoveFromEventList+0xc8>)
 800912a:	2201      	movs	r2, #1
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	e001      	b.n	8009134 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009134:	697b      	ldr	r3, [r7, #20]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	20046f08 	.word	0x20046f08
 8009144:	20046ee8 	.word	0x20046ee8
 8009148:	20046a10 	.word	0x20046a10
 800914c:	20046ea0 	.word	0x20046ea0
 8009150:	20046a0c 	.word	0x20046a0c
 8009154:	20046ef4 	.word	0x20046ef4

08009158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <vTaskInternalSetTimeOutState+0x24>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009168:	4b05      	ldr	r3, [pc, #20]	; (8009180 <vTaskInternalSetTimeOutState+0x28>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	20046ef8 	.word	0x20046ef8
 8009180:	20046ee4 	.word	0x20046ee4

08009184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10c      	bne.n	80091ae <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	b672      	cpsid	i
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	b662      	cpsie	i
 80091a8:	613b      	str	r3, [r7, #16]
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10c      	bne.n	80091ce <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	b672      	cpsid	i
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	b662      	cpsie	i
 80091c8:	60fb      	str	r3, [r7, #12]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80091ce:	f000 ff85 	bl	800a0dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091d2:	4b1d      	ldr	r3, [pc, #116]	; (8009248 <xTaskCheckForTimeOut+0xc4>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ea:	d102      	bne.n	80091f2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61fb      	str	r3, [r7, #28]
 80091f0:	e023      	b.n	800923a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	4b15      	ldr	r3, [pc, #84]	; (800924c <xTaskCheckForTimeOut+0xc8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d007      	beq.n	800920e <xTaskCheckForTimeOut+0x8a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	429a      	cmp	r2, r3
 8009206:	d302      	bcc.n	800920e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	e015      	b.n	800923a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	429a      	cmp	r2, r3
 8009216:	d20b      	bcs.n	8009230 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	1ad2      	subs	r2, r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff ff97 	bl	8009158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800922a:	2300      	movs	r3, #0
 800922c:	61fb      	str	r3, [r7, #28]
 800922e:	e004      	b.n	800923a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009236:	2301      	movs	r3, #1
 8009238:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800923a:	f000 ff83 	bl	800a144 <vPortExitCritical>

	return xReturn;
 800923e:	69fb      	ldr	r3, [r7, #28]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3720      	adds	r7, #32
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	20046ee4 	.word	0x20046ee4
 800924c:	20046ef8 	.word	0x20046ef8

08009250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009250:	b480      	push	{r7}
 8009252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009254:	4b03      	ldr	r3, [pc, #12]	; (8009264 <vTaskMissedYield+0x14>)
 8009256:	2201      	movs	r2, #1
 8009258:	601a      	str	r2, [r3, #0]
}
 800925a:	bf00      	nop
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	20046ef4 	.word	0x20046ef4

08009268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009270:	f000 f852 	bl	8009318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009274:	4b06      	ldr	r3, [pc, #24]	; (8009290 <prvIdleTask+0x28>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d9f9      	bls.n	8009270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800927c:	4b05      	ldr	r3, [pc, #20]	; (8009294 <prvIdleTask+0x2c>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800928c:	e7f0      	b.n	8009270 <prvIdleTask+0x8>
 800928e:	bf00      	nop
 8009290:	20046a10 	.word	0x20046a10
 8009294:	e000ed04 	.word	0xe000ed04

08009298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800929e:	2300      	movs	r3, #0
 80092a0:	607b      	str	r3, [r7, #4]
 80092a2:	e00c      	b.n	80092be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	4613      	mov	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4a12      	ldr	r2, [pc, #72]	; (80092f8 <prvInitialiseTaskLists+0x60>)
 80092b0:	4413      	add	r3, r2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe f876 	bl	80073a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	3301      	adds	r3, #1
 80092bc:	607b      	str	r3, [r7, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b37      	cmp	r3, #55	; 0x37
 80092c2:	d9ef      	bls.n	80092a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092c4:	480d      	ldr	r0, [pc, #52]	; (80092fc <prvInitialiseTaskLists+0x64>)
 80092c6:	f7fe f86d 	bl	80073a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092ca:	480d      	ldr	r0, [pc, #52]	; (8009300 <prvInitialiseTaskLists+0x68>)
 80092cc:	f7fe f86a 	bl	80073a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092d0:	480c      	ldr	r0, [pc, #48]	; (8009304 <prvInitialiseTaskLists+0x6c>)
 80092d2:	f7fe f867 	bl	80073a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092d6:	480c      	ldr	r0, [pc, #48]	; (8009308 <prvInitialiseTaskLists+0x70>)
 80092d8:	f7fe f864 	bl	80073a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092dc:	480b      	ldr	r0, [pc, #44]	; (800930c <prvInitialiseTaskLists+0x74>)
 80092de:	f7fe f861 	bl	80073a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092e2:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <prvInitialiseTaskLists+0x78>)
 80092e4:	4a05      	ldr	r2, [pc, #20]	; (80092fc <prvInitialiseTaskLists+0x64>)
 80092e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092e8:	4b0a      	ldr	r3, [pc, #40]	; (8009314 <prvInitialiseTaskLists+0x7c>)
 80092ea:	4a05      	ldr	r2, [pc, #20]	; (8009300 <prvInitialiseTaskLists+0x68>)
 80092ec:	601a      	str	r2, [r3, #0]
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20046a10 	.word	0x20046a10
 80092fc:	20046e70 	.word	0x20046e70
 8009300:	20046e84 	.word	0x20046e84
 8009304:	20046ea0 	.word	0x20046ea0
 8009308:	20046eb4 	.word	0x20046eb4
 800930c:	20046ecc 	.word	0x20046ecc
 8009310:	20046e98 	.word	0x20046e98
 8009314:	20046e9c 	.word	0x20046e9c

08009318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800931e:	e019      	b.n	8009354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009320:	f000 fedc 	bl	800a0dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009324:	4b10      	ldr	r3, [pc, #64]	; (8009368 <prvCheckTasksWaitingTermination+0x50>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe f8c1 	bl	80074b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009336:	4b0d      	ldr	r3, [pc, #52]	; (800936c <prvCheckTasksWaitingTermination+0x54>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3b01      	subs	r3, #1
 800933c:	4a0b      	ldr	r2, [pc, #44]	; (800936c <prvCheckTasksWaitingTermination+0x54>)
 800933e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <prvCheckTasksWaitingTermination+0x58>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3b01      	subs	r3, #1
 8009346:	4a0a      	ldr	r2, [pc, #40]	; (8009370 <prvCheckTasksWaitingTermination+0x58>)
 8009348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800934a:	f000 fefb 	bl	800a144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f810 	bl	8009374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009354:	4b06      	ldr	r3, [pc, #24]	; (8009370 <prvCheckTasksWaitingTermination+0x58>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e1      	bne.n	8009320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20046eb4 	.word	0x20046eb4
 800936c:	20046ee0 	.word	0x20046ee0
 8009370:	20046ec8 	.word	0x20046ec8

08009374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3354      	adds	r3, #84	; 0x54
 8009380:	4618      	mov	r0, r3
 8009382:	f00b fc6d 	bl	8014c60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800938c:	2b00      	cmp	r3, #0
 800938e:	d108      	bne.n	80093a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	4618      	mov	r0, r3
 8009396:	f001 f897 	bl	800a4c8 <vPortFree>
				vPortFree( pxTCB );
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 f894 	bl	800a4c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093a0:	e01a      	b.n	80093d8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d103      	bne.n	80093b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 f88b 	bl	800a4c8 <vPortFree>
	}
 80093b2:	e011      	b.n	80093d8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d00c      	beq.n	80093d8 <prvDeleteTCB+0x64>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	b672      	cpsid	i
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	b662      	cpsie	i
 80093d2:	60fb      	str	r3, [r7, #12]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <prvDeleteTCB+0x62>
	}
 80093d8:	bf00      	nop
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093e6:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <prvResetNextTaskUnblockTime+0x38>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093f0:	4b0a      	ldr	r3, [pc, #40]	; (800941c <prvResetNextTaskUnblockTime+0x3c>)
 80093f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093f8:	e008      	b.n	800940c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <prvResetNextTaskUnblockTime+0x38>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	4a04      	ldr	r2, [pc, #16]	; (800941c <prvResetNextTaskUnblockTime+0x3c>)
 800940a:	6013      	str	r3, [r2, #0]
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	20046e98 	.word	0x20046e98
 800941c:	20046f00 	.word	0x20046f00

08009420 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009426:	4b05      	ldr	r3, [pc, #20]	; (800943c <xTaskGetCurrentTaskHandle+0x1c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800942c:	687b      	ldr	r3, [r7, #4]
	}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	20046a0c 	.word	0x20046a0c

08009440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009446:	4b0b      	ldr	r3, [pc, #44]	; (8009474 <xTaskGetSchedulerState+0x34>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d102      	bne.n	8009454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800944e:	2301      	movs	r3, #1
 8009450:	607b      	str	r3, [r7, #4]
 8009452:	e008      	b.n	8009466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009454:	4b08      	ldr	r3, [pc, #32]	; (8009478 <xTaskGetSchedulerState+0x38>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d102      	bne.n	8009462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800945c:	2302      	movs	r3, #2
 800945e:	607b      	str	r3, [r7, #4]
 8009460:	e001      	b.n	8009466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009462:	2300      	movs	r3, #0
 8009464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009466:	687b      	ldr	r3, [r7, #4]
	}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	20046eec 	.word	0x20046eec
 8009478:	20046f08 	.word	0x20046f08

0800947c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d051      	beq.n	8009536 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009496:	4b2a      	ldr	r3, [pc, #168]	; (8009540 <xTaskPriorityInherit+0xc4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949c:	429a      	cmp	r2, r3
 800949e:	d241      	bcs.n	8009524 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	db06      	blt.n	80094b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a8:	4b25      	ldr	r3, [pc, #148]	; (8009540 <xTaskPriorityInherit+0xc4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6959      	ldr	r1, [r3, #20]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4a1f      	ldr	r2, [pc, #124]	; (8009544 <xTaskPriorityInherit+0xc8>)
 80094c8:	4413      	add	r3, r2
 80094ca:	4299      	cmp	r1, r3
 80094cc:	d122      	bne.n	8009514 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fd fff0 	bl	80074b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094d8:	4b19      	ldr	r3, [pc, #100]	; (8009540 <xTaskPriorityInherit+0xc4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e6:	4b18      	ldr	r3, [pc, #96]	; (8009548 <xTaskPriorityInherit+0xcc>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d903      	bls.n	80094f6 <xTaskPriorityInherit+0x7a>
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	4a15      	ldr	r2, [pc, #84]	; (8009548 <xTaskPriorityInherit+0xcc>)
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4a10      	ldr	r2, [pc, #64]	; (8009544 <xTaskPriorityInherit+0xc8>)
 8009504:	441a      	add	r2, r3
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	3304      	adds	r3, #4
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f7fd ff76 	bl	80073fe <vListInsertEnd>
 8009512:	e004      	b.n	800951e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009514:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <xTaskPriorityInherit+0xc4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800951e:	2301      	movs	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	e008      	b.n	8009536 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009528:	4b05      	ldr	r3, [pc, #20]	; (8009540 <xTaskPriorityInherit+0xc4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	429a      	cmp	r2, r3
 8009530:	d201      	bcs.n	8009536 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009532:	2301      	movs	r3, #1
 8009534:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009536:	68fb      	ldr	r3, [r7, #12]
	}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20046a0c 	.word	0x20046a0c
 8009544:	20046a10 	.word	0x20046a10
 8009548:	20046ee8 	.word	0x20046ee8

0800954c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009558:	2300      	movs	r3, #0
 800955a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d05a      	beq.n	8009618 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009562:	4b30      	ldr	r3, [pc, #192]	; (8009624 <xTaskPriorityDisinherit+0xd8>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	429a      	cmp	r2, r3
 800956a:	d00c      	beq.n	8009586 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	b672      	cpsid	i
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	b662      	cpsie	i
 8009580:	60fb      	str	r3, [r7, #12]
}
 8009582:	bf00      	nop
 8009584:	e7fe      	b.n	8009584 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10c      	bne.n	80095a8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	b672      	cpsid	i
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	b662      	cpsie	i
 80095a2:	60bb      	str	r3, [r7, #8]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ac:	1e5a      	subs	r2, r3, #1
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d02c      	beq.n	8009618 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d128      	bne.n	8009618 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fd ff74 	bl	80074b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e8:	4b0f      	ldr	r3, [pc, #60]	; (8009628 <xTaskPriorityDisinherit+0xdc>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d903      	bls.n	80095f8 <xTaskPriorityDisinherit+0xac>
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	4a0c      	ldr	r2, [pc, #48]	; (8009628 <xTaskPriorityDisinherit+0xdc>)
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4a09      	ldr	r2, [pc, #36]	; (800962c <xTaskPriorityDisinherit+0xe0>)
 8009606:	441a      	add	r2, r3
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	3304      	adds	r3, #4
 800960c:	4619      	mov	r1, r3
 800960e:	4610      	mov	r0, r2
 8009610:	f7fd fef5 	bl	80073fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009614:	2301      	movs	r3, #1
 8009616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009618:	697b      	ldr	r3, [r7, #20]
	}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20046a0c 	.word	0x20046a0c
 8009628:	20046ee8 	.word	0x20046ee8
 800962c:	20046a10 	.word	0x20046a10

08009630 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800963e:	2301      	movs	r3, #1
 8009640:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d06e      	beq.n	8009726 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10c      	bne.n	800966a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	b672      	cpsid	i
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	b662      	cpsie	i
 8009664:	60fb      	str	r3, [r7, #12]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	429a      	cmp	r2, r3
 8009672:	d902      	bls.n	800967a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	61fb      	str	r3, [r7, #28]
 8009678:	e002      	b.n	8009680 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	429a      	cmp	r2, r3
 8009688:	d04d      	beq.n	8009726 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	429a      	cmp	r2, r3
 8009692:	d148      	bne.n	8009726 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009694:	4b26      	ldr	r3, [pc, #152]	; (8009730 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	429a      	cmp	r2, r3
 800969c:	d10c      	bne.n	80096b8 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	b672      	cpsid	i
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	b662      	cpsie	i
 80096b2:	60bb      	str	r3, [r7, #8]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	69fa      	ldr	r2, [r7, #28]
 80096c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	db04      	blt.n	80096d6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	6959      	ldr	r1, [r3, #20]
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	4613      	mov	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4a13      	ldr	r2, [pc, #76]	; (8009734 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80096e6:	4413      	add	r3, r2
 80096e8:	4299      	cmp	r1, r3
 80096ea:	d11c      	bne.n	8009726 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fd fee1 	bl	80074b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fa:	4b0f      	ldr	r3, [pc, #60]	; (8009738 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d903      	bls.n	800970a <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009706:	4a0c      	ldr	r2, [pc, #48]	; (8009738 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970e:	4613      	mov	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4a07      	ldr	r2, [pc, #28]	; (8009734 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009718:	441a      	add	r2, r3
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	3304      	adds	r3, #4
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f7fd fe6c 	bl	80073fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009726:	bf00      	nop
 8009728:	3720      	adds	r7, #32
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20046a0c 	.word	0x20046a0c
 8009734:	20046a10 	.word	0x20046a10
 8009738:	20046ee8 	.word	0x20046ee8

0800973c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800973c:	b480      	push	{r7}
 800973e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <pvTaskIncrementMutexHeldCount+0x24>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d004      	beq.n	8009752 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <pvTaskIncrementMutexHeldCount+0x24>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800974e:	3201      	adds	r2, #1
 8009750:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009752:	4b03      	ldr	r3, [pc, #12]	; (8009760 <pvTaskIncrementMutexHeldCount+0x24>)
 8009754:	681b      	ldr	r3, [r3, #0]
	}
 8009756:	4618      	mov	r0, r3
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	20046a0c 	.word	0x20046a0c

08009764 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800976e:	4b21      	ldr	r3, [pc, #132]	; (80097f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009774:	4b20      	ldr	r3, [pc, #128]	; (80097f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3304      	adds	r3, #4
 800977a:	4618      	mov	r0, r3
 800977c:	f7fd fe9c 	bl	80074b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009786:	d10a      	bne.n	800979e <prvAddCurrentTaskToDelayedList+0x3a>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d007      	beq.n	800979e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800978e:	4b1a      	ldr	r3, [pc, #104]	; (80097f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3304      	adds	r3, #4
 8009794:	4619      	mov	r1, r3
 8009796:	4819      	ldr	r0, [pc, #100]	; (80097fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009798:	f7fd fe31 	bl	80073fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800979c:	e026      	b.n	80097ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4413      	add	r3, r2
 80097a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097a6:	4b14      	ldr	r3, [pc, #80]	; (80097f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d209      	bcs.n	80097ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097b6:	4b12      	ldr	r3, [pc, #72]	; (8009800 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3304      	adds	r3, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f7fd fe3f 	bl	8007446 <vListInsert>
}
 80097c8:	e010      	b.n	80097ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097ca:	4b0e      	ldr	r3, [pc, #56]	; (8009804 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f7fd fe35 	bl	8007446 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d202      	bcs.n	80097ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097e6:	4a08      	ldr	r2, [pc, #32]	; (8009808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	6013      	str	r3, [r2, #0]
}
 80097ec:	bf00      	nop
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20046ee4 	.word	0x20046ee4
 80097f8:	20046a0c 	.word	0x20046a0c
 80097fc:	20046ecc 	.word	0x20046ecc
 8009800:	20046e9c 	.word	0x20046e9c
 8009804:	20046e98 	.word	0x20046e98
 8009808:	20046f00 	.word	0x20046f00

0800980c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08a      	sub	sp, #40	; 0x28
 8009810:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009812:	2300      	movs	r3, #0
 8009814:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009816:	f000 fb15 	bl	8009e44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800981a:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <xTimerCreateTimerTask+0x84>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d021      	beq.n	8009866 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009826:	2300      	movs	r3, #0
 8009828:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800982a:	1d3a      	adds	r2, r7, #4
 800982c:	f107 0108 	add.w	r1, r7, #8
 8009830:	f107 030c 	add.w	r3, r7, #12
 8009834:	4618      	mov	r0, r3
 8009836:	f7fd fd9b 	bl	8007370 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800983a:	6879      	ldr	r1, [r7, #4]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	9202      	str	r2, [sp, #8]
 8009842:	9301      	str	r3, [sp, #4]
 8009844:	2302      	movs	r3, #2
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	2300      	movs	r3, #0
 800984a:	460a      	mov	r2, r1
 800984c:	4911      	ldr	r1, [pc, #68]	; (8009894 <xTimerCreateTimerTask+0x88>)
 800984e:	4812      	ldr	r0, [pc, #72]	; (8009898 <xTimerCreateTimerTask+0x8c>)
 8009850:	f7fe ff6c 	bl	800872c <xTaskCreateStatic>
 8009854:	4603      	mov	r3, r0
 8009856:	4a11      	ldr	r2, [pc, #68]	; (800989c <xTimerCreateTimerTask+0x90>)
 8009858:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800985a:	4b10      	ldr	r3, [pc, #64]	; (800989c <xTimerCreateTimerTask+0x90>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009862:	2301      	movs	r3, #1
 8009864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10c      	bne.n	8009886 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	b672      	cpsid	i
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	b662      	cpsie	i
 8009880:	613b      	str	r3, [r7, #16]
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009886:	697b      	ldr	r3, [r7, #20]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20046f3c 	.word	0x20046f3c
 8009894:	08015a94 	.word	0x08015a94
 8009898:	080099dd 	.word	0x080099dd
 800989c:	20046f40 	.word	0x20046f40

080098a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08a      	sub	sp, #40	; 0x28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10c      	bne.n	80098d2 <xTimerGenericCommand+0x32>
	__asm volatile
 80098b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098bc:	b672      	cpsid	i
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	b662      	cpsie	i
 80098cc:	623b      	str	r3, [r7, #32]
}
 80098ce:	bf00      	nop
 80098d0:	e7fe      	b.n	80098d0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098d2:	4b1a      	ldr	r3, [pc, #104]	; (800993c <xTimerGenericCommand+0x9c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d02a      	beq.n	8009930 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	2b05      	cmp	r3, #5
 80098ea:	dc18      	bgt.n	800991e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098ec:	f7ff fda8 	bl	8009440 <xTaskGetSchedulerState>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d109      	bne.n	800990a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098f6:	4b11      	ldr	r3, [pc, #68]	; (800993c <xTimerGenericCommand+0x9c>)
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f107 0110 	add.w	r1, r7, #16
 80098fe:	2300      	movs	r3, #0
 8009900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009902:	f7fe f881 	bl	8007a08 <xQueueGenericSend>
 8009906:	6278      	str	r0, [r7, #36]	; 0x24
 8009908:	e012      	b.n	8009930 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800990a:	4b0c      	ldr	r3, [pc, #48]	; (800993c <xTimerGenericCommand+0x9c>)
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	f107 0110 	add.w	r1, r7, #16
 8009912:	2300      	movs	r3, #0
 8009914:	2200      	movs	r2, #0
 8009916:	f7fe f877 	bl	8007a08 <xQueueGenericSend>
 800991a:	6278      	str	r0, [r7, #36]	; 0x24
 800991c:	e008      	b.n	8009930 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800991e:	4b07      	ldr	r3, [pc, #28]	; (800993c <xTimerGenericCommand+0x9c>)
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	f107 0110 	add.w	r1, r7, #16
 8009926:	2300      	movs	r3, #0
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	f7fe f973 	bl	8007c14 <xQueueGenericSendFromISR>
 800992e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009932:	4618      	mov	r0, r3
 8009934:	3728      	adds	r7, #40	; 0x28
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20046f3c 	.word	0x20046f3c

08009940 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b088      	sub	sp, #32
 8009944:	af02      	add	r7, sp, #8
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800994a:	4b23      	ldr	r3, [pc, #140]	; (80099d8 <prvProcessExpiredTimer+0x98>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	3304      	adds	r3, #4
 8009958:	4618      	mov	r0, r3
 800995a:	f7fd fdad 	bl	80074b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d024      	beq.n	80099b6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	699a      	ldr	r2, [r3, #24]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	18d1      	adds	r1, r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	6978      	ldr	r0, [r7, #20]
 800997a:	f000 f8d3 	bl	8009b24 <prvInsertTimerInActiveList>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d021      	beq.n	80099c8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009984:	2300      	movs	r3, #0
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	2300      	movs	r3, #0
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	2100      	movs	r1, #0
 800998e:	6978      	ldr	r0, [r7, #20]
 8009990:	f7ff ff86 	bl	80098a0 <xTimerGenericCommand>
 8009994:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d115      	bne.n	80099c8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	b672      	cpsid	i
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	b662      	cpsie	i
 80099b0:	60fb      	str	r3, [r7, #12]
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099bc:	f023 0301 	bic.w	r3, r3, #1
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	6978      	ldr	r0, [r7, #20]
 80099ce:	4798      	blx	r3
}
 80099d0:	bf00      	nop
 80099d2:	3718      	adds	r7, #24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	20046f34 	.word	0x20046f34

080099dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099e4:	f107 0308 	add.w	r3, r7, #8
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f857 	bl	8009a9c <prvGetNextExpireTime>
 80099ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	4619      	mov	r1, r3
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 f803 	bl	8009a00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80099fa:	f000 f8d5 	bl	8009ba8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099fe:	e7f1      	b.n	80099e4 <prvTimerTask+0x8>

08009a00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a0a:	f7ff f8f9 	bl	8008c00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a0e:	f107 0308 	add.w	r3, r7, #8
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 f866 	bl	8009ae4 <prvSampleTimeNow>
 8009a18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d130      	bne.n	8009a82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <prvProcessTimerOrBlockTask+0x3c>
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d806      	bhi.n	8009a3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a2e:	f7ff f8f5 	bl	8008c1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a32:	68f9      	ldr	r1, [r7, #12]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff ff83 	bl	8009940 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a3a:	e024      	b.n	8009a86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d008      	beq.n	8009a54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a42:	4b13      	ldr	r3, [pc, #76]	; (8009a90 <prvProcessTimerOrBlockTask+0x90>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <prvProcessTimerOrBlockTask+0x50>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e000      	b.n	8009a52 <prvProcessTimerOrBlockTask+0x52>
 8009a50:	2300      	movs	r3, #0
 8009a52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a54:	4b0f      	ldr	r3, [pc, #60]	; (8009a94 <prvProcessTimerOrBlockTask+0x94>)
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7fe fe2f 	bl	80086c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a66:	f7ff f8d9 	bl	8008c1c <xTaskResumeAll>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10a      	bne.n	8009a86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a70:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <prvProcessTimerOrBlockTask+0x98>)
 8009a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	f3bf 8f6f 	isb	sy
}
 8009a80:	e001      	b.n	8009a86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a82:	f7ff f8cb 	bl	8008c1c <xTaskResumeAll>
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20046f38 	.word	0x20046f38
 8009a94:	20046f3c 	.word	0x20046f3c
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009aa4:	4b0e      	ldr	r3, [pc, #56]	; (8009ae0 <prvGetNextExpireTime+0x44>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <prvGetNextExpireTime+0x16>
 8009aae:	2201      	movs	r2, #1
 8009ab0:	e000      	b.n	8009ab4 <prvGetNextExpireTime+0x18>
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d105      	bne.n	8009acc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ac0:	4b07      	ldr	r3, [pc, #28]	; (8009ae0 <prvGetNextExpireTime+0x44>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]
 8009aca:	e001      	b.n	8009ad0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009acc:	2300      	movs	r3, #0
 8009ace:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	20046f34 	.word	0x20046f34

08009ae4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009aec:	f7ff f936 	bl	8008d5c <xTaskGetTickCount>
 8009af0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009af2:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <prvSampleTimeNow+0x3c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d205      	bcs.n	8009b08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009afc:	f000 f93c 	bl	8009d78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	e002      	b.n	8009b0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b0e:	4a04      	ldr	r2, [pc, #16]	; (8009b20 <prvSampleTimeNow+0x3c>)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b14:	68fb      	ldr	r3, [r7, #12]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20046f44 	.word	0x20046f44

08009b24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d812      	bhi.n	8009b70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d302      	bcc.n	8009b5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	e01b      	b.n	8009b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b5e:	4b10      	ldr	r3, [pc, #64]	; (8009ba0 <prvInsertTimerInActiveList+0x7c>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3304      	adds	r3, #4
 8009b66:	4619      	mov	r1, r3
 8009b68:	4610      	mov	r0, r2
 8009b6a:	f7fd fc6c 	bl	8007446 <vListInsert>
 8009b6e:	e012      	b.n	8009b96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d206      	bcs.n	8009b86 <prvInsertTimerInActiveList+0x62>
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d302      	bcc.n	8009b86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b80:	2301      	movs	r3, #1
 8009b82:	617b      	str	r3, [r7, #20]
 8009b84:	e007      	b.n	8009b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b86:	4b07      	ldr	r3, [pc, #28]	; (8009ba4 <prvInsertTimerInActiveList+0x80>)
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4610      	mov	r0, r2
 8009b92:	f7fd fc58 	bl	8007446 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b96:	697b      	ldr	r3, [r7, #20]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20046f38 	.word	0x20046f38
 8009ba4:	20046f34 	.word	0x20046f34

08009ba8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08e      	sub	sp, #56	; 0x38
 8009bac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bae:	e0d0      	b.n	8009d52 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	da1a      	bge.n	8009bec <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bb6:	1d3b      	adds	r3, r7, #4
 8009bb8:	3304      	adds	r3, #4
 8009bba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10c      	bne.n	8009bdc <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	b672      	cpsid	i
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	b662      	cpsie	i
 8009bd6:	61fb      	str	r3, [r7, #28]
}
 8009bd8:	bf00      	nop
 8009bda:	e7fe      	b.n	8009bda <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be2:	6850      	ldr	r0, [r2, #4]
 8009be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be6:	6892      	ldr	r2, [r2, #8]
 8009be8:	4611      	mov	r1, r2
 8009bea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f2c0 80ae 	blt.w	8009d50 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d004      	beq.n	8009c0a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	3304      	adds	r3, #4
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fd fc57 	bl	80074b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c0a:	463b      	mov	r3, r7
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7ff ff69 	bl	8009ae4 <prvSampleTimeNow>
 8009c12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b09      	cmp	r3, #9
 8009c18:	f200 809b 	bhi.w	8009d52 <prvProcessReceivedCommands+0x1aa>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <prvProcessReceivedCommands+0x7c>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c4d 	.word	0x08009c4d
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009cc5 	.word	0x08009cc5
 8009c34:	08009cd9 	.word	0x08009cd9
 8009c38:	08009d27 	.word	0x08009d27
 8009c3c:	08009c4d 	.word	0x08009c4d
 8009c40:	08009c4d 	.word	0x08009c4d
 8009c44:	08009cc5 	.word	0x08009cc5
 8009c48:	08009cd9 	.word	0x08009cd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	18d1      	adds	r1, r2, r3
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c6c:	f7ff ff5a 	bl	8009b24 <prvInsertTimerInActiveList>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d06d      	beq.n	8009d52 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d062      	beq.n	8009d52 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	441a      	add	r2, r3
 8009c94:	2300      	movs	r3, #0
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c9e:	f7ff fdff 	bl	80098a0 <xTimerGenericCommand>
 8009ca2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d153      	bne.n	8009d52 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	b672      	cpsid	i
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	b662      	cpsie	i
 8009cbe:	61bb      	str	r3, [r7, #24]
}
 8009cc0:	bf00      	nop
 8009cc2:	e7fe      	b.n	8009cc2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009cd6:	e03c      	b.n	8009d52 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cde:	f043 0301 	orr.w	r3, r3, #1
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10c      	bne.n	8009d12 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	b672      	cpsid	i
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	b662      	cpsie	i
 8009d0c:	617b      	str	r3, [r7, #20]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	699a      	ldr	r2, [r3, #24]
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	18d1      	adds	r1, r2, r3
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d20:	f7ff ff00 	bl	8009b24 <prvInsertTimerInActiveList>
					break;
 8009d24:	e015      	b.n	8009d52 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d2c:	f003 0302 	and.w	r3, r3, #2
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d103      	bne.n	8009d3c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d36:	f000 fbc7 	bl	800a4c8 <vPortFree>
 8009d3a:	e00a      	b.n	8009d52 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d42:	f023 0301 	bic.w	r3, r3, #1
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d4e:	e000      	b.n	8009d52 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d52:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <prvProcessReceivedCommands+0x1cc>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	1d39      	adds	r1, r7, #4
 8009d58:	2200      	movs	r2, #0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe f890 	bl	8007e80 <xQueueReceive>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f47f af24 	bne.w	8009bb0 <prvProcessReceivedCommands+0x8>
	}
}
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
 8009d6c:	3730      	adds	r7, #48	; 0x30
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20046f3c 	.word	0x20046f3c

08009d78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d7e:	e04a      	b.n	8009e16 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d80:	4b2e      	ldr	r3, [pc, #184]	; (8009e3c <prvSwitchTimerLists+0xc4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8a:	4b2c      	ldr	r3, [pc, #176]	; (8009e3c <prvSwitchTimerLists+0xc4>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3304      	adds	r3, #4
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fd fb8d 	bl	80074b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dac:	f003 0304 	and.w	r3, r3, #4
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d030      	beq.n	8009e16 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	4413      	add	r3, r2
 8009dbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d90e      	bls.n	8009de4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dd2:	4b1a      	ldr	r3, [pc, #104]	; (8009e3c <prvSwitchTimerLists+0xc4>)
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3304      	adds	r3, #4
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7fd fb32 	bl	8007446 <vListInsert>
 8009de2:	e018      	b.n	8009e16 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009de4:	2300      	movs	r3, #0
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2300      	movs	r3, #0
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	2100      	movs	r1, #0
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff fd56 	bl	80098a0 <xTimerGenericCommand>
 8009df4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10c      	bne.n	8009e16 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	b672      	cpsid	i
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	b662      	cpsie	i
 8009e10:	603b      	str	r3, [r7, #0]
}
 8009e12:	bf00      	nop
 8009e14:	e7fe      	b.n	8009e14 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e16:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <prvSwitchTimerLists+0xc4>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1af      	bne.n	8009d80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e20:	4b06      	ldr	r3, [pc, #24]	; (8009e3c <prvSwitchTimerLists+0xc4>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e26:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <prvSwitchTimerLists+0xc8>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a04      	ldr	r2, [pc, #16]	; (8009e3c <prvSwitchTimerLists+0xc4>)
 8009e2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e2e:	4a04      	ldr	r2, [pc, #16]	; (8009e40 <prvSwitchTimerLists+0xc8>)
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	6013      	str	r3, [r2, #0]
}
 8009e34:	bf00      	nop
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20046f34 	.word	0x20046f34
 8009e40:	20046f38 	.word	0x20046f38

08009e44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e4a:	f000 f947 	bl	800a0dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e4e:	4b15      	ldr	r3, [pc, #84]	; (8009ea4 <prvCheckForValidListAndQueue+0x60>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d120      	bne.n	8009e98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e56:	4814      	ldr	r0, [pc, #80]	; (8009ea8 <prvCheckForValidListAndQueue+0x64>)
 8009e58:	f7fd faa4 	bl	80073a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e5c:	4813      	ldr	r0, [pc, #76]	; (8009eac <prvCheckForValidListAndQueue+0x68>)
 8009e5e:	f7fd faa1 	bl	80073a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e62:	4b13      	ldr	r3, [pc, #76]	; (8009eb0 <prvCheckForValidListAndQueue+0x6c>)
 8009e64:	4a10      	ldr	r2, [pc, #64]	; (8009ea8 <prvCheckForValidListAndQueue+0x64>)
 8009e66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e68:	4b12      	ldr	r3, [pc, #72]	; (8009eb4 <prvCheckForValidListAndQueue+0x70>)
 8009e6a:	4a10      	ldr	r2, [pc, #64]	; (8009eac <prvCheckForValidListAndQueue+0x68>)
 8009e6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e6e:	2300      	movs	r3, #0
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	4b11      	ldr	r3, [pc, #68]	; (8009eb8 <prvCheckForValidListAndQueue+0x74>)
 8009e74:	4a11      	ldr	r2, [pc, #68]	; (8009ebc <prvCheckForValidListAndQueue+0x78>)
 8009e76:	2110      	movs	r1, #16
 8009e78:	200a      	movs	r0, #10
 8009e7a:	f7fd fbb1 	bl	80075e0 <xQueueGenericCreateStatic>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	4a08      	ldr	r2, [pc, #32]	; (8009ea4 <prvCheckForValidListAndQueue+0x60>)
 8009e82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e84:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <prvCheckForValidListAndQueue+0x60>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d005      	beq.n	8009e98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e8c:	4b05      	ldr	r3, [pc, #20]	; (8009ea4 <prvCheckForValidListAndQueue+0x60>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	490b      	ldr	r1, [pc, #44]	; (8009ec0 <prvCheckForValidListAndQueue+0x7c>)
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe fbc2 	bl	800861c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e98:	f000 f954 	bl	800a144 <vPortExitCritical>
}
 8009e9c:	bf00      	nop
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20046f3c 	.word	0x20046f3c
 8009ea8:	20046f0c 	.word	0x20046f0c
 8009eac:	20046f20 	.word	0x20046f20
 8009eb0:	20046f34 	.word	0x20046f34
 8009eb4:	20046f38 	.word	0x20046f38
 8009eb8:	20046fe8 	.word	0x20046fe8
 8009ebc:	20046f48 	.word	0x20046f48
 8009ec0:	08015a9c 	.word	0x08015a9c

08009ec4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	3b04      	subs	r3, #4
 8009ed4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3b04      	subs	r3, #4
 8009ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	f023 0201 	bic.w	r2, r3, #1
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3b04      	subs	r3, #4
 8009ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ef4:	4a0c      	ldr	r2, [pc, #48]	; (8009f28 <pxPortInitialiseStack+0x64>)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3b14      	subs	r3, #20
 8009efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3b04      	subs	r3, #4
 8009f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f06f 0202 	mvn.w	r2, #2
 8009f12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3b20      	subs	r3, #32
 8009f18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	08009f2d 	.word	0x08009f2d

08009f2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <prvTaskExitError+0x5c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f3e:	d00c      	beq.n	8009f5a <prvTaskExitError+0x2e>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	b672      	cpsid	i
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	b662      	cpsie	i
 8009f54:	60fb      	str	r3, [r7, #12]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <prvTaskExitError+0x2c>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	b672      	cpsid	i
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	b662      	cpsie	i
 8009f6e:	60bb      	str	r3, [r7, #8]
}
 8009f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f72:	bf00      	nop
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0fc      	beq.n	8009f74 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	20001824 	.word	0x20001824
 8009f8c:	00000000 	.word	0x00000000

08009f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <pxCurrentTCBConst2>)
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	6808      	ldr	r0, [r1, #0]
 8009f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9a:	f380 8809 	msr	PSP, r0
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f04f 0000 	mov.w	r0, #0
 8009fa6:	f380 8811 	msr	BASEPRI, r0
 8009faa:	4770      	bx	lr
 8009fac:	f3af 8000 	nop.w

08009fb0 <pxCurrentTCBConst2>:
 8009fb0:	20046a0c 	.word	0x20046a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop

08009fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fb8:	4808      	ldr	r0, [pc, #32]	; (8009fdc <prvPortStartFirstTask+0x24>)
 8009fba:	6800      	ldr	r0, [r0, #0]
 8009fbc:	6800      	ldr	r0, [r0, #0]
 8009fbe:	f380 8808 	msr	MSP, r0
 8009fc2:	f04f 0000 	mov.w	r0, #0
 8009fc6:	f380 8814 	msr	CONTROL, r0
 8009fca:	b662      	cpsie	i
 8009fcc:	b661      	cpsie	f
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	df00      	svc	0
 8009fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fda:	bf00      	nop
 8009fdc:	e000ed08 	.word	0xe000ed08

08009fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fe6:	4b37      	ldr	r3, [pc, #220]	; (800a0c4 <xPortStartScheduler+0xe4>)
 8009fe8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	4b2f      	ldr	r3, [pc, #188]	; (800a0c8 <xPortStartScheduler+0xe8>)
 800a00c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a00e:	4b2f      	ldr	r3, [pc, #188]	; (800a0cc <xPortStartScheduler+0xec>)
 800a010:	2207      	movs	r2, #7
 800a012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a014:	e009      	b.n	800a02a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a016:	4b2d      	ldr	r3, [pc, #180]	; (800a0cc <xPortStartScheduler+0xec>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3b01      	subs	r3, #1
 800a01c:	4a2b      	ldr	r2, [pc, #172]	; (800a0cc <xPortStartScheduler+0xec>)
 800a01e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a020:	78fb      	ldrb	r3, [r7, #3]
 800a022:	b2db      	uxtb	r3, r3
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	b2db      	uxtb	r3, r3
 800a028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a032:	2b80      	cmp	r3, #128	; 0x80
 800a034:	d0ef      	beq.n	800a016 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a036:	4b25      	ldr	r3, [pc, #148]	; (800a0cc <xPortStartScheduler+0xec>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f1c3 0307 	rsb	r3, r3, #7
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d00c      	beq.n	800a05c <xPortStartScheduler+0x7c>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	b672      	cpsid	i
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	b662      	cpsie	i
 800a056:	60bb      	str	r3, [r7, #8]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a05c:	4b1b      	ldr	r3, [pc, #108]	; (800a0cc <xPortStartScheduler+0xec>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	021b      	lsls	r3, r3, #8
 800a062:	4a1a      	ldr	r2, [pc, #104]	; (800a0cc <xPortStartScheduler+0xec>)
 800a064:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a066:	4b19      	ldr	r3, [pc, #100]	; (800a0cc <xPortStartScheduler+0xec>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a06e:	4a17      	ldr	r2, [pc, #92]	; (800a0cc <xPortStartScheduler+0xec>)
 800a070:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	b2da      	uxtb	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a07a:	4b15      	ldr	r3, [pc, #84]	; (800a0d0 <xPortStartScheduler+0xf0>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a14      	ldr	r2, [pc, #80]	; (800a0d0 <xPortStartScheduler+0xf0>)
 800a080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a084:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a086:	4b12      	ldr	r3, [pc, #72]	; (800a0d0 <xPortStartScheduler+0xf0>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a11      	ldr	r2, [pc, #68]	; (800a0d0 <xPortStartScheduler+0xf0>)
 800a08c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a090:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a092:	f000 f8dd 	bl	800a250 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a096:	4b0f      	ldr	r3, [pc, #60]	; (800a0d4 <xPortStartScheduler+0xf4>)
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a09c:	f000 f8fc 	bl	800a298 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0a0:	4b0d      	ldr	r3, [pc, #52]	; (800a0d8 <xPortStartScheduler+0xf8>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a0c      	ldr	r2, [pc, #48]	; (800a0d8 <xPortStartScheduler+0xf8>)
 800a0a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a0aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0ac:	f7ff ff84 	bl	8009fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0b0:	f7fe ff32 	bl	8008f18 <vTaskSwitchContext>
	prvTaskExitError();
 800a0b4:	f7ff ff3a 	bl	8009f2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	e000e400 	.word	0xe000e400
 800a0c8:	20047038 	.word	0x20047038
 800a0cc:	2004703c 	.word	0x2004703c
 800a0d0:	e000ed20 	.word	0xe000ed20
 800a0d4:	20001824 	.word	0x20001824
 800a0d8:	e000ef34 	.word	0xe000ef34

0800a0dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	b672      	cpsid	i
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	b662      	cpsie	i
 800a0f6:	607b      	str	r3, [r7, #4]
}
 800a0f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0fa:	4b10      	ldr	r3, [pc, #64]	; (800a13c <vPortEnterCritical+0x60>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3301      	adds	r3, #1
 800a100:	4a0e      	ldr	r2, [pc, #56]	; (800a13c <vPortEnterCritical+0x60>)
 800a102:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a104:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <vPortEnterCritical+0x60>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d111      	bne.n	800a130 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a10c:	4b0c      	ldr	r3, [pc, #48]	; (800a140 <vPortEnterCritical+0x64>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00c      	beq.n	800a130 <vPortEnterCritical+0x54>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	b672      	cpsid	i
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	b662      	cpsie	i
 800a12a:	603b      	str	r3, [r7, #0]
}
 800a12c:	bf00      	nop
 800a12e:	e7fe      	b.n	800a12e <vPortEnterCritical+0x52>
	}
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	20001824 	.word	0x20001824
 800a140:	e000ed04 	.word	0xe000ed04

0800a144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a14a:	4b13      	ldr	r3, [pc, #76]	; (800a198 <vPortExitCritical+0x54>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10c      	bne.n	800a16c <vPortExitCritical+0x28>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	b672      	cpsid	i
 800a158:	f383 8811 	msr	BASEPRI, r3
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	b662      	cpsie	i
 800a166:	607b      	str	r3, [r7, #4]
}
 800a168:	bf00      	nop
 800a16a:	e7fe      	b.n	800a16a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <vPortExitCritical+0x54>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3b01      	subs	r3, #1
 800a172:	4a09      	ldr	r2, [pc, #36]	; (800a198 <vPortExitCritical+0x54>)
 800a174:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a176:	4b08      	ldr	r3, [pc, #32]	; (800a198 <vPortExitCritical+0x54>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d105      	bne.n	800a18a <vPortExitCritical+0x46>
 800a17e:	2300      	movs	r3, #0
 800a180:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	f383 8811 	msr	BASEPRI, r3
}
 800a188:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a18a:	bf00      	nop
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20001824 	.word	0x20001824
 800a19c:	00000000 	.word	0x00000000

0800a1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1a0:	f3ef 8009 	mrs	r0, PSP
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	4b15      	ldr	r3, [pc, #84]	; (800a200 <pxCurrentTCBConst>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	f01e 0f10 	tst.w	lr, #16
 800a1b0:	bf08      	it	eq
 800a1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ba:	6010      	str	r0, [r2, #0]
 800a1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a1c4:	b672      	cpsid	i
 800a1c6:	f380 8811 	msr	BASEPRI, r0
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	b662      	cpsie	i
 800a1d4:	f7fe fea0 	bl	8008f18 <vTaskSwitchContext>
 800a1d8:	f04f 0000 	mov.w	r0, #0
 800a1dc:	f380 8811 	msr	BASEPRI, r0
 800a1e0:	bc09      	pop	{r0, r3}
 800a1e2:	6819      	ldr	r1, [r3, #0]
 800a1e4:	6808      	ldr	r0, [r1, #0]
 800a1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ea:	f01e 0f10 	tst.w	lr, #16
 800a1ee:	bf08      	it	eq
 800a1f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1f4:	f380 8809 	msr	PSP, r0
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop

0800a200 <pxCurrentTCBConst>:
 800a200:	20046a0c 	.word	0x20046a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop

0800a208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	b672      	cpsid	i
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	b662      	cpsie	i
 800a222:	607b      	str	r3, [r7, #4]
}
 800a224:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a226:	f7fe fdbb 	bl	8008da0 <xTaskIncrementTick>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a230:	4b06      	ldr	r3, [pc, #24]	; (800a24c <SysTick_Handler+0x44>)
 800a232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	2300      	movs	r3, #0
 800a23a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	f383 8811 	msr	BASEPRI, r3
}
 800a242:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a254:	4b0b      	ldr	r3, [pc, #44]	; (800a284 <vPortSetupTimerInterrupt+0x34>)
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <vPortSetupTimerInterrupt+0x38>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a260:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <vPortSetupTimerInterrupt+0x3c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a0a      	ldr	r2, [pc, #40]	; (800a290 <vPortSetupTimerInterrupt+0x40>)
 800a266:	fba2 2303 	umull	r2, r3, r2, r3
 800a26a:	099b      	lsrs	r3, r3, #6
 800a26c:	4a09      	ldr	r2, [pc, #36]	; (800a294 <vPortSetupTimerInterrupt+0x44>)
 800a26e:	3b01      	subs	r3, #1
 800a270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a272:	4b04      	ldr	r3, [pc, #16]	; (800a284 <vPortSetupTimerInterrupt+0x34>)
 800a274:	2207      	movs	r2, #7
 800a276:	601a      	str	r2, [r3, #0]
}
 800a278:	bf00      	nop
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	e000e010 	.word	0xe000e010
 800a288:	e000e018 	.word	0xe000e018
 800a28c:	20001804 	.word	0x20001804
 800a290:	10624dd3 	.word	0x10624dd3
 800a294:	e000e014 	.word	0xe000e014

0800a298 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a298:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a2a8 <vPortEnableVFP+0x10>
 800a29c:	6801      	ldr	r1, [r0, #0]
 800a29e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a2a2:	6001      	str	r1, [r0, #0]
 800a2a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2a6:	bf00      	nop
 800a2a8:	e000ed88 	.word	0xe000ed88

0800a2ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2b2:	f3ef 8305 	mrs	r3, IPSR
 800a2b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b0f      	cmp	r3, #15
 800a2bc:	d916      	bls.n	800a2ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2be:	4a19      	ldr	r2, [pc, #100]	; (800a324 <vPortValidateInterruptPriority+0x78>)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2c8:	4b17      	ldr	r3, [pc, #92]	; (800a328 <vPortValidateInterruptPriority+0x7c>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	7afa      	ldrb	r2, [r7, #11]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d20c      	bcs.n	800a2ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	b672      	cpsid	i
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	b662      	cpsie	i
 800a2e6:	607b      	str	r3, [r7, #4]
}
 800a2e8:	bf00      	nop
 800a2ea:	e7fe      	b.n	800a2ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2ec:	4b0f      	ldr	r3, [pc, #60]	; (800a32c <vPortValidateInterruptPriority+0x80>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2f4:	4b0e      	ldr	r3, [pc, #56]	; (800a330 <vPortValidateInterruptPriority+0x84>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d90c      	bls.n	800a316 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	b672      	cpsid	i
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	b662      	cpsie	i
 800a310:	603b      	str	r3, [r7, #0]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <vPortValidateInterruptPriority+0x68>
	}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	e000e3f0 	.word	0xe000e3f0
 800a328:	20047038 	.word	0x20047038
 800a32c:	e000ed0c 	.word	0xe000ed0c
 800a330:	2004703c 	.word	0x2004703c

0800a334 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08a      	sub	sp, #40	; 0x28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a33c:	2300      	movs	r3, #0
 800a33e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a340:	f7fe fc5e 	bl	8008c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a344:	4b5b      	ldr	r3, [pc, #364]	; (800a4b4 <pvPortMalloc+0x180>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a34c:	f000 f91a 	bl	800a584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a350:	4b59      	ldr	r3, [pc, #356]	; (800a4b8 <pvPortMalloc+0x184>)
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4013      	ands	r3, r2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f040 8092 	bne.w	800a482 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d01f      	beq.n	800a3a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a364:	2208      	movs	r2, #8
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4413      	add	r3, r2
 800a36a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f003 0307 	and.w	r3, r3, #7
 800a372:	2b00      	cmp	r3, #0
 800a374:	d016      	beq.n	800a3a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f023 0307 	bic.w	r3, r3, #7
 800a37c:	3308      	adds	r3, #8
 800a37e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f003 0307 	and.w	r3, r3, #7
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00c      	beq.n	800a3a4 <pvPortMalloc+0x70>
	__asm volatile
 800a38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38e:	b672      	cpsid	i
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	b662      	cpsie	i
 800a39e:	617b      	str	r3, [r7, #20]
}
 800a3a0:	bf00      	nop
 800a3a2:	e7fe      	b.n	800a3a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d06b      	beq.n	800a482 <pvPortMalloc+0x14e>
 800a3aa:	4b44      	ldr	r3, [pc, #272]	; (800a4bc <pvPortMalloc+0x188>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d866      	bhi.n	800a482 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3b4:	4b42      	ldr	r3, [pc, #264]	; (800a4c0 <pvPortMalloc+0x18c>)
 800a3b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3b8:	4b41      	ldr	r3, [pc, #260]	; (800a4c0 <pvPortMalloc+0x18c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3be:	e004      	b.n	800a3ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d903      	bls.n	800a3dc <pvPortMalloc+0xa8>
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1f1      	bne.n	800a3c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3dc:	4b35      	ldr	r3, [pc, #212]	; (800a4b4 <pvPortMalloc+0x180>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d04d      	beq.n	800a482 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2208      	movs	r2, #8
 800a3ec:	4413      	add	r3, r2
 800a3ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	1ad2      	subs	r2, r2, r3
 800a400:	2308      	movs	r3, #8
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	429a      	cmp	r2, r3
 800a406:	d921      	bls.n	800a44c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4413      	add	r3, r2
 800a40e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	f003 0307 	and.w	r3, r3, #7
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00c      	beq.n	800a434 <pvPortMalloc+0x100>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	b672      	cpsid	i
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	b662      	cpsie	i
 800a42e:	613b      	str	r3, [r7, #16]
}
 800a430:	bf00      	nop
 800a432:	e7fe      	b.n	800a432 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	685a      	ldr	r2, [r3, #4]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	1ad2      	subs	r2, r2, r3
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a446:	69b8      	ldr	r0, [r7, #24]
 800a448:	f000 f8fe 	bl	800a648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a44c:	4b1b      	ldr	r3, [pc, #108]	; (800a4bc <pvPortMalloc+0x188>)
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	4a19      	ldr	r2, [pc, #100]	; (800a4bc <pvPortMalloc+0x188>)
 800a458:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a45a:	4b18      	ldr	r3, [pc, #96]	; (800a4bc <pvPortMalloc+0x188>)
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	4b19      	ldr	r3, [pc, #100]	; (800a4c4 <pvPortMalloc+0x190>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	429a      	cmp	r2, r3
 800a464:	d203      	bcs.n	800a46e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a466:	4b15      	ldr	r3, [pc, #84]	; (800a4bc <pvPortMalloc+0x188>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a16      	ldr	r2, [pc, #88]	; (800a4c4 <pvPortMalloc+0x190>)
 800a46c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	685a      	ldr	r2, [r3, #4]
 800a472:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <pvPortMalloc+0x184>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	431a      	orrs	r2, r3
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	2200      	movs	r2, #0
 800a480:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a482:	f7fe fbcb 	bl	8008c1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	f003 0307 	and.w	r3, r3, #7
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00c      	beq.n	800a4aa <pvPortMalloc+0x176>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	b672      	cpsid	i
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	b662      	cpsie	i
 800a4a4:	60fb      	str	r3, [r7, #12]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <pvPortMalloc+0x174>
	return pvReturn;
 800a4aa:	69fb      	ldr	r3, [r7, #28]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3728      	adds	r7, #40	; 0x28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	2004ac48 	.word	0x2004ac48
 800a4b8:	2004ac54 	.word	0x2004ac54
 800a4bc:	2004ac4c 	.word	0x2004ac4c
 800a4c0:	2004ac40 	.word	0x2004ac40
 800a4c4:	2004ac50 	.word	0x2004ac50

0800a4c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d04c      	beq.n	800a574 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4da:	2308      	movs	r3, #8
 800a4dc:	425b      	negs	r3, r3
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	4b23      	ldr	r3, [pc, #140]	; (800a57c <vPortFree+0xb4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10c      	bne.n	800a510 <vPortFree+0x48>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	b672      	cpsid	i
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	b662      	cpsie	i
 800a50a:	60fb      	str	r3, [r7, #12]
}
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00c      	beq.n	800a532 <vPortFree+0x6a>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	b672      	cpsid	i
 800a51e:	f383 8811 	msr	BASEPRI, r3
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	b662      	cpsie	i
 800a52c:	60bb      	str	r3, [r7, #8]
}
 800a52e:	bf00      	nop
 800a530:	e7fe      	b.n	800a530 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	4b11      	ldr	r3, [pc, #68]	; (800a57c <vPortFree+0xb4>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4013      	ands	r3, r2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d019      	beq.n	800a574 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d115      	bne.n	800a574 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <vPortFree+0xb4>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	43db      	mvns	r3, r3
 800a552:	401a      	ands	r2, r3
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a558:	f7fe fb52 	bl	8008c00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	4b07      	ldr	r3, [pc, #28]	; (800a580 <vPortFree+0xb8>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4413      	add	r3, r2
 800a566:	4a06      	ldr	r2, [pc, #24]	; (800a580 <vPortFree+0xb8>)
 800a568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a56a:	6938      	ldr	r0, [r7, #16]
 800a56c:	f000 f86c 	bl	800a648 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a570:	f7fe fb54 	bl	8008c1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a574:	bf00      	nop
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	2004ac54 	.word	0x2004ac54
 800a580:	2004ac4c 	.word	0x2004ac4c

0800a584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a58a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a58e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a590:	4b27      	ldr	r3, [pc, #156]	; (800a630 <prvHeapInit+0xac>)
 800a592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00c      	beq.n	800a5b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3307      	adds	r3, #7
 800a5a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 0307 	bic.w	r3, r3, #7
 800a5aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	4a1f      	ldr	r2, [pc, #124]	; (800a630 <prvHeapInit+0xac>)
 800a5b4:	4413      	add	r3, r2
 800a5b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5bc:	4a1d      	ldr	r2, [pc, #116]	; (800a634 <prvHeapInit+0xb0>)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5c2:	4b1c      	ldr	r3, [pc, #112]	; (800a634 <prvHeapInit+0xb0>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f023 0307 	bic.w	r3, r3, #7
 800a5de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4a15      	ldr	r2, [pc, #84]	; (800a638 <prvHeapInit+0xb4>)
 800a5e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5e6:	4b14      	ldr	r3, [pc, #80]	; (800a638 <prvHeapInit+0xb4>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5ee:	4b12      	ldr	r3, [pc, #72]	; (800a638 <prvHeapInit+0xb4>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	1ad2      	subs	r2, r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a604:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <prvHeapInit+0xb4>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	4a0a      	ldr	r2, [pc, #40]	; (800a63c <prvHeapInit+0xb8>)
 800a612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	4a09      	ldr	r2, [pc, #36]	; (800a640 <prvHeapInit+0xbc>)
 800a61a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a61c:	4b09      	ldr	r3, [pc, #36]	; (800a644 <prvHeapInit+0xc0>)
 800a61e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a622:	601a      	str	r2, [r3, #0]
}
 800a624:	bf00      	nop
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	20047040 	.word	0x20047040
 800a634:	2004ac40 	.word	0x2004ac40
 800a638:	2004ac48 	.word	0x2004ac48
 800a63c:	2004ac50 	.word	0x2004ac50
 800a640:	2004ac4c 	.word	0x2004ac4c
 800a644:	2004ac54 	.word	0x2004ac54

0800a648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a650:	4b28      	ldr	r3, [pc, #160]	; (800a6f4 <prvInsertBlockIntoFreeList+0xac>)
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e002      	b.n	800a65c <prvInsertBlockIntoFreeList+0x14>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	429a      	cmp	r2, r3
 800a664:	d8f7      	bhi.n	800a656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	4413      	add	r3, r2
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	429a      	cmp	r2, r3
 800a676:	d108      	bne.n	800a68a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	441a      	add	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	441a      	add	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d118      	bne.n	800a6d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	4b15      	ldr	r3, [pc, #84]	; (800a6f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d00d      	beq.n	800a6c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	441a      	add	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	e008      	b.n	800a6d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6c6:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	e003      	b.n	800a6d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d002      	beq.n	800a6e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6e6:	bf00      	nop
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	2004ac40 	.word	0x2004ac40
 800a6f8:	2004ac48 	.word	0x2004ac48

0800a6fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a706:	f007 fac5 	bl	8011c94 <sys_timeouts_sleeptime>
 800a70a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a712:	d10b      	bne.n	800a72c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a714:	4813      	ldr	r0, [pc, #76]	; (800a764 <tcpip_timeouts_mbox_fetch+0x68>)
 800a716:	f00a f81c 	bl	8014752 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a71a:	2200      	movs	r2, #0
 800a71c:	6839      	ldr	r1, [r7, #0]
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f009 ffa4 	bl	801466c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a724:	480f      	ldr	r0, [pc, #60]	; (800a764 <tcpip_timeouts_mbox_fetch+0x68>)
 800a726:	f00a f805 	bl	8014734 <sys_mutex_lock>
    return;
 800a72a:	e018      	b.n	800a75e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d102      	bne.n	800a738 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a732:	f007 fa75 	bl	8011c20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a736:	e7e6      	b.n	800a706 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a738:	480a      	ldr	r0, [pc, #40]	; (800a764 <tcpip_timeouts_mbox_fetch+0x68>)
 800a73a:	f00a f80a 	bl	8014752 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f009 ff92 	bl	801466c <sys_arch_mbox_fetch>
 800a748:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a74a:	4806      	ldr	r0, [pc, #24]	; (800a764 <tcpip_timeouts_mbox_fetch+0x68>)
 800a74c:	f009 fff2 	bl	8014734 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a756:	d102      	bne.n	800a75e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a758:	f007 fa62 	bl	8011c20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a75c:	e7d3      	b.n	800a706 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	2004ac64 	.word	0x2004ac64

0800a768 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a770:	4810      	ldr	r0, [pc, #64]	; (800a7b4 <tcpip_thread+0x4c>)
 800a772:	f009 ffdf 	bl	8014734 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a776:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <tcpip_thread+0x50>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a77e:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <tcpip_thread+0x50>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a0e      	ldr	r2, [pc, #56]	; (800a7bc <tcpip_thread+0x54>)
 800a784:	6812      	ldr	r2, [r2, #0]
 800a786:	4610      	mov	r0, r2
 800a788:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a78a:	f107 030c 	add.w	r3, r7, #12
 800a78e:	4619      	mov	r1, r3
 800a790:	480b      	ldr	r0, [pc, #44]	; (800a7c0 <tcpip_thread+0x58>)
 800a792:	f7ff ffb3 	bl	800a6fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a79c:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <tcpip_thread+0x5c>)
 800a79e:	2291      	movs	r2, #145	; 0x91
 800a7a0:	4909      	ldr	r1, [pc, #36]	; (800a7c8 <tcpip_thread+0x60>)
 800a7a2:	480a      	ldr	r0, [pc, #40]	; (800a7cc <tcpip_thread+0x64>)
 800a7a4:	f00a f9f8 	bl	8014b98 <iprintf>
      continue;
 800a7a8:	e003      	b.n	800a7b2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 f80f 	bl	800a7d0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a7b2:	e7ea      	b.n	800a78a <tcpip_thread+0x22>
 800a7b4:	2004ac64 	.word	0x2004ac64
 800a7b8:	2004ac58 	.word	0x2004ac58
 800a7bc:	2004ac5c 	.word	0x2004ac5c
 800a7c0:	2004ac60 	.word	0x2004ac60
 800a7c4:	08015aa4 	.word	0x08015aa4
 800a7c8:	08015ad4 	.word	0x08015ad4
 800a7cc:	08015af4 	.word	0x08015af4

0800a7d0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d026      	beq.n	800a82e <tcpip_thread_handle_msg+0x5e>
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	dc2b      	bgt.n	800a83c <tcpip_thread_handle_msg+0x6c>
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <tcpip_thread_handle_msg+0x1e>
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d015      	beq.n	800a818 <tcpip_thread_handle_msg+0x48>
 800a7ec:	e026      	b.n	800a83c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	6850      	ldr	r0, [r2, #4]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	6892      	ldr	r2, [r2, #8]
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 fd0b 	bl	800c224 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	2009      	movs	r0, #9
 800a812:	f000 fe63 	bl	800b4dc <memp_free>
      break;
 800a816:	e018      	b.n	800a84a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	6892      	ldr	r2, [r2, #8]
 800a820:	4610      	mov	r0, r2
 800a822:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	2008      	movs	r0, #8
 800a828:	f000 fe58 	bl	800b4dc <memp_free>
      break;
 800a82c:	e00d      	b.n	800a84a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	6892      	ldr	r2, [r2, #8]
 800a836:	4610      	mov	r0, r2
 800a838:	4798      	blx	r3
      break;
 800a83a:	e006      	b.n	800a84a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a83c:	4b05      	ldr	r3, [pc, #20]	; (800a854 <tcpip_thread_handle_msg+0x84>)
 800a83e:	22cf      	movs	r2, #207	; 0xcf
 800a840:	4905      	ldr	r1, [pc, #20]	; (800a858 <tcpip_thread_handle_msg+0x88>)
 800a842:	4806      	ldr	r0, [pc, #24]	; (800a85c <tcpip_thread_handle_msg+0x8c>)
 800a844:	f00a f9a8 	bl	8014b98 <iprintf>
      break;
 800a848:	bf00      	nop
  }
}
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	08015aa4 	.word	0x08015aa4
 800a858:	08015ad4 	.word	0x08015ad4
 800a85c:	08015af4 	.word	0x08015af4

0800a860 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a86c:	481a      	ldr	r0, [pc, #104]	; (800a8d8 <tcpip_inpkt+0x78>)
 800a86e:	f009 ff2e 	bl	80146ce <sys_mbox_valid>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d105      	bne.n	800a884 <tcpip_inpkt+0x24>
 800a878:	4b18      	ldr	r3, [pc, #96]	; (800a8dc <tcpip_inpkt+0x7c>)
 800a87a:	22fc      	movs	r2, #252	; 0xfc
 800a87c:	4918      	ldr	r1, [pc, #96]	; (800a8e0 <tcpip_inpkt+0x80>)
 800a87e:	4819      	ldr	r0, [pc, #100]	; (800a8e4 <tcpip_inpkt+0x84>)
 800a880:	f00a f98a 	bl	8014b98 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a884:	2009      	movs	r0, #9
 800a886:	f000 fdb3 	bl	800b3f0 <memp_malloc>
 800a88a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d102      	bne.n	800a898 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a896:	e01a      	b.n	800a8ce <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a8b0:	6979      	ldr	r1, [r7, #20]
 800a8b2:	4809      	ldr	r0, [pc, #36]	; (800a8d8 <tcpip_inpkt+0x78>)
 800a8b4:	f009 fec0 	bl	8014638 <sys_mbox_trypost>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d006      	beq.n	800a8cc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a8be:	6979      	ldr	r1, [r7, #20]
 800a8c0:	2009      	movs	r0, #9
 800a8c2:	f000 fe0b 	bl	800b4dc <memp_free>
    return ERR_MEM;
 800a8c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8ca:	e000      	b.n	800a8ce <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a8cc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	2004ac60 	.word	0x2004ac60
 800a8dc:	08015aa4 	.word	0x08015aa4
 800a8e0:	08015b1c 	.word	0x08015b1c
 800a8e4:	08015af4 	.word	0x08015af4

0800a8e8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a8f8:	f003 0318 	and.w	r3, r3, #24
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d006      	beq.n	800a90e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a900:	4a08      	ldr	r2, [pc, #32]	; (800a924 <tcpip_input+0x3c>)
 800a902:	6839      	ldr	r1, [r7, #0]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff ffab 	bl	800a860 <tcpip_inpkt>
 800a90a:	4603      	mov	r3, r0
 800a90c:	e005      	b.n	800a91a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a90e:	4a06      	ldr	r2, [pc, #24]	; (800a928 <tcpip_input+0x40>)
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff ffa4 	bl	800a860 <tcpip_inpkt>
 800a918:	4603      	mov	r3, r0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	08014459 	.word	0x08014459
 800a928:	08013361 	.word	0x08013361

0800a92c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a936:	4819      	ldr	r0, [pc, #100]	; (800a99c <tcpip_try_callback+0x70>)
 800a938:	f009 fec9 	bl	80146ce <sys_mbox_valid>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d106      	bne.n	800a950 <tcpip_try_callback+0x24>
 800a942:	4b17      	ldr	r3, [pc, #92]	; (800a9a0 <tcpip_try_callback+0x74>)
 800a944:	f240 125d 	movw	r2, #349	; 0x15d
 800a948:	4916      	ldr	r1, [pc, #88]	; (800a9a4 <tcpip_try_callback+0x78>)
 800a94a:	4817      	ldr	r0, [pc, #92]	; (800a9a8 <tcpip_try_callback+0x7c>)
 800a94c:	f00a f924 	bl	8014b98 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a950:	2008      	movs	r0, #8
 800a952:	f000 fd4d 	bl	800b3f0 <memp_malloc>
 800a956:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a962:	e017      	b.n	800a994 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2201      	movs	r2, #1
 800a968:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a976:	68f9      	ldr	r1, [r7, #12]
 800a978:	4808      	ldr	r0, [pc, #32]	; (800a99c <tcpip_try_callback+0x70>)
 800a97a:	f009 fe5d 	bl	8014638 <sys_mbox_trypost>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d006      	beq.n	800a992 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a984:	68f9      	ldr	r1, [r7, #12]
 800a986:	2008      	movs	r0, #8
 800a988:	f000 fda8 	bl	800b4dc <memp_free>
    return ERR_MEM;
 800a98c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a990:	e000      	b.n	800a994 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	2004ac60 	.word	0x2004ac60
 800a9a0:	08015aa4 	.word	0x08015aa4
 800a9a4:	08015b1c 	.word	0x08015b1c
 800a9a8:	08015af4 	.word	0x08015af4

0800a9ac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a9b6:	f000 f871 	bl	800aa9c <lwip_init>

  tcpip_init_done = initfunc;
 800a9ba:	4a17      	ldr	r2, [pc, #92]	; (800aa18 <tcpip_init+0x6c>)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a9c0:	4a16      	ldr	r2, [pc, #88]	; (800aa1c <tcpip_init+0x70>)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a9c6:	2106      	movs	r1, #6
 800a9c8:	4815      	ldr	r0, [pc, #84]	; (800aa20 <tcpip_init+0x74>)
 800a9ca:	f009 fe1b 	bl	8014604 <sys_mbox_new>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d006      	beq.n	800a9e2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a9d4:	4b13      	ldr	r3, [pc, #76]	; (800aa24 <tcpip_init+0x78>)
 800a9d6:	f240 2261 	movw	r2, #609	; 0x261
 800a9da:	4913      	ldr	r1, [pc, #76]	; (800aa28 <tcpip_init+0x7c>)
 800a9dc:	4813      	ldr	r0, [pc, #76]	; (800aa2c <tcpip_init+0x80>)
 800a9de:	f00a f8db 	bl	8014b98 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a9e2:	4813      	ldr	r0, [pc, #76]	; (800aa30 <tcpip_init+0x84>)
 800a9e4:	f009 fe90 	bl	8014708 <sys_mutex_new>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d006      	beq.n	800a9fc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <tcpip_init+0x78>)
 800a9f0:	f240 2265 	movw	r2, #613	; 0x265
 800a9f4:	490f      	ldr	r1, [pc, #60]	; (800aa34 <tcpip_init+0x88>)
 800a9f6:	480d      	ldr	r0, [pc, #52]	; (800aa2c <tcpip_init+0x80>)
 800a9f8:	f00a f8ce 	bl	8014b98 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a9fc:	2318      	movs	r3, #24
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa04:	2200      	movs	r2, #0
 800aa06:	490c      	ldr	r1, [pc, #48]	; (800aa38 <tcpip_init+0x8c>)
 800aa08:	480c      	ldr	r0, [pc, #48]	; (800aa3c <tcpip_init+0x90>)
 800aa0a:	f009 feaf 	bl	801476c <sys_thread_new>
}
 800aa0e:	bf00      	nop
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	2004ac58 	.word	0x2004ac58
 800aa1c:	2004ac5c 	.word	0x2004ac5c
 800aa20:	2004ac60 	.word	0x2004ac60
 800aa24:	08015aa4 	.word	0x08015aa4
 800aa28:	08015b2c 	.word	0x08015b2c
 800aa2c:	08015af4 	.word	0x08015af4
 800aa30:	2004ac64 	.word	0x2004ac64
 800aa34:	08015b50 	.word	0x08015b50
 800aa38:	0800a769 	.word	0x0800a769
 800aa3c:	08015b74 	.word	0x08015b74

0800aa40 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4603      	mov	r3, r0
 800aa48:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	021b      	lsls	r3, r3, #8
 800aa4e:	b21a      	sxth	r2, r3
 800aa50:	88fb      	ldrh	r3, [r7, #6]
 800aa52:	0a1b      	lsrs	r3, r3, #8
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	b21b      	sxth	r3, r3
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	b21b      	sxth	r3, r3
 800aa5c:	b29b      	uxth	r3, r3
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	061a      	lsls	r2, r3, #24
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	021b      	lsls	r3, r3, #8
 800aa7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	0a1b      	lsrs	r3, r3, #8
 800aa84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa88:	431a      	orrs	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	0e1b      	lsrs	r3, r3, #24
 800aa8e:	4313      	orrs	r3, r2
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800aaa6:	f009 fe23 	bl	80146f0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800aaaa:	f000 f8d5 	bl	800ac58 <mem_init>
  memp_init();
 800aaae:	f000 fc31 	bl	800b314 <memp_init>
  pbuf_init();
  netif_init();
 800aab2:	f000 fd3d 	bl	800b530 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800aab6:	f007 f925 	bl	8011d04 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800aaba:	f001 fe4d 	bl	800c758 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800aabe:	f007 f867 	bl	8011b90 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800aac2:	bf00      	nop
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
	...

0800aacc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	4603      	mov	r3, r0
 800aad4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <ptr_to_mem+0x20>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	88fb      	ldrh	r3, [r7, #6]
 800aadc:	4413      	add	r3, r2
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	2004c094 	.word	0x2004c094

0800aaf0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800aaf8:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <mem_to_ptr+0x20>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	b29b      	uxth	r3, r3
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	2004c094 	.word	0x2004c094

0800ab14 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ab14:	b590      	push	{r4, r7, lr}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ab1c:	4b45      	ldr	r3, [pc, #276]	; (800ac34 <plug_holes+0x120>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d206      	bcs.n	800ab34 <plug_holes+0x20>
 800ab26:	4b44      	ldr	r3, [pc, #272]	; (800ac38 <plug_holes+0x124>)
 800ab28:	f240 12df 	movw	r2, #479	; 0x1df
 800ab2c:	4943      	ldr	r1, [pc, #268]	; (800ac3c <plug_holes+0x128>)
 800ab2e:	4844      	ldr	r0, [pc, #272]	; (800ac40 <plug_holes+0x12c>)
 800ab30:	f00a f832 	bl	8014b98 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ab34:	4b43      	ldr	r3, [pc, #268]	; (800ac44 <plug_holes+0x130>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d306      	bcc.n	800ab4c <plug_holes+0x38>
 800ab3e:	4b3e      	ldr	r3, [pc, #248]	; (800ac38 <plug_holes+0x124>)
 800ab40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ab44:	4940      	ldr	r1, [pc, #256]	; (800ac48 <plug_holes+0x134>)
 800ab46:	483e      	ldr	r0, [pc, #248]	; (800ac40 <plug_holes+0x12c>)
 800ab48:	f00a f826 	bl	8014b98 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	791b      	ldrb	r3, [r3, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d006      	beq.n	800ab62 <plug_holes+0x4e>
 800ab54:	4b38      	ldr	r3, [pc, #224]	; (800ac38 <plug_holes+0x124>)
 800ab56:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ab5a:	493c      	ldr	r1, [pc, #240]	; (800ac4c <plug_holes+0x138>)
 800ab5c:	4838      	ldr	r0, [pc, #224]	; (800ac40 <plug_holes+0x12c>)
 800ab5e:	f00a f81b 	bl	8014b98 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ab6a:	d906      	bls.n	800ab7a <plug_holes+0x66>
 800ab6c:	4b32      	ldr	r3, [pc, #200]	; (800ac38 <plug_holes+0x124>)
 800ab6e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ab72:	4937      	ldr	r1, [pc, #220]	; (800ac50 <plug_holes+0x13c>)
 800ab74:	4832      	ldr	r0, [pc, #200]	; (800ac40 <plug_holes+0x12c>)
 800ab76:	f00a f80f 	bl	8014b98 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7ff ffa4 	bl	800aacc <ptr_to_mem>
 800ab84:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d024      	beq.n	800abd8 <plug_holes+0xc4>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	791b      	ldrb	r3, [r3, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d120      	bne.n	800abd8 <plug_holes+0xc4>
 800ab96:	4b2b      	ldr	r3, [pc, #172]	; (800ac44 <plug_holes+0x130>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d01b      	beq.n	800abd8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800aba0:	4b2c      	ldr	r3, [pc, #176]	; (800ac54 <plug_holes+0x140>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d102      	bne.n	800abb0 <plug_holes+0x9c>
      lfree = mem;
 800abaa:	4a2a      	ldr	r2, [pc, #168]	; (800ac54 <plug_holes+0x140>)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	881a      	ldrh	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800abc0:	d00a      	beq.n	800abd8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff ff80 	bl	800aacc <ptr_to_mem>
 800abcc:	4604      	mov	r4, r0
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7ff ff8e 	bl	800aaf0 <mem_to_ptr>
 800abd4:	4603      	mov	r3, r0
 800abd6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	885b      	ldrh	r3, [r3, #2]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7ff ff75 	bl	800aacc <ptr_to_mem>
 800abe2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d01f      	beq.n	800ac2c <plug_holes+0x118>
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	791b      	ldrb	r3, [r3, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d11b      	bne.n	800ac2c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800abf4:	4b17      	ldr	r3, [pc, #92]	; (800ac54 <plug_holes+0x140>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d102      	bne.n	800ac04 <plug_holes+0xf0>
      lfree = pmem;
 800abfe:	4a15      	ldr	r2, [pc, #84]	; (800ac54 <plug_holes+0x140>)
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	881a      	ldrh	r2, [r3, #0]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ac14:	d00a      	beq.n	800ac2c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff ff56 	bl	800aacc <ptr_to_mem>
 800ac20:	4604      	mov	r4, r0
 800ac22:	68b8      	ldr	r0, [r7, #8]
 800ac24:	f7ff ff64 	bl	800aaf0 <mem_to_ptr>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ac2c:	bf00      	nop
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd90      	pop	{r4, r7, pc}
 800ac34:	2004c094 	.word	0x2004c094
 800ac38:	08015b84 	.word	0x08015b84
 800ac3c:	08015bb4 	.word	0x08015bb4
 800ac40:	08015bcc 	.word	0x08015bcc
 800ac44:	2004c098 	.word	0x2004c098
 800ac48:	08015bf4 	.word	0x08015bf4
 800ac4c:	08015c10 	.word	0x08015c10
 800ac50:	08015c2c 	.word	0x08015c2c
 800ac54:	2004c0a0 	.word	0x2004c0a0

0800ac58 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ac5e:	4b1f      	ldr	r3, [pc, #124]	; (800acdc <mem_init+0x84>)
 800ac60:	3303      	adds	r3, #3
 800ac62:	f023 0303 	bic.w	r3, r3, #3
 800ac66:	461a      	mov	r2, r3
 800ac68:	4b1d      	ldr	r3, [pc, #116]	; (800ace0 <mem_init+0x88>)
 800ac6a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ac6c:	4b1c      	ldr	r3, [pc, #112]	; (800ace0 <mem_init+0x88>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ac78:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ac86:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800ac8a:	f7ff ff1f 	bl	800aacc <ptr_to_mem>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	4a14      	ldr	r2, [pc, #80]	; (800ace4 <mem_init+0x8c>)
 800ac92:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ac94:	4b13      	ldr	r3, [pc, #76]	; (800ace4 <mem_init+0x8c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ac9c:	4b11      	ldr	r3, [pc, #68]	; (800ace4 <mem_init+0x8c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800aca4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aca6:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <mem_init+0x8c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800acae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800acb0:	4b0b      	ldr	r3, [pc, #44]	; (800ace0 <mem_init+0x88>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a0c      	ldr	r2, [pc, #48]	; (800ace8 <mem_init+0x90>)
 800acb6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800acb8:	480c      	ldr	r0, [pc, #48]	; (800acec <mem_init+0x94>)
 800acba:	f009 fd25 	bl	8014708 <sys_mutex_new>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d006      	beq.n	800acd2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800acc4:	4b0a      	ldr	r3, [pc, #40]	; (800acf0 <mem_init+0x98>)
 800acc6:	f240 221f 	movw	r2, #543	; 0x21f
 800acca:	490a      	ldr	r1, [pc, #40]	; (800acf4 <mem_init+0x9c>)
 800accc:	480a      	ldr	r0, [pc, #40]	; (800acf8 <mem_init+0xa0>)
 800acce:	f009 ff63 	bl	8014b98 <iprintf>
  }
}
 800acd2:	bf00      	nop
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	2004ac80 	.word	0x2004ac80
 800ace0:	2004c094 	.word	0x2004c094
 800ace4:	2004c098 	.word	0x2004c098
 800ace8:	2004c0a0 	.word	0x2004c0a0
 800acec:	2004c09c 	.word	0x2004c09c
 800acf0:	08015b84 	.word	0x08015b84
 800acf4:	08015c58 	.word	0x08015c58
 800acf8:	08015bcc 	.word	0x08015bcc

0800acfc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff fef3 	bl	800aaf0 <mem_to_ptr>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff feda 	bl	800aacc <ptr_to_mem>
 800ad18:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	885b      	ldrh	r3, [r3, #2]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff fed4 	bl	800aacc <ptr_to_mem>
 800ad24:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ad2e:	d818      	bhi.n	800ad62 <mem_link_valid+0x66>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	885b      	ldrh	r3, [r3, #2]
 800ad34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ad38:	d813      	bhi.n	800ad62 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad3e:	8afa      	ldrh	r2, [r7, #22]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d004      	beq.n	800ad4e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	8afa      	ldrh	r2, [r7, #22]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d109      	bne.n	800ad62 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad4e:	4b08      	ldr	r3, [pc, #32]	; (800ad70 <mem_link_valid+0x74>)
 800ad50:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d006      	beq.n	800ad66 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	885b      	ldrh	r3, [r3, #2]
 800ad5c:	8afa      	ldrh	r2, [r7, #22]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d001      	beq.n	800ad66 <mem_link_valid+0x6a>
    return 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	e000      	b.n	800ad68 <mem_link_valid+0x6c>
  }
  return 1;
 800ad66:	2301      	movs	r3, #1
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	2004c098 	.word	0x2004c098

0800ad74 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d070      	beq.n	800ae64 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f003 0303 	and.w	r3, r3, #3
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00d      	beq.n	800ada8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ad8c:	4b37      	ldr	r3, [pc, #220]	; (800ae6c <mem_free+0xf8>)
 800ad8e:	f240 2273 	movw	r2, #627	; 0x273
 800ad92:	4937      	ldr	r1, [pc, #220]	; (800ae70 <mem_free+0xfc>)
 800ad94:	4837      	ldr	r0, [pc, #220]	; (800ae74 <mem_free+0x100>)
 800ad96:	f009 feff 	bl	8014b98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad9a:	f009 fd07 	bl	80147ac <sys_arch_protect>
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f009 fd11 	bl	80147c8 <sys_arch_unprotect>
    return;
 800ada6:	e05e      	b.n	800ae66 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	3b08      	subs	r3, #8
 800adac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800adae:	4b32      	ldr	r3, [pc, #200]	; (800ae78 <mem_free+0x104>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d306      	bcc.n	800adc6 <mem_free+0x52>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f103 020c 	add.w	r2, r3, #12
 800adbe:	4b2f      	ldr	r3, [pc, #188]	; (800ae7c <mem_free+0x108>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d90d      	bls.n	800ade2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800adc6:	4b29      	ldr	r3, [pc, #164]	; (800ae6c <mem_free+0xf8>)
 800adc8:	f240 227f 	movw	r2, #639	; 0x27f
 800adcc:	492c      	ldr	r1, [pc, #176]	; (800ae80 <mem_free+0x10c>)
 800adce:	4829      	ldr	r0, [pc, #164]	; (800ae74 <mem_free+0x100>)
 800add0:	f009 fee2 	bl	8014b98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800add4:	f009 fcea 	bl	80147ac <sys_arch_protect>
 800add8:	6138      	str	r0, [r7, #16]
 800adda:	6938      	ldr	r0, [r7, #16]
 800addc:	f009 fcf4 	bl	80147c8 <sys_arch_unprotect>
    return;
 800ade0:	e041      	b.n	800ae66 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ade2:	4828      	ldr	r0, [pc, #160]	; (800ae84 <mem_free+0x110>)
 800ade4:	f009 fca6 	bl	8014734 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	791b      	ldrb	r3, [r3, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d110      	bne.n	800ae12 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800adf0:	4b1e      	ldr	r3, [pc, #120]	; (800ae6c <mem_free+0xf8>)
 800adf2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800adf6:	4924      	ldr	r1, [pc, #144]	; (800ae88 <mem_free+0x114>)
 800adf8:	481e      	ldr	r0, [pc, #120]	; (800ae74 <mem_free+0x100>)
 800adfa:	f009 fecd 	bl	8014b98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800adfe:	4821      	ldr	r0, [pc, #132]	; (800ae84 <mem_free+0x110>)
 800ae00:	f009 fca7 	bl	8014752 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ae04:	f009 fcd2 	bl	80147ac <sys_arch_protect>
 800ae08:	6178      	str	r0, [r7, #20]
 800ae0a:	6978      	ldr	r0, [r7, #20]
 800ae0c:	f009 fcdc 	bl	80147c8 <sys_arch_unprotect>
    return;
 800ae10:	e029      	b.n	800ae66 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ae12:	69f8      	ldr	r0, [r7, #28]
 800ae14:	f7ff ff72 	bl	800acfc <mem_link_valid>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d110      	bne.n	800ae40 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ae1e:	4b13      	ldr	r3, [pc, #76]	; (800ae6c <mem_free+0xf8>)
 800ae20:	f240 2295 	movw	r2, #661	; 0x295
 800ae24:	4919      	ldr	r1, [pc, #100]	; (800ae8c <mem_free+0x118>)
 800ae26:	4813      	ldr	r0, [pc, #76]	; (800ae74 <mem_free+0x100>)
 800ae28:	f009 feb6 	bl	8014b98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ae2c:	4815      	ldr	r0, [pc, #84]	; (800ae84 <mem_free+0x110>)
 800ae2e:	f009 fc90 	bl	8014752 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ae32:	f009 fcbb 	bl	80147ac <sys_arch_protect>
 800ae36:	61b8      	str	r0, [r7, #24]
 800ae38:	69b8      	ldr	r0, [r7, #24]
 800ae3a:	f009 fcc5 	bl	80147c8 <sys_arch_unprotect>
    return;
 800ae3e:	e012      	b.n	800ae66 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	2200      	movs	r2, #0
 800ae44:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ae46:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <mem_free+0x11c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	69fa      	ldr	r2, [r7, #28]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d202      	bcs.n	800ae56 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ae50:	4a0f      	ldr	r2, [pc, #60]	; (800ae90 <mem_free+0x11c>)
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ae56:	69f8      	ldr	r0, [r7, #28]
 800ae58:	f7ff fe5c 	bl	800ab14 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ae5c:	4809      	ldr	r0, [pc, #36]	; (800ae84 <mem_free+0x110>)
 800ae5e:	f009 fc78 	bl	8014752 <sys_mutex_unlock>
 800ae62:	e000      	b.n	800ae66 <mem_free+0xf2>
    return;
 800ae64:	bf00      	nop
}
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	08015b84 	.word	0x08015b84
 800ae70:	08015c74 	.word	0x08015c74
 800ae74:	08015bcc 	.word	0x08015bcc
 800ae78:	2004c094 	.word	0x2004c094
 800ae7c:	2004c098 	.word	0x2004c098
 800ae80:	08015c98 	.word	0x08015c98
 800ae84:	2004c09c 	.word	0x2004c09c
 800ae88:	08015cb4 	.word	0x08015cb4
 800ae8c:	08015cdc 	.word	0x08015cdc
 800ae90:	2004c0a0 	.word	0x2004c0a0

0800ae94 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800aea0:	887b      	ldrh	r3, [r7, #2]
 800aea2:	3303      	adds	r3, #3
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f023 0303 	bic.w	r3, r3, #3
 800aeaa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800aeac:	8bfb      	ldrh	r3, [r7, #30]
 800aeae:	2b0b      	cmp	r3, #11
 800aeb0:	d801      	bhi.n	800aeb6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aeb2:	230c      	movs	r3, #12
 800aeb4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800aeb6:	8bfb      	ldrh	r3, [r7, #30]
 800aeb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aebc:	d803      	bhi.n	800aec6 <mem_trim+0x32>
 800aebe:	8bfa      	ldrh	r2, [r7, #30]
 800aec0:	887b      	ldrh	r3, [r7, #2]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d201      	bcs.n	800aeca <mem_trim+0x36>
    return NULL;
 800aec6:	2300      	movs	r3, #0
 800aec8:	e0d8      	b.n	800b07c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aeca:	4b6e      	ldr	r3, [pc, #440]	; (800b084 <mem_trim+0x1f0>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d304      	bcc.n	800aede <mem_trim+0x4a>
 800aed4:	4b6c      	ldr	r3, [pc, #432]	; (800b088 <mem_trim+0x1f4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d306      	bcc.n	800aeec <mem_trim+0x58>
 800aede:	4b6b      	ldr	r3, [pc, #428]	; (800b08c <mem_trim+0x1f8>)
 800aee0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800aee4:	496a      	ldr	r1, [pc, #424]	; (800b090 <mem_trim+0x1fc>)
 800aee6:	486b      	ldr	r0, [pc, #428]	; (800b094 <mem_trim+0x200>)
 800aee8:	f009 fe56 	bl	8014b98 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aeec:	4b65      	ldr	r3, [pc, #404]	; (800b084 <mem_trim+0x1f0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d304      	bcc.n	800af00 <mem_trim+0x6c>
 800aef6:	4b64      	ldr	r3, [pc, #400]	; (800b088 <mem_trim+0x1f4>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d307      	bcc.n	800af10 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af00:	f009 fc54 	bl	80147ac <sys_arch_protect>
 800af04:	60b8      	str	r0, [r7, #8]
 800af06:	68b8      	ldr	r0, [r7, #8]
 800af08:	f009 fc5e 	bl	80147c8 <sys_arch_unprotect>
    return rmem;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	e0b5      	b.n	800b07c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3b08      	subs	r3, #8
 800af14:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800af16:	69b8      	ldr	r0, [r7, #24]
 800af18:	f7ff fdea 	bl	800aaf0 <mem_to_ptr>
 800af1c:	4603      	mov	r3, r0
 800af1e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	881a      	ldrh	r2, [r3, #0]
 800af24:	8afb      	ldrh	r3, [r7, #22]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	b29b      	uxth	r3, r3
 800af2a:	3b08      	subs	r3, #8
 800af2c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800af2e:	8bfa      	ldrh	r2, [r7, #30]
 800af30:	8abb      	ldrh	r3, [r7, #20]
 800af32:	429a      	cmp	r2, r3
 800af34:	d906      	bls.n	800af44 <mem_trim+0xb0>
 800af36:	4b55      	ldr	r3, [pc, #340]	; (800b08c <mem_trim+0x1f8>)
 800af38:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800af3c:	4956      	ldr	r1, [pc, #344]	; (800b098 <mem_trim+0x204>)
 800af3e:	4855      	ldr	r0, [pc, #340]	; (800b094 <mem_trim+0x200>)
 800af40:	f009 fe2a 	bl	8014b98 <iprintf>
  if (newsize > size) {
 800af44:	8bfa      	ldrh	r2, [r7, #30]
 800af46:	8abb      	ldrh	r3, [r7, #20]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d901      	bls.n	800af50 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e095      	b.n	800b07c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800af50:	8bfa      	ldrh	r2, [r7, #30]
 800af52:	8abb      	ldrh	r3, [r7, #20]
 800af54:	429a      	cmp	r2, r3
 800af56:	d101      	bne.n	800af5c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	e08f      	b.n	800b07c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800af5c:	484f      	ldr	r0, [pc, #316]	; (800b09c <mem_trim+0x208>)
 800af5e:	f009 fbe9 	bl	8014734 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	4618      	mov	r0, r3
 800af68:	f7ff fdb0 	bl	800aacc <ptr_to_mem>
 800af6c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	791b      	ldrb	r3, [r3, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d13f      	bne.n	800aff6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	881b      	ldrh	r3, [r3, #0]
 800af7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800af7e:	d106      	bne.n	800af8e <mem_trim+0xfa>
 800af80:	4b42      	ldr	r3, [pc, #264]	; (800b08c <mem_trim+0x1f8>)
 800af82:	f240 22f5 	movw	r2, #757	; 0x2f5
 800af86:	4946      	ldr	r1, [pc, #280]	; (800b0a0 <mem_trim+0x20c>)
 800af88:	4842      	ldr	r0, [pc, #264]	; (800b094 <mem_trim+0x200>)
 800af8a:	f009 fe05 	bl	8014b98 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800af94:	8afa      	ldrh	r2, [r7, #22]
 800af96:	8bfb      	ldrh	r3, [r7, #30]
 800af98:	4413      	add	r3, r2
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	3308      	adds	r3, #8
 800af9e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800afa0:	4b40      	ldr	r3, [pc, #256]	; (800b0a4 <mem_trim+0x210>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d106      	bne.n	800afb8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800afaa:	89fb      	ldrh	r3, [r7, #14]
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff fd8d 	bl	800aacc <ptr_to_mem>
 800afb2:	4603      	mov	r3, r0
 800afb4:	4a3b      	ldr	r2, [pc, #236]	; (800b0a4 <mem_trim+0x210>)
 800afb6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800afb8:	89fb      	ldrh	r3, [r7, #14]
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff fd86 	bl	800aacc <ptr_to_mem>
 800afc0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	2200      	movs	r2, #0
 800afc6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	89ba      	ldrh	r2, [r7, #12]
 800afcc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	8afa      	ldrh	r2, [r7, #22]
 800afd2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	89fa      	ldrh	r2, [r7, #14]
 800afd8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800afe2:	d047      	beq.n	800b074 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff fd6f 	bl	800aacc <ptr_to_mem>
 800afee:	4602      	mov	r2, r0
 800aff0:	89fb      	ldrh	r3, [r7, #14]
 800aff2:	8053      	strh	r3, [r2, #2]
 800aff4:	e03e      	b.n	800b074 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aff6:	8bfb      	ldrh	r3, [r7, #30]
 800aff8:	f103 0214 	add.w	r2, r3, #20
 800affc:	8abb      	ldrh	r3, [r7, #20]
 800affe:	429a      	cmp	r2, r3
 800b000:	d838      	bhi.n	800b074 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b002:	8afa      	ldrh	r2, [r7, #22]
 800b004:	8bfb      	ldrh	r3, [r7, #30]
 800b006:	4413      	add	r3, r2
 800b008:	b29b      	uxth	r3, r3
 800b00a:	3308      	adds	r3, #8
 800b00c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b016:	d106      	bne.n	800b026 <mem_trim+0x192>
 800b018:	4b1c      	ldr	r3, [pc, #112]	; (800b08c <mem_trim+0x1f8>)
 800b01a:	f240 3216 	movw	r2, #790	; 0x316
 800b01e:	4920      	ldr	r1, [pc, #128]	; (800b0a0 <mem_trim+0x20c>)
 800b020:	481c      	ldr	r0, [pc, #112]	; (800b094 <mem_trim+0x200>)
 800b022:	f009 fdb9 	bl	8014b98 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b026:	89fb      	ldrh	r3, [r7, #14]
 800b028:	4618      	mov	r0, r3
 800b02a:	f7ff fd4f 	bl	800aacc <ptr_to_mem>
 800b02e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b030:	4b1c      	ldr	r3, [pc, #112]	; (800b0a4 <mem_trim+0x210>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	429a      	cmp	r2, r3
 800b038:	d202      	bcs.n	800b040 <mem_trim+0x1ac>
      lfree = mem2;
 800b03a:	4a1a      	ldr	r2, [pc, #104]	; (800b0a4 <mem_trim+0x210>)
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	2200      	movs	r2, #0
 800b044:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	881a      	ldrh	r2, [r3, #0]
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	8afa      	ldrh	r2, [r7, #22]
 800b052:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	89fa      	ldrh	r2, [r7, #14]
 800b058:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b062:	d007      	beq.n	800b074 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7ff fd2f 	bl	800aacc <ptr_to_mem>
 800b06e:	4602      	mov	r2, r0
 800b070:	89fb      	ldrh	r3, [r7, #14]
 800b072:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b074:	4809      	ldr	r0, [pc, #36]	; (800b09c <mem_trim+0x208>)
 800b076:	f009 fb6c 	bl	8014752 <sys_mutex_unlock>
  return rmem;
 800b07a:	687b      	ldr	r3, [r7, #4]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3720      	adds	r7, #32
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	2004c094 	.word	0x2004c094
 800b088:	2004c098 	.word	0x2004c098
 800b08c:	08015b84 	.word	0x08015b84
 800b090:	08015d10 	.word	0x08015d10
 800b094:	08015bcc 	.word	0x08015bcc
 800b098:	08015d28 	.word	0x08015d28
 800b09c:	2004c09c 	.word	0x2004c09c
 800b0a0:	08015d48 	.word	0x08015d48
 800b0a4:	2004c0a0 	.word	0x2004c0a0

0800b0a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b0b2:	88fb      	ldrh	r3, [r7, #6]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <mem_malloc+0x14>
    return NULL;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	e0e2      	b.n	800b282 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b0bc:	88fb      	ldrh	r3, [r7, #6]
 800b0be:	3303      	adds	r3, #3
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	f023 0303 	bic.w	r3, r3, #3
 800b0c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b0c8:	8bbb      	ldrh	r3, [r7, #28]
 800b0ca:	2b0b      	cmp	r3, #11
 800b0cc:	d801      	bhi.n	800b0d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b0ce:	230c      	movs	r3, #12
 800b0d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b0d2:	8bbb      	ldrh	r3, [r7, #28]
 800b0d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b0d8:	d803      	bhi.n	800b0e2 <mem_malloc+0x3a>
 800b0da:	8bba      	ldrh	r2, [r7, #28]
 800b0dc:	88fb      	ldrh	r3, [r7, #6]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d201      	bcs.n	800b0e6 <mem_malloc+0x3e>
    return NULL;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	e0cd      	b.n	800b282 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b0e6:	4869      	ldr	r0, [pc, #420]	; (800b28c <mem_malloc+0x1e4>)
 800b0e8:	f009 fb24 	bl	8014734 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b0ec:	4b68      	ldr	r3, [pc, #416]	; (800b290 <mem_malloc+0x1e8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff fcfd 	bl	800aaf0 <mem_to_ptr>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	83fb      	strh	r3, [r7, #30]
 800b0fa:	e0b7      	b.n	800b26c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b0fc:	8bfb      	ldrh	r3, [r7, #30]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fce4 	bl	800aacc <ptr_to_mem>
 800b104:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	791b      	ldrb	r3, [r3, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f040 80a7 	bne.w	800b25e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	461a      	mov	r2, r3
 800b116:	8bfb      	ldrh	r3, [r7, #30]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	f1a3 0208 	sub.w	r2, r3, #8
 800b11e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b120:	429a      	cmp	r2, r3
 800b122:	f0c0 809c 	bcc.w	800b25e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	461a      	mov	r2, r3
 800b12c:	8bfb      	ldrh	r3, [r7, #30]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	f1a3 0208 	sub.w	r2, r3, #8
 800b134:	8bbb      	ldrh	r3, [r7, #28]
 800b136:	3314      	adds	r3, #20
 800b138:	429a      	cmp	r2, r3
 800b13a:	d333      	bcc.n	800b1a4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b13c:	8bfa      	ldrh	r2, [r7, #30]
 800b13e:	8bbb      	ldrh	r3, [r7, #28]
 800b140:	4413      	add	r3, r2
 800b142:	b29b      	uxth	r3, r3
 800b144:	3308      	adds	r3, #8
 800b146:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b148:	8a7b      	ldrh	r3, [r7, #18]
 800b14a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b14e:	d106      	bne.n	800b15e <mem_malloc+0xb6>
 800b150:	4b50      	ldr	r3, [pc, #320]	; (800b294 <mem_malloc+0x1ec>)
 800b152:	f240 3287 	movw	r2, #903	; 0x387
 800b156:	4950      	ldr	r1, [pc, #320]	; (800b298 <mem_malloc+0x1f0>)
 800b158:	4850      	ldr	r0, [pc, #320]	; (800b29c <mem_malloc+0x1f4>)
 800b15a:	f009 fd1d 	bl	8014b98 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b15e:	8a7b      	ldrh	r3, [r7, #18]
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff fcb3 	bl	800aacc <ptr_to_mem>
 800b166:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	881a      	ldrh	r2, [r3, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	8bfa      	ldrh	r2, [r7, #30]
 800b17a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	8a7a      	ldrh	r2, [r7, #18]
 800b180:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	2201      	movs	r2, #1
 800b186:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b190:	d00b      	beq.n	800b1aa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	4618      	mov	r0, r3
 800b198:	f7ff fc98 	bl	800aacc <ptr_to_mem>
 800b19c:	4602      	mov	r2, r0
 800b19e:	8a7b      	ldrh	r3, [r7, #18]
 800b1a0:	8053      	strh	r3, [r2, #2]
 800b1a2:	e002      	b.n	800b1aa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b1aa:	4b39      	ldr	r3, [pc, #228]	; (800b290 <mem_malloc+0x1e8>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d127      	bne.n	800b204 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b1b4:	4b36      	ldr	r3, [pc, #216]	; (800b290 <mem_malloc+0x1e8>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b1ba:	e005      	b.n	800b1c8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	881b      	ldrh	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff fc83 	bl	800aacc <ptr_to_mem>
 800b1c6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	791b      	ldrb	r3, [r3, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d004      	beq.n	800b1da <mem_malloc+0x132>
 800b1d0:	4b33      	ldr	r3, [pc, #204]	; (800b2a0 <mem_malloc+0x1f8>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d1f0      	bne.n	800b1bc <mem_malloc+0x114>
          }
          lfree = cur;
 800b1da:	4a2d      	ldr	r2, [pc, #180]	; (800b290 <mem_malloc+0x1e8>)
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b1e0:	4b2b      	ldr	r3, [pc, #172]	; (800b290 <mem_malloc+0x1e8>)
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	4b2e      	ldr	r3, [pc, #184]	; (800b2a0 <mem_malloc+0x1f8>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d00b      	beq.n	800b204 <mem_malloc+0x15c>
 800b1ec:	4b28      	ldr	r3, [pc, #160]	; (800b290 <mem_malloc+0x1e8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	791b      	ldrb	r3, [r3, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d006      	beq.n	800b204 <mem_malloc+0x15c>
 800b1f6:	4b27      	ldr	r3, [pc, #156]	; (800b294 <mem_malloc+0x1ec>)
 800b1f8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b1fc:	4929      	ldr	r1, [pc, #164]	; (800b2a4 <mem_malloc+0x1fc>)
 800b1fe:	4827      	ldr	r0, [pc, #156]	; (800b29c <mem_malloc+0x1f4>)
 800b200:	f009 fcca 	bl	8014b98 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b204:	4821      	ldr	r0, [pc, #132]	; (800b28c <mem_malloc+0x1e4>)
 800b206:	f009 faa4 	bl	8014752 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b20a:	8bba      	ldrh	r2, [r7, #28]
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	4413      	add	r3, r2
 800b210:	3308      	adds	r3, #8
 800b212:	4a23      	ldr	r2, [pc, #140]	; (800b2a0 <mem_malloc+0x1f8>)
 800b214:	6812      	ldr	r2, [r2, #0]
 800b216:	4293      	cmp	r3, r2
 800b218:	d906      	bls.n	800b228 <mem_malloc+0x180>
 800b21a:	4b1e      	ldr	r3, [pc, #120]	; (800b294 <mem_malloc+0x1ec>)
 800b21c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b220:	4921      	ldr	r1, [pc, #132]	; (800b2a8 <mem_malloc+0x200>)
 800b222:	481e      	ldr	r0, [pc, #120]	; (800b29c <mem_malloc+0x1f4>)
 800b224:	f009 fcb8 	bl	8014b98 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d006      	beq.n	800b240 <mem_malloc+0x198>
 800b232:	4b18      	ldr	r3, [pc, #96]	; (800b294 <mem_malloc+0x1ec>)
 800b234:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b238:	491c      	ldr	r1, [pc, #112]	; (800b2ac <mem_malloc+0x204>)
 800b23a:	4818      	ldr	r0, [pc, #96]	; (800b29c <mem_malloc+0x1f4>)
 800b23c:	f009 fcac 	bl	8014b98 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d006      	beq.n	800b258 <mem_malloc+0x1b0>
 800b24a:	4b12      	ldr	r3, [pc, #72]	; (800b294 <mem_malloc+0x1ec>)
 800b24c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b250:	4917      	ldr	r1, [pc, #92]	; (800b2b0 <mem_malloc+0x208>)
 800b252:	4812      	ldr	r0, [pc, #72]	; (800b29c <mem_malloc+0x1f4>)
 800b254:	f009 fca0 	bl	8014b98 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	3308      	adds	r3, #8
 800b25c:	e011      	b.n	800b282 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b25e:	8bfb      	ldrh	r3, [r7, #30]
 800b260:	4618      	mov	r0, r3
 800b262:	f7ff fc33 	bl	800aacc <ptr_to_mem>
 800b266:	4603      	mov	r3, r0
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b26c:	8bfa      	ldrh	r2, [r7, #30]
 800b26e:	8bbb      	ldrh	r3, [r7, #28]
 800b270:	f5c3 53a0 	rsb	r3, r3, #5120	; 0x1400
 800b274:	429a      	cmp	r2, r3
 800b276:	f4ff af41 	bcc.w	800b0fc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b27a:	4804      	ldr	r0, [pc, #16]	; (800b28c <mem_malloc+0x1e4>)
 800b27c:	f009 fa69 	bl	8014752 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3720      	adds	r7, #32
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	2004c09c 	.word	0x2004c09c
 800b290:	2004c0a0 	.word	0x2004c0a0
 800b294:	08015b84 	.word	0x08015b84
 800b298:	08015d48 	.word	0x08015d48
 800b29c:	08015bcc 	.word	0x08015bcc
 800b2a0:	2004c098 	.word	0x2004c098
 800b2a4:	08015d5c 	.word	0x08015d5c
 800b2a8:	08015d78 	.word	0x08015d78
 800b2ac:	08015da8 	.word	0x08015da8
 800b2b0:	08015dd8 	.word	0x08015dd8

0800b2b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	3303      	adds	r3, #3
 800b2ca:	f023 0303 	bic.w	r3, r3, #3
 800b2ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60fb      	str	r3, [r7, #12]
 800b2d4:	e011      	b.n	800b2fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	60fb      	str	r3, [r7, #12]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	885b      	ldrh	r3, [r3, #2]
 800b2fe:	461a      	mov	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4293      	cmp	r3, r2
 800b304:	dbe7      	blt.n	800b2d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b306:	bf00      	nop
 800b308:	bf00      	nop
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b31a:	2300      	movs	r3, #0
 800b31c:	80fb      	strh	r3, [r7, #6]
 800b31e:	e009      	b.n	800b334 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	4a08      	ldr	r2, [pc, #32]	; (800b344 <memp_init+0x30>)
 800b324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff ffc3 	bl	800b2b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b32e:	88fb      	ldrh	r3, [r7, #6]
 800b330:	3301      	adds	r3, #1
 800b332:	80fb      	strh	r3, [r7, #6]
 800b334:	88fb      	ldrh	r3, [r7, #6]
 800b336:	2b0c      	cmp	r3, #12
 800b338:	d9f2      	bls.n	800b320 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b33a:	bf00      	nop
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	08018610 	.word	0x08018610

0800b348 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b350:	f009 fa2c 	bl	80147ac <sys_arch_protect>
 800b354:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d015      	beq.n	800b390 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	6812      	ldr	r2, [r2, #0]
 800b36c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	f003 0303 	and.w	r3, r3, #3
 800b374:	2b00      	cmp	r3, #0
 800b376:	d006      	beq.n	800b386 <do_memp_malloc_pool+0x3e>
 800b378:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <do_memp_malloc_pool+0x58>)
 800b37a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b37e:	4909      	ldr	r1, [pc, #36]	; (800b3a4 <do_memp_malloc_pool+0x5c>)
 800b380:	4809      	ldr	r0, [pc, #36]	; (800b3a8 <do_memp_malloc_pool+0x60>)
 800b382:	f009 fc09 	bl	8014b98 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f009 fa1e 	bl	80147c8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	e003      	b.n	800b398 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f009 fa19 	bl	80147c8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	08015dfc 	.word	0x08015dfc
 800b3a4:	08015e2c 	.word	0x08015e2c
 800b3a8:	08015e50 	.word	0x08015e50

0800b3ac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d106      	bne.n	800b3c8 <memp_malloc_pool+0x1c>
 800b3ba:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <memp_malloc_pool+0x38>)
 800b3bc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b3c0:	4909      	ldr	r1, [pc, #36]	; (800b3e8 <memp_malloc_pool+0x3c>)
 800b3c2:	480a      	ldr	r0, [pc, #40]	; (800b3ec <memp_malloc_pool+0x40>)
 800b3c4:	f009 fbe8 	bl	8014b98 <iprintf>
  if (desc == NULL) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <memp_malloc_pool+0x26>
    return NULL;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e003      	b.n	800b3da <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7ff ffb8 	bl	800b348 <do_memp_malloc_pool>
 800b3d8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	08015dfc 	.word	0x08015dfc
 800b3e8:	08015e78 	.word	0x08015e78
 800b3ec:	08015e50 	.word	0x08015e50

0800b3f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b3fa:	79fb      	ldrb	r3, [r7, #7]
 800b3fc:	2b0c      	cmp	r3, #12
 800b3fe:	d908      	bls.n	800b412 <memp_malloc+0x22>
 800b400:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <memp_malloc+0x3c>)
 800b402:	f240 1257 	movw	r2, #343	; 0x157
 800b406:	490a      	ldr	r1, [pc, #40]	; (800b430 <memp_malloc+0x40>)
 800b408:	480a      	ldr	r0, [pc, #40]	; (800b434 <memp_malloc+0x44>)
 800b40a:	f009 fbc5 	bl	8014b98 <iprintf>
 800b40e:	2300      	movs	r3, #0
 800b410:	e008      	b.n	800b424 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b412:	79fb      	ldrb	r3, [r7, #7]
 800b414:	4a08      	ldr	r2, [pc, #32]	; (800b438 <memp_malloc+0x48>)
 800b416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff ff94 	bl	800b348 <do_memp_malloc_pool>
 800b420:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b422:	68fb      	ldr	r3, [r7, #12]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	08015dfc 	.word	0x08015dfc
 800b430:	08015e8c 	.word	0x08015e8c
 800b434:	08015e50 	.word	0x08015e50
 800b438:	08018610 	.word	0x08018610

0800b43c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d006      	beq.n	800b45e <do_memp_free_pool+0x22>
 800b450:	4b0d      	ldr	r3, [pc, #52]	; (800b488 <do_memp_free_pool+0x4c>)
 800b452:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b456:	490d      	ldr	r1, [pc, #52]	; (800b48c <do_memp_free_pool+0x50>)
 800b458:	480d      	ldr	r0, [pc, #52]	; (800b490 <do_memp_free_pool+0x54>)
 800b45a:	f009 fb9d 	bl	8014b98 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b462:	f009 f9a3 	bl	80147ac <sys_arch_protect>
 800b466:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b47a:	68b8      	ldr	r0, [r7, #8]
 800b47c:	f009 f9a4 	bl	80147c8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	08015dfc 	.word	0x08015dfc
 800b48c:	08015eac 	.word	0x08015eac
 800b490:	08015e50 	.word	0x08015e50

0800b494 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <memp_free_pool+0x1e>
 800b4a4:	4b0a      	ldr	r3, [pc, #40]	; (800b4d0 <memp_free_pool+0x3c>)
 800b4a6:	f240 1295 	movw	r2, #405	; 0x195
 800b4aa:	490a      	ldr	r1, [pc, #40]	; (800b4d4 <memp_free_pool+0x40>)
 800b4ac:	480a      	ldr	r0, [pc, #40]	; (800b4d8 <memp_free_pool+0x44>)
 800b4ae:	f009 fb73 	bl	8014b98 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d007      	beq.n	800b4c8 <memp_free_pool+0x34>
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d004      	beq.n	800b4c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7ff ffbb 	bl	800b43c <do_memp_free_pool>
 800b4c6:	e000      	b.n	800b4ca <memp_free_pool+0x36>
    return;
 800b4c8:	bf00      	nop
}
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	08015dfc 	.word	0x08015dfc
 800b4d4:	08015e78 	.word	0x08015e78
 800b4d8:	08015e50 	.word	0x08015e50

0800b4dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	2b0c      	cmp	r3, #12
 800b4ec:	d907      	bls.n	800b4fe <memp_free+0x22>
 800b4ee:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <memp_free+0x44>)
 800b4f0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b4f4:	490b      	ldr	r1, [pc, #44]	; (800b524 <memp_free+0x48>)
 800b4f6:	480c      	ldr	r0, [pc, #48]	; (800b528 <memp_free+0x4c>)
 800b4f8:	f009 fb4e 	bl	8014b98 <iprintf>
 800b4fc:	e00c      	b.n	800b518 <memp_free+0x3c>

  if (mem == NULL) {
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d008      	beq.n	800b516 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	4a09      	ldr	r2, [pc, #36]	; (800b52c <memp_free+0x50>)
 800b508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff ff94 	bl	800b43c <do_memp_free_pool>
 800b514:	e000      	b.n	800b518 <memp_free+0x3c>
    return;
 800b516:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	08015dfc 	.word	0x08015dfc
 800b524:	08015ecc 	.word	0x08015ecc
 800b528:	08015e50 	.word	0x08015e50
 800b52c:	08018610 	.word	0x08018610

0800b530 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b534:	bf00      	nop
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
	...

0800b540 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d108      	bne.n	800b566 <netif_add+0x26>
 800b554:	4b57      	ldr	r3, [pc, #348]	; (800b6b4 <netif_add+0x174>)
 800b556:	f240 1227 	movw	r2, #295	; 0x127
 800b55a:	4957      	ldr	r1, [pc, #348]	; (800b6b8 <netif_add+0x178>)
 800b55c:	4857      	ldr	r0, [pc, #348]	; (800b6bc <netif_add+0x17c>)
 800b55e:	f009 fb1b 	bl	8014b98 <iprintf>
 800b562:	2300      	movs	r3, #0
 800b564:	e0a2      	b.n	800b6ac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d108      	bne.n	800b57e <netif_add+0x3e>
 800b56c:	4b51      	ldr	r3, [pc, #324]	; (800b6b4 <netif_add+0x174>)
 800b56e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b572:	4953      	ldr	r1, [pc, #332]	; (800b6c0 <netif_add+0x180>)
 800b574:	4851      	ldr	r0, [pc, #324]	; (800b6bc <netif_add+0x17c>)
 800b576:	f009 fb0f 	bl	8014b98 <iprintf>
 800b57a:	2300      	movs	r3, #0
 800b57c:	e096      	b.n	800b6ac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b584:	4b4f      	ldr	r3, [pc, #316]	; (800b6c4 <netif_add+0x184>)
 800b586:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b58e:	4b4d      	ldr	r3, [pc, #308]	; (800b6c4 <netif_add+0x184>)
 800b590:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b598:	4b4a      	ldr	r3, [pc, #296]	; (800b6c4 <netif_add+0x184>)
 800b59a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4a45      	ldr	r2, [pc, #276]	; (800b6c8 <netif_add+0x188>)
 800b5b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6a3a      	ldr	r2, [r7, #32]
 800b5cc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b5ce:	4b3f      	ldr	r3, [pc, #252]	; (800b6cc <netif_add+0x18c>)
 800b5d0:	781a      	ldrb	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f913 	bl	800b810 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	4798      	blx	r3
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <netif_add+0xba>
    return NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e058      	b.n	800b6ac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b600:	2bff      	cmp	r3, #255	; 0xff
 800b602:	d103      	bne.n	800b60c <netif_add+0xcc>
        netif->num = 0;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b610:	4b2f      	ldr	r3, [pc, #188]	; (800b6d0 <netif_add+0x190>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	617b      	str	r3, [r7, #20]
 800b616:	e02b      	b.n	800b670 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d106      	bne.n	800b62e <netif_add+0xee>
 800b620:	4b24      	ldr	r3, [pc, #144]	; (800b6b4 <netif_add+0x174>)
 800b622:	f240 128b 	movw	r2, #395	; 0x18b
 800b626:	492b      	ldr	r1, [pc, #172]	; (800b6d4 <netif_add+0x194>)
 800b628:	4824      	ldr	r0, [pc, #144]	; (800b6bc <netif_add+0x17c>)
 800b62a:	f009 fab5 	bl	8014b98 <iprintf>
        num_netifs++;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	3301      	adds	r3, #1
 800b632:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	2bff      	cmp	r3, #255	; 0xff
 800b638:	dd06      	ble.n	800b648 <netif_add+0x108>
 800b63a:	4b1e      	ldr	r3, [pc, #120]	; (800b6b4 <netif_add+0x174>)
 800b63c:	f240 128d 	movw	r2, #397	; 0x18d
 800b640:	4925      	ldr	r1, [pc, #148]	; (800b6d8 <netif_add+0x198>)
 800b642:	481e      	ldr	r0, [pc, #120]	; (800b6bc <netif_add+0x17c>)
 800b644:	f009 faa8 	bl	8014b98 <iprintf>
        if (netif2->num == netif->num) {
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b654:	429a      	cmp	r2, r3
 800b656:	d108      	bne.n	800b66a <netif_add+0x12a>
          netif->num++;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b65e:	3301      	adds	r3, #1
 800b660:	b2da      	uxtb	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b668:	e005      	b.n	800b676 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	617b      	str	r3, [r7, #20]
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1d0      	bne.n	800b618 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1be      	bne.n	800b5fa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b682:	2bfe      	cmp	r3, #254	; 0xfe
 800b684:	d103      	bne.n	800b68e <netif_add+0x14e>
    netif_num = 0;
 800b686:	4b11      	ldr	r3, [pc, #68]	; (800b6cc <netif_add+0x18c>)
 800b688:	2200      	movs	r2, #0
 800b68a:	701a      	strb	r2, [r3, #0]
 800b68c:	e006      	b.n	800b69c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b694:	3301      	adds	r3, #1
 800b696:	b2da      	uxtb	r2, r3
 800b698:	4b0c      	ldr	r3, [pc, #48]	; (800b6cc <netif_add+0x18c>)
 800b69a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b69c:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <netif_add+0x190>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b6a4:	4a0a      	ldr	r2, [pc, #40]	; (800b6d0 <netif_add+0x190>)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	08015ee8 	.word	0x08015ee8
 800b6b8:	08015f7c 	.word	0x08015f7c
 800b6bc:	08015f38 	.word	0x08015f38
 800b6c0:	08015f98 	.word	0x08015f98
 800b6c4:	08018684 	.word	0x08018684
 800b6c8:	0800baeb 	.word	0x0800baeb
 800b6cc:	2004f178 	.word	0x2004f178
 800b6d0:	2004f170 	.word	0x2004f170
 800b6d4:	08015fbc 	.word	0x08015fbc
 800b6d8:	08015fd0 	.word	0x08015fd0

0800b6dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f002 fb7d 	bl	800dde8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f006 fc91 	bl	8012018 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b6f6:	bf00      	nop
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d106      	bne.n	800b720 <netif_do_set_ipaddr+0x20>
 800b712:	4b1d      	ldr	r3, [pc, #116]	; (800b788 <netif_do_set_ipaddr+0x88>)
 800b714:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b718:	491c      	ldr	r1, [pc, #112]	; (800b78c <netif_do_set_ipaddr+0x8c>)
 800b71a:	481d      	ldr	r0, [pc, #116]	; (800b790 <netif_do_set_ipaddr+0x90>)
 800b71c:	f009 fa3c 	bl	8014b98 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d106      	bne.n	800b734 <netif_do_set_ipaddr+0x34>
 800b726:	4b18      	ldr	r3, [pc, #96]	; (800b788 <netif_do_set_ipaddr+0x88>)
 800b728:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b72c:	4917      	ldr	r1, [pc, #92]	; (800b78c <netif_do_set_ipaddr+0x8c>)
 800b72e:	4818      	ldr	r0, [pc, #96]	; (800b790 <netif_do_set_ipaddr+0x90>)
 800b730:	f009 fa32 	bl	8014b98 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	3304      	adds	r3, #4
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d01c      	beq.n	800b77c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	3304      	adds	r3, #4
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b752:	f107 0314 	add.w	r3, r7, #20
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7ff ffbf 	bl	800b6dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d002      	beq.n	800b76a <netif_do_set_ipaddr+0x6a>
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	e000      	b.n	800b76c <netif_do_set_ipaddr+0x6c>
 800b76a:	2300      	movs	r3, #0
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b770:	2101      	movs	r1, #1
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f000 f8d2 	bl	800b91c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b778:	2301      	movs	r3, #1
 800b77a:	e000      	b.n	800b77e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3718      	adds	r7, #24
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	08015ee8 	.word	0x08015ee8
 800b78c:	08016000 	.word	0x08016000
 800b790:	08015f38 	.word	0x08015f38

0800b794 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d00a      	beq.n	800b7c4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <netif_do_set_netmask+0x26>
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	e000      	b.n	800b7bc <netif_do_set_netmask+0x28>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e000      	b.n	800b7c6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b085      	sub	sp, #20
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	60f8      	str	r0, [r7, #12]
 800b7da:	60b9      	str	r1, [r7, #8]
 800b7dc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	330c      	adds	r3, #12
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d00a      	beq.n	800b802 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <netif_do_set_gw+0x26>
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	e000      	b.n	800b7fa <netif_do_set_gw+0x28>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b7fe:	2301      	movs	r3, #1
 800b800:	e000      	b.n	800b804 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b81e:	2300      	movs	r3, #0
 800b820:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b82c:	4b1c      	ldr	r3, [pc, #112]	; (800b8a0 <netif_set_addr+0x90>)
 800b82e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b836:	4b1a      	ldr	r3, [pc, #104]	; (800b8a0 <netif_set_addr+0x90>)
 800b838:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d101      	bne.n	800b844 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b840:	4b17      	ldr	r3, [pc, #92]	; (800b8a0 <netif_set_addr+0x90>)
 800b842:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <netif_set_addr+0x42>
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d101      	bne.n	800b856 <netif_set_addr+0x46>
 800b852:	2301      	movs	r3, #1
 800b854:	e000      	b.n	800b858 <netif_set_addr+0x48>
 800b856:	2300      	movs	r3, #0
 800b858:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d006      	beq.n	800b86e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b860:	f107 0310 	add.w	r3, r7, #16
 800b864:	461a      	mov	r2, r3
 800b866:	68b9      	ldr	r1, [r7, #8]
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f7ff ff49 	bl	800b700 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b86e:	69fa      	ldr	r2, [r7, #28]
 800b870:	6879      	ldr	r1, [r7, #4]
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f7ff ff8e 	bl	800b794 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	6839      	ldr	r1, [r7, #0]
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f7ff ffa8 	bl	800b7d2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d106      	bne.n	800b896 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b888:	f107 0310 	add.w	r3, r7, #16
 800b88c:	461a      	mov	r2, r3
 800b88e:	68b9      	ldr	r1, [r7, #8]
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f7ff ff35 	bl	800b700 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b896:	bf00      	nop
 800b898:	3720      	adds	r7, #32
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	08018684 	.word	0x08018684

0800b8a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b8ac:	4a04      	ldr	r2, [pc, #16]	; (800b8c0 <netif_set_default+0x1c>)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b8b2:	bf00      	nop
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	2004f174 	.word	0x2004f174

0800b8c4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d107      	bne.n	800b8e2 <netif_set_up+0x1e>
 800b8d2:	4b0f      	ldr	r3, [pc, #60]	; (800b910 <netif_set_up+0x4c>)
 800b8d4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b8d8:	490e      	ldr	r1, [pc, #56]	; (800b914 <netif_set_up+0x50>)
 800b8da:	480f      	ldr	r0, [pc, #60]	; (800b918 <netif_set_up+0x54>)
 800b8dc:	f009 f95c 	bl	8014b98 <iprintf>
 800b8e0:	e013      	b.n	800b90a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8e8:	f003 0301 	and.w	r3, r3, #1
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10c      	bne.n	800b90a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8f6:	f043 0301 	orr.w	r3, r3, #1
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b902:	2103      	movs	r1, #3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f809 	bl	800b91c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	08015ee8 	.word	0x08015ee8
 800b914:	08016070 	.word	0x08016070
 800b918:	08015f38 	.word	0x08015f38

0800b91c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	460b      	mov	r3, r1
 800b926:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d106      	bne.n	800b93c <netif_issue_reports+0x20>
 800b92e:	4b18      	ldr	r3, [pc, #96]	; (800b990 <netif_issue_reports+0x74>)
 800b930:	f240 326d 	movw	r2, #877	; 0x36d
 800b934:	4917      	ldr	r1, [pc, #92]	; (800b994 <netif_issue_reports+0x78>)
 800b936:	4818      	ldr	r0, [pc, #96]	; (800b998 <netif_issue_reports+0x7c>)
 800b938:	f009 f92e 	bl	8014b98 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b942:	f003 0304 	and.w	r3, r3, #4
 800b946:	2b00      	cmp	r3, #0
 800b948:	d01e      	beq.n	800b988 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b950:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b954:	2b00      	cmp	r3, #0
 800b956:	d017      	beq.n	800b988 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b958:	78fb      	ldrb	r3, [r7, #3]
 800b95a:	f003 0301 	and.w	r3, r3, #1
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d013      	beq.n	800b98a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	3304      	adds	r3, #4
 800b966:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00e      	beq.n	800b98a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b972:	f003 0308 	and.w	r3, r3, #8
 800b976:	2b00      	cmp	r3, #0
 800b978:	d007      	beq.n	800b98a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3304      	adds	r3, #4
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f007 fab3 	bl	8012eec <etharp_request>
 800b986:	e000      	b.n	800b98a <netif_issue_reports+0x6e>
    return;
 800b988:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	08015ee8 	.word	0x08015ee8
 800b994:	0801608c 	.word	0x0801608c
 800b998:	08015f38 	.word	0x08015f38

0800b99c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d107      	bne.n	800b9ba <netif_set_down+0x1e>
 800b9aa:	4b12      	ldr	r3, [pc, #72]	; (800b9f4 <netif_set_down+0x58>)
 800b9ac:	f240 329b 	movw	r2, #923	; 0x39b
 800b9b0:	4911      	ldr	r1, [pc, #68]	; (800b9f8 <netif_set_down+0x5c>)
 800b9b2:	4812      	ldr	r0, [pc, #72]	; (800b9fc <netif_set_down+0x60>)
 800b9b4:	f009 f8f0 	bl	8014b98 <iprintf>
 800b9b8:	e019      	b.n	800b9ee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d012      	beq.n	800b9ee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9ce:	f023 0301 	bic.w	r3, r3, #1
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9e0:	f003 0308 	and.w	r3, r3, #8
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f006 fe3d 	bl	8012668 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	08015ee8 	.word	0x08015ee8
 800b9f8:	080160b0 	.word	0x080160b0
 800b9fc:	08015f38 	.word	0x08015f38

0800ba00 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d107      	bne.n	800ba1e <netif_set_link_up+0x1e>
 800ba0e:	4b13      	ldr	r3, [pc, #76]	; (800ba5c <netif_set_link_up+0x5c>)
 800ba10:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ba14:	4912      	ldr	r1, [pc, #72]	; (800ba60 <netif_set_link_up+0x60>)
 800ba16:	4813      	ldr	r0, [pc, #76]	; (800ba64 <netif_set_link_up+0x64>)
 800ba18:	f009 f8be 	bl	8014b98 <iprintf>
 800ba1c:	e01b      	b.n	800ba56 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d114      	bne.n	800ba56 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba32:	f043 0304 	orr.w	r3, r3, #4
 800ba36:	b2da      	uxtb	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba3e:	2103      	movs	r1, #3
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f7ff ff6b 	bl	800b91c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <netif_set_link_up+0x56>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	08015ee8 	.word	0x08015ee8
 800ba60:	080160d0 	.word	0x080160d0
 800ba64:	08015f38 	.word	0x08015f38

0800ba68 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d107      	bne.n	800ba86 <netif_set_link_down+0x1e>
 800ba76:	4b11      	ldr	r3, [pc, #68]	; (800babc <netif_set_link_down+0x54>)
 800ba78:	f240 4206 	movw	r2, #1030	; 0x406
 800ba7c:	4910      	ldr	r1, [pc, #64]	; (800bac0 <netif_set_link_down+0x58>)
 800ba7e:	4811      	ldr	r0, [pc, #68]	; (800bac4 <netif_set_link_down+0x5c>)
 800ba80:	f009 f88a 	bl	8014b98 <iprintf>
 800ba84:	e017      	b.n	800bab6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba8c:	f003 0304 	and.w	r3, r3, #4
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d010      	beq.n	800bab6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba9a:	f023 0304 	bic.w	r3, r3, #4
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	69db      	ldr	r3, [r3, #28]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <netif_set_link_down+0x4e>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	69db      	ldr	r3, [r3, #28]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	08015ee8 	.word	0x08015ee8
 800bac0:	080160f4 	.word	0x080160f4
 800bac4:	08015f38 	.word	0x08015f38

0800bac8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	61da      	str	r2, [r3, #28]
  }
}
 800bade:	bf00      	nop
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800baea:	b480      	push	{r7}
 800baec:	b085      	sub	sp, #20
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800baf6:	f06f 030b 	mvn.w	r3, #11
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
	...

0800bb08 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d013      	beq.n	800bb40 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bb18:	4b0d      	ldr	r3, [pc, #52]	; (800bb50 <netif_get_by_index+0x48>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	e00c      	b.n	800bb3a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb26:	3301      	adds	r3, #1
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	79fa      	ldrb	r2, [r7, #7]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d101      	bne.n	800bb34 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	e006      	b.n	800bb42 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	60fb      	str	r3, [r7, #12]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1ef      	bne.n	800bb20 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	2004f170 	.word	0x2004f170

0800bb54 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bb5a:	f008 fe27 	bl	80147ac <sys_arch_protect>
 800bb5e:	6038      	str	r0, [r7, #0]
 800bb60:	4b0d      	ldr	r3, [pc, #52]	; (800bb98 <pbuf_free_ooseq+0x44>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	701a      	strb	r2, [r3, #0]
 800bb66:	6838      	ldr	r0, [r7, #0]
 800bb68:	f008 fe2e 	bl	80147c8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb6c:	4b0b      	ldr	r3, [pc, #44]	; (800bb9c <pbuf_free_ooseq+0x48>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	607b      	str	r3, [r7, #4]
 800bb72:	e00a      	b.n	800bb8a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f002 f971 	bl	800de64 <tcp_free_ooseq>
      return;
 800bb82:	e005      	b.n	800bb90 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	607b      	str	r3, [r7, #4]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1f1      	bne.n	800bb74 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	2004f179 	.word	0x2004f179
 800bb9c:	2004f188 	.word	0x2004f188

0800bba0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bba8:	f7ff ffd4 	bl	800bb54 <pbuf_free_ooseq>
}
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bbba:	f008 fdf7 	bl	80147ac <sys_arch_protect>
 800bbbe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bbc0:	4b0f      	ldr	r3, [pc, #60]	; (800bc00 <pbuf_pool_is_empty+0x4c>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bbc6:	4b0e      	ldr	r3, [pc, #56]	; (800bc00 <pbuf_pool_is_empty+0x4c>)
 800bbc8:	2201      	movs	r2, #1
 800bbca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f008 fdfb 	bl	80147c8 <sys_arch_unprotect>

  if (!queued) {
 800bbd2:	78fb      	ldrb	r3, [r7, #3]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10f      	bne.n	800bbf8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bbd8:	2100      	movs	r1, #0
 800bbda:	480a      	ldr	r0, [pc, #40]	; (800bc04 <pbuf_pool_is_empty+0x50>)
 800bbdc:	f7fe fea6 	bl	800a92c <tcpip_try_callback>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d008      	beq.n	800bbf8 <pbuf_pool_is_empty+0x44>
 800bbe6:	f008 fde1 	bl	80147ac <sys_arch_protect>
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	4b04      	ldr	r3, [pc, #16]	; (800bc00 <pbuf_pool_is_empty+0x4c>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f008 fde8 	bl	80147c8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	2004f179 	.word	0x2004f179
 800bc04:	0800bba1 	.word	0x0800bba1

0800bc08 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4611      	mov	r1, r2
 800bc14:	461a      	mov	r2, r3
 800bc16:	460b      	mov	r3, r1
 800bc18:	80fb      	strh	r3, [r7, #6]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	68ba      	ldr	r2, [r7, #8]
 800bc28:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	88fa      	ldrh	r2, [r7, #6]
 800bc2e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	88ba      	ldrh	r2, [r7, #4]
 800bc34:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bc36:	8b3b      	ldrh	r3, [r7, #24]
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	7f3a      	ldrb	r2, [r7, #28]
 800bc42:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2201      	movs	r2, #1
 800bc48:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	73da      	strb	r2, [r3, #15]
}
 800bc50:	bf00      	nop
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b08c      	sub	sp, #48	; 0x30
 800bc60:	af02      	add	r7, sp, #8
 800bc62:	4603      	mov	r3, r0
 800bc64:	71fb      	strb	r3, [r7, #7]
 800bc66:	460b      	mov	r3, r1
 800bc68:	80bb      	strh	r3, [r7, #4]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bc72:	887b      	ldrh	r3, [r7, #2]
 800bc74:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc78:	d07f      	beq.n	800bd7a <pbuf_alloc+0x11e>
 800bc7a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc7e:	f300 80c8 	bgt.w	800be12 <pbuf_alloc+0x1b6>
 800bc82:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc86:	d010      	beq.n	800bcaa <pbuf_alloc+0x4e>
 800bc88:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc8c:	f300 80c1 	bgt.w	800be12 <pbuf_alloc+0x1b6>
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d002      	beq.n	800bc9a <pbuf_alloc+0x3e>
 800bc94:	2b41      	cmp	r3, #65	; 0x41
 800bc96:	f040 80bc 	bne.w	800be12 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bc9a:	887a      	ldrh	r2, [r7, #2]
 800bc9c:	88bb      	ldrh	r3, [r7, #4]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	2000      	movs	r0, #0
 800bca2:	f000 f8d1 	bl	800be48 <pbuf_alloc_reference>
 800bca6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bca8:	e0bd      	b.n	800be26 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bcb2:	88bb      	ldrh	r3, [r7, #4]
 800bcb4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bcb6:	200c      	movs	r0, #12
 800bcb8:	f7ff fb9a 	bl	800b3f0 <memp_malloc>
 800bcbc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d109      	bne.n	800bcd8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bcc4:	f7ff ff76 	bl	800bbb4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d002      	beq.n	800bcd4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bcce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcd0:	f000 faa8 	bl	800c224 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	e0a7      	b.n	800be28 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bcd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcda:	3303      	adds	r3, #3
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	f023 0303 	bic.w	r3, r3, #3
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	8b7a      	ldrh	r2, [r7, #26]
 800bcec:	4293      	cmp	r3, r2
 800bcee:	bf28      	it	cs
 800bcf0:	4613      	movcs	r3, r2
 800bcf2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bcf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcf6:	3310      	adds	r3, #16
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	3303      	adds	r3, #3
 800bcfe:	f023 0303 	bic.w	r3, r3, #3
 800bd02:	4618      	mov	r0, r3
 800bd04:	89f9      	ldrh	r1, [r7, #14]
 800bd06:	8b7a      	ldrh	r2, [r7, #26]
 800bd08:	2300      	movs	r3, #0
 800bd0a:	9301      	str	r3, [sp, #4]
 800bd0c:	887b      	ldrh	r3, [r7, #2]
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	460b      	mov	r3, r1
 800bd12:	4601      	mov	r1, r0
 800bd14:	6938      	ldr	r0, [r7, #16]
 800bd16:	f7ff ff77 	bl	800bc08 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f003 0303 	and.w	r3, r3, #3
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d006      	beq.n	800bd34 <pbuf_alloc+0xd8>
 800bd26:	4b42      	ldr	r3, [pc, #264]	; (800be30 <pbuf_alloc+0x1d4>)
 800bd28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd2c:	4941      	ldr	r1, [pc, #260]	; (800be34 <pbuf_alloc+0x1d8>)
 800bd2e:	4842      	ldr	r0, [pc, #264]	; (800be38 <pbuf_alloc+0x1dc>)
 800bd30:	f008 ff32 	bl	8014b98 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bd34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd36:	3303      	adds	r3, #3
 800bd38:	f023 0303 	bic.w	r3, r3, #3
 800bd3c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bd40:	d106      	bne.n	800bd50 <pbuf_alloc+0xf4>
 800bd42:	4b3b      	ldr	r3, [pc, #236]	; (800be30 <pbuf_alloc+0x1d4>)
 800bd44:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bd48:	493c      	ldr	r1, [pc, #240]	; (800be3c <pbuf_alloc+0x1e0>)
 800bd4a:	483b      	ldr	r0, [pc, #236]	; (800be38 <pbuf_alloc+0x1dc>)
 800bd4c:	f008 ff24 	bl	8014b98 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d102      	bne.n	800bd5c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	627b      	str	r3, [r7, #36]	; 0x24
 800bd5a:	e002      	b.n	800bd62 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bd66:	8b7a      	ldrh	r2, [r7, #26]
 800bd68:	89fb      	ldrh	r3, [r7, #14]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bd72:	8b7b      	ldrh	r3, [r7, #26]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d19e      	bne.n	800bcb6 <pbuf_alloc+0x5a>
      break;
 800bd78:	e055      	b.n	800be26 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bd7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd7c:	3303      	adds	r3, #3
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	f023 0303 	bic.w	r3, r3, #3
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	88bb      	ldrh	r3, [r7, #4]
 800bd88:	3303      	adds	r3, #3
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	f023 0303 	bic.w	r3, r3, #3
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	4413      	add	r3, r2
 800bd94:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bd96:	8b3b      	ldrh	r3, [r7, #24]
 800bd98:	3310      	adds	r3, #16
 800bd9a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd9c:	8b3a      	ldrh	r2, [r7, #24]
 800bd9e:	88bb      	ldrh	r3, [r7, #4]
 800bda0:	3303      	adds	r3, #3
 800bda2:	f023 0303 	bic.w	r3, r3, #3
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d306      	bcc.n	800bdb8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bdaa:	8afa      	ldrh	r2, [r7, #22]
 800bdac:	88bb      	ldrh	r3, [r7, #4]
 800bdae:	3303      	adds	r3, #3
 800bdb0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d201      	bcs.n	800bdbc <pbuf_alloc+0x160>
        return NULL;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	e035      	b.n	800be28 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bdbc:	8afb      	ldrh	r3, [r7, #22]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff f972 	bl	800b0a8 <mem_malloc>
 800bdc4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d101      	bne.n	800bdd0 <pbuf_alloc+0x174>
        return NULL;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	e02b      	b.n	800be28 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bdd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdd2:	3310      	adds	r3, #16
 800bdd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd6:	4413      	add	r3, r2
 800bdd8:	3303      	adds	r3, #3
 800bdda:	f023 0303 	bic.w	r3, r3, #3
 800bdde:	4618      	mov	r0, r3
 800bde0:	88b9      	ldrh	r1, [r7, #4]
 800bde2:	88ba      	ldrh	r2, [r7, #4]
 800bde4:	2300      	movs	r3, #0
 800bde6:	9301      	str	r3, [sp, #4]
 800bde8:	887b      	ldrh	r3, [r7, #2]
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	460b      	mov	r3, r1
 800bdee:	4601      	mov	r1, r0
 800bdf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdf2:	f7ff ff09 	bl	800bc08 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	f003 0303 	and.w	r3, r3, #3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d010      	beq.n	800be24 <pbuf_alloc+0x1c8>
 800be02:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <pbuf_alloc+0x1d4>)
 800be04:	f44f 7291 	mov.w	r2, #290	; 0x122
 800be08:	490d      	ldr	r1, [pc, #52]	; (800be40 <pbuf_alloc+0x1e4>)
 800be0a:	480b      	ldr	r0, [pc, #44]	; (800be38 <pbuf_alloc+0x1dc>)
 800be0c:	f008 fec4 	bl	8014b98 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800be10:	e008      	b.n	800be24 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800be12:	4b07      	ldr	r3, [pc, #28]	; (800be30 <pbuf_alloc+0x1d4>)
 800be14:	f240 1227 	movw	r2, #295	; 0x127
 800be18:	490a      	ldr	r1, [pc, #40]	; (800be44 <pbuf_alloc+0x1e8>)
 800be1a:	4807      	ldr	r0, [pc, #28]	; (800be38 <pbuf_alloc+0x1dc>)
 800be1c:	f008 febc 	bl	8014b98 <iprintf>
      return NULL;
 800be20:	2300      	movs	r3, #0
 800be22:	e001      	b.n	800be28 <pbuf_alloc+0x1cc>
      break;
 800be24:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800be26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3728      	adds	r7, #40	; 0x28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	08016118 	.word	0x08016118
 800be34:	08016148 	.word	0x08016148
 800be38:	08016178 	.word	0x08016178
 800be3c:	080161a0 	.word	0x080161a0
 800be40:	080161d4 	.word	0x080161d4
 800be44:	08016200 	.word	0x08016200

0800be48 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af02      	add	r7, sp, #8
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	807b      	strh	r3, [r7, #2]
 800be54:	4613      	mov	r3, r2
 800be56:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800be58:	883b      	ldrh	r3, [r7, #0]
 800be5a:	2b41      	cmp	r3, #65	; 0x41
 800be5c:	d009      	beq.n	800be72 <pbuf_alloc_reference+0x2a>
 800be5e:	883b      	ldrh	r3, [r7, #0]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d006      	beq.n	800be72 <pbuf_alloc_reference+0x2a>
 800be64:	4b0f      	ldr	r3, [pc, #60]	; (800bea4 <pbuf_alloc_reference+0x5c>)
 800be66:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800be6a:	490f      	ldr	r1, [pc, #60]	; (800bea8 <pbuf_alloc_reference+0x60>)
 800be6c:	480f      	ldr	r0, [pc, #60]	; (800beac <pbuf_alloc_reference+0x64>)
 800be6e:	f008 fe93 	bl	8014b98 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be72:	200b      	movs	r0, #11
 800be74:	f7ff fabc 	bl	800b3f0 <memp_malloc>
 800be78:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800be80:	2300      	movs	r3, #0
 800be82:	e00b      	b.n	800be9c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800be84:	8879      	ldrh	r1, [r7, #2]
 800be86:	887a      	ldrh	r2, [r7, #2]
 800be88:	2300      	movs	r3, #0
 800be8a:	9301      	str	r3, [sp, #4]
 800be8c:	883b      	ldrh	r3, [r7, #0]
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	460b      	mov	r3, r1
 800be92:	6879      	ldr	r1, [r7, #4]
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f7ff feb7 	bl	800bc08 <pbuf_init_alloced_pbuf>
  return p;
 800be9a:	68fb      	ldr	r3, [r7, #12]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	08016118 	.word	0x08016118
 800bea8:	0801621c 	.word	0x0801621c
 800beac:	08016178 	.word	0x08016178

0800beb0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b088      	sub	sp, #32
 800beb4:	af02      	add	r7, sp, #8
 800beb6:	607b      	str	r3, [r7, #4]
 800beb8:	4603      	mov	r3, r0
 800beba:	73fb      	strb	r3, [r7, #15]
 800bebc:	460b      	mov	r3, r1
 800bebe:	81bb      	strh	r3, [r7, #12]
 800bec0:	4613      	mov	r3, r2
 800bec2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bec8:	8a7b      	ldrh	r3, [r7, #18]
 800beca:	3303      	adds	r3, #3
 800becc:	f023 0203 	bic.w	r2, r3, #3
 800bed0:	89bb      	ldrh	r3, [r7, #12]
 800bed2:	441a      	add	r2, r3
 800bed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d901      	bls.n	800bede <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800beda:	2300      	movs	r3, #0
 800bedc:	e018      	b.n	800bf10 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d007      	beq.n	800bef4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bee4:	8a7b      	ldrh	r3, [r7, #18]
 800bee6:	3303      	adds	r3, #3
 800bee8:	f023 0303 	bic.w	r3, r3, #3
 800beec:	6a3a      	ldr	r2, [r7, #32]
 800beee:	4413      	add	r3, r2
 800bef0:	617b      	str	r3, [r7, #20]
 800bef2:	e001      	b.n	800bef8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bef4:	2300      	movs	r3, #0
 800bef6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	89b9      	ldrh	r1, [r7, #12]
 800befc:	89ba      	ldrh	r2, [r7, #12]
 800befe:	2302      	movs	r3, #2
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	897b      	ldrh	r3, [r7, #10]
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	460b      	mov	r3, r1
 800bf08:	6979      	ldr	r1, [r7, #20]
 800bf0a:	f7ff fe7d 	bl	800bc08 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bf0e:	687b      	ldr	r3, [r7, #4]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3718      	adds	r7, #24
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	460b      	mov	r3, r1
 800bf22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d106      	bne.n	800bf38 <pbuf_realloc+0x20>
 800bf2a:	4b3a      	ldr	r3, [pc, #232]	; (800c014 <pbuf_realloc+0xfc>)
 800bf2c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bf30:	4939      	ldr	r1, [pc, #228]	; (800c018 <pbuf_realloc+0x100>)
 800bf32:	483a      	ldr	r0, [pc, #232]	; (800c01c <pbuf_realloc+0x104>)
 800bf34:	f008 fe30 	bl	8014b98 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	891b      	ldrh	r3, [r3, #8]
 800bf3c:	887a      	ldrh	r2, [r7, #2]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d263      	bcs.n	800c00a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	891a      	ldrh	r2, [r3, #8]
 800bf46:	887b      	ldrh	r3, [r7, #2]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bf4c:	887b      	ldrh	r3, [r7, #2]
 800bf4e:	817b      	strh	r3, [r7, #10]
  q = p;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bf54:	e018      	b.n	800bf88 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	895b      	ldrh	r3, [r3, #10]
 800bf5a:	897a      	ldrh	r2, [r7, #10]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	891a      	ldrh	r2, [r3, #8]
 800bf64:	893b      	ldrh	r3, [r7, #8]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d106      	bne.n	800bf88 <pbuf_realloc+0x70>
 800bf7a:	4b26      	ldr	r3, [pc, #152]	; (800c014 <pbuf_realloc+0xfc>)
 800bf7c:	f240 12af 	movw	r2, #431	; 0x1af
 800bf80:	4927      	ldr	r1, [pc, #156]	; (800c020 <pbuf_realloc+0x108>)
 800bf82:	4826      	ldr	r0, [pc, #152]	; (800c01c <pbuf_realloc+0x104>)
 800bf84:	f008 fe08 	bl	8014b98 <iprintf>
  while (rem_len > q->len) {
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	895b      	ldrh	r3, [r3, #10]
 800bf8c:	897a      	ldrh	r2, [r7, #10]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d8e1      	bhi.n	800bf56 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	7b1b      	ldrb	r3, [r3, #12]
 800bf96:	f003 030f 	and.w	r3, r3, #15
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d121      	bne.n	800bfe2 <pbuf_realloc+0xca>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	895b      	ldrh	r3, [r3, #10]
 800bfa2:	897a      	ldrh	r2, [r7, #10]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d01c      	beq.n	800bfe2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	7b5b      	ldrb	r3, [r3, #13]
 800bfac:	f003 0302 	and.w	r3, r3, #2
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d116      	bne.n	800bfe2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	685a      	ldr	r2, [r3, #4]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	897b      	ldrh	r3, [r7, #10]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f7fe ff64 	bl	800ae94 <mem_trim>
 800bfcc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d106      	bne.n	800bfe2 <pbuf_realloc+0xca>
 800bfd4:	4b0f      	ldr	r3, [pc, #60]	; (800c014 <pbuf_realloc+0xfc>)
 800bfd6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bfda:	4912      	ldr	r1, [pc, #72]	; (800c024 <pbuf_realloc+0x10c>)
 800bfdc:	480f      	ldr	r0, [pc, #60]	; (800c01c <pbuf_realloc+0x104>)
 800bfde:	f008 fddb 	bl	8014b98 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	897a      	ldrh	r2, [r7, #10]
 800bfe6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	895a      	ldrh	r2, [r3, #10]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d004      	beq.n	800c002 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 f911 	bl	800c224 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	e000      	b.n	800c00c <pbuf_realloc+0xf4>
    return;
 800c00a:	bf00      	nop

}
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	08016118 	.word	0x08016118
 800c018:	08016230 	.word	0x08016230
 800c01c:	08016178 	.word	0x08016178
 800c020:	08016248 	.word	0x08016248
 800c024:	08016260 	.word	0x08016260

0800c028 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	4613      	mov	r3, r2
 800c034:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d106      	bne.n	800c04a <pbuf_add_header_impl+0x22>
 800c03c:	4b2b      	ldr	r3, [pc, #172]	; (800c0ec <pbuf_add_header_impl+0xc4>)
 800c03e:	f240 12df 	movw	r2, #479	; 0x1df
 800c042:	492b      	ldr	r1, [pc, #172]	; (800c0f0 <pbuf_add_header_impl+0xc8>)
 800c044:	482b      	ldr	r0, [pc, #172]	; (800c0f4 <pbuf_add_header_impl+0xcc>)
 800c046:	f008 fda7 	bl	8014b98 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <pbuf_add_header_impl+0x30>
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c056:	d301      	bcc.n	800c05c <pbuf_add_header_impl+0x34>
    return 1;
 800c058:	2301      	movs	r3, #1
 800c05a:	e043      	b.n	800c0e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <pbuf_add_header_impl+0x3e>
    return 0;
 800c062:	2300      	movs	r3, #0
 800c064:	e03e      	b.n	800c0e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	891a      	ldrh	r2, [r3, #8]
 800c06e:	8a7b      	ldrh	r3, [r7, #18]
 800c070:	4413      	add	r3, r2
 800c072:	b29b      	uxth	r3, r3
 800c074:	8a7a      	ldrh	r2, [r7, #18]
 800c076:	429a      	cmp	r2, r3
 800c078:	d901      	bls.n	800c07e <pbuf_add_header_impl+0x56>
    return 1;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e032      	b.n	800c0e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	7b1b      	ldrb	r3, [r3, #12]
 800c082:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c084:	8a3b      	ldrh	r3, [r7, #16]
 800c086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00c      	beq.n	800c0a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	685a      	ldr	r2, [r3, #4]
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	425b      	negs	r3, r3
 800c096:	4413      	add	r3, r2
 800c098:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	3310      	adds	r3, #16
 800c09e:	697a      	ldr	r2, [r7, #20]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d20d      	bcs.n	800c0c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e01d      	b.n	800c0e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c0a8:	79fb      	ldrb	r3, [r7, #7]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d006      	beq.n	800c0bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	685a      	ldr	r2, [r3, #4]
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	425b      	negs	r3, r3
 800c0b6:	4413      	add	r3, r2
 800c0b8:	617b      	str	r3, [r7, #20]
 800c0ba:	e001      	b.n	800c0c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e011      	b.n	800c0e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	895a      	ldrh	r2, [r3, #10]
 800c0ca:	8a7b      	ldrh	r3, [r7, #18]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	891a      	ldrh	r2, [r3, #8]
 800c0d8:	8a7b      	ldrh	r3, [r7, #18]
 800c0da:	4413      	add	r3, r2
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	811a      	strh	r2, [r3, #8]


  return 0;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	08016118 	.word	0x08016118
 800c0f0:	0801627c 	.word	0x0801627c
 800c0f4:	08016178 	.word	0x08016178

0800c0f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c102:	2200      	movs	r2, #0
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7ff ff8e 	bl	800c028 <pbuf_add_header_impl>
 800c10c:	4603      	mov	r3, r0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
	...

0800c118 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d106      	bne.n	800c136 <pbuf_remove_header+0x1e>
 800c128:	4b20      	ldr	r3, [pc, #128]	; (800c1ac <pbuf_remove_header+0x94>)
 800c12a:	f240 224b 	movw	r2, #587	; 0x24b
 800c12e:	4920      	ldr	r1, [pc, #128]	; (800c1b0 <pbuf_remove_header+0x98>)
 800c130:	4820      	ldr	r0, [pc, #128]	; (800c1b4 <pbuf_remove_header+0x9c>)
 800c132:	f008 fd31 	bl	8014b98 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <pbuf_remove_header+0x2c>
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c142:	d301      	bcc.n	800c148 <pbuf_remove_header+0x30>
    return 1;
 800c144:	2301      	movs	r3, #1
 800c146:	e02c      	b.n	800c1a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <pbuf_remove_header+0x3a>
    return 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	e027      	b.n	800c1a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	895b      	ldrh	r3, [r3, #10]
 800c15a:	89fa      	ldrh	r2, [r7, #14]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d908      	bls.n	800c172 <pbuf_remove_header+0x5a>
 800c160:	4b12      	ldr	r3, [pc, #72]	; (800c1ac <pbuf_remove_header+0x94>)
 800c162:	f240 2255 	movw	r2, #597	; 0x255
 800c166:	4914      	ldr	r1, [pc, #80]	; (800c1b8 <pbuf_remove_header+0xa0>)
 800c168:	4812      	ldr	r0, [pc, #72]	; (800c1b4 <pbuf_remove_header+0x9c>)
 800c16a:	f008 fd15 	bl	8014b98 <iprintf>
 800c16e:	2301      	movs	r3, #1
 800c170:	e017      	b.n	800c1a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	441a      	add	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	895a      	ldrh	r2, [r3, #10]
 800c188:	89fb      	ldrh	r3, [r7, #14]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	891a      	ldrh	r2, [r3, #8]
 800c196:	89fb      	ldrh	r3, [r7, #14]
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	08016118 	.word	0x08016118
 800c1b0:	0801627c 	.word	0x0801627c
 800c1b4:	08016178 	.word	0x08016178
 800c1b8:	08016288 	.word	0x08016288

0800c1bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	807b      	strh	r3, [r7, #2]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c1cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	da08      	bge.n	800c1e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c1d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1d8:	425b      	negs	r3, r3
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7ff ff9b 	bl	800c118 <pbuf_remove_header>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	e007      	b.n	800c1f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c1e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1ea:	787a      	ldrb	r2, [r7, #1]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7ff ff1a 	bl	800c028 <pbuf_add_header_impl>
 800c1f4:	4603      	mov	r3, r0
  }
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	460b      	mov	r3, r1
 800c208:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c20a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c20e:	2201      	movs	r2, #1
 800c210:	4619      	mov	r1, r3
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff ffd2 	bl	800c1bc <pbuf_header_impl>
 800c218:	4603      	mov	r3, r0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
	...

0800c224 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b088      	sub	sp, #32
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10b      	bne.n	800c24a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d106      	bne.n	800c246 <pbuf_free+0x22>
 800c238:	4b3b      	ldr	r3, [pc, #236]	; (800c328 <pbuf_free+0x104>)
 800c23a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c23e:	493b      	ldr	r1, [pc, #236]	; (800c32c <pbuf_free+0x108>)
 800c240:	483b      	ldr	r0, [pc, #236]	; (800c330 <pbuf_free+0x10c>)
 800c242:	f008 fca9 	bl	8014b98 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c246:	2300      	movs	r3, #0
 800c248:	e069      	b.n	800c31e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c24a:	2300      	movs	r3, #0
 800c24c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c24e:	e062      	b.n	800c316 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c250:	f008 faac 	bl	80147ac <sys_arch_protect>
 800c254:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	7b9b      	ldrb	r3, [r3, #14]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d106      	bne.n	800c26c <pbuf_free+0x48>
 800c25e:	4b32      	ldr	r3, [pc, #200]	; (800c328 <pbuf_free+0x104>)
 800c260:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c264:	4933      	ldr	r1, [pc, #204]	; (800c334 <pbuf_free+0x110>)
 800c266:	4832      	ldr	r0, [pc, #200]	; (800c330 <pbuf_free+0x10c>)
 800c268:	f008 fc96 	bl	8014b98 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	7b9b      	ldrb	r3, [r3, #14]
 800c270:	3b01      	subs	r3, #1
 800c272:	b2da      	uxtb	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	739a      	strb	r2, [r3, #14]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	7b9b      	ldrb	r3, [r3, #14]
 800c27c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c27e:	69b8      	ldr	r0, [r7, #24]
 800c280:	f008 faa2 	bl	80147c8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c284:	7dfb      	ldrb	r3, [r7, #23]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d143      	bne.n	800c312 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7b1b      	ldrb	r3, [r3, #12]
 800c294:	f003 030f 	and.w	r3, r3, #15
 800c298:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	7b5b      	ldrb	r3, [r3, #13]
 800c29e:	f003 0302 	and.w	r3, r3, #2
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d011      	beq.n	800c2ca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <pbuf_free+0x9c>
 800c2b2:	4b1d      	ldr	r3, [pc, #116]	; (800c328 <pbuf_free+0x104>)
 800c2b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c2b8:	491f      	ldr	r1, [pc, #124]	; (800c338 <pbuf_free+0x114>)
 800c2ba:	481d      	ldr	r0, [pc, #116]	; (800c330 <pbuf_free+0x10c>)
 800c2bc:	f008 fc6c 	bl	8014b98 <iprintf>
        pc->custom_free_function(p);
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	4798      	blx	r3
 800c2c8:	e01d      	b.n	800c306 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d104      	bne.n	800c2da <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c2d0:	6879      	ldr	r1, [r7, #4]
 800c2d2:	200c      	movs	r0, #12
 800c2d4:	f7ff f902 	bl	800b4dc <memp_free>
 800c2d8:	e015      	b.n	800c306 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d104      	bne.n	800c2ea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c2e0:	6879      	ldr	r1, [r7, #4]
 800c2e2:	200b      	movs	r0, #11
 800c2e4:	f7ff f8fa 	bl	800b4dc <memp_free>
 800c2e8:	e00d      	b.n	800c306 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c2ea:	7bfb      	ldrb	r3, [r7, #15]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d103      	bne.n	800c2f8 <pbuf_free+0xd4>
          mem_free(p);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7fe fd3f 	bl	800ad74 <mem_free>
 800c2f6:	e006      	b.n	800c306 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c2f8:	4b0b      	ldr	r3, [pc, #44]	; (800c328 <pbuf_free+0x104>)
 800c2fa:	f240 320f 	movw	r2, #783	; 0x30f
 800c2fe:	490f      	ldr	r1, [pc, #60]	; (800c33c <pbuf_free+0x118>)
 800c300:	480b      	ldr	r0, [pc, #44]	; (800c330 <pbuf_free+0x10c>)
 800c302:	f008 fc49 	bl	8014b98 <iprintf>
        }
      }
      count++;
 800c306:	7ffb      	ldrb	r3, [r7, #31]
 800c308:	3301      	adds	r3, #1
 800c30a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	607b      	str	r3, [r7, #4]
 800c310:	e001      	b.n	800c316 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c312:	2300      	movs	r3, #0
 800c314:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d199      	bne.n	800c250 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c31c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3720      	adds	r7, #32
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	08016118 	.word	0x08016118
 800c32c:	0801627c 	.word	0x0801627c
 800c330:	08016178 	.word	0x08016178
 800c334:	080162a8 	.word	0x080162a8
 800c338:	080162c0 	.word	0x080162c0
 800c33c:	080162e4 	.word	0x080162e4

0800c340 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c34c:	e005      	b.n	800c35a <pbuf_clen+0x1a>
    ++len;
 800c34e:	89fb      	ldrh	r3, [r7, #14]
 800c350:	3301      	adds	r3, #1
 800c352:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1f6      	bne.n	800c34e <pbuf_clen+0xe>
  }
  return len;
 800c360:	89fb      	ldrh	r3, [r7, #14]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3714      	adds	r7, #20
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
	...

0800c370 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d016      	beq.n	800c3ac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c37e:	f008 fa15 	bl	80147ac <sys_arch_protect>
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7b9b      	ldrb	r3, [r3, #14]
 800c388:	3301      	adds	r3, #1
 800c38a:	b2da      	uxtb	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	739a      	strb	r2, [r3, #14]
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f008 fa19 	bl	80147c8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7b9b      	ldrb	r3, [r3, #14]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d106      	bne.n	800c3ac <pbuf_ref+0x3c>
 800c39e:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <pbuf_ref+0x44>)
 800c3a0:	f240 3242 	movw	r2, #834	; 0x342
 800c3a4:	4904      	ldr	r1, [pc, #16]	; (800c3b8 <pbuf_ref+0x48>)
 800c3a6:	4805      	ldr	r0, [pc, #20]	; (800c3bc <pbuf_ref+0x4c>)
 800c3a8:	f008 fbf6 	bl	8014b98 <iprintf>
  }
}
 800c3ac:	bf00      	nop
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	08016118 	.word	0x08016118
 800c3b8:	080162f8 	.word	0x080162f8
 800c3bc:	08016178 	.word	0x08016178

0800c3c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <pbuf_cat+0x16>
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d107      	bne.n	800c3e6 <pbuf_cat+0x26>
 800c3d6:	4b20      	ldr	r3, [pc, #128]	; (800c458 <pbuf_cat+0x98>)
 800c3d8:	f240 3259 	movw	r2, #857	; 0x359
 800c3dc:	491f      	ldr	r1, [pc, #124]	; (800c45c <pbuf_cat+0x9c>)
 800c3de:	4820      	ldr	r0, [pc, #128]	; (800c460 <pbuf_cat+0xa0>)
 800c3e0:	f008 fbda 	bl	8014b98 <iprintf>
 800c3e4:	e034      	b.n	800c450 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	e00a      	b.n	800c402 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	891a      	ldrh	r2, [r3, #8]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	891b      	ldrh	r3, [r3, #8]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	60fb      	str	r3, [r7, #12]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1f0      	bne.n	800c3ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	891a      	ldrh	r2, [r3, #8]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	895b      	ldrh	r3, [r3, #10]
 800c412:	429a      	cmp	r2, r3
 800c414:	d006      	beq.n	800c424 <pbuf_cat+0x64>
 800c416:	4b10      	ldr	r3, [pc, #64]	; (800c458 <pbuf_cat+0x98>)
 800c418:	f240 3262 	movw	r2, #866	; 0x362
 800c41c:	4911      	ldr	r1, [pc, #68]	; (800c464 <pbuf_cat+0xa4>)
 800c41e:	4810      	ldr	r0, [pc, #64]	; (800c460 <pbuf_cat+0xa0>)
 800c420:	f008 fbba 	bl	8014b98 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d006      	beq.n	800c43a <pbuf_cat+0x7a>
 800c42c:	4b0a      	ldr	r3, [pc, #40]	; (800c458 <pbuf_cat+0x98>)
 800c42e:	f240 3263 	movw	r2, #867	; 0x363
 800c432:	490d      	ldr	r1, [pc, #52]	; (800c468 <pbuf_cat+0xa8>)
 800c434:	480a      	ldr	r0, [pc, #40]	; (800c460 <pbuf_cat+0xa0>)
 800c436:	f008 fbaf 	bl	8014b98 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	891a      	ldrh	r2, [r3, #8]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	891b      	ldrh	r3, [r3, #8]
 800c442:	4413      	add	r3, r2
 800c444:	b29a      	uxth	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	683a      	ldr	r2, [r7, #0]
 800c44e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	08016118 	.word	0x08016118
 800c45c:	0801630c 	.word	0x0801630c
 800c460:	08016178 	.word	0x08016178
 800c464:	08016344 	.word	0x08016344
 800c468:	08016374 	.word	0x08016374

0800c46c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c476:	2300      	movs	r3, #0
 800c478:	617b      	str	r3, [r7, #20]
 800c47a:	2300      	movs	r3, #0
 800c47c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d008      	beq.n	800c496 <pbuf_copy+0x2a>
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d005      	beq.n	800c496 <pbuf_copy+0x2a>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	891a      	ldrh	r2, [r3, #8]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	891b      	ldrh	r3, [r3, #8]
 800c492:	429a      	cmp	r2, r3
 800c494:	d209      	bcs.n	800c4aa <pbuf_copy+0x3e>
 800c496:	4b57      	ldr	r3, [pc, #348]	; (800c5f4 <pbuf_copy+0x188>)
 800c498:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c49c:	4956      	ldr	r1, [pc, #344]	; (800c5f8 <pbuf_copy+0x18c>)
 800c49e:	4857      	ldr	r0, [pc, #348]	; (800c5fc <pbuf_copy+0x190>)
 800c4a0:	f008 fb7a 	bl	8014b98 <iprintf>
 800c4a4:	f06f 030f 	mvn.w	r3, #15
 800c4a8:	e09f      	b.n	800c5ea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	895b      	ldrh	r3, [r3, #10]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	1ad2      	subs	r2, r2, r3
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	895b      	ldrh	r3, [r3, #10]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	1acb      	subs	r3, r1, r3
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d306      	bcc.n	800c4d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	895b      	ldrh	r3, [r3, #10]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	60fb      	str	r3, [r7, #12]
 800c4ce:	e005      	b.n	800c4dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	895b      	ldrh	r3, [r3, #10]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	18d0      	adds	r0, r2, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	f008 faa7 	bl	8014a42 <memcpy>
    offset_to += len;
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	4413      	add	r3, r2
 800c502:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	895b      	ldrh	r3, [r3, #10]
 800c508:	461a      	mov	r2, r3
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d906      	bls.n	800c51e <pbuf_copy+0xb2>
 800c510:	4b38      	ldr	r3, [pc, #224]	; (800c5f4 <pbuf_copy+0x188>)
 800c512:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c516:	493a      	ldr	r1, [pc, #232]	; (800c600 <pbuf_copy+0x194>)
 800c518:	4838      	ldr	r0, [pc, #224]	; (800c5fc <pbuf_copy+0x190>)
 800c51a:	f008 fb3d 	bl	8014b98 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	895b      	ldrh	r3, [r3, #10]
 800c522:	461a      	mov	r2, r3
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	4293      	cmp	r3, r2
 800c528:	d906      	bls.n	800c538 <pbuf_copy+0xcc>
 800c52a:	4b32      	ldr	r3, [pc, #200]	; (800c5f4 <pbuf_copy+0x188>)
 800c52c:	f240 32da 	movw	r2, #986	; 0x3da
 800c530:	4934      	ldr	r1, [pc, #208]	; (800c604 <pbuf_copy+0x198>)
 800c532:	4832      	ldr	r0, [pc, #200]	; (800c5fc <pbuf_copy+0x190>)
 800c534:	f008 fb30 	bl	8014b98 <iprintf>
    if (offset_from >= p_from->len) {
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	895b      	ldrh	r3, [r3, #10]
 800c53c:	461a      	mov	r2, r3
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	4293      	cmp	r3, r2
 800c542:	d304      	bcc.n	800c54e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	895b      	ldrh	r3, [r3, #10]
 800c552:	461a      	mov	r2, r3
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	4293      	cmp	r3, r2
 800c558:	d114      	bne.n	800c584 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10c      	bne.n	800c584 <pbuf_copy+0x118>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d009      	beq.n	800c584 <pbuf_copy+0x118>
 800c570:	4b20      	ldr	r3, [pc, #128]	; (800c5f4 <pbuf_copy+0x188>)
 800c572:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c576:	4924      	ldr	r1, [pc, #144]	; (800c608 <pbuf_copy+0x19c>)
 800c578:	4820      	ldr	r0, [pc, #128]	; (800c5fc <pbuf_copy+0x190>)
 800c57a:	f008 fb0d 	bl	8014b98 <iprintf>
 800c57e:	f06f 030f 	mvn.w	r3, #15
 800c582:	e032      	b.n	800c5ea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d013      	beq.n	800c5b2 <pbuf_copy+0x146>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	895a      	ldrh	r2, [r3, #10]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	891b      	ldrh	r3, [r3, #8]
 800c592:	429a      	cmp	r2, r3
 800c594:	d10d      	bne.n	800c5b2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d009      	beq.n	800c5b2 <pbuf_copy+0x146>
 800c59e:	4b15      	ldr	r3, [pc, #84]	; (800c5f4 <pbuf_copy+0x188>)
 800c5a0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c5a4:	4919      	ldr	r1, [pc, #100]	; (800c60c <pbuf_copy+0x1a0>)
 800c5a6:	4815      	ldr	r0, [pc, #84]	; (800c5fc <pbuf_copy+0x190>)
 800c5a8:	f008 faf6 	bl	8014b98 <iprintf>
 800c5ac:	f06f 0305 	mvn.w	r3, #5
 800c5b0:	e01b      	b.n	800c5ea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d013      	beq.n	800c5e0 <pbuf_copy+0x174>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	895a      	ldrh	r2, [r3, #10]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	891b      	ldrh	r3, [r3, #8]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d10d      	bne.n	800c5e0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d009      	beq.n	800c5e0 <pbuf_copy+0x174>
 800c5cc:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <pbuf_copy+0x188>)
 800c5ce:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c5d2:	490e      	ldr	r1, [pc, #56]	; (800c60c <pbuf_copy+0x1a0>)
 800c5d4:	4809      	ldr	r0, [pc, #36]	; (800c5fc <pbuf_copy+0x190>)
 800c5d6:	f008 fadf 	bl	8014b98 <iprintf>
 800c5da:	f06f 0305 	mvn.w	r3, #5
 800c5de:	e004      	b.n	800c5ea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f47f af61 	bne.w	800c4aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3718      	adds	r7, #24
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	08016118 	.word	0x08016118
 800c5f8:	080163c0 	.word	0x080163c0
 800c5fc:	08016178 	.word	0x08016178
 800c600:	080163f0 	.word	0x080163f0
 800c604:	08016408 	.word	0x08016408
 800c608:	08016424 	.word	0x08016424
 800c60c:	08016434 	.word	0x08016434

0800c610 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b088      	sub	sp, #32
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	4611      	mov	r1, r2
 800c61c:	461a      	mov	r2, r3
 800c61e:	460b      	mov	r3, r1
 800c620:	80fb      	strh	r3, [r7, #6]
 800c622:	4613      	mov	r3, r2
 800c624:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c62a:	2300      	movs	r3, #0
 800c62c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d108      	bne.n	800c646 <pbuf_copy_partial+0x36>
 800c634:	4b2b      	ldr	r3, [pc, #172]	; (800c6e4 <pbuf_copy_partial+0xd4>)
 800c636:	f240 420a 	movw	r2, #1034	; 0x40a
 800c63a:	492b      	ldr	r1, [pc, #172]	; (800c6e8 <pbuf_copy_partial+0xd8>)
 800c63c:	482b      	ldr	r0, [pc, #172]	; (800c6ec <pbuf_copy_partial+0xdc>)
 800c63e:	f008 faab 	bl	8014b98 <iprintf>
 800c642:	2300      	movs	r3, #0
 800c644:	e04a      	b.n	800c6dc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d108      	bne.n	800c65e <pbuf_copy_partial+0x4e>
 800c64c:	4b25      	ldr	r3, [pc, #148]	; (800c6e4 <pbuf_copy_partial+0xd4>)
 800c64e:	f240 420b 	movw	r2, #1035	; 0x40b
 800c652:	4927      	ldr	r1, [pc, #156]	; (800c6f0 <pbuf_copy_partial+0xe0>)
 800c654:	4825      	ldr	r0, [pc, #148]	; (800c6ec <pbuf_copy_partial+0xdc>)
 800c656:	f008 fa9f 	bl	8014b98 <iprintf>
 800c65a:	2300      	movs	r3, #0
 800c65c:	e03e      	b.n	800c6dc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	61fb      	str	r3, [r7, #28]
 800c662:	e034      	b.n	800c6ce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c664:	88bb      	ldrh	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00a      	beq.n	800c680 <pbuf_copy_partial+0x70>
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	895b      	ldrh	r3, [r3, #10]
 800c66e:	88ba      	ldrh	r2, [r7, #4]
 800c670:	429a      	cmp	r2, r3
 800c672:	d305      	bcc.n	800c680 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	895b      	ldrh	r3, [r3, #10]
 800c678:	88ba      	ldrh	r2, [r7, #4]
 800c67a:	1ad3      	subs	r3, r2, r3
 800c67c:	80bb      	strh	r3, [r7, #4]
 800c67e:	e023      	b.n	800c6c8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	895a      	ldrh	r2, [r3, #10]
 800c684:	88bb      	ldrh	r3, [r7, #4]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c68a:	8b3a      	ldrh	r2, [r7, #24]
 800c68c:	88fb      	ldrh	r3, [r7, #6]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d901      	bls.n	800c696 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c692:	88fb      	ldrh	r3, [r7, #6]
 800c694:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c696:	8b7b      	ldrh	r3, [r7, #26]
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	18d0      	adds	r0, r2, r3
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	88bb      	ldrh	r3, [r7, #4]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	8b3a      	ldrh	r2, [r7, #24]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	f008 f9cb 	bl	8014a42 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c6ac:	8afa      	ldrh	r2, [r7, #22]
 800c6ae:	8b3b      	ldrh	r3, [r7, #24]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c6b4:	8b7a      	ldrh	r2, [r7, #26]
 800c6b6:	8b3b      	ldrh	r3, [r7, #24]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c6bc:	88fa      	ldrh	r2, [r7, #6]
 800c6be:	8b3b      	ldrh	r3, [r7, #24]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	61fb      	str	r3, [r7, #28]
 800c6ce:	88fb      	ldrh	r3, [r7, #6]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <pbuf_copy_partial+0xca>
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1c4      	bne.n	800c664 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c6da:	8afb      	ldrh	r3, [r7, #22]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3720      	adds	r7, #32
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	08016118 	.word	0x08016118
 800c6e8:	08016460 	.word	0x08016460
 800c6ec:	08016178 	.word	0x08016178
 800c6f0:	08016480 	.word	0x08016480

0800c6f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	603a      	str	r2, [r7, #0]
 800c6fe:	71fb      	strb	r3, [r7, #7]
 800c700:	460b      	mov	r3, r1
 800c702:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	8919      	ldrh	r1, [r3, #8]
 800c708:	88ba      	ldrh	r2, [r7, #4]
 800c70a:	79fb      	ldrb	r3, [r7, #7]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7ff faa5 	bl	800bc5c <pbuf_alloc>
 800c712:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d101      	bne.n	800c71e <pbuf_clone+0x2a>
    return NULL;
 800c71a:	2300      	movs	r3, #0
 800c71c:	e011      	b.n	800c742 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f7ff fea3 	bl	800c46c <pbuf_copy>
 800c726:	4603      	mov	r3, r0
 800c728:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c72a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d006      	beq.n	800c740 <pbuf_clone+0x4c>
 800c732:	4b06      	ldr	r3, [pc, #24]	; (800c74c <pbuf_clone+0x58>)
 800c734:	f240 5224 	movw	r2, #1316	; 0x524
 800c738:	4905      	ldr	r1, [pc, #20]	; (800c750 <pbuf_clone+0x5c>)
 800c73a:	4806      	ldr	r0, [pc, #24]	; (800c754 <pbuf_clone+0x60>)
 800c73c:	f008 fa2c 	bl	8014b98 <iprintf>
  return q;
 800c740:	68fb      	ldr	r3, [r7, #12]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	08016118 	.word	0x08016118
 800c750:	0801658c 	.word	0x0801658c
 800c754:	08016178 	.word	0x08016178

0800c758 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c75c:	f008 fa34 	bl	8014bc8 <rand>
 800c760:	4603      	mov	r3, r0
 800c762:	b29b      	uxth	r3, r3
 800c764:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c768:	b29b      	uxth	r3, r3
 800c76a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c76e:	b29a      	uxth	r2, r3
 800c770:	4b01      	ldr	r3, [pc, #4]	; (800c778 <tcp_init+0x20>)
 800c772:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c774:	bf00      	nop
 800c776:	bd80      	pop	{r7, pc}
 800c778:	20001828 	.word	0x20001828

0800c77c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	7d1b      	ldrb	r3, [r3, #20]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d105      	bne.n	800c798 <tcp_free+0x1c>
 800c78c:	4b06      	ldr	r3, [pc, #24]	; (800c7a8 <tcp_free+0x2c>)
 800c78e:	22d4      	movs	r2, #212	; 0xd4
 800c790:	4906      	ldr	r1, [pc, #24]	; (800c7ac <tcp_free+0x30>)
 800c792:	4807      	ldr	r0, [pc, #28]	; (800c7b0 <tcp_free+0x34>)
 800c794:	f008 fa00 	bl	8014b98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c798:	6879      	ldr	r1, [r7, #4]
 800c79a:	2001      	movs	r0, #1
 800c79c:	f7fe fe9e 	bl	800b4dc <memp_free>
}
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	08016618 	.word	0x08016618
 800c7ac:	08016648 	.word	0x08016648
 800c7b0:	0801665c 	.word	0x0801665c

0800c7b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	7d1b      	ldrb	r3, [r3, #20]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d105      	bne.n	800c7d0 <tcp_free_listen+0x1c>
 800c7c4:	4b06      	ldr	r3, [pc, #24]	; (800c7e0 <tcp_free_listen+0x2c>)
 800c7c6:	22df      	movs	r2, #223	; 0xdf
 800c7c8:	4906      	ldr	r1, [pc, #24]	; (800c7e4 <tcp_free_listen+0x30>)
 800c7ca:	4807      	ldr	r0, [pc, #28]	; (800c7e8 <tcp_free_listen+0x34>)
 800c7cc:	f008 f9e4 	bl	8014b98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c7d0:	6879      	ldr	r1, [r7, #4]
 800c7d2:	2002      	movs	r0, #2
 800c7d4:	f7fe fe82 	bl	800b4dc <memp_free>
}
 800c7d8:	bf00      	nop
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	08016618 	.word	0x08016618
 800c7e4:	08016684 	.word	0x08016684
 800c7e8:	0801665c 	.word	0x0801665c

0800c7ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c7f0:	f000 fea2 	bl	800d538 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c7f4:	4b07      	ldr	r3, [pc, #28]	; (800c814 <tcp_tmr+0x28>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	4b05      	ldr	r3, [pc, #20]	; (800c814 <tcp_tmr+0x28>)
 800c7fe:	701a      	strb	r2, [r3, #0]
 800c800:	4b04      	ldr	r3, [pc, #16]	; (800c814 <tcp_tmr+0x28>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	f003 0301 	and.w	r3, r3, #1
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d001      	beq.n	800c810 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c80c:	f000 fb54 	bl	800ceb8 <tcp_slowtmr>
  }
}
 800c810:	bf00      	nop
 800c812:	bd80      	pop	{r7, pc}
 800c814:	2004f191 	.word	0x2004f191

0800c818 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d105      	bne.n	800c834 <tcp_remove_listener+0x1c>
 800c828:	4b0d      	ldr	r3, [pc, #52]	; (800c860 <tcp_remove_listener+0x48>)
 800c82a:	22ff      	movs	r2, #255	; 0xff
 800c82c:	490d      	ldr	r1, [pc, #52]	; (800c864 <tcp_remove_listener+0x4c>)
 800c82e:	480e      	ldr	r0, [pc, #56]	; (800c868 <tcp_remove_listener+0x50>)
 800c830:	f008 f9b2 	bl	8014b98 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	e00a      	b.n	800c850 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	429a      	cmp	r2, r3
 800c842:	d102      	bne.n	800c84a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	60fb      	str	r3, [r7, #12]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1f1      	bne.n	800c83a <tcp_remove_listener+0x22>
    }
  }
}
 800c856:	bf00      	nop
 800c858:	bf00      	nop
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	08016618 	.word	0x08016618
 800c864:	080166a0 	.word	0x080166a0
 800c868:	0801665c 	.word	0x0801665c

0800c86c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d106      	bne.n	800c888 <tcp_listen_closed+0x1c>
 800c87a:	4b14      	ldr	r3, [pc, #80]	; (800c8cc <tcp_listen_closed+0x60>)
 800c87c:	f240 1211 	movw	r2, #273	; 0x111
 800c880:	4913      	ldr	r1, [pc, #76]	; (800c8d0 <tcp_listen_closed+0x64>)
 800c882:	4814      	ldr	r0, [pc, #80]	; (800c8d4 <tcp_listen_closed+0x68>)
 800c884:	f008 f988 	bl	8014b98 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	7d1b      	ldrb	r3, [r3, #20]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d006      	beq.n	800c89e <tcp_listen_closed+0x32>
 800c890:	4b0e      	ldr	r3, [pc, #56]	; (800c8cc <tcp_listen_closed+0x60>)
 800c892:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c896:	4910      	ldr	r1, [pc, #64]	; (800c8d8 <tcp_listen_closed+0x6c>)
 800c898:	480e      	ldr	r0, [pc, #56]	; (800c8d4 <tcp_listen_closed+0x68>)
 800c89a:	f008 f97d 	bl	8014b98 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c89e:	2301      	movs	r3, #1
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	e00b      	b.n	800c8bc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c8a4:	4a0d      	ldr	r2, [pc, #52]	; (800c8dc <tcp_listen_closed+0x70>)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	6879      	ldr	r1, [r7, #4]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff ffb1 	bl	800c818 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d9f0      	bls.n	800c8a4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c8c2:	bf00      	nop
 800c8c4:	bf00      	nop
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	08016618 	.word	0x08016618
 800c8d0:	080166c8 	.word	0x080166c8
 800c8d4:	0801665c 	.word	0x0801665c
 800c8d8:	080166d4 	.word	0x080166d4
 800c8dc:	0801865c 	.word	0x0801865c

0800c8e0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c8e0:	b5b0      	push	{r4, r5, r7, lr}
 800c8e2:	b088      	sub	sp, #32
 800c8e4:	af04      	add	r7, sp, #16
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d106      	bne.n	800c900 <tcp_close_shutdown+0x20>
 800c8f2:	4b63      	ldr	r3, [pc, #396]	; (800ca80 <tcp_close_shutdown+0x1a0>)
 800c8f4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c8f8:	4962      	ldr	r1, [pc, #392]	; (800ca84 <tcp_close_shutdown+0x1a4>)
 800c8fa:	4863      	ldr	r0, [pc, #396]	; (800ca88 <tcp_close_shutdown+0x1a8>)
 800c8fc:	f008 f94c 	bl	8014b98 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c900:	78fb      	ldrb	r3, [r7, #3]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d066      	beq.n	800c9d4 <tcp_close_shutdown+0xf4>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	7d1b      	ldrb	r3, [r3, #20]
 800c90a:	2b04      	cmp	r3, #4
 800c90c:	d003      	beq.n	800c916 <tcp_close_shutdown+0x36>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	7d1b      	ldrb	r3, [r3, #20]
 800c912:	2b07      	cmp	r3, #7
 800c914:	d15e      	bne.n	800c9d4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d104      	bne.n	800c928 <tcp_close_shutdown+0x48>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c922:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c926:	d055      	beq.n	800c9d4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	8b5b      	ldrh	r3, [r3, #26]
 800c92c:	f003 0310 	and.w	r3, r3, #16
 800c930:	2b00      	cmp	r3, #0
 800c932:	d106      	bne.n	800c942 <tcp_close_shutdown+0x62>
 800c934:	4b52      	ldr	r3, [pc, #328]	; (800ca80 <tcp_close_shutdown+0x1a0>)
 800c936:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c93a:	4954      	ldr	r1, [pc, #336]	; (800ca8c <tcp_close_shutdown+0x1ac>)
 800c93c:	4852      	ldr	r0, [pc, #328]	; (800ca88 <tcp_close_shutdown+0x1a8>)
 800c93e:	f008 f92b 	bl	8014b98 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c94a:	687d      	ldr	r5, [r7, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	3304      	adds	r3, #4
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	8ad2      	ldrh	r2, [r2, #22]
 800c954:	6879      	ldr	r1, [r7, #4]
 800c956:	8b09      	ldrh	r1, [r1, #24]
 800c958:	9102      	str	r1, [sp, #8]
 800c95a:	9201      	str	r2, [sp, #4]
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	462b      	mov	r3, r5
 800c960:	4622      	mov	r2, r4
 800c962:	4601      	mov	r1, r0
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f004 fe91 	bl	801168c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f001 f8c6 	bl	800dafc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c970:	4b47      	ldr	r3, [pc, #284]	; (800ca90 <tcp_close_shutdown+0x1b0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	429a      	cmp	r2, r3
 800c978:	d105      	bne.n	800c986 <tcp_close_shutdown+0xa6>
 800c97a:	4b45      	ldr	r3, [pc, #276]	; (800ca90 <tcp_close_shutdown+0x1b0>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	4a43      	ldr	r2, [pc, #268]	; (800ca90 <tcp_close_shutdown+0x1b0>)
 800c982:	6013      	str	r3, [r2, #0]
 800c984:	e013      	b.n	800c9ae <tcp_close_shutdown+0xce>
 800c986:	4b42      	ldr	r3, [pc, #264]	; (800ca90 <tcp_close_shutdown+0x1b0>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	60fb      	str	r3, [r7, #12]
 800c98c:	e00c      	b.n	800c9a8 <tcp_close_shutdown+0xc8>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	429a      	cmp	r2, r3
 800c996:	d104      	bne.n	800c9a2 <tcp_close_shutdown+0xc2>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68da      	ldr	r2, [r3, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	60da      	str	r2, [r3, #12]
 800c9a0:	e005      	b.n	800c9ae <tcp_close_shutdown+0xce>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1ef      	bne.n	800c98e <tcp_close_shutdown+0xae>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	60da      	str	r2, [r3, #12]
 800c9b4:	4b37      	ldr	r3, [pc, #220]	; (800ca94 <tcp_close_shutdown+0x1b4>)
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c9ba:	4b37      	ldr	r3, [pc, #220]	; (800ca98 <tcp_close_shutdown+0x1b8>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d102      	bne.n	800c9ca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c9c4:	f003 fd5e 	bl	8010484 <tcp_trigger_input_pcb_close>
 800c9c8:	e002      	b.n	800c9d0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7ff fed6 	bl	800c77c <tcp_free>
      }
      return ERR_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e050      	b.n	800ca76 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7d1b      	ldrb	r3, [r3, #20]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d03b      	beq.n	800ca54 <tcp_close_shutdown+0x174>
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	dc44      	bgt.n	800ca6a <tcp_close_shutdown+0x18a>
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d002      	beq.n	800c9ea <tcp_close_shutdown+0x10a>
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d02a      	beq.n	800ca3e <tcp_close_shutdown+0x15e>
 800c9e8:	e03f      	b.n	800ca6a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	8adb      	ldrh	r3, [r3, #22]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d021      	beq.n	800ca36 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c9f2:	4b2a      	ldr	r3, [pc, #168]	; (800ca9c <tcp_close_shutdown+0x1bc>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d105      	bne.n	800ca08 <tcp_close_shutdown+0x128>
 800c9fc:	4b27      	ldr	r3, [pc, #156]	; (800ca9c <tcp_close_shutdown+0x1bc>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	4a26      	ldr	r2, [pc, #152]	; (800ca9c <tcp_close_shutdown+0x1bc>)
 800ca04:	6013      	str	r3, [r2, #0]
 800ca06:	e013      	b.n	800ca30 <tcp_close_shutdown+0x150>
 800ca08:	4b24      	ldr	r3, [pc, #144]	; (800ca9c <tcp_close_shutdown+0x1bc>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	60bb      	str	r3, [r7, #8]
 800ca0e:	e00c      	b.n	800ca2a <tcp_close_shutdown+0x14a>
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d104      	bne.n	800ca24 <tcp_close_shutdown+0x144>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	68da      	ldr	r2, [r3, #12]
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	60da      	str	r2, [r3, #12]
 800ca22:	e005      	b.n	800ca30 <tcp_close_shutdown+0x150>
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	60bb      	str	r3, [r7, #8]
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1ef      	bne.n	800ca10 <tcp_close_shutdown+0x130>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f7ff fea0 	bl	800c77c <tcp_free>
      break;
 800ca3c:	e01a      	b.n	800ca74 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7ff ff14 	bl	800c86c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ca44:	6879      	ldr	r1, [r7, #4]
 800ca46:	4816      	ldr	r0, [pc, #88]	; (800caa0 <tcp_close_shutdown+0x1c0>)
 800ca48:	f001 f8a8 	bl	800db9c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f7ff feb1 	bl	800c7b4 <tcp_free_listen>
      break;
 800ca52:	e00f      	b.n	800ca74 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca54:	6879      	ldr	r1, [r7, #4]
 800ca56:	480e      	ldr	r0, [pc, #56]	; (800ca90 <tcp_close_shutdown+0x1b0>)
 800ca58:	f001 f8a0 	bl	800db9c <tcp_pcb_remove>
 800ca5c:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <tcp_close_shutdown+0x1b4>)
 800ca5e:	2201      	movs	r2, #1
 800ca60:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f7ff fe8a 	bl	800c77c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ca68:	e004      	b.n	800ca74 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f81a 	bl	800caa4 <tcp_close_shutdown_fin>
 800ca70:	4603      	mov	r3, r0
 800ca72:	e000      	b.n	800ca76 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	08016618 	.word	0x08016618
 800ca84:	080166ec 	.word	0x080166ec
 800ca88:	0801665c 	.word	0x0801665c
 800ca8c:	0801670c 	.word	0x0801670c
 800ca90:	2004f188 	.word	0x2004f188
 800ca94:	2004f190 	.word	0x2004f190
 800ca98:	2004f1c8 	.word	0x2004f1c8
 800ca9c:	2004f180 	.word	0x2004f180
 800caa0:	2004f184 	.word	0x2004f184

0800caa4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d106      	bne.n	800cac0 <tcp_close_shutdown_fin+0x1c>
 800cab2:	4b2e      	ldr	r3, [pc, #184]	; (800cb6c <tcp_close_shutdown_fin+0xc8>)
 800cab4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cab8:	492d      	ldr	r1, [pc, #180]	; (800cb70 <tcp_close_shutdown_fin+0xcc>)
 800caba:	482e      	ldr	r0, [pc, #184]	; (800cb74 <tcp_close_shutdown_fin+0xd0>)
 800cabc:	f008 f86c 	bl	8014b98 <iprintf>

  switch (pcb->state) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	7d1b      	ldrb	r3, [r3, #20]
 800cac4:	2b07      	cmp	r3, #7
 800cac6:	d020      	beq.n	800cb0a <tcp_close_shutdown_fin+0x66>
 800cac8:	2b07      	cmp	r3, #7
 800caca:	dc2b      	bgt.n	800cb24 <tcp_close_shutdown_fin+0x80>
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d002      	beq.n	800cad6 <tcp_close_shutdown_fin+0x32>
 800cad0:	2b04      	cmp	r3, #4
 800cad2:	d00d      	beq.n	800caf0 <tcp_close_shutdown_fin+0x4c>
 800cad4:	e026      	b.n	800cb24 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f003 fee6 	bl	80108a8 <tcp_send_fin>
 800cadc:	4603      	mov	r3, r0
 800cade:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d11f      	bne.n	800cb28 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2205      	movs	r2, #5
 800caec:	751a      	strb	r2, [r3, #20]
      }
      break;
 800caee:	e01b      	b.n	800cb28 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f003 fed9 	bl	80108a8 <tcp_send_fin>
 800caf6:	4603      	mov	r3, r0
 800caf8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d114      	bne.n	800cb2c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2205      	movs	r2, #5
 800cb06:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb08:	e010      	b.n	800cb2c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f003 fecc 	bl	80108a8 <tcp_send_fin>
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d109      	bne.n	800cb30 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2209      	movs	r2, #9
 800cb20:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb22:	e005      	b.n	800cb30 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	e01c      	b.n	800cb62 <tcp_close_shutdown_fin+0xbe>
      break;
 800cb28:	bf00      	nop
 800cb2a:	e002      	b.n	800cb32 <tcp_close_shutdown_fin+0x8e>
      break;
 800cb2c:	bf00      	nop
 800cb2e:	e000      	b.n	800cb32 <tcp_close_shutdown_fin+0x8e>
      break;
 800cb30:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cb32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d103      	bne.n	800cb42 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f003 fff2 	bl	8010b24 <tcp_output>
 800cb40:	e00d      	b.n	800cb5e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cb42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb4a:	d108      	bne.n	800cb5e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	8b5b      	ldrh	r3, [r3, #26]
 800cb50:	f043 0308 	orr.w	r3, r3, #8
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	e001      	b.n	800cb62 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cb5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	08016618 	.word	0x08016618
 800cb70:	080166c8 	.word	0x080166c8
 800cb74:	0801665c 	.word	0x0801665c

0800cb78 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d109      	bne.n	800cb9a <tcp_close+0x22>
 800cb86:	4b0f      	ldr	r3, [pc, #60]	; (800cbc4 <tcp_close+0x4c>)
 800cb88:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cb8c:	490e      	ldr	r1, [pc, #56]	; (800cbc8 <tcp_close+0x50>)
 800cb8e:	480f      	ldr	r0, [pc, #60]	; (800cbcc <tcp_close+0x54>)
 800cb90:	f008 f802 	bl	8014b98 <iprintf>
 800cb94:	f06f 030f 	mvn.w	r3, #15
 800cb98:	e00f      	b.n	800cbba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	7d1b      	ldrb	r3, [r3, #20]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d006      	beq.n	800cbb0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	8b5b      	ldrh	r3, [r3, #26]
 800cba6:	f043 0310 	orr.w	r3, r3, #16
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7ff fe94 	bl	800c8e0 <tcp_close_shutdown>
 800cbb8:	4603      	mov	r3, r0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	08016618 	.word	0x08016618
 800cbc8:	08016728 	.word	0x08016728
 800cbcc:	0801665c 	.word	0x0801665c

0800cbd0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08e      	sub	sp, #56	; 0x38
 800cbd4:	af04      	add	r7, sp, #16
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d107      	bne.n	800cbf0 <tcp_abandon+0x20>
 800cbe0:	4b52      	ldr	r3, [pc, #328]	; (800cd2c <tcp_abandon+0x15c>)
 800cbe2:	f240 223d 	movw	r2, #573	; 0x23d
 800cbe6:	4952      	ldr	r1, [pc, #328]	; (800cd30 <tcp_abandon+0x160>)
 800cbe8:	4852      	ldr	r0, [pc, #328]	; (800cd34 <tcp_abandon+0x164>)
 800cbea:	f007 ffd5 	bl	8014b98 <iprintf>
 800cbee:	e099      	b.n	800cd24 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	7d1b      	ldrb	r3, [r3, #20]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d106      	bne.n	800cc06 <tcp_abandon+0x36>
 800cbf8:	4b4c      	ldr	r3, [pc, #304]	; (800cd2c <tcp_abandon+0x15c>)
 800cbfa:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cbfe:	494e      	ldr	r1, [pc, #312]	; (800cd38 <tcp_abandon+0x168>)
 800cc00:	484c      	ldr	r0, [pc, #304]	; (800cd34 <tcp_abandon+0x164>)
 800cc02:	f007 ffc9 	bl	8014b98 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	7d1b      	ldrb	r3, [r3, #20]
 800cc0a:	2b0a      	cmp	r3, #10
 800cc0c:	d107      	bne.n	800cc1e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	484a      	ldr	r0, [pc, #296]	; (800cd3c <tcp_abandon+0x16c>)
 800cc12:	f000 ffc3 	bl	800db9c <tcp_pcb_remove>
    tcp_free(pcb);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7ff fdb0 	bl	800c77c <tcp_free>
 800cc1c:	e082      	b.n	800cd24 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc2a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc30:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc38:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7d1b      	ldrb	r3, [r3, #20]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d126      	bne.n	800cc96 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	8adb      	ldrh	r3, [r3, #22]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d02e      	beq.n	800ccae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc50:	4b3b      	ldr	r3, [pc, #236]	; (800cd40 <tcp_abandon+0x170>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d105      	bne.n	800cc66 <tcp_abandon+0x96>
 800cc5a:	4b39      	ldr	r3, [pc, #228]	; (800cd40 <tcp_abandon+0x170>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	4a37      	ldr	r2, [pc, #220]	; (800cd40 <tcp_abandon+0x170>)
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	e013      	b.n	800cc8e <tcp_abandon+0xbe>
 800cc66:	4b36      	ldr	r3, [pc, #216]	; (800cd40 <tcp_abandon+0x170>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	61fb      	str	r3, [r7, #28]
 800cc6c:	e00c      	b.n	800cc88 <tcp_abandon+0xb8>
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d104      	bne.n	800cc82 <tcp_abandon+0xb2>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	68da      	ldr	r2, [r3, #12]
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	60da      	str	r2, [r3, #12]
 800cc80:	e005      	b.n	800cc8e <tcp_abandon+0xbe>
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	61fb      	str	r3, [r7, #28]
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1ef      	bne.n	800cc6e <tcp_abandon+0x9e>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	60da      	str	r2, [r3, #12]
 800cc94:	e00b      	b.n	800ccae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	8adb      	ldrh	r3, [r3, #22]
 800cc9e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cca0:	6879      	ldr	r1, [r7, #4]
 800cca2:	4828      	ldr	r0, [pc, #160]	; (800cd44 <tcp_abandon+0x174>)
 800cca4:	f000 ff7a 	bl	800db9c <tcp_pcb_remove>
 800cca8:	4b27      	ldr	r3, [pc, #156]	; (800cd48 <tcp_abandon+0x178>)
 800ccaa:	2201      	movs	r2, #1
 800ccac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d004      	beq.n	800ccc0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 fd1c 	bl	800d6f8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d004      	beq.n	800ccd2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cccc:	4618      	mov	r0, r3
 800ccce:	f000 fd13 	bl	800d6f8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d004      	beq.n	800cce4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 fd0a 	bl	800d6f8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00e      	beq.n	800cd08 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ccea:	6879      	ldr	r1, [r7, #4]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3304      	adds	r3, #4
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	8b12      	ldrh	r2, [r2, #24]
 800ccf4:	9202      	str	r2, [sp, #8]
 800ccf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ccf8:	9201      	str	r2, [sp, #4]
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	697a      	ldr	r2, [r7, #20]
 800cd00:	69b9      	ldr	r1, [r7, #24]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f004 fcc2 	bl	801168c <tcp_rst>
    }
    last_state = pcb->state;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	7d1b      	ldrb	r3, [r3, #20]
 800cd0c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff fd34 	bl	800c77c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d004      	beq.n	800cd24 <tcp_abandon+0x154>
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	f06f 010c 	mvn.w	r1, #12
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	4798      	blx	r3
  }
}
 800cd24:	3728      	adds	r7, #40	; 0x28
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	08016618 	.word	0x08016618
 800cd30:	0801675c 	.word	0x0801675c
 800cd34:	0801665c 	.word	0x0801665c
 800cd38:	08016778 	.word	0x08016778
 800cd3c:	2004f18c 	.word	0x2004f18c
 800cd40:	2004f180 	.word	0x2004f180
 800cd44:	2004f188 	.word	0x2004f188
 800cd48:	2004f190 	.word	0x2004f190

0800cd4c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cd54:	2101      	movs	r1, #1
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7ff ff3a 	bl	800cbd0 <tcp_abandon>
}
 800cd5c:	bf00      	nop
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d106      	bne.n	800cd80 <tcp_update_rcv_ann_wnd+0x1c>
 800cd72:	4b25      	ldr	r3, [pc, #148]	; (800ce08 <tcp_update_rcv_ann_wnd+0xa4>)
 800cd74:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cd78:	4924      	ldr	r1, [pc, #144]	; (800ce0c <tcp_update_rcv_ann_wnd+0xa8>)
 800cd7a:	4825      	ldr	r0, [pc, #148]	; (800ce10 <tcp_update_rcv_ann_wnd+0xac>)
 800cd7c:	f007 ff0c 	bl	8014b98 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cd88:	4413      	add	r3, r2
 800cd8a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cd94:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cd98:	bf28      	it	cs
 800cd9a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cd9e:	b292      	uxth	r2, r2
 800cda0:	4413      	add	r3, r2
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	db08      	blt.n	800cdbc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	e020      	b.n	800cdfe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc4:	1ad3      	subs	r3, r2, r3
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	dd03      	ble.n	800cdd2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdd0:	e014      	b.n	800cdfc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cde4:	d306      	bcc.n	800cdf4 <tcp_update_rcv_ann_wnd+0x90>
 800cde6:	4b08      	ldr	r3, [pc, #32]	; (800ce08 <tcp_update_rcv_ann_wnd+0xa4>)
 800cde8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cdec:	4909      	ldr	r1, [pc, #36]	; (800ce14 <tcp_update_rcv_ann_wnd+0xb0>)
 800cdee:	4808      	ldr	r0, [pc, #32]	; (800ce10 <tcp_update_rcv_ann_wnd+0xac>)
 800cdf0:	f007 fed2 	bl	8014b98 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cdfc:	2300      	movs	r3, #0
  }
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	08016618 	.word	0x08016618
 800ce0c:	08016874 	.word	0x08016874
 800ce10:	0801665c 	.word	0x0801665c
 800ce14:	08016898 	.word	0x08016898

0800ce18 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d107      	bne.n	800ce3a <tcp_recved+0x22>
 800ce2a:	4b1f      	ldr	r3, [pc, #124]	; (800cea8 <tcp_recved+0x90>)
 800ce2c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ce30:	491e      	ldr	r1, [pc, #120]	; (800ceac <tcp_recved+0x94>)
 800ce32:	481f      	ldr	r0, [pc, #124]	; (800ceb0 <tcp_recved+0x98>)
 800ce34:	f007 feb0 	bl	8014b98 <iprintf>
 800ce38:	e032      	b.n	800cea0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7d1b      	ldrb	r3, [r3, #20]
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d106      	bne.n	800ce50 <tcp_recved+0x38>
 800ce42:	4b19      	ldr	r3, [pc, #100]	; (800cea8 <tcp_recved+0x90>)
 800ce44:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ce48:	491a      	ldr	r1, [pc, #104]	; (800ceb4 <tcp_recved+0x9c>)
 800ce4a:	4819      	ldr	r0, [pc, #100]	; (800ceb0 <tcp_recved+0x98>)
 800ce4c:	f007 fea4 	bl	8014b98 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce54:	887b      	ldrh	r3, [r7, #2]
 800ce56:	4413      	add	r3, r2
 800ce58:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ce5a:	89fb      	ldrh	r3, [r7, #14]
 800ce5c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce60:	d804      	bhi.n	800ce6c <tcp_recved+0x54>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce66:	89fa      	ldrh	r2, [r7, #14]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d204      	bcs.n	800ce76 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce72:	851a      	strh	r2, [r3, #40]	; 0x28
 800ce74:	e002      	b.n	800ce7c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	89fa      	ldrh	r2, [r7, #14]
 800ce7a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff ff71 	bl	800cd64 <tcp_update_rcv_ann_wnd>
 800ce82:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ce8a:	d309      	bcc.n	800cea0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	8b5b      	ldrh	r3, [r3, #26]
 800ce90:	f043 0302 	orr.w	r3, r3, #2
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f003 fe42 	bl	8010b24 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	08016618 	.word	0x08016618
 800ceac:	080168b4 	.word	0x080168b4
 800ceb0:	0801665c 	.word	0x0801665c
 800ceb4:	080168cc 	.word	0x080168cc

0800ceb8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ceb8:	b5b0      	push	{r4, r5, r7, lr}
 800ceba:	b090      	sub	sp, #64	; 0x40
 800cebc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cebe:	2300      	movs	r3, #0
 800cec0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cec4:	4b94      	ldr	r3, [pc, #592]	; (800d118 <tcp_slowtmr+0x260>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3301      	adds	r3, #1
 800ceca:	4a93      	ldr	r2, [pc, #588]	; (800d118 <tcp_slowtmr+0x260>)
 800cecc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cece:	4b93      	ldr	r3, [pc, #588]	; (800d11c <tcp_slowtmr+0x264>)
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	3301      	adds	r3, #1
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	4b91      	ldr	r3, [pc, #580]	; (800d11c <tcp_slowtmr+0x264>)
 800ced8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ceda:	2300      	movs	r3, #0
 800cedc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cede:	4b90      	ldr	r3, [pc, #576]	; (800d120 <tcp_slowtmr+0x268>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cee4:	e29d      	b.n	800d422 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	7d1b      	ldrb	r3, [r3, #20]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d106      	bne.n	800cefc <tcp_slowtmr+0x44>
 800ceee:	4b8d      	ldr	r3, [pc, #564]	; (800d124 <tcp_slowtmr+0x26c>)
 800cef0:	f240 42be 	movw	r2, #1214	; 0x4be
 800cef4:	498c      	ldr	r1, [pc, #560]	; (800d128 <tcp_slowtmr+0x270>)
 800cef6:	488d      	ldr	r0, [pc, #564]	; (800d12c <tcp_slowtmr+0x274>)
 800cef8:	f007 fe4e 	bl	8014b98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	7d1b      	ldrb	r3, [r3, #20]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d106      	bne.n	800cf12 <tcp_slowtmr+0x5a>
 800cf04:	4b87      	ldr	r3, [pc, #540]	; (800d124 <tcp_slowtmr+0x26c>)
 800cf06:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cf0a:	4989      	ldr	r1, [pc, #548]	; (800d130 <tcp_slowtmr+0x278>)
 800cf0c:	4887      	ldr	r0, [pc, #540]	; (800d12c <tcp_slowtmr+0x274>)
 800cf0e:	f007 fe43 	bl	8014b98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	7d1b      	ldrb	r3, [r3, #20]
 800cf16:	2b0a      	cmp	r3, #10
 800cf18:	d106      	bne.n	800cf28 <tcp_slowtmr+0x70>
 800cf1a:	4b82      	ldr	r3, [pc, #520]	; (800d124 <tcp_slowtmr+0x26c>)
 800cf1c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cf20:	4984      	ldr	r1, [pc, #528]	; (800d134 <tcp_slowtmr+0x27c>)
 800cf22:	4882      	ldr	r0, [pc, #520]	; (800d12c <tcp_slowtmr+0x274>)
 800cf24:	f007 fe38 	bl	8014b98 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	7f9a      	ldrb	r2, [r3, #30]
 800cf2c:	4b7b      	ldr	r3, [pc, #492]	; (800d11c <tcp_slowtmr+0x264>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d105      	bne.n	800cf40 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cf3e:	e270      	b.n	800d422 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cf40:	4b76      	ldr	r3, [pc, #472]	; (800d11c <tcp_slowtmr+0x264>)
 800cf42:	781a      	ldrb	r2, [r3, #0]
 800cf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf46:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf56:	7d1b      	ldrb	r3, [r3, #20]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d10a      	bne.n	800cf72 <tcp_slowtmr+0xba>
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf62:	2b05      	cmp	r3, #5
 800cf64:	d905      	bls.n	800cf72 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cf66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf70:	e11e      	b.n	800d1b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf78:	2b0b      	cmp	r3, #11
 800cf7a:	d905      	bls.n	800cf88 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cf7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf80:	3301      	adds	r3, #1
 800cf82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf86:	e113      	b.n	800d1b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d075      	beq.n	800d07e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d006      	beq.n	800cfa8 <tcp_slowtmr+0xf0>
 800cf9a:	4b62      	ldr	r3, [pc, #392]	; (800d124 <tcp_slowtmr+0x26c>)
 800cf9c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cfa0:	4965      	ldr	r1, [pc, #404]	; (800d138 <tcp_slowtmr+0x280>)
 800cfa2:	4862      	ldr	r0, [pc, #392]	; (800d12c <tcp_slowtmr+0x274>)
 800cfa4:	f007 fdf8 	bl	8014b98 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d106      	bne.n	800cfbe <tcp_slowtmr+0x106>
 800cfb0:	4b5c      	ldr	r3, [pc, #368]	; (800d124 <tcp_slowtmr+0x26c>)
 800cfb2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cfb6:	4961      	ldr	r1, [pc, #388]	; (800d13c <tcp_slowtmr+0x284>)
 800cfb8:	485c      	ldr	r0, [pc, #368]	; (800d12c <tcp_slowtmr+0x274>)
 800cfba:	f007 fded 	bl	8014b98 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cfc4:	2b0b      	cmp	r3, #11
 800cfc6:	d905      	bls.n	800cfd4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfcc:	3301      	adds	r3, #1
 800cfce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfd2:	e0ed      	b.n	800d1b0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	4a58      	ldr	r2, [pc, #352]	; (800d140 <tcp_slowtmr+0x288>)
 800cfde:	5cd3      	ldrb	r3, [r2, r3]
 800cfe0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cfe8:	7c7a      	ldrb	r2, [r7, #17]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d907      	bls.n	800cffe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cff4:	3301      	adds	r3, #1
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d004:	7c7a      	ldrb	r2, [r7, #17]
 800d006:	429a      	cmp	r2, r3
 800d008:	f200 80d2 	bhi.w	800d1b0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d00c:	2301      	movs	r3, #1
 800d00e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d016:	2b00      	cmp	r3, #0
 800d018:	d108      	bne.n	800d02c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d01a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d01c:	f004 fc2a 	bl	8011874 <tcp_zero_window_probe>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d014      	beq.n	800d050 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d026:	2300      	movs	r3, #0
 800d028:	623b      	str	r3, [r7, #32]
 800d02a:	e011      	b.n	800d050 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d032:	4619      	mov	r1, r3
 800d034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d036:	f003 faef 	bl	8010618 <tcp_split_unsent_seg>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d107      	bne.n	800d050 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d042:	f003 fd6f 	bl	8010b24 <tcp_output>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d101      	bne.n	800d050 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	2b00      	cmp	r3, #0
 800d054:	f000 80ac 	beq.w	800d1b0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05a:	2200      	movs	r2, #0
 800d05c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d062:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d066:	2b06      	cmp	r3, #6
 800d068:	f200 80a2 	bhi.w	800d1b0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d072:	3301      	adds	r3, #1
 800d074:	b2da      	uxtb	r2, r3
 800d076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d078:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d07c:	e098      	b.n	800d1b0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d080:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d084:	2b00      	cmp	r3, #0
 800d086:	db0f      	blt.n	800d0a8 <tcp_slowtmr+0x1f0>
 800d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d08e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d092:	4293      	cmp	r3, r2
 800d094:	d008      	beq.n	800d0a8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d098:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	3301      	adds	r3, #1
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	b21a      	sxth	r2, r3
 800d0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	db7b      	blt.n	800d1b0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d0b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0ba:	f004 f825 	bl	8011108 <tcp_rexmit_rto_prepare>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d007      	beq.n	800d0d4 <tcp_slowtmr+0x21c>
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d171      	bne.n	800d1b0 <tcp_slowtmr+0x2f8>
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d06d      	beq.n	800d1b0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d6:	7d1b      	ldrb	r3, [r3, #20]
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d03a      	beq.n	800d152 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0e2:	2b0c      	cmp	r3, #12
 800d0e4:	bf28      	it	cs
 800d0e6:	230c      	movcs	r3, #12
 800d0e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d0f0:	10db      	asrs	r3, r3, #3
 800d0f2:	b21b      	sxth	r3, r3
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d0fc:	4413      	add	r3, r2
 800d0fe:	7efa      	ldrb	r2, [r7, #27]
 800d100:	4910      	ldr	r1, [pc, #64]	; (800d144 <tcp_slowtmr+0x28c>)
 800d102:	5c8a      	ldrb	r2, [r1, r2]
 800d104:	4093      	lsls	r3, r2
 800d106:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d10e:	4293      	cmp	r3, r2
 800d110:	dc1a      	bgt.n	800d148 <tcp_slowtmr+0x290>
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	b21a      	sxth	r2, r3
 800d116:	e019      	b.n	800d14c <tcp_slowtmr+0x294>
 800d118:	2004f17c 	.word	0x2004f17c
 800d11c:	2004f192 	.word	0x2004f192
 800d120:	2004f188 	.word	0x2004f188
 800d124:	08016618 	.word	0x08016618
 800d128:	0801695c 	.word	0x0801695c
 800d12c:	0801665c 	.word	0x0801665c
 800d130:	08016988 	.word	0x08016988
 800d134:	080169b4 	.word	0x080169b4
 800d138:	080169e4 	.word	0x080169e4
 800d13c:	08016a18 	.word	0x08016a18
 800d140:	08018654 	.word	0x08018654
 800d144:	08018644 	.word	0x08018644
 800d148:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	2200      	movs	r2, #0
 800d156:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d164:	4293      	cmp	r3, r2
 800d166:	bf28      	it	cs
 800d168:	4613      	movcs	r3, r2
 800d16a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d16c:	8a7b      	ldrh	r3, [r7, #18]
 800d16e:	085b      	lsrs	r3, r3, #1
 800d170:	b29a      	uxth	r2, r3
 800d172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d174:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d182:	005b      	lsls	r3, r3, #1
 800d184:	b29b      	uxth	r3, r3
 800d186:	429a      	cmp	r2, r3
 800d188:	d206      	bcs.n	800d198 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	b29a      	uxth	r2, r3
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d1aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1ac:	f004 f81c 	bl	80111e8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b2:	7d1b      	ldrb	r3, [r3, #20]
 800d1b4:	2b06      	cmp	r3, #6
 800d1b6:	d111      	bne.n	800d1dc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ba:	8b5b      	ldrh	r3, [r3, #26]
 800d1bc:	f003 0310 	and.w	r3, r3, #16
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00b      	beq.n	800d1dc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1c4:	4b9c      	ldr	r3, [pc, #624]	; (800d438 <tcp_slowtmr+0x580>)
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	6a1b      	ldr	r3, [r3, #32]
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	2b28      	cmp	r3, #40	; 0x28
 800d1d0:	d904      	bls.n	800d1dc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	7a5b      	ldrb	r3, [r3, #9]
 800d1e0:	f003 0308 	and.w	r3, r3, #8
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d04a      	beq.n	800d27e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	d003      	beq.n	800d1f8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d1f4:	2b07      	cmp	r3, #7
 800d1f6:	d142      	bne.n	800d27e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1f8:	4b8f      	ldr	r3, [pc, #572]	; (800d438 <tcp_slowtmr+0x580>)
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fe:	6a1b      	ldr	r3, [r3, #32]
 800d200:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d204:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d208:	4b8c      	ldr	r3, [pc, #560]	; (800d43c <tcp_slowtmr+0x584>)
 800d20a:	440b      	add	r3, r1
 800d20c:	498c      	ldr	r1, [pc, #560]	; (800d440 <tcp_slowtmr+0x588>)
 800d20e:	fba1 1303 	umull	r1, r3, r1, r3
 800d212:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d214:	429a      	cmp	r2, r3
 800d216:	d90a      	bls.n	800d22e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d21c:	3301      	adds	r3, #1
 800d21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d226:	3301      	adds	r3, #1
 800d228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d22c:	e027      	b.n	800d27e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d22e:	4b82      	ldr	r3, [pc, #520]	; (800d438 <tcp_slowtmr+0x580>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d234:	6a1b      	ldr	r3, [r3, #32]
 800d236:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d240:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d244:	4618      	mov	r0, r3
 800d246:	4b7f      	ldr	r3, [pc, #508]	; (800d444 <tcp_slowtmr+0x58c>)
 800d248:	fb00 f303 	mul.w	r3, r0, r3
 800d24c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d24e:	497c      	ldr	r1, [pc, #496]	; (800d440 <tcp_slowtmr+0x588>)
 800d250:	fba1 1303 	umull	r1, r3, r1, r3
 800d254:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d256:	429a      	cmp	r2, r3
 800d258:	d911      	bls.n	800d27e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d25a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d25c:	f004 faca 	bl	80117f4 <tcp_keepalive>
 800d260:	4603      	mov	r3, r0
 800d262:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d266:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d107      	bne.n	800d27e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d274:	3301      	adds	r3, #1
 800d276:	b2da      	uxtb	r2, r3
 800d278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d282:	2b00      	cmp	r3, #0
 800d284:	d011      	beq.n	800d2aa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d286:	4b6c      	ldr	r3, [pc, #432]	; (800d438 <tcp_slowtmr+0x580>)
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28c:	6a1b      	ldr	r3, [r3, #32]
 800d28e:	1ad2      	subs	r2, r2, r3
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d296:	4619      	mov	r1, r3
 800d298:	460b      	mov	r3, r1
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	440b      	add	r3, r1
 800d29e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d302      	bcc.n	800d2aa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d2a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2a6:	f000 fddd 	bl	800de64 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	7d1b      	ldrb	r3, [r3, #20]
 800d2ae:	2b03      	cmp	r3, #3
 800d2b0:	d10b      	bne.n	800d2ca <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2b2:	4b61      	ldr	r3, [pc, #388]	; (800d438 <tcp_slowtmr+0x580>)
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b8:	6a1b      	ldr	r3, [r3, #32]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	2b28      	cmp	r3, #40	; 0x28
 800d2be:	d904      	bls.n	800d2ca <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2cc:	7d1b      	ldrb	r3, [r3, #20]
 800d2ce:	2b09      	cmp	r3, #9
 800d2d0:	d10b      	bne.n	800d2ea <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d2d2:	4b59      	ldr	r3, [pc, #356]	; (800d438 <tcp_slowtmr+0x580>)
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	2bf0      	cmp	r3, #240	; 0xf0
 800d2de:	d904      	bls.n	800d2ea <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d060      	beq.n	800d3b4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2f8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d2fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2fc:	f000 fbfe 	bl	800dafc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	2b00      	cmp	r3, #0
 800d304:	d010      	beq.n	800d328 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d306:	4b50      	ldr	r3, [pc, #320]	; (800d448 <tcp_slowtmr+0x590>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d106      	bne.n	800d31e <tcp_slowtmr+0x466>
 800d310:	4b4e      	ldr	r3, [pc, #312]	; (800d44c <tcp_slowtmr+0x594>)
 800d312:	f240 526d 	movw	r2, #1389	; 0x56d
 800d316:	494e      	ldr	r1, [pc, #312]	; (800d450 <tcp_slowtmr+0x598>)
 800d318:	484e      	ldr	r0, [pc, #312]	; (800d454 <tcp_slowtmr+0x59c>)
 800d31a:	f007 fc3d 	bl	8014b98 <iprintf>
        prev->next = pcb->next;
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	68da      	ldr	r2, [r3, #12]
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	60da      	str	r2, [r3, #12]
 800d326:	e00f      	b.n	800d348 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d328:	4b47      	ldr	r3, [pc, #284]	; (800d448 <tcp_slowtmr+0x590>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d32e:	429a      	cmp	r2, r3
 800d330:	d006      	beq.n	800d340 <tcp_slowtmr+0x488>
 800d332:	4b46      	ldr	r3, [pc, #280]	; (800d44c <tcp_slowtmr+0x594>)
 800d334:	f240 5271 	movw	r2, #1393	; 0x571
 800d338:	4947      	ldr	r1, [pc, #284]	; (800d458 <tcp_slowtmr+0x5a0>)
 800d33a:	4846      	ldr	r0, [pc, #280]	; (800d454 <tcp_slowtmr+0x59c>)
 800d33c:	f007 fc2c 	bl	8014b98 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	4a40      	ldr	r2, [pc, #256]	; (800d448 <tcp_slowtmr+0x590>)
 800d346:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d013      	beq.n	800d378 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d352:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d358:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	3304      	adds	r3, #4
 800d35e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d360:	8ad2      	ldrh	r2, [r2, #22]
 800d362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d364:	8b09      	ldrh	r1, [r1, #24]
 800d366:	9102      	str	r1, [sp, #8]
 800d368:	9201      	str	r2, [sp, #4]
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	462b      	mov	r3, r5
 800d36e:	4622      	mov	r2, r4
 800d370:	4601      	mov	r1, r0
 800d372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d374:	f004 f98a 	bl	801168c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	7d1b      	ldrb	r3, [r3, #20]
 800d382:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d386:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d38e:	6838      	ldr	r0, [r7, #0]
 800d390:	f7ff f9f4 	bl	800c77c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d394:	4b31      	ldr	r3, [pc, #196]	; (800d45c <tcp_slowtmr+0x5a4>)
 800d396:	2200      	movs	r2, #0
 800d398:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d004      	beq.n	800d3aa <tcp_slowtmr+0x4f2>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f06f 010c 	mvn.w	r1, #12
 800d3a6:	68b8      	ldr	r0, [r7, #8]
 800d3a8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d3aa:	4b2c      	ldr	r3, [pc, #176]	; (800d45c <tcp_slowtmr+0x5a4>)
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d037      	beq.n	800d422 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d3b2:	e592      	b.n	800ceda <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c0:	7f1b      	ldrb	r3, [r3, #28]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3cc:	7f1a      	ldrb	r2, [r3, #28]
 800d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d0:	7f5b      	ldrb	r3, [r3, #29]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d325      	bcc.n	800d422 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d8:	2200      	movs	r2, #0
 800d3da:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d3dc:	4b1f      	ldr	r3, [pc, #124]	; (800d45c <tcp_slowtmr+0x5a4>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00b      	beq.n	800d404 <tcp_slowtmr+0x54c>
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3f4:	6912      	ldr	r2, [r2, #16]
 800d3f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3f8:	4610      	mov	r0, r2
 800d3fa:	4798      	blx	r3
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d402:	e002      	b.n	800d40a <tcp_slowtmr+0x552>
 800d404:	2300      	movs	r3, #0
 800d406:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d40a:	4b14      	ldr	r3, [pc, #80]	; (800d45c <tcp_slowtmr+0x5a4>)
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d000      	beq.n	800d414 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d412:	e562      	b.n	800ceda <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d414:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d102      	bne.n	800d422 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d41c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d41e:	f003 fb81 	bl	8010b24 <tcp_output>
  while (pcb != NULL) {
 800d422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d424:	2b00      	cmp	r3, #0
 800d426:	f47f ad5e 	bne.w	800cee6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d42a:	2300      	movs	r3, #0
 800d42c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d42e:	4b0c      	ldr	r3, [pc, #48]	; (800d460 <tcp_slowtmr+0x5a8>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d434:	e069      	b.n	800d50a <tcp_slowtmr+0x652>
 800d436:	bf00      	nop
 800d438:	2004f17c 	.word	0x2004f17c
 800d43c:	000a4cb8 	.word	0x000a4cb8
 800d440:	10624dd3 	.word	0x10624dd3
 800d444:	000124f8 	.word	0x000124f8
 800d448:	2004f188 	.word	0x2004f188
 800d44c:	08016618 	.word	0x08016618
 800d450:	08016a50 	.word	0x08016a50
 800d454:	0801665c 	.word	0x0801665c
 800d458:	08016a7c 	.word	0x08016a7c
 800d45c:	2004f190 	.word	0x2004f190
 800d460:	2004f18c 	.word	0x2004f18c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d466:	7d1b      	ldrb	r3, [r3, #20]
 800d468:	2b0a      	cmp	r3, #10
 800d46a:	d006      	beq.n	800d47a <tcp_slowtmr+0x5c2>
 800d46c:	4b2b      	ldr	r3, [pc, #172]	; (800d51c <tcp_slowtmr+0x664>)
 800d46e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d472:	492b      	ldr	r1, [pc, #172]	; (800d520 <tcp_slowtmr+0x668>)
 800d474:	482b      	ldr	r0, [pc, #172]	; (800d524 <tcp_slowtmr+0x66c>)
 800d476:	f007 fb8f 	bl	8014b98 <iprintf>
    pcb_remove = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d480:	4b29      	ldr	r3, [pc, #164]	; (800d528 <tcp_slowtmr+0x670>)
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d486:	6a1b      	ldr	r3, [r3, #32]
 800d488:	1ad3      	subs	r3, r2, r3
 800d48a:	2bf0      	cmp	r3, #240	; 0xf0
 800d48c:	d904      	bls.n	800d498 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d48e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d492:	3301      	adds	r3, #1
 800d494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d02f      	beq.n	800d500 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d4a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4a2:	f000 fb2b 	bl	800dafc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d010      	beq.n	800d4ce <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d4ac:	4b1f      	ldr	r3, [pc, #124]	; (800d52c <tcp_slowtmr+0x674>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d106      	bne.n	800d4c4 <tcp_slowtmr+0x60c>
 800d4b6:	4b19      	ldr	r3, [pc, #100]	; (800d51c <tcp_slowtmr+0x664>)
 800d4b8:	f240 52af 	movw	r2, #1455	; 0x5af
 800d4bc:	491c      	ldr	r1, [pc, #112]	; (800d530 <tcp_slowtmr+0x678>)
 800d4be:	4819      	ldr	r0, [pc, #100]	; (800d524 <tcp_slowtmr+0x66c>)
 800d4c0:	f007 fb6a 	bl	8014b98 <iprintf>
        prev->next = pcb->next;
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	68da      	ldr	r2, [r3, #12]
 800d4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ca:	60da      	str	r2, [r3, #12]
 800d4cc:	e00f      	b.n	800d4ee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d4ce:	4b17      	ldr	r3, [pc, #92]	; (800d52c <tcp_slowtmr+0x674>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d006      	beq.n	800d4e6 <tcp_slowtmr+0x62e>
 800d4d8:	4b10      	ldr	r3, [pc, #64]	; (800d51c <tcp_slowtmr+0x664>)
 800d4da:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d4de:	4915      	ldr	r1, [pc, #84]	; (800d534 <tcp_slowtmr+0x67c>)
 800d4e0:	4810      	ldr	r0, [pc, #64]	; (800d524 <tcp_slowtmr+0x66c>)
 800d4e2:	f007 fb59 	bl	8014b98 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	4a10      	ldr	r2, [pc, #64]	; (800d52c <tcp_slowtmr+0x674>)
 800d4ec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d4f8:	69f8      	ldr	r0, [r7, #28]
 800d4fa:	f7ff f93f 	bl	800c77c <tcp_free>
 800d4fe:	e004      	b.n	800d50a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1a9      	bne.n	800d464 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d510:	bf00      	nop
 800d512:	bf00      	nop
 800d514:	3730      	adds	r7, #48	; 0x30
 800d516:	46bd      	mov	sp, r7
 800d518:	bdb0      	pop	{r4, r5, r7, pc}
 800d51a:	bf00      	nop
 800d51c:	08016618 	.word	0x08016618
 800d520:	08016aa8 	.word	0x08016aa8
 800d524:	0801665c 	.word	0x0801665c
 800d528:	2004f17c 	.word	0x2004f17c
 800d52c:	2004f18c 	.word	0x2004f18c
 800d530:	08016ad8 	.word	0x08016ad8
 800d534:	08016b00 	.word	0x08016b00

0800d538 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d53e:	4b2d      	ldr	r3, [pc, #180]	; (800d5f4 <tcp_fasttmr+0xbc>)
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	3301      	adds	r3, #1
 800d544:	b2da      	uxtb	r2, r3
 800d546:	4b2b      	ldr	r3, [pc, #172]	; (800d5f4 <tcp_fasttmr+0xbc>)
 800d548:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d54a:	4b2b      	ldr	r3, [pc, #172]	; (800d5f8 <tcp_fasttmr+0xc0>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d550:	e048      	b.n	800d5e4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	7f9a      	ldrb	r2, [r3, #30]
 800d556:	4b27      	ldr	r3, [pc, #156]	; (800d5f4 <tcp_fasttmr+0xbc>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d03f      	beq.n	800d5de <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d55e:	4b25      	ldr	r3, [pc, #148]	; (800d5f4 <tcp_fasttmr+0xbc>)
 800d560:	781a      	ldrb	r2, [r3, #0]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	8b5b      	ldrh	r3, [r3, #26]
 800d56a:	f003 0301 	and.w	r3, r3, #1
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d010      	beq.n	800d594 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	8b5b      	ldrh	r3, [r3, #26]
 800d576:	f043 0302 	orr.w	r3, r3, #2
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f003 facf 	bl	8010b24 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	8b5b      	ldrh	r3, [r3, #26]
 800d58a:	f023 0303 	bic.w	r3, r3, #3
 800d58e:	b29a      	uxth	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	8b5b      	ldrh	r3, [r3, #26]
 800d598:	f003 0308 	and.w	r3, r3, #8
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d009      	beq.n	800d5b4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	8b5b      	ldrh	r3, [r3, #26]
 800d5a4:	f023 0308 	bic.w	r3, r3, #8
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff fa78 	bl	800caa4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00a      	beq.n	800d5d8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d5c2:	4b0e      	ldr	r3, [pc, #56]	; (800d5fc <tcp_fasttmr+0xc4>)
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f819 	bl	800d600 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d5ce:	4b0b      	ldr	r3, [pc, #44]	; (800d5fc <tcp_fasttmr+0xc4>)
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d000      	beq.n	800d5d8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d5d6:	e7b8      	b.n	800d54a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	607b      	str	r3, [r7, #4]
 800d5dc:	e002      	b.n	800d5e4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1b3      	bne.n	800d552 <tcp_fasttmr+0x1a>
    }
  }
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	2004f192 	.word	0x2004f192
 800d5f8:	2004f188 	.word	0x2004f188
 800d5fc:	2004f190 	.word	0x2004f190

0800d600 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d600:	b590      	push	{r4, r7, lr}
 800d602:	b085      	sub	sp, #20
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d109      	bne.n	800d622 <tcp_process_refused_data+0x22>
 800d60e:	4b37      	ldr	r3, [pc, #220]	; (800d6ec <tcp_process_refused_data+0xec>)
 800d610:	f240 6209 	movw	r2, #1545	; 0x609
 800d614:	4936      	ldr	r1, [pc, #216]	; (800d6f0 <tcp_process_refused_data+0xf0>)
 800d616:	4837      	ldr	r0, [pc, #220]	; (800d6f4 <tcp_process_refused_data+0xf4>)
 800d618:	f007 fabe 	bl	8014b98 <iprintf>
 800d61c:	f06f 030f 	mvn.w	r3, #15
 800d620:	e060      	b.n	800d6e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d626:	7b5b      	ldrb	r3, [r3, #13]
 800d628:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d62e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d00b      	beq.n	800d658 <tcp_process_refused_data+0x58>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6918      	ldr	r0, [r3, #16]
 800d64a:	2300      	movs	r3, #0
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	6879      	ldr	r1, [r7, #4]
 800d650:	47a0      	blx	r4
 800d652:	4603      	mov	r3, r0
 800d654:	73fb      	strb	r3, [r7, #15]
 800d656:	e007      	b.n	800d668 <tcp_process_refused_data+0x68>
 800d658:	2300      	movs	r3, #0
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	2000      	movs	r0, #0
 800d660:	f000 f8a4 	bl	800d7ac <tcp_recv_null>
 800d664:	4603      	mov	r3, r0
 800d666:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d12a      	bne.n	800d6c6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d670:	7bbb      	ldrb	r3, [r7, #14]
 800d672:	f003 0320 	and.w	r3, r3, #32
 800d676:	2b00      	cmp	r3, #0
 800d678:	d033      	beq.n	800d6e2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d67e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d682:	d005      	beq.n	800d690 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d688:	3301      	adds	r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00b      	beq.n	800d6b2 <tcp_process_refused_data+0xb2>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6918      	ldr	r0, [r3, #16]
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	6879      	ldr	r1, [r7, #4]
 800d6aa:	47a0      	blx	r4
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73fb      	strb	r3, [r7, #15]
 800d6b0:	e001      	b.n	800d6b6 <tcp_process_refused_data+0xb6>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ba:	f113 0f0d 	cmn.w	r3, #13
 800d6be:	d110      	bne.n	800d6e2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d6c0:	f06f 030c 	mvn.w	r3, #12
 800d6c4:	e00e      	b.n	800d6e4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ca:	f113 0f0d 	cmn.w	r3, #13
 800d6ce:	d102      	bne.n	800d6d6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d6d0:	f06f 030c 	mvn.w	r3, #12
 800d6d4:	e006      	b.n	800d6e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d6dc:	f06f 0304 	mvn.w	r3, #4
 800d6e0:	e000      	b.n	800d6e4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3714      	adds	r7, #20
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd90      	pop	{r4, r7, pc}
 800d6ec:	08016618 	.word	0x08016618
 800d6f0:	08016b28 	.word	0x08016b28
 800d6f4:	0801665c 	.word	0x0801665c

0800d6f8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d700:	e007      	b.n	800d712 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f80a 	bl	800d722 <tcp_seg_free>
    seg = next;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1f4      	bne.n	800d702 <tcp_segs_free+0xa>
  }
}
 800d718:	bf00      	nop
 800d71a:	bf00      	nop
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b082      	sub	sp, #8
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00c      	beq.n	800d74a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d004      	beq.n	800d742 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fe fd71 	bl	800c224 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d742:	6879      	ldr	r1, [r7, #4]
 800d744:	2003      	movs	r0, #3
 800d746:	f7fd fec9 	bl	800b4dc <memp_free>
  }
}
 800d74a:	bf00      	nop
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
	...

0800d754 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d106      	bne.n	800d770 <tcp_seg_copy+0x1c>
 800d762:	4b0f      	ldr	r3, [pc, #60]	; (800d7a0 <tcp_seg_copy+0x4c>)
 800d764:	f240 6282 	movw	r2, #1666	; 0x682
 800d768:	490e      	ldr	r1, [pc, #56]	; (800d7a4 <tcp_seg_copy+0x50>)
 800d76a:	480f      	ldr	r0, [pc, #60]	; (800d7a8 <tcp_seg_copy+0x54>)
 800d76c:	f007 fa14 	bl	8014b98 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d770:	2003      	movs	r0, #3
 800d772:	f7fd fe3d 	bl	800b3f0 <memp_malloc>
 800d776:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d101      	bne.n	800d782 <tcp_seg_copy+0x2e>
    return NULL;
 800d77e:	2300      	movs	r3, #0
 800d780:	e00a      	b.n	800d798 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d782:	2210      	movs	r2, #16
 800d784:	6879      	ldr	r1, [r7, #4]
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f007 f95b 	bl	8014a42 <memcpy>
  pbuf_ref(cseg->p);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe fded 	bl	800c370 <pbuf_ref>
  return cseg;
 800d796:	68fb      	ldr	r3, [r7, #12]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	08016618 	.word	0x08016618
 800d7a4:	08016b6c 	.word	0x08016b6c
 800d7a8:	0801665c 	.word	0x0801665c

0800d7ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d109      	bne.n	800d7d4 <tcp_recv_null+0x28>
 800d7c0:	4b12      	ldr	r3, [pc, #72]	; (800d80c <tcp_recv_null+0x60>)
 800d7c2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d7c6:	4912      	ldr	r1, [pc, #72]	; (800d810 <tcp_recv_null+0x64>)
 800d7c8:	4812      	ldr	r0, [pc, #72]	; (800d814 <tcp_recv_null+0x68>)
 800d7ca:	f007 f9e5 	bl	8014b98 <iprintf>
 800d7ce:	f06f 030f 	mvn.w	r3, #15
 800d7d2:	e016      	b.n	800d802 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d009      	beq.n	800d7ee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	891b      	ldrh	r3, [r3, #8]
 800d7de:	4619      	mov	r1, r3
 800d7e0:	68b8      	ldr	r0, [r7, #8]
 800d7e2:	f7ff fb19 	bl	800ce18 <tcp_recved>
    pbuf_free(p);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7fe fd1c 	bl	800c224 <pbuf_free>
 800d7ec:	e008      	b.n	800d800 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d7ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d104      	bne.n	800d800 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d7f6:	68b8      	ldr	r0, [r7, #8]
 800d7f8:	f7ff f9be 	bl	800cb78 <tcp_close>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	e000      	b.n	800d802 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	08016618 	.word	0x08016618
 800d810:	08016b88 	.word	0x08016b88
 800d814:	0801665c 	.word	0x0801665c

0800d818 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d826:	2b00      	cmp	r3, #0
 800d828:	db01      	blt.n	800d82e <tcp_kill_prio+0x16>
 800d82a:	79fb      	ldrb	r3, [r7, #7]
 800d82c:	e000      	b.n	800d830 <tcp_kill_prio+0x18>
 800d82e:	237f      	movs	r3, #127	; 0x7f
 800d830:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d832:	7afb      	ldrb	r3, [r7, #11]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d034      	beq.n	800d8a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d838:	7afb      	ldrb	r3, [r7, #11]
 800d83a:	3b01      	subs	r3, #1
 800d83c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d842:	2300      	movs	r3, #0
 800d844:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d846:	4b19      	ldr	r3, [pc, #100]	; (800d8ac <tcp_kill_prio+0x94>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	e01f      	b.n	800d88e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	7d5b      	ldrb	r3, [r3, #21]
 800d852:	7afa      	ldrb	r2, [r7, #11]
 800d854:	429a      	cmp	r2, r3
 800d856:	d80c      	bhi.n	800d872 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d85c:	7afa      	ldrb	r2, [r7, #11]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d112      	bne.n	800d888 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d862:	4b13      	ldr	r3, [pc, #76]	; (800d8b0 <tcp_kill_prio+0x98>)
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	6a1b      	ldr	r3, [r3, #32]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d80a      	bhi.n	800d888 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d872:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <tcp_kill_prio+0x98>)
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	6a1b      	ldr	r3, [r3, #32]
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	7d5b      	ldrb	r3, [r3, #21]
 800d886:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	617b      	str	r3, [r7, #20]
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1dc      	bne.n	800d84e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d004      	beq.n	800d8a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d89a:	6938      	ldr	r0, [r7, #16]
 800d89c:	f7ff fa56 	bl	800cd4c <tcp_abort>
 800d8a0:	e000      	b.n	800d8a4 <tcp_kill_prio+0x8c>
    return;
 800d8a2:	bf00      	nop
  }
}
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	2004f188 	.word	0x2004f188
 800d8b0:	2004f17c 	.word	0x2004f17c

0800d8b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b086      	sub	sp, #24
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d8be:	79fb      	ldrb	r3, [r7, #7]
 800d8c0:	2b08      	cmp	r3, #8
 800d8c2:	d009      	beq.n	800d8d8 <tcp_kill_state+0x24>
 800d8c4:	79fb      	ldrb	r3, [r7, #7]
 800d8c6:	2b09      	cmp	r3, #9
 800d8c8:	d006      	beq.n	800d8d8 <tcp_kill_state+0x24>
 800d8ca:	4b1a      	ldr	r3, [pc, #104]	; (800d934 <tcp_kill_state+0x80>)
 800d8cc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d8d0:	4919      	ldr	r1, [pc, #100]	; (800d938 <tcp_kill_state+0x84>)
 800d8d2:	481a      	ldr	r0, [pc, #104]	; (800d93c <tcp_kill_state+0x88>)
 800d8d4:	f007 f960 	bl	8014b98 <iprintf>

  inactivity = 0;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8e0:	4b17      	ldr	r3, [pc, #92]	; (800d940 <tcp_kill_state+0x8c>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	617b      	str	r3, [r7, #20]
 800d8e6:	e017      	b.n	800d918 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	7d1b      	ldrb	r3, [r3, #20]
 800d8ec:	79fa      	ldrb	r2, [r7, #7]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d10f      	bne.n	800d912 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8f2:	4b14      	ldr	r3, [pc, #80]	; (800d944 <tcp_kill_state+0x90>)
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d807      	bhi.n	800d912 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d902:	4b10      	ldr	r3, [pc, #64]	; (800d944 <tcp_kill_state+0x90>)
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	6a1b      	ldr	r3, [r3, #32]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	617b      	str	r3, [r7, #20]
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1e4      	bne.n	800d8e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d003      	beq.n	800d92c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d924:	2100      	movs	r1, #0
 800d926:	6938      	ldr	r0, [r7, #16]
 800d928:	f7ff f952 	bl	800cbd0 <tcp_abandon>
  }
}
 800d92c:	bf00      	nop
 800d92e:	3718      	adds	r7, #24
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	08016618 	.word	0x08016618
 800d938:	08016ba4 	.word	0x08016ba4
 800d93c:	0801665c 	.word	0x0801665c
 800d940:	2004f188 	.word	0x2004f188
 800d944:	2004f17c 	.word	0x2004f17c

0800d948 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d952:	2300      	movs	r3, #0
 800d954:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d956:	4b12      	ldr	r3, [pc, #72]	; (800d9a0 <tcp_kill_timewait+0x58>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	60fb      	str	r3, [r7, #12]
 800d95c:	e012      	b.n	800d984 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d95e:	4b11      	ldr	r3, [pc, #68]	; (800d9a4 <tcp_kill_timewait+0x5c>)
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	1ad3      	subs	r3, r2, r3
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d807      	bhi.n	800d97e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d96e:	4b0d      	ldr	r3, [pc, #52]	; (800d9a4 <tcp_kill_timewait+0x5c>)
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6a1b      	ldr	r3, [r3, #32]
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	60fb      	str	r3, [r7, #12]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1e9      	bne.n	800d95e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d990:	68b8      	ldr	r0, [r7, #8]
 800d992:	f7ff f9db 	bl	800cd4c <tcp_abort>
  }
}
 800d996:	bf00      	nop
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	2004f18c 	.word	0x2004f18c
 800d9a4:	2004f17c 	.word	0x2004f17c

0800d9a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d9ae:	4b10      	ldr	r3, [pc, #64]	; (800d9f0 <tcp_handle_closepend+0x48>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d9b4:	e014      	b.n	800d9e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	8b5b      	ldrh	r3, [r3, #26]
 800d9c0:	f003 0308 	and.w	r3, r3, #8
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d009      	beq.n	800d9dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	8b5b      	ldrh	r3, [r3, #26]
 800d9cc:	f023 0308 	bic.w	r3, r3, #8
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7ff f864 	bl	800caa4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1e7      	bne.n	800d9b6 <tcp_handle_closepend+0xe>
  }
}
 800d9e6:	bf00      	nop
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	2004f188 	.word	0x2004f188

0800d9f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9fe:	2001      	movs	r0, #1
 800da00:	f7fd fcf6 	bl	800b3f0 <memp_malloc>
 800da04:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d126      	bne.n	800da5a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800da0c:	f7ff ffcc 	bl	800d9a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800da10:	f7ff ff9a 	bl	800d948 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da14:	2001      	movs	r0, #1
 800da16:	f7fd fceb 	bl	800b3f0 <memp_malloc>
 800da1a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d11b      	bne.n	800da5a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800da22:	2009      	movs	r0, #9
 800da24:	f7ff ff46 	bl	800d8b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da28:	2001      	movs	r0, #1
 800da2a:	f7fd fce1 	bl	800b3f0 <memp_malloc>
 800da2e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d111      	bne.n	800da5a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800da36:	2008      	movs	r0, #8
 800da38:	f7ff ff3c 	bl	800d8b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da3c:	2001      	movs	r0, #1
 800da3e:	f7fd fcd7 	bl	800b3f0 <memp_malloc>
 800da42:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d107      	bne.n	800da5a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7ff fee3 	bl	800d818 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da52:	2001      	movs	r0, #1
 800da54:	f7fd fccc 	bl	800b3f0 <memp_malloc>
 800da58:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d03f      	beq.n	800dae0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800da60:	229c      	movs	r2, #156	; 0x9c
 800da62:	2100      	movs	r1, #0
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f006 fffa 	bl	8014a5e <memset>
    pcb->prio = prio;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	79fa      	ldrb	r2, [r7, #7]
 800da6e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800da76:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800da80:	855a      	strh	r2, [r3, #42]	; 0x2a
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	22ff      	movs	r2, #255	; 0xff
 800da8e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f44f 7206 	mov.w	r2, #536	; 0x218
 800da96:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2206      	movs	r2, #6
 800da9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2206      	movs	r2, #6
 800daa4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dab6:	4b0d      	ldr	r3, [pc, #52]	; (800daec <tcp_alloc+0xf8>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dabe:	4b0c      	ldr	r3, [pc, #48]	; (800daf0 <tcp_alloc+0xfc>)
 800dac0:	781a      	ldrb	r2, [r3, #0]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dacc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	4a08      	ldr	r2, [pc, #32]	; (800daf4 <tcp_alloc+0x100>)
 800dad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	4a07      	ldr	r2, [pc, #28]	; (800daf8 <tcp_alloc+0x104>)
 800dadc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dae0:	68fb      	ldr	r3, [r7, #12]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	2004f17c 	.word	0x2004f17c
 800daf0:	2004f192 	.word	0x2004f192
 800daf4:	0800d7ad 	.word	0x0800d7ad
 800daf8:	006ddd00 	.word	0x006ddd00

0800dafc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d107      	bne.n	800db1a <tcp_pcb_purge+0x1e>
 800db0a:	4b21      	ldr	r3, [pc, #132]	; (800db90 <tcp_pcb_purge+0x94>)
 800db0c:	f640 0251 	movw	r2, #2129	; 0x851
 800db10:	4920      	ldr	r1, [pc, #128]	; (800db94 <tcp_pcb_purge+0x98>)
 800db12:	4821      	ldr	r0, [pc, #132]	; (800db98 <tcp_pcb_purge+0x9c>)
 800db14:	f007 f840 	bl	8014b98 <iprintf>
 800db18:	e037      	b.n	800db8a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	7d1b      	ldrb	r3, [r3, #20]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d033      	beq.n	800db8a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800db26:	2b0a      	cmp	r3, #10
 800db28:	d02f      	beq.n	800db8a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d02b      	beq.n	800db8a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db36:	2b00      	cmp	r3, #0
 800db38:	d007      	beq.n	800db4a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fe fb70 	bl	800c224 <pbuf_free>
      pcb->refused_data = NULL;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d002      	beq.n	800db58 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f986 	bl	800de64 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db5e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff fdc7 	bl	800d6f8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff fdc2 	bl	800d6f8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	66da      	str	r2, [r3, #108]	; 0x6c
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	08016618 	.word	0x08016618
 800db94:	08016c64 	.word	0x08016c64
 800db98:	0801665c 	.word	0x0801665c

0800db9c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d106      	bne.n	800dbba <tcp_pcb_remove+0x1e>
 800dbac:	4b3e      	ldr	r3, [pc, #248]	; (800dca8 <tcp_pcb_remove+0x10c>)
 800dbae:	f640 0283 	movw	r2, #2179	; 0x883
 800dbb2:	493e      	ldr	r1, [pc, #248]	; (800dcac <tcp_pcb_remove+0x110>)
 800dbb4:	483e      	ldr	r0, [pc, #248]	; (800dcb0 <tcp_pcb_remove+0x114>)
 800dbb6:	f006 ffef 	bl	8014b98 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d106      	bne.n	800dbce <tcp_pcb_remove+0x32>
 800dbc0:	4b39      	ldr	r3, [pc, #228]	; (800dca8 <tcp_pcb_remove+0x10c>)
 800dbc2:	f640 0284 	movw	r2, #2180	; 0x884
 800dbc6:	493b      	ldr	r1, [pc, #236]	; (800dcb4 <tcp_pcb_remove+0x118>)
 800dbc8:	4839      	ldr	r0, [pc, #228]	; (800dcb0 <tcp_pcb_remove+0x114>)
 800dbca:	f006 ffe5 	bl	8014b98 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	683a      	ldr	r2, [r7, #0]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d105      	bne.n	800dbe4 <tcp_pcb_remove+0x48>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68da      	ldr	r2, [r3, #12]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	e013      	b.n	800dc0c <tcp_pcb_remove+0x70>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	60fb      	str	r3, [r7, #12]
 800dbea:	e00c      	b.n	800dc06 <tcp_pcb_remove+0x6a>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d104      	bne.n	800dc00 <tcp_pcb_remove+0x64>
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	68da      	ldr	r2, [r3, #12]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	60da      	str	r2, [r3, #12]
 800dbfe:	e005      	b.n	800dc0c <tcp_pcb_remove+0x70>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1ef      	bne.n	800dbec <tcp_pcb_remove+0x50>
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dc12:	6838      	ldr	r0, [r7, #0]
 800dc14:	f7ff ff72 	bl	800dafc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	7d1b      	ldrb	r3, [r3, #20]
 800dc1c:	2b0a      	cmp	r3, #10
 800dc1e:	d013      	beq.n	800dc48 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d00f      	beq.n	800dc48 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	8b5b      	ldrh	r3, [r3, #26]
 800dc2c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d009      	beq.n	800dc48 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	8b5b      	ldrh	r3, [r3, #26]
 800dc38:	f043 0302 	orr.w	r3, r3, #2
 800dc3c:	b29a      	uxth	r2, r3
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dc42:	6838      	ldr	r0, [r7, #0]
 800dc44:	f002 ff6e 	bl	8010b24 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	7d1b      	ldrb	r3, [r3, #20]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d020      	beq.n	800dc92 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d006      	beq.n	800dc66 <tcp_pcb_remove+0xca>
 800dc58:	4b13      	ldr	r3, [pc, #76]	; (800dca8 <tcp_pcb_remove+0x10c>)
 800dc5a:	f640 0293 	movw	r2, #2195	; 0x893
 800dc5e:	4916      	ldr	r1, [pc, #88]	; (800dcb8 <tcp_pcb_remove+0x11c>)
 800dc60:	4813      	ldr	r0, [pc, #76]	; (800dcb0 <tcp_pcb_remove+0x114>)
 800dc62:	f006 ff99 	bl	8014b98 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d006      	beq.n	800dc7c <tcp_pcb_remove+0xe0>
 800dc6e:	4b0e      	ldr	r3, [pc, #56]	; (800dca8 <tcp_pcb_remove+0x10c>)
 800dc70:	f640 0294 	movw	r2, #2196	; 0x894
 800dc74:	4911      	ldr	r1, [pc, #68]	; (800dcbc <tcp_pcb_remove+0x120>)
 800dc76:	480e      	ldr	r0, [pc, #56]	; (800dcb0 <tcp_pcb_remove+0x114>)
 800dc78:	f006 ff8e 	bl	8014b98 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d006      	beq.n	800dc92 <tcp_pcb_remove+0xf6>
 800dc84:	4b08      	ldr	r3, [pc, #32]	; (800dca8 <tcp_pcb_remove+0x10c>)
 800dc86:	f640 0296 	movw	r2, #2198	; 0x896
 800dc8a:	490d      	ldr	r1, [pc, #52]	; (800dcc0 <tcp_pcb_remove+0x124>)
 800dc8c:	4808      	ldr	r0, [pc, #32]	; (800dcb0 <tcp_pcb_remove+0x114>)
 800dc8e:	f006 ff83 	bl	8014b98 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	2200      	movs	r2, #0
 800dc96:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dc9e:	bf00      	nop
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	08016618 	.word	0x08016618
 800dcac:	08016c80 	.word	0x08016c80
 800dcb0:	0801665c 	.word	0x0801665c
 800dcb4:	08016c9c 	.word	0x08016c9c
 800dcb8:	08016cbc 	.word	0x08016cbc
 800dcbc:	08016cd4 	.word	0x08016cd4
 800dcc0:	08016cf0 	.word	0x08016cf0

0800dcc4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d106      	bne.n	800dce0 <tcp_next_iss+0x1c>
 800dcd2:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <tcp_next_iss+0x38>)
 800dcd4:	f640 02af 	movw	r2, #2223	; 0x8af
 800dcd8:	4909      	ldr	r1, [pc, #36]	; (800dd00 <tcp_next_iss+0x3c>)
 800dcda:	480a      	ldr	r0, [pc, #40]	; (800dd04 <tcp_next_iss+0x40>)
 800dcdc:	f006 ff5c 	bl	8014b98 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dce0:	4b09      	ldr	r3, [pc, #36]	; (800dd08 <tcp_next_iss+0x44>)
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <tcp_next_iss+0x48>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4413      	add	r3, r2
 800dcea:	4a07      	ldr	r2, [pc, #28]	; (800dd08 <tcp_next_iss+0x44>)
 800dcec:	6013      	str	r3, [r2, #0]
  return iss;
 800dcee:	4b06      	ldr	r3, [pc, #24]	; (800dd08 <tcp_next_iss+0x44>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	08016618 	.word	0x08016618
 800dd00:	08016d08 	.word	0x08016d08
 800dd04:	0801665c 	.word	0x0801665c
 800dd08:	2000182c 	.word	0x2000182c
 800dd0c:	2004f17c 	.word	0x2004f17c

0800dd10 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	4603      	mov	r3, r0
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
 800dd1c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d106      	bne.n	800dd32 <tcp_eff_send_mss_netif+0x22>
 800dd24:	4b14      	ldr	r3, [pc, #80]	; (800dd78 <tcp_eff_send_mss_netif+0x68>)
 800dd26:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dd2a:	4914      	ldr	r1, [pc, #80]	; (800dd7c <tcp_eff_send_mss_netif+0x6c>)
 800dd2c:	4814      	ldr	r0, [pc, #80]	; (800dd80 <tcp_eff_send_mss_netif+0x70>)
 800dd2e:	f006 ff33 	bl	8014b98 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d101      	bne.n	800dd3c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dd38:	89fb      	ldrh	r3, [r7, #14]
 800dd3a:	e019      	b.n	800dd70 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd40:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dd42:	8afb      	ldrh	r3, [r7, #22]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d012      	beq.n	800dd6e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dd48:	2328      	movs	r3, #40	; 0x28
 800dd4a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dd4c:	8afa      	ldrh	r2, [r7, #22]
 800dd4e:	8abb      	ldrh	r3, [r7, #20]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d904      	bls.n	800dd5e <tcp_eff_send_mss_netif+0x4e>
 800dd54:	8afa      	ldrh	r2, [r7, #22]
 800dd56:	8abb      	ldrh	r3, [r7, #20]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	e000      	b.n	800dd60 <tcp_eff_send_mss_netif+0x50>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dd62:	8a7a      	ldrh	r2, [r7, #18]
 800dd64:	89fb      	ldrh	r3, [r7, #14]
 800dd66:	4293      	cmp	r3, r2
 800dd68:	bf28      	it	cs
 800dd6a:	4613      	movcs	r3, r2
 800dd6c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dd6e:	89fb      	ldrh	r3, [r7, #14]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3718      	adds	r7, #24
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	08016618 	.word	0x08016618
 800dd7c:	08016d24 	.word	0x08016d24
 800dd80:	0801665c 	.word	0x0801665c

0800dd84 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d119      	bne.n	800ddcc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dd98:	4b10      	ldr	r3, [pc, #64]	; (800dddc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dd9a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dd9e:	4910      	ldr	r1, [pc, #64]	; (800dde0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dda0:	4810      	ldr	r0, [pc, #64]	; (800dde4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dda2:	f006 fef9 	bl	8014b98 <iprintf>

  while (pcb != NULL) {
 800dda6:	e011      	b.n	800ddcc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d108      	bne.n	800ddc6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f7fe ffc6 	bl	800cd4c <tcp_abort>
      pcb = next;
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	60fb      	str	r3, [r7, #12]
 800ddc4:	e002      	b.n	800ddcc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1ea      	bne.n	800dda8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ddd2:	bf00      	nop
 800ddd4:	bf00      	nop
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	08016618 	.word	0x08016618
 800dde0:	08016d4c 	.word	0x08016d4c
 800dde4:	0801665c 	.word	0x0801665c

0800dde8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d02a      	beq.n	800de4e <tcp_netif_ip_addr_changed+0x66>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d026      	beq.n	800de4e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800de00:	4b15      	ldr	r3, [pc, #84]	; (800de58 <tcp_netif_ip_addr_changed+0x70>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4619      	mov	r1, r3
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7ff ffbc 	bl	800dd84 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800de0c:	4b13      	ldr	r3, [pc, #76]	; (800de5c <tcp_netif_ip_addr_changed+0x74>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4619      	mov	r1, r3
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f7ff ffb6 	bl	800dd84 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d017      	beq.n	800de4e <tcp_netif_ip_addr_changed+0x66>
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d013      	beq.n	800de4e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de26:	4b0e      	ldr	r3, [pc, #56]	; (800de60 <tcp_netif_ip_addr_changed+0x78>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]
 800de2c:	e00c      	b.n	800de48 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	429a      	cmp	r2, r3
 800de38:	d103      	bne.n	800de42 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1ef      	bne.n	800de2e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800de4e:	bf00      	nop
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	2004f188 	.word	0x2004f188
 800de5c:	2004f180 	.word	0x2004f180
 800de60:	2004f184 	.word	0x2004f184

0800de64 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de70:	2b00      	cmp	r3, #0
 800de72:	d007      	beq.n	800de84 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de78:	4618      	mov	r0, r3
 800de7a:	f7ff fc3d 	bl	800d6f8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800de84:	bf00      	nop
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800de8c:	b590      	push	{r4, r7, lr}
 800de8e:	b08d      	sub	sp, #52	; 0x34
 800de90:	af04      	add	r7, sp, #16
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d105      	bne.n	800dea8 <tcp_input+0x1c>
 800de9c:	4b9b      	ldr	r3, [pc, #620]	; (800e10c <tcp_input+0x280>)
 800de9e:	2283      	movs	r2, #131	; 0x83
 800dea0:	499b      	ldr	r1, [pc, #620]	; (800e110 <tcp_input+0x284>)
 800dea2:	489c      	ldr	r0, [pc, #624]	; (800e114 <tcp_input+0x288>)
 800dea4:	f006 fe78 	bl	8014b98 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	4a9a      	ldr	r2, [pc, #616]	; (800e118 <tcp_input+0x28c>)
 800deae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	895b      	ldrh	r3, [r3, #10]
 800deb4:	2b13      	cmp	r3, #19
 800deb6:	f240 83d1 	bls.w	800e65c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800deba:	4b98      	ldr	r3, [pc, #608]	; (800e11c <tcp_input+0x290>)
 800debc:	695b      	ldr	r3, [r3, #20]
 800debe:	4a97      	ldr	r2, [pc, #604]	; (800e11c <tcp_input+0x290>)
 800dec0:	6812      	ldr	r2, [r2, #0]
 800dec2:	4611      	mov	r1, r2
 800dec4:	4618      	mov	r0, r3
 800dec6:	f005 fc47 	bl	8013758 <ip4_addr_isbroadcast_u32>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	f040 83c7 	bne.w	800e660 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ded2:	4b92      	ldr	r3, [pc, #584]	; (800e11c <tcp_input+0x290>)
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800deda:	2be0      	cmp	r3, #224	; 0xe0
 800dedc:	f000 83c0 	beq.w	800e660 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dee0:	4b8d      	ldr	r3, [pc, #564]	; (800e118 <tcp_input+0x28c>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	899b      	ldrh	r3, [r3, #12]
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	4618      	mov	r0, r3
 800deea:	f7fc fda9 	bl	800aa40 <lwip_htons>
 800deee:	4603      	mov	r3, r0
 800def0:	0b1b      	lsrs	r3, r3, #12
 800def2:	b29b      	uxth	r3, r3
 800def4:	b2db      	uxtb	r3, r3
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800defa:	7cbb      	ldrb	r3, [r7, #18]
 800defc:	2b13      	cmp	r3, #19
 800defe:	f240 83b1 	bls.w	800e664 <tcp_input+0x7d8>
 800df02:	7cbb      	ldrb	r3, [r7, #18]
 800df04:	b29a      	uxth	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	891b      	ldrh	r3, [r3, #8]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	f200 83aa 	bhi.w	800e664 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800df10:	7cbb      	ldrb	r3, [r7, #18]
 800df12:	b29b      	uxth	r3, r3
 800df14:	3b14      	subs	r3, #20
 800df16:	b29a      	uxth	r2, r3
 800df18:	4b81      	ldr	r3, [pc, #516]	; (800e120 <tcp_input+0x294>)
 800df1a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800df1c:	4b81      	ldr	r3, [pc, #516]	; (800e124 <tcp_input+0x298>)
 800df1e:	2200      	movs	r2, #0
 800df20:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	895a      	ldrh	r2, [r3, #10]
 800df26:	7cbb      	ldrb	r3, [r7, #18]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d309      	bcc.n	800df42 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800df2e:	4b7c      	ldr	r3, [pc, #496]	; (800e120 <tcp_input+0x294>)
 800df30:	881a      	ldrh	r2, [r3, #0]
 800df32:	4b7d      	ldr	r3, [pc, #500]	; (800e128 <tcp_input+0x29c>)
 800df34:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800df36:	7cbb      	ldrb	r3, [r7, #18]
 800df38:	4619      	mov	r1, r3
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7fe f8ec 	bl	800c118 <pbuf_remove_header>
 800df40:	e04e      	b.n	800dfe0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d105      	bne.n	800df56 <tcp_input+0xca>
 800df4a:	4b70      	ldr	r3, [pc, #448]	; (800e10c <tcp_input+0x280>)
 800df4c:	22c2      	movs	r2, #194	; 0xc2
 800df4e:	4977      	ldr	r1, [pc, #476]	; (800e12c <tcp_input+0x2a0>)
 800df50:	4870      	ldr	r0, [pc, #448]	; (800e114 <tcp_input+0x288>)
 800df52:	f006 fe21 	bl	8014b98 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800df56:	2114      	movs	r1, #20
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7fe f8dd 	bl	800c118 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	895a      	ldrh	r2, [r3, #10]
 800df62:	4b71      	ldr	r3, [pc, #452]	; (800e128 <tcp_input+0x29c>)
 800df64:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800df66:	4b6e      	ldr	r3, [pc, #440]	; (800e120 <tcp_input+0x294>)
 800df68:	881a      	ldrh	r2, [r3, #0]
 800df6a:	4b6f      	ldr	r3, [pc, #444]	; (800e128 <tcp_input+0x29c>)
 800df6c:	881b      	ldrh	r3, [r3, #0]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800df72:	4b6d      	ldr	r3, [pc, #436]	; (800e128 <tcp_input+0x29c>)
 800df74:	881b      	ldrh	r3, [r3, #0]
 800df76:	4619      	mov	r1, r3
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7fe f8cd 	bl	800c118 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	895b      	ldrh	r3, [r3, #10]
 800df84:	8a3a      	ldrh	r2, [r7, #16]
 800df86:	429a      	cmp	r2, r3
 800df88:	f200 836e 	bhi.w	800e668 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	4a64      	ldr	r2, [pc, #400]	; (800e124 <tcp_input+0x298>)
 800df94:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	8a3a      	ldrh	r2, [r7, #16]
 800df9c:	4611      	mov	r1, r2
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe f8ba 	bl	800c118 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	891a      	ldrh	r2, [r3, #8]
 800dfa8:	8a3b      	ldrh	r3, [r7, #16]
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	895b      	ldrh	r3, [r3, #10]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d005      	beq.n	800dfc6 <tcp_input+0x13a>
 800dfba:	4b54      	ldr	r3, [pc, #336]	; (800e10c <tcp_input+0x280>)
 800dfbc:	22df      	movs	r2, #223	; 0xdf
 800dfbe:	495c      	ldr	r1, [pc, #368]	; (800e130 <tcp_input+0x2a4>)
 800dfc0:	4854      	ldr	r0, [pc, #336]	; (800e114 <tcp_input+0x288>)
 800dfc2:	f006 fde9 	bl	8014b98 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	891a      	ldrh	r2, [r3, #8]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	891b      	ldrh	r3, [r3, #8]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d005      	beq.n	800dfe0 <tcp_input+0x154>
 800dfd4:	4b4d      	ldr	r3, [pc, #308]	; (800e10c <tcp_input+0x280>)
 800dfd6:	22e0      	movs	r2, #224	; 0xe0
 800dfd8:	4956      	ldr	r1, [pc, #344]	; (800e134 <tcp_input+0x2a8>)
 800dfda:	484e      	ldr	r0, [pc, #312]	; (800e114 <tcp_input+0x288>)
 800dfdc:	f006 fddc 	bl	8014b98 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dfe0:	4b4d      	ldr	r3, [pc, #308]	; (800e118 <tcp_input+0x28c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	4a4b      	ldr	r2, [pc, #300]	; (800e118 <tcp_input+0x28c>)
 800dfea:	6814      	ldr	r4, [r2, #0]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fc fd27 	bl	800aa40 <lwip_htons>
 800dff2:	4603      	mov	r3, r0
 800dff4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dff6:	4b48      	ldr	r3, [pc, #288]	; (800e118 <tcp_input+0x28c>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	885b      	ldrh	r3, [r3, #2]
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	4a46      	ldr	r2, [pc, #280]	; (800e118 <tcp_input+0x28c>)
 800e000:	6814      	ldr	r4, [r2, #0]
 800e002:	4618      	mov	r0, r3
 800e004:	f7fc fd1c 	bl	800aa40 <lwip_htons>
 800e008:	4603      	mov	r3, r0
 800e00a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e00c:	4b42      	ldr	r3, [pc, #264]	; (800e118 <tcp_input+0x28c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	4a41      	ldr	r2, [pc, #260]	; (800e118 <tcp_input+0x28c>)
 800e014:	6814      	ldr	r4, [r2, #0]
 800e016:	4618      	mov	r0, r3
 800e018:	f7fc fd27 	bl	800aa6a <lwip_htonl>
 800e01c:	4603      	mov	r3, r0
 800e01e:	6063      	str	r3, [r4, #4]
 800e020:	6863      	ldr	r3, [r4, #4]
 800e022:	4a45      	ldr	r2, [pc, #276]	; (800e138 <tcp_input+0x2ac>)
 800e024:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e026:	4b3c      	ldr	r3, [pc, #240]	; (800e118 <tcp_input+0x28c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	4a3a      	ldr	r2, [pc, #232]	; (800e118 <tcp_input+0x28c>)
 800e02e:	6814      	ldr	r4, [r2, #0]
 800e030:	4618      	mov	r0, r3
 800e032:	f7fc fd1a 	bl	800aa6a <lwip_htonl>
 800e036:	4603      	mov	r3, r0
 800e038:	60a3      	str	r3, [r4, #8]
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	4a3f      	ldr	r2, [pc, #252]	; (800e13c <tcp_input+0x2b0>)
 800e03e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e040:	4b35      	ldr	r3, [pc, #212]	; (800e118 <tcp_input+0x28c>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	89db      	ldrh	r3, [r3, #14]
 800e046:	b29b      	uxth	r3, r3
 800e048:	4a33      	ldr	r2, [pc, #204]	; (800e118 <tcp_input+0x28c>)
 800e04a:	6814      	ldr	r4, [r2, #0]
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7fc fcf7 	bl	800aa40 <lwip_htons>
 800e052:	4603      	mov	r3, r0
 800e054:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e056:	4b30      	ldr	r3, [pc, #192]	; (800e118 <tcp_input+0x28c>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	899b      	ldrh	r3, [r3, #12]
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fc fcee 	bl	800aa40 <lwip_htons>
 800e064:	4603      	mov	r3, r0
 800e066:	b2db      	uxtb	r3, r3
 800e068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	4b34      	ldr	r3, [pc, #208]	; (800e140 <tcp_input+0x2b4>)
 800e070:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	891a      	ldrh	r2, [r3, #8]
 800e076:	4b33      	ldr	r3, [pc, #204]	; (800e144 <tcp_input+0x2b8>)
 800e078:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e07a:	4b31      	ldr	r3, [pc, #196]	; (800e140 <tcp_input+0x2b4>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	f003 0303 	and.w	r3, r3, #3
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00c      	beq.n	800e0a0 <tcp_input+0x214>
    tcplen++;
 800e086:	4b2f      	ldr	r3, [pc, #188]	; (800e144 <tcp_input+0x2b8>)
 800e088:	881b      	ldrh	r3, [r3, #0]
 800e08a:	3301      	adds	r3, #1
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	4b2d      	ldr	r3, [pc, #180]	; (800e144 <tcp_input+0x2b8>)
 800e090:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	891a      	ldrh	r2, [r3, #8]
 800e096:	4b2b      	ldr	r3, [pc, #172]	; (800e144 <tcp_input+0x2b8>)
 800e098:	881b      	ldrh	r3, [r3, #0]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	f200 82e6 	bhi.w	800e66c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0a4:	4b28      	ldr	r3, [pc, #160]	; (800e148 <tcp_input+0x2bc>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	61fb      	str	r3, [r7, #28]
 800e0aa:	e09d      	b.n	800e1e8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	7d1b      	ldrb	r3, [r3, #20]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d105      	bne.n	800e0c0 <tcp_input+0x234>
 800e0b4:	4b15      	ldr	r3, [pc, #84]	; (800e10c <tcp_input+0x280>)
 800e0b6:	22fb      	movs	r2, #251	; 0xfb
 800e0b8:	4924      	ldr	r1, [pc, #144]	; (800e14c <tcp_input+0x2c0>)
 800e0ba:	4816      	ldr	r0, [pc, #88]	; (800e114 <tcp_input+0x288>)
 800e0bc:	f006 fd6c 	bl	8014b98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	7d1b      	ldrb	r3, [r3, #20]
 800e0c4:	2b0a      	cmp	r3, #10
 800e0c6:	d105      	bne.n	800e0d4 <tcp_input+0x248>
 800e0c8:	4b10      	ldr	r3, [pc, #64]	; (800e10c <tcp_input+0x280>)
 800e0ca:	22fc      	movs	r2, #252	; 0xfc
 800e0cc:	4920      	ldr	r1, [pc, #128]	; (800e150 <tcp_input+0x2c4>)
 800e0ce:	4811      	ldr	r0, [pc, #68]	; (800e114 <tcp_input+0x288>)
 800e0d0:	f006 fd62 	bl	8014b98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	7d1b      	ldrb	r3, [r3, #20]
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d105      	bne.n	800e0e8 <tcp_input+0x25c>
 800e0dc:	4b0b      	ldr	r3, [pc, #44]	; (800e10c <tcp_input+0x280>)
 800e0de:	22fd      	movs	r2, #253	; 0xfd
 800e0e0:	491c      	ldr	r1, [pc, #112]	; (800e154 <tcp_input+0x2c8>)
 800e0e2:	480c      	ldr	r0, [pc, #48]	; (800e114 <tcp_input+0x288>)
 800e0e4:	f006 fd58 	bl	8014b98 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	7a1b      	ldrb	r3, [r3, #8]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d033      	beq.n	800e158 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	7a1a      	ldrb	r2, [r3, #8]
 800e0f4:	4b09      	ldr	r3, [pc, #36]	; (800e11c <tcp_input+0x290>)
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e100:	429a      	cmp	r2, r3
 800e102:	d029      	beq.n	800e158 <tcp_input+0x2cc>
      prev = pcb;
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	61bb      	str	r3, [r7, #24]
      continue;
 800e108:	e06b      	b.n	800e1e2 <tcp_input+0x356>
 800e10a:	bf00      	nop
 800e10c:	08016d80 	.word	0x08016d80
 800e110:	08016db4 	.word	0x08016db4
 800e114:	08016dcc 	.word	0x08016dcc
 800e118:	2004f1a4 	.word	0x2004f1a4
 800e11c:	2004ac68 	.word	0x2004ac68
 800e120:	2004f1a8 	.word	0x2004f1a8
 800e124:	2004f1ac 	.word	0x2004f1ac
 800e128:	2004f1aa 	.word	0x2004f1aa
 800e12c:	08016df4 	.word	0x08016df4
 800e130:	08016e04 	.word	0x08016e04
 800e134:	08016e10 	.word	0x08016e10
 800e138:	2004f1b4 	.word	0x2004f1b4
 800e13c:	2004f1b8 	.word	0x2004f1b8
 800e140:	2004f1c0 	.word	0x2004f1c0
 800e144:	2004f1be 	.word	0x2004f1be
 800e148:	2004f188 	.word	0x2004f188
 800e14c:	08016e30 	.word	0x08016e30
 800e150:	08016e58 	.word	0x08016e58
 800e154:	08016e84 	.word	0x08016e84
    }

    if (pcb->remote_port == tcphdr->src &&
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	8b1a      	ldrh	r2, [r3, #24]
 800e15c:	4b72      	ldr	r3, [pc, #456]	; (800e328 <tcp_input+0x49c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	b29b      	uxth	r3, r3
 800e164:	429a      	cmp	r2, r3
 800e166:	d13a      	bne.n	800e1de <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	8ada      	ldrh	r2, [r3, #22]
 800e16c:	4b6e      	ldr	r3, [pc, #440]	; (800e328 <tcp_input+0x49c>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	885b      	ldrh	r3, [r3, #2]
 800e172:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e174:	429a      	cmp	r2, r3
 800e176:	d132      	bne.n	800e1de <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	4b6b      	ldr	r3, [pc, #428]	; (800e32c <tcp_input+0x4a0>)
 800e17e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e180:	429a      	cmp	r2, r3
 800e182:	d12c      	bne.n	800e1de <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	4b68      	ldr	r3, [pc, #416]	; (800e32c <tcp_input+0x4a0>)
 800e18a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d126      	bne.n	800e1de <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	69fa      	ldr	r2, [r7, #28]
 800e196:	429a      	cmp	r2, r3
 800e198:	d106      	bne.n	800e1a8 <tcp_input+0x31c>
 800e19a:	4b65      	ldr	r3, [pc, #404]	; (800e330 <tcp_input+0x4a4>)
 800e19c:	f240 120d 	movw	r2, #269	; 0x10d
 800e1a0:	4964      	ldr	r1, [pc, #400]	; (800e334 <tcp_input+0x4a8>)
 800e1a2:	4865      	ldr	r0, [pc, #404]	; (800e338 <tcp_input+0x4ac>)
 800e1a4:	f006 fcf8 	bl	8014b98 <iprintf>
      if (prev != NULL) {
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00a      	beq.n	800e1c4 <tcp_input+0x338>
        prev->next = pcb->next;
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	68da      	ldr	r2, [r3, #12]
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e1b6:	4b61      	ldr	r3, [pc, #388]	; (800e33c <tcp_input+0x4b0>)
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e1be:	4a5f      	ldr	r2, [pc, #380]	; (800e33c <tcp_input+0x4b0>)
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	69fa      	ldr	r2, [r7, #28]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d111      	bne.n	800e1f2 <tcp_input+0x366>
 800e1ce:	4b58      	ldr	r3, [pc, #352]	; (800e330 <tcp_input+0x4a4>)
 800e1d0:	f240 1215 	movw	r2, #277	; 0x115
 800e1d4:	495a      	ldr	r1, [pc, #360]	; (800e340 <tcp_input+0x4b4>)
 800e1d6:	4858      	ldr	r0, [pc, #352]	; (800e338 <tcp_input+0x4ac>)
 800e1d8:	f006 fcde 	bl	8014b98 <iprintf>
      break;
 800e1dc:	e009      	b.n	800e1f2 <tcp_input+0x366>
    }
    prev = pcb;
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	61fb      	str	r3, [r7, #28]
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	f47f af5e 	bne.w	800e0ac <tcp_input+0x220>
 800e1f0:	e000      	b.n	800e1f4 <tcp_input+0x368>
      break;
 800e1f2:	bf00      	nop
  }

  if (pcb == NULL) {
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f040 80aa 	bne.w	800e350 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1fc:	4b51      	ldr	r3, [pc, #324]	; (800e344 <tcp_input+0x4b8>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	61fb      	str	r3, [r7, #28]
 800e202:	e03f      	b.n	800e284 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	7d1b      	ldrb	r3, [r3, #20]
 800e208:	2b0a      	cmp	r3, #10
 800e20a:	d006      	beq.n	800e21a <tcp_input+0x38e>
 800e20c:	4b48      	ldr	r3, [pc, #288]	; (800e330 <tcp_input+0x4a4>)
 800e20e:	f240 121f 	movw	r2, #287	; 0x11f
 800e212:	494d      	ldr	r1, [pc, #308]	; (800e348 <tcp_input+0x4bc>)
 800e214:	4848      	ldr	r0, [pc, #288]	; (800e338 <tcp_input+0x4ac>)
 800e216:	f006 fcbf 	bl	8014b98 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	7a1b      	ldrb	r3, [r3, #8]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d009      	beq.n	800e236 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	7a1a      	ldrb	r2, [r3, #8]
 800e226:	4b41      	ldr	r3, [pc, #260]	; (800e32c <tcp_input+0x4a0>)
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e22e:	3301      	adds	r3, #1
 800e230:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e232:	429a      	cmp	r2, r3
 800e234:	d122      	bne.n	800e27c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	8b1a      	ldrh	r2, [r3, #24]
 800e23a:	4b3b      	ldr	r3, [pc, #236]	; (800e328 <tcp_input+0x49c>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	881b      	ldrh	r3, [r3, #0]
 800e240:	b29b      	uxth	r3, r3
 800e242:	429a      	cmp	r2, r3
 800e244:	d11b      	bne.n	800e27e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	8ada      	ldrh	r2, [r3, #22]
 800e24a:	4b37      	ldr	r3, [pc, #220]	; (800e328 <tcp_input+0x49c>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	885b      	ldrh	r3, [r3, #2]
 800e250:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e252:	429a      	cmp	r2, r3
 800e254:	d113      	bne.n	800e27e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	685a      	ldr	r2, [r3, #4]
 800e25a:	4b34      	ldr	r3, [pc, #208]	; (800e32c <tcp_input+0x4a0>)
 800e25c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e25e:	429a      	cmp	r2, r3
 800e260:	d10d      	bne.n	800e27e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	4b31      	ldr	r3, [pc, #196]	; (800e32c <tcp_input+0x4a0>)
 800e268:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d107      	bne.n	800e27e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e26e:	69f8      	ldr	r0, [r7, #28]
 800e270:	f000 fb56 	bl	800e920 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f7fd ffd5 	bl	800c224 <pbuf_free>
        return;
 800e27a:	e1fd      	b.n	800e678 <tcp_input+0x7ec>
        continue;
 800e27c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	61fb      	str	r3, [r7, #28]
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1bc      	bne.n	800e204 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e28a:	2300      	movs	r3, #0
 800e28c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e28e:	4b2f      	ldr	r3, [pc, #188]	; (800e34c <tcp_input+0x4c0>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	617b      	str	r3, [r7, #20]
 800e294:	e02a      	b.n	800e2ec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	7a1b      	ldrb	r3, [r3, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00c      	beq.n	800e2b8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	7a1a      	ldrb	r2, [r3, #8]
 800e2a2:	4b22      	ldr	r3, [pc, #136]	; (800e32c <tcp_input+0x4a0>)
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d002      	beq.n	800e2b8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	61bb      	str	r3, [r7, #24]
        continue;
 800e2b6:	e016      	b.n	800e2e6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	8ada      	ldrh	r2, [r3, #22]
 800e2bc:	4b1a      	ldr	r3, [pc, #104]	; (800e328 <tcp_input+0x49c>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	885b      	ldrh	r3, [r3, #2]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d10c      	bne.n	800e2e2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	4b17      	ldr	r3, [pc, #92]	; (800e32c <tcp_input+0x4a0>)
 800e2ce:	695b      	ldr	r3, [r3, #20]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d00f      	beq.n	800e2f4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00d      	beq.n	800e2f6 <tcp_input+0x46a>
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d009      	beq.n	800e2f6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1d1      	bne.n	800e296 <tcp_input+0x40a>
 800e2f2:	e000      	b.n	800e2f6 <tcp_input+0x46a>
            break;
 800e2f4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d029      	beq.n	800e350 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00a      	beq.n	800e318 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	68da      	ldr	r2, [r3, #12]
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e30a:	4b10      	ldr	r3, [pc, #64]	; (800e34c <tcp_input+0x4c0>)
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e312:	4a0e      	ldr	r2, [pc, #56]	; (800e34c <tcp_input+0x4c0>)
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e318:	6978      	ldr	r0, [r7, #20]
 800e31a:	f000 fa03 	bl	800e724 <tcp_listen_input>
      }
      pbuf_free(p);
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7fd ff80 	bl	800c224 <pbuf_free>
      return;
 800e324:	e1a8      	b.n	800e678 <tcp_input+0x7ec>
 800e326:	bf00      	nop
 800e328:	2004f1a4 	.word	0x2004f1a4
 800e32c:	2004ac68 	.word	0x2004ac68
 800e330:	08016d80 	.word	0x08016d80
 800e334:	08016eac 	.word	0x08016eac
 800e338:	08016dcc 	.word	0x08016dcc
 800e33c:	2004f188 	.word	0x2004f188
 800e340:	08016ed8 	.word	0x08016ed8
 800e344:	2004f18c 	.word	0x2004f18c
 800e348:	08016f04 	.word	0x08016f04
 800e34c:	2004f184 	.word	0x2004f184
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	2b00      	cmp	r3, #0
 800e354:	f000 8158 	beq.w	800e608 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e358:	4b95      	ldr	r3, [pc, #596]	; (800e5b0 <tcp_input+0x724>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	891a      	ldrh	r2, [r3, #8]
 800e362:	4b93      	ldr	r3, [pc, #588]	; (800e5b0 <tcp_input+0x724>)
 800e364:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e366:	4a92      	ldr	r2, [pc, #584]	; (800e5b0 <tcp_input+0x724>)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e36c:	4b91      	ldr	r3, [pc, #580]	; (800e5b4 <tcp_input+0x728>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a8f      	ldr	r2, [pc, #572]	; (800e5b0 <tcp_input+0x724>)
 800e372:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e374:	4b90      	ldr	r3, [pc, #576]	; (800e5b8 <tcp_input+0x72c>)
 800e376:	2200      	movs	r2, #0
 800e378:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e37a:	4b90      	ldr	r3, [pc, #576]	; (800e5bc <tcp_input+0x730>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e380:	4b8f      	ldr	r3, [pc, #572]	; (800e5c0 <tcp_input+0x734>)
 800e382:	2200      	movs	r2, #0
 800e384:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e386:	4b8f      	ldr	r3, [pc, #572]	; (800e5c4 <tcp_input+0x738>)
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	f003 0308 	and.w	r3, r3, #8
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d006      	beq.n	800e3a0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	7b5b      	ldrb	r3, [r3, #13]
 800e396:	f043 0301 	orr.w	r3, r3, #1
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d017      	beq.n	800e3d8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e3a8:	69f8      	ldr	r0, [r7, #28]
 800e3aa:	f7ff f929 	bl	800d600 <tcp_process_refused_data>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	f113 0f0d 	cmn.w	r3, #13
 800e3b4:	d007      	beq.n	800e3c6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00c      	beq.n	800e3d8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e3be:	4b82      	ldr	r3, [pc, #520]	; (800e5c8 <tcp_input+0x73c>)
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d008      	beq.n	800e3d8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f040 80e3 	bne.w	800e596 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e3d0:	69f8      	ldr	r0, [r7, #28]
 800e3d2:	f003 f9ad 	bl	8011730 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e3d6:	e0de      	b.n	800e596 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e3d8:	4a7c      	ldr	r2, [pc, #496]	; (800e5cc <tcp_input+0x740>)
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e3de:	69f8      	ldr	r0, [r7, #28]
 800e3e0:	f000 fb18 	bl	800ea14 <tcp_process>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e3e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3ec:	f113 0f0d 	cmn.w	r3, #13
 800e3f0:	f000 80d3 	beq.w	800e59a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e3f4:	4b71      	ldr	r3, [pc, #452]	; (800e5bc <tcp_input+0x730>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	f003 0308 	and.w	r3, r3, #8
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d015      	beq.n	800e42c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e406:	2b00      	cmp	r3, #0
 800e408:	d008      	beq.n	800e41c <tcp_input+0x590>
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e410:	69fa      	ldr	r2, [r7, #28]
 800e412:	6912      	ldr	r2, [r2, #16]
 800e414:	f06f 010d 	mvn.w	r1, #13
 800e418:	4610      	mov	r0, r2
 800e41a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e41c:	69f9      	ldr	r1, [r7, #28]
 800e41e:	486c      	ldr	r0, [pc, #432]	; (800e5d0 <tcp_input+0x744>)
 800e420:	f7ff fbbc 	bl	800db9c <tcp_pcb_remove>
        tcp_free(pcb);
 800e424:	69f8      	ldr	r0, [r7, #28]
 800e426:	f7fe f9a9 	bl	800c77c <tcp_free>
 800e42a:	e0da      	b.n	800e5e2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e42c:	2300      	movs	r3, #0
 800e42e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e430:	4b63      	ldr	r3, [pc, #396]	; (800e5c0 <tcp_input+0x734>)
 800e432:	881b      	ldrh	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d01d      	beq.n	800e474 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e438:	4b61      	ldr	r3, [pc, #388]	; (800e5c0 <tcp_input+0x734>)
 800e43a:	881b      	ldrh	r3, [r3, #0]
 800e43c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00a      	beq.n	800e45e <tcp_input+0x5d2>
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e44e:	69fa      	ldr	r2, [r7, #28]
 800e450:	6910      	ldr	r0, [r2, #16]
 800e452:	89fa      	ldrh	r2, [r7, #14]
 800e454:	69f9      	ldr	r1, [r7, #28]
 800e456:	4798      	blx	r3
 800e458:	4603      	mov	r3, r0
 800e45a:	74fb      	strb	r3, [r7, #19]
 800e45c:	e001      	b.n	800e462 <tcp_input+0x5d6>
 800e45e:	2300      	movs	r3, #0
 800e460:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e462:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e466:	f113 0f0d 	cmn.w	r3, #13
 800e46a:	f000 8098 	beq.w	800e59e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e46e:	4b54      	ldr	r3, [pc, #336]	; (800e5c0 <tcp_input+0x734>)
 800e470:	2200      	movs	r2, #0
 800e472:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e474:	69f8      	ldr	r0, [r7, #28]
 800e476:	f000 f915 	bl	800e6a4 <tcp_input_delayed_close>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f040 8090 	bne.w	800e5a2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e482:	4b4d      	ldr	r3, [pc, #308]	; (800e5b8 <tcp_input+0x72c>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d041      	beq.n	800e50e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d006      	beq.n	800e4a0 <tcp_input+0x614>
 800e492:	4b50      	ldr	r3, [pc, #320]	; (800e5d4 <tcp_input+0x748>)
 800e494:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e498:	494f      	ldr	r1, [pc, #316]	; (800e5d8 <tcp_input+0x74c>)
 800e49a:	4850      	ldr	r0, [pc, #320]	; (800e5dc <tcp_input+0x750>)
 800e49c:	f006 fb7c 	bl	8014b98 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	8b5b      	ldrh	r3, [r3, #26]
 800e4a4:	f003 0310 	and.w	r3, r3, #16
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d008      	beq.n	800e4be <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e4ac:	4b42      	ldr	r3, [pc, #264]	; (800e5b8 <tcp_input+0x72c>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fd feb7 	bl	800c224 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e4b6:	69f8      	ldr	r0, [r7, #28]
 800e4b8:	f7fe fc48 	bl	800cd4c <tcp_abort>
            goto aborted;
 800e4bc:	e091      	b.n	800e5e2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00c      	beq.n	800e4e2 <tcp_input+0x656>
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	6918      	ldr	r0, [r3, #16]
 800e4d2:	4b39      	ldr	r3, [pc, #228]	; (800e5b8 <tcp_input+0x72c>)
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	69f9      	ldr	r1, [r7, #28]
 800e4da:	47a0      	blx	r4
 800e4dc:	4603      	mov	r3, r0
 800e4de:	74fb      	strb	r3, [r7, #19]
 800e4e0:	e008      	b.n	800e4f4 <tcp_input+0x668>
 800e4e2:	4b35      	ldr	r3, [pc, #212]	; (800e5b8 <tcp_input+0x72c>)
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	69f9      	ldr	r1, [r7, #28]
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	f7ff f95e 	bl	800d7ac <tcp_recv_null>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e4f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4f8:	f113 0f0d 	cmn.w	r3, #13
 800e4fc:	d053      	beq.n	800e5a6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e4fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e506:	4b2c      	ldr	r3, [pc, #176]	; (800e5b8 <tcp_input+0x72c>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e50e:	4b2b      	ldr	r3, [pc, #172]	; (800e5bc <tcp_input+0x730>)
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	f003 0320 	and.w	r3, r3, #32
 800e516:	2b00      	cmp	r3, #0
 800e518:	d030      	beq.n	800e57c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d009      	beq.n	800e536 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e526:	7b5a      	ldrb	r2, [r3, #13]
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e52c:	f042 0220 	orr.w	r2, r2, #32
 800e530:	b2d2      	uxtb	r2, r2
 800e532:	735a      	strb	r2, [r3, #13]
 800e534:	e022      	b.n	800e57c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e53a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e53e:	d005      	beq.n	800e54c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e544:	3301      	adds	r3, #1
 800e546:	b29a      	uxth	r2, r3
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00b      	beq.n	800e56e <tcp_input+0x6e2>
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	6918      	ldr	r0, [r3, #16]
 800e560:	2300      	movs	r3, #0
 800e562:	2200      	movs	r2, #0
 800e564:	69f9      	ldr	r1, [r7, #28]
 800e566:	47a0      	blx	r4
 800e568:	4603      	mov	r3, r0
 800e56a:	74fb      	strb	r3, [r7, #19]
 800e56c:	e001      	b.n	800e572 <tcp_input+0x6e6>
 800e56e:	2300      	movs	r3, #0
 800e570:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e572:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e576:	f113 0f0d 	cmn.w	r3, #13
 800e57a:	d016      	beq.n	800e5aa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e57c:	4b13      	ldr	r3, [pc, #76]	; (800e5cc <tcp_input+0x740>)
 800e57e:	2200      	movs	r2, #0
 800e580:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e582:	69f8      	ldr	r0, [r7, #28]
 800e584:	f000 f88e 	bl	800e6a4 <tcp_input_delayed_close>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d128      	bne.n	800e5e0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e58e:	69f8      	ldr	r0, [r7, #28]
 800e590:	f002 fac8 	bl	8010b24 <tcp_output>
 800e594:	e025      	b.n	800e5e2 <tcp_input+0x756>
        goto aborted;
 800e596:	bf00      	nop
 800e598:	e023      	b.n	800e5e2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e59a:	bf00      	nop
 800e59c:	e021      	b.n	800e5e2 <tcp_input+0x756>
              goto aborted;
 800e59e:	bf00      	nop
 800e5a0:	e01f      	b.n	800e5e2 <tcp_input+0x756>
          goto aborted;
 800e5a2:	bf00      	nop
 800e5a4:	e01d      	b.n	800e5e2 <tcp_input+0x756>
            goto aborted;
 800e5a6:	bf00      	nop
 800e5a8:	e01b      	b.n	800e5e2 <tcp_input+0x756>
              goto aborted;
 800e5aa:	bf00      	nop
 800e5ac:	e019      	b.n	800e5e2 <tcp_input+0x756>
 800e5ae:	bf00      	nop
 800e5b0:	2004f194 	.word	0x2004f194
 800e5b4:	2004f1a4 	.word	0x2004f1a4
 800e5b8:	2004f1c4 	.word	0x2004f1c4
 800e5bc:	2004f1c1 	.word	0x2004f1c1
 800e5c0:	2004f1bc 	.word	0x2004f1bc
 800e5c4:	2004f1c0 	.word	0x2004f1c0
 800e5c8:	2004f1be 	.word	0x2004f1be
 800e5cc:	2004f1c8 	.word	0x2004f1c8
 800e5d0:	2004f188 	.word	0x2004f188
 800e5d4:	08016d80 	.word	0x08016d80
 800e5d8:	08016f34 	.word	0x08016f34
 800e5dc:	08016dcc 	.word	0x08016dcc
          goto aborted;
 800e5e0:	bf00      	nop
    tcp_input_pcb = NULL;
 800e5e2:	4b27      	ldr	r3, [pc, #156]	; (800e680 <tcp_input+0x7f4>)
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e5e8:	4b26      	ldr	r3, [pc, #152]	; (800e684 <tcp_input+0x7f8>)
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e5ee:	4b26      	ldr	r3, [pc, #152]	; (800e688 <tcp_input+0x7fc>)
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d03f      	beq.n	800e676 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e5f6:	4b24      	ldr	r3, [pc, #144]	; (800e688 <tcp_input+0x7fc>)
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fd fe12 	bl	800c224 <pbuf_free>
      inseg.p = NULL;
 800e600:	4b21      	ldr	r3, [pc, #132]	; (800e688 <tcp_input+0x7fc>)
 800e602:	2200      	movs	r2, #0
 800e604:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e606:	e036      	b.n	800e676 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e608:	4b20      	ldr	r3, [pc, #128]	; (800e68c <tcp_input+0x800>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	899b      	ldrh	r3, [r3, #12]
 800e60e:	b29b      	uxth	r3, r3
 800e610:	4618      	mov	r0, r3
 800e612:	f7fc fa15 	bl	800aa40 <lwip_htons>
 800e616:	4603      	mov	r3, r0
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	f003 0304 	and.w	r3, r3, #4
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d118      	bne.n	800e654 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e622:	4b1b      	ldr	r3, [pc, #108]	; (800e690 <tcp_input+0x804>)
 800e624:	6819      	ldr	r1, [r3, #0]
 800e626:	4b1b      	ldr	r3, [pc, #108]	; (800e694 <tcp_input+0x808>)
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	461a      	mov	r2, r3
 800e62c:	4b1a      	ldr	r3, [pc, #104]	; (800e698 <tcp_input+0x80c>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e632:	4b16      	ldr	r3, [pc, #88]	; (800e68c <tcp_input+0x800>)
 800e634:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e636:	885b      	ldrh	r3, [r3, #2]
 800e638:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e63a:	4a14      	ldr	r2, [pc, #80]	; (800e68c <tcp_input+0x800>)
 800e63c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e63e:	8812      	ldrh	r2, [r2, #0]
 800e640:	b292      	uxth	r2, r2
 800e642:	9202      	str	r2, [sp, #8]
 800e644:	9301      	str	r3, [sp, #4]
 800e646:	4b15      	ldr	r3, [pc, #84]	; (800e69c <tcp_input+0x810>)
 800e648:	9300      	str	r3, [sp, #0]
 800e64a:	4b15      	ldr	r3, [pc, #84]	; (800e6a0 <tcp_input+0x814>)
 800e64c:	4602      	mov	r2, r0
 800e64e:	2000      	movs	r0, #0
 800e650:	f003 f81c 	bl	801168c <tcp_rst>
    pbuf_free(p);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7fd fde5 	bl	800c224 <pbuf_free>
  return;
 800e65a:	e00c      	b.n	800e676 <tcp_input+0x7ea>
    goto dropped;
 800e65c:	bf00      	nop
 800e65e:	e006      	b.n	800e66e <tcp_input+0x7e2>
    goto dropped;
 800e660:	bf00      	nop
 800e662:	e004      	b.n	800e66e <tcp_input+0x7e2>
    goto dropped;
 800e664:	bf00      	nop
 800e666:	e002      	b.n	800e66e <tcp_input+0x7e2>
      goto dropped;
 800e668:	bf00      	nop
 800e66a:	e000      	b.n	800e66e <tcp_input+0x7e2>
      goto dropped;
 800e66c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7fd fdd8 	bl	800c224 <pbuf_free>
 800e674:	e000      	b.n	800e678 <tcp_input+0x7ec>
  return;
 800e676:	bf00      	nop
}
 800e678:	3724      	adds	r7, #36	; 0x24
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd90      	pop	{r4, r7, pc}
 800e67e:	bf00      	nop
 800e680:	2004f1c8 	.word	0x2004f1c8
 800e684:	2004f1c4 	.word	0x2004f1c4
 800e688:	2004f194 	.word	0x2004f194
 800e68c:	2004f1a4 	.word	0x2004f1a4
 800e690:	2004f1b8 	.word	0x2004f1b8
 800e694:	2004f1be 	.word	0x2004f1be
 800e698:	2004f1b4 	.word	0x2004f1b4
 800e69c:	2004ac78 	.word	0x2004ac78
 800e6a0:	2004ac7c 	.word	0x2004ac7c

0800e6a4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d106      	bne.n	800e6c0 <tcp_input_delayed_close+0x1c>
 800e6b2:	4b17      	ldr	r3, [pc, #92]	; (800e710 <tcp_input_delayed_close+0x6c>)
 800e6b4:	f240 225a 	movw	r2, #602	; 0x25a
 800e6b8:	4916      	ldr	r1, [pc, #88]	; (800e714 <tcp_input_delayed_close+0x70>)
 800e6ba:	4817      	ldr	r0, [pc, #92]	; (800e718 <tcp_input_delayed_close+0x74>)
 800e6bc:	f006 fa6c 	bl	8014b98 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e6c0:	4b16      	ldr	r3, [pc, #88]	; (800e71c <tcp_input_delayed_close+0x78>)
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	f003 0310 	and.w	r3, r3, #16
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d01c      	beq.n	800e706 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	8b5b      	ldrh	r3, [r3, #26]
 800e6d0:	f003 0310 	and.w	r3, r3, #16
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10d      	bne.n	800e6f4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d008      	beq.n	800e6f4 <tcp_input_delayed_close+0x50>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	6912      	ldr	r2, [r2, #16]
 800e6ec:	f06f 010e 	mvn.w	r1, #14
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e6f4:	6879      	ldr	r1, [r7, #4]
 800e6f6:	480a      	ldr	r0, [pc, #40]	; (800e720 <tcp_input_delayed_close+0x7c>)
 800e6f8:	f7ff fa50 	bl	800db9c <tcp_pcb_remove>
    tcp_free(pcb);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7fe f83d 	bl	800c77c <tcp_free>
    return 1;
 800e702:	2301      	movs	r3, #1
 800e704:	e000      	b.n	800e708 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	08016d80 	.word	0x08016d80
 800e714:	08016f50 	.word	0x08016f50
 800e718:	08016dcc 	.word	0x08016dcc
 800e71c:	2004f1c1 	.word	0x2004f1c1
 800e720:	2004f188 	.word	0x2004f188

0800e724 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e724:	b590      	push	{r4, r7, lr}
 800e726:	b08b      	sub	sp, #44	; 0x2c
 800e728:	af04      	add	r7, sp, #16
 800e72a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e72c:	4b6f      	ldr	r3, [pc, #444]	; (800e8ec <tcp_listen_input+0x1c8>)
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	f003 0304 	and.w	r3, r3, #4
 800e734:	2b00      	cmp	r3, #0
 800e736:	f040 80d2 	bne.w	800e8de <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d106      	bne.n	800e74e <tcp_listen_input+0x2a>
 800e740:	4b6b      	ldr	r3, [pc, #428]	; (800e8f0 <tcp_listen_input+0x1cc>)
 800e742:	f240 2281 	movw	r2, #641	; 0x281
 800e746:	496b      	ldr	r1, [pc, #428]	; (800e8f4 <tcp_listen_input+0x1d0>)
 800e748:	486b      	ldr	r0, [pc, #428]	; (800e8f8 <tcp_listen_input+0x1d4>)
 800e74a:	f006 fa25 	bl	8014b98 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e74e:	4b67      	ldr	r3, [pc, #412]	; (800e8ec <tcp_listen_input+0x1c8>)
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	f003 0310 	and.w	r3, r3, #16
 800e756:	2b00      	cmp	r3, #0
 800e758:	d019      	beq.n	800e78e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e75a:	4b68      	ldr	r3, [pc, #416]	; (800e8fc <tcp_listen_input+0x1d8>)
 800e75c:	6819      	ldr	r1, [r3, #0]
 800e75e:	4b68      	ldr	r3, [pc, #416]	; (800e900 <tcp_listen_input+0x1dc>)
 800e760:	881b      	ldrh	r3, [r3, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	4b67      	ldr	r3, [pc, #412]	; (800e904 <tcp_listen_input+0x1e0>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e76a:	4b67      	ldr	r3, [pc, #412]	; (800e908 <tcp_listen_input+0x1e4>)
 800e76c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e76e:	885b      	ldrh	r3, [r3, #2]
 800e770:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e772:	4a65      	ldr	r2, [pc, #404]	; (800e908 <tcp_listen_input+0x1e4>)
 800e774:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e776:	8812      	ldrh	r2, [r2, #0]
 800e778:	b292      	uxth	r2, r2
 800e77a:	9202      	str	r2, [sp, #8]
 800e77c:	9301      	str	r3, [sp, #4]
 800e77e:	4b63      	ldr	r3, [pc, #396]	; (800e90c <tcp_listen_input+0x1e8>)
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	4b63      	ldr	r3, [pc, #396]	; (800e910 <tcp_listen_input+0x1ec>)
 800e784:	4602      	mov	r2, r0
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f002 ff80 	bl	801168c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e78c:	e0a9      	b.n	800e8e2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e78e:	4b57      	ldr	r3, [pc, #348]	; (800e8ec <tcp_listen_input+0x1c8>)
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	f003 0302 	and.w	r3, r3, #2
 800e796:	2b00      	cmp	r3, #0
 800e798:	f000 80a3 	beq.w	800e8e2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	7d5b      	ldrb	r3, [r3, #21]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7ff f927 	bl	800d9f4 <tcp_alloc>
 800e7a6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d111      	bne.n	800e7d2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	699b      	ldr	r3, [r3, #24]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d00a      	beq.n	800e7cc <tcp_listen_input+0xa8>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	699b      	ldr	r3, [r3, #24]
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	6910      	ldr	r0, [r2, #16]
 800e7be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	4798      	blx	r3
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	73bb      	strb	r3, [r7, #14]
      return;
 800e7ca:	e08b      	b.n	800e8e4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e7cc:	23f0      	movs	r3, #240	; 0xf0
 800e7ce:	73bb      	strb	r3, [r7, #14]
      return;
 800e7d0:	e088      	b.n	800e8e4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e7d2:	4b50      	ldr	r3, [pc, #320]	; (800e914 <tcp_listen_input+0x1f0>)
 800e7d4:	695a      	ldr	r2, [r3, #20]
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e7da:	4b4e      	ldr	r3, [pc, #312]	; (800e914 <tcp_listen_input+0x1f0>)
 800e7dc:	691a      	ldr	r2, [r3, #16]
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	8ada      	ldrh	r2, [r3, #22]
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e7ea:	4b47      	ldr	r3, [pc, #284]	; (800e908 <tcp_listen_input+0x1e4>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	881b      	ldrh	r3, [r3, #0]
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	2203      	movs	r2, #3
 800e7fa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e7fc:	4b41      	ldr	r3, [pc, #260]	; (800e904 <tcp_listen_input+0x1e0>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e80e:	6978      	ldr	r0, [r7, #20]
 800e810:	f7ff fa58 	bl	800dcc4 <tcp_next_iss>
 800e814:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	693a      	ldr	r2, [r7, #16]
 800e81a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	693a      	ldr	r2, [r7, #16]
 800e820:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	693a      	ldr	r2, [r7, #16]
 800e82c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e82e:	4b35      	ldr	r3, [pc, #212]	; (800e904 <tcp_listen_input+0x1e0>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	1e5a      	subs	r2, r3, #1
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	691a      	ldr	r2, [r3, #16]
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	7a5b      	ldrb	r3, [r3, #9]
 800e84a:	f003 030c 	and.w	r3, r3, #12
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	7a1a      	ldrb	r2, [r3, #8]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e85c:	4b2e      	ldr	r3, [pc, #184]	; (800e918 <tcp_listen_input+0x1f4>)
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	60da      	str	r2, [r3, #12]
 800e864:	4a2c      	ldr	r2, [pc, #176]	; (800e918 <tcp_listen_input+0x1f4>)
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	6013      	str	r3, [r2, #0]
 800e86a:	f003 f8d1 	bl	8011a10 <tcp_timer_needed>
 800e86e:	4b2b      	ldr	r3, [pc, #172]	; (800e91c <tcp_listen_input+0x1f8>)
 800e870:	2201      	movs	r2, #1
 800e872:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e874:	6978      	ldr	r0, [r7, #20]
 800e876:	f001 fd8f 	bl	8010398 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e87a:	4b23      	ldr	r3, [pc, #140]	; (800e908 <tcp_listen_input+0x1e4>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	89db      	ldrh	r3, [r3, #14]
 800e880:	b29a      	uxth	r2, r3
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	3304      	adds	r3, #4
 800e89c:	4618      	mov	r0, r3
 800e89e:	f004 fcc5 	bl	801322c <ip4_route>
 800e8a2:	4601      	mov	r1, r0
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f7ff fa30 	bl	800dd10 <tcp_eff_send_mss_netif>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e8b8:	2112      	movs	r1, #18
 800e8ba:	6978      	ldr	r0, [r7, #20]
 800e8bc:	f002 f844 	bl	8010948 <tcp_enqueue_flags>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d004      	beq.n	800e8d6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	6978      	ldr	r0, [r7, #20]
 800e8d0:	f7fe f97e 	bl	800cbd0 <tcp_abandon>
      return;
 800e8d4:	e006      	b.n	800e8e4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e8d6:	6978      	ldr	r0, [r7, #20]
 800e8d8:	f002 f924 	bl	8010b24 <tcp_output>
  return;
 800e8dc:	e001      	b.n	800e8e2 <tcp_listen_input+0x1be>
    return;
 800e8de:	bf00      	nop
 800e8e0:	e000      	b.n	800e8e4 <tcp_listen_input+0x1c0>
  return;
 800e8e2:	bf00      	nop
}
 800e8e4:	371c      	adds	r7, #28
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd90      	pop	{r4, r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	2004f1c0 	.word	0x2004f1c0
 800e8f0:	08016d80 	.word	0x08016d80
 800e8f4:	08016f78 	.word	0x08016f78
 800e8f8:	08016dcc 	.word	0x08016dcc
 800e8fc:	2004f1b8 	.word	0x2004f1b8
 800e900:	2004f1be 	.word	0x2004f1be
 800e904:	2004f1b4 	.word	0x2004f1b4
 800e908:	2004f1a4 	.word	0x2004f1a4
 800e90c:	2004ac78 	.word	0x2004ac78
 800e910:	2004ac7c 	.word	0x2004ac7c
 800e914:	2004ac68 	.word	0x2004ac68
 800e918:	2004f188 	.word	0x2004f188
 800e91c:	2004f190 	.word	0x2004f190

0800e920 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b086      	sub	sp, #24
 800e924:	af04      	add	r7, sp, #16
 800e926:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e928:	4b2f      	ldr	r3, [pc, #188]	; (800e9e8 <tcp_timewait_input+0xc8>)
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	f003 0304 	and.w	r3, r3, #4
 800e930:	2b00      	cmp	r3, #0
 800e932:	d153      	bne.n	800e9dc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <tcp_timewait_input+0x28>
 800e93a:	4b2c      	ldr	r3, [pc, #176]	; (800e9ec <tcp_timewait_input+0xcc>)
 800e93c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e940:	492b      	ldr	r1, [pc, #172]	; (800e9f0 <tcp_timewait_input+0xd0>)
 800e942:	482c      	ldr	r0, [pc, #176]	; (800e9f4 <tcp_timewait_input+0xd4>)
 800e944:	f006 f928 	bl	8014b98 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e948:	4b27      	ldr	r3, [pc, #156]	; (800e9e8 <tcp_timewait_input+0xc8>)
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	f003 0302 	and.w	r3, r3, #2
 800e950:	2b00      	cmp	r3, #0
 800e952:	d02a      	beq.n	800e9aa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e954:	4b28      	ldr	r3, [pc, #160]	; (800e9f8 <tcp_timewait_input+0xd8>)
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	db2d      	blt.n	800e9be <tcp_timewait_input+0x9e>
 800e962:	4b25      	ldr	r3, [pc, #148]	; (800e9f8 <tcp_timewait_input+0xd8>)
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96a:	6879      	ldr	r1, [r7, #4]
 800e96c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e96e:	440b      	add	r3, r1
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	dc23      	bgt.n	800e9be <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e976:	4b21      	ldr	r3, [pc, #132]	; (800e9fc <tcp_timewait_input+0xdc>)
 800e978:	6819      	ldr	r1, [r3, #0]
 800e97a:	4b21      	ldr	r3, [pc, #132]	; (800ea00 <tcp_timewait_input+0xe0>)
 800e97c:	881b      	ldrh	r3, [r3, #0]
 800e97e:	461a      	mov	r2, r3
 800e980:	4b1d      	ldr	r3, [pc, #116]	; (800e9f8 <tcp_timewait_input+0xd8>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e986:	4b1f      	ldr	r3, [pc, #124]	; (800ea04 <tcp_timewait_input+0xe4>)
 800e988:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e98a:	885b      	ldrh	r3, [r3, #2]
 800e98c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e98e:	4a1d      	ldr	r2, [pc, #116]	; (800ea04 <tcp_timewait_input+0xe4>)
 800e990:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e992:	8812      	ldrh	r2, [r2, #0]
 800e994:	b292      	uxth	r2, r2
 800e996:	9202      	str	r2, [sp, #8]
 800e998:	9301      	str	r3, [sp, #4]
 800e99a:	4b1b      	ldr	r3, [pc, #108]	; (800ea08 <tcp_timewait_input+0xe8>)
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	4b1b      	ldr	r3, [pc, #108]	; (800ea0c <tcp_timewait_input+0xec>)
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f002 fe72 	bl	801168c <tcp_rst>
      return;
 800e9a8:	e01b      	b.n	800e9e2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e9aa:	4b0f      	ldr	r3, [pc, #60]	; (800e9e8 <tcp_timewait_input+0xc8>)
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	f003 0301 	and.w	r3, r3, #1
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d003      	beq.n	800e9be <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e9b6:	4b16      	ldr	r3, [pc, #88]	; (800ea10 <tcp_timewait_input+0xf0>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e9be:	4b10      	ldr	r3, [pc, #64]	; (800ea00 <tcp_timewait_input+0xe0>)
 800e9c0:	881b      	ldrh	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00c      	beq.n	800e9e0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	8b5b      	ldrh	r3, [r3, #26]
 800e9ca:	f043 0302 	orr.w	r3, r3, #2
 800e9ce:	b29a      	uxth	r2, r3
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f002 f8a5 	bl	8010b24 <tcp_output>
  }
  return;
 800e9da:	e001      	b.n	800e9e0 <tcp_timewait_input+0xc0>
    return;
 800e9dc:	bf00      	nop
 800e9de:	e000      	b.n	800e9e2 <tcp_timewait_input+0xc2>
  return;
 800e9e0:	bf00      	nop
}
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	2004f1c0 	.word	0x2004f1c0
 800e9ec:	08016d80 	.word	0x08016d80
 800e9f0:	08016f98 	.word	0x08016f98
 800e9f4:	08016dcc 	.word	0x08016dcc
 800e9f8:	2004f1b4 	.word	0x2004f1b4
 800e9fc:	2004f1b8 	.word	0x2004f1b8
 800ea00:	2004f1be 	.word	0x2004f1be
 800ea04:	2004f1a4 	.word	0x2004f1a4
 800ea08:	2004ac78 	.word	0x2004ac78
 800ea0c:	2004ac7c 	.word	0x2004ac7c
 800ea10:	2004f17c 	.word	0x2004f17c

0800ea14 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ea14:	b590      	push	{r4, r7, lr}
 800ea16:	b08d      	sub	sp, #52	; 0x34
 800ea18:	af04      	add	r7, sp, #16
 800ea1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d106      	bne.n	800ea38 <tcp_process+0x24>
 800ea2a:	4b9d      	ldr	r3, [pc, #628]	; (800eca0 <tcp_process+0x28c>)
 800ea2c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ea30:	499c      	ldr	r1, [pc, #624]	; (800eca4 <tcp_process+0x290>)
 800ea32:	489d      	ldr	r0, [pc, #628]	; (800eca8 <tcp_process+0x294>)
 800ea34:	f006 f8b0 	bl	8014b98 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ea38:	4b9c      	ldr	r3, [pc, #624]	; (800ecac <tcp_process+0x298>)
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	f003 0304 	and.w	r3, r3, #4
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d04e      	beq.n	800eae2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	7d1b      	ldrb	r3, [r3, #20]
 800ea48:	2b02      	cmp	r3, #2
 800ea4a:	d108      	bne.n	800ea5e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea50:	4b97      	ldr	r3, [pc, #604]	; (800ecb0 <tcp_process+0x29c>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d123      	bne.n	800eaa0 <tcp_process+0x8c>
        acceptable = 1;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	76fb      	strb	r3, [r7, #27]
 800ea5c:	e020      	b.n	800eaa0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea62:	4b94      	ldr	r3, [pc, #592]	; (800ecb4 <tcp_process+0x2a0>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d102      	bne.n	800ea70 <tcp_process+0x5c>
        acceptable = 1;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	76fb      	strb	r3, [r7, #27]
 800ea6e:	e017      	b.n	800eaa0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea70:	4b90      	ldr	r3, [pc, #576]	; (800ecb4 <tcp_process+0x2a0>)
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	db10      	blt.n	800eaa0 <tcp_process+0x8c>
 800ea7e:	4b8d      	ldr	r3, [pc, #564]	; (800ecb4 <tcp_process+0x2a0>)
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea86:	6879      	ldr	r1, [r7, #4]
 800ea88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea8a:	440b      	add	r3, r1
 800ea8c:	1ad3      	subs	r3, r2, r3
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	dc06      	bgt.n	800eaa0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	8b5b      	ldrh	r3, [r3, #26]
 800ea96:	f043 0302 	orr.w	r3, r3, #2
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eaa0:	7efb      	ldrb	r3, [r7, #27]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d01b      	beq.n	800eade <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	7d1b      	ldrb	r3, [r3, #20]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d106      	bne.n	800eabc <tcp_process+0xa8>
 800eaae:	4b7c      	ldr	r3, [pc, #496]	; (800eca0 <tcp_process+0x28c>)
 800eab0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800eab4:	4980      	ldr	r1, [pc, #512]	; (800ecb8 <tcp_process+0x2a4>)
 800eab6:	487c      	ldr	r0, [pc, #496]	; (800eca8 <tcp_process+0x294>)
 800eab8:	f006 f86e 	bl	8014b98 <iprintf>
      recv_flags |= TF_RESET;
 800eabc:	4b7f      	ldr	r3, [pc, #508]	; (800ecbc <tcp_process+0x2a8>)
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	f043 0308 	orr.w	r3, r3, #8
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	4b7d      	ldr	r3, [pc, #500]	; (800ecbc <tcp_process+0x2a8>)
 800eac8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	8b5b      	ldrh	r3, [r3, #26]
 800eace:	f023 0301 	bic.w	r3, r3, #1
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ead8:	f06f 030d 	mvn.w	r3, #13
 800eadc:	e37a      	b.n	800f1d4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eade:	2300      	movs	r3, #0
 800eae0:	e378      	b.n	800f1d4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eae2:	4b72      	ldr	r3, [pc, #456]	; (800ecac <tcp_process+0x298>)
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	f003 0302 	and.w	r3, r3, #2
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d010      	beq.n	800eb10 <tcp_process+0xfc>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	7d1b      	ldrb	r3, [r3, #20]
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d00c      	beq.n	800eb10 <tcp_process+0xfc>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	7d1b      	ldrb	r3, [r3, #20]
 800eafa:	2b03      	cmp	r3, #3
 800eafc:	d008      	beq.n	800eb10 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	8b5b      	ldrh	r3, [r3, #26]
 800eb02:	f043 0302 	orr.w	r3, r3, #2
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	e361      	b.n	800f1d4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	8b5b      	ldrh	r3, [r3, #26]
 800eb14:	f003 0310 	and.w	r3, r3, #16
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d103      	bne.n	800eb24 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800eb1c:	4b68      	ldr	r3, [pc, #416]	; (800ecc0 <tcp_process+0x2ac>)
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f001 fc2f 	bl	8010398 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	7d1b      	ldrb	r3, [r3, #20]
 800eb3e:	3b02      	subs	r3, #2
 800eb40:	2b07      	cmp	r3, #7
 800eb42:	f200 8337 	bhi.w	800f1b4 <tcp_process+0x7a0>
 800eb46:	a201      	add	r2, pc, #4	; (adr r2, 800eb4c <tcp_process+0x138>)
 800eb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb4c:	0800eb6d 	.word	0x0800eb6d
 800eb50:	0800ed9d 	.word	0x0800ed9d
 800eb54:	0800ef15 	.word	0x0800ef15
 800eb58:	0800ef3f 	.word	0x0800ef3f
 800eb5c:	0800f063 	.word	0x0800f063
 800eb60:	0800ef15 	.word	0x0800ef15
 800eb64:	0800f0ef 	.word	0x0800f0ef
 800eb68:	0800f17f 	.word	0x0800f17f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800eb6c:	4b4f      	ldr	r3, [pc, #316]	; (800ecac <tcp_process+0x298>)
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	f003 0310 	and.w	r3, r3, #16
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f000 80e4 	beq.w	800ed42 <tcp_process+0x32e>
 800eb7a:	4b4c      	ldr	r3, [pc, #304]	; (800ecac <tcp_process+0x298>)
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	f003 0302 	and.w	r3, r3, #2
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f000 80dd 	beq.w	800ed42 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb8c:	1c5a      	adds	r2, r3, #1
 800eb8e:	4b48      	ldr	r3, [pc, #288]	; (800ecb0 <tcp_process+0x29c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	f040 80d5 	bne.w	800ed42 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eb98:	4b46      	ldr	r3, [pc, #280]	; (800ecb4 <tcp_process+0x2a0>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	1c5a      	adds	r2, r3, #1
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ebaa:	4b41      	ldr	r3, [pc, #260]	; (800ecb0 <tcp_process+0x29c>)
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ebb2:	4b44      	ldr	r3, [pc, #272]	; (800ecc4 <tcp_process+0x2b0>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	89db      	ldrh	r3, [r3, #14]
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ebcc:	4b39      	ldr	r3, [pc, #228]	; (800ecb4 <tcp_process+0x2a0>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	1e5a      	subs	r2, r3, #1
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2204      	movs	r2, #4
 800ebda:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	3304      	adds	r3, #4
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f004 fb21 	bl	801322c <ip4_route>
 800ebea:	4601      	mov	r1, r0
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	3304      	adds	r3, #4
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f7ff f88c 	bl	800dd10 <tcp_eff_send_mss_netif>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec04:	009a      	lsls	r2, r3, #2
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec0a:	005b      	lsls	r3, r3, #1
 800ec0c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ec10:	428b      	cmp	r3, r1
 800ec12:	bf38      	it	cc
 800ec14:	460b      	movcc	r3, r1
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d204      	bcs.n	800ec24 <tcp_process+0x210>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	e00d      	b.n	800ec40 <tcp_process+0x22c>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec28:	005b      	lsls	r3, r3, #1
 800ec2a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d904      	bls.n	800ec3c <tcp_process+0x228>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec36:	005b      	lsls	r3, r3, #1
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	e001      	b.n	800ec40 <tcp_process+0x22c>
 800ec3c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d106      	bne.n	800ec5e <tcp_process+0x24a>
 800ec50:	4b13      	ldr	r3, [pc, #76]	; (800eca0 <tcp_process+0x28c>)
 800ec52:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ec56:	491c      	ldr	r1, [pc, #112]	; (800ecc8 <tcp_process+0x2b4>)
 800ec58:	4813      	ldr	r0, [pc, #76]	; (800eca8 <tcp_process+0x294>)
 800ec5a:	f005 ff9d 	bl	8014b98 <iprintf>
        --pcb->snd_queuelen;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec64:	3b01      	subs	r3, #1
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec72:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d12a      	bne.n	800ecd0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec7e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d106      	bne.n	800ec94 <tcp_process+0x280>
 800ec86:	4b06      	ldr	r3, [pc, #24]	; (800eca0 <tcp_process+0x28c>)
 800ec88:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ec8c:	490f      	ldr	r1, [pc, #60]	; (800eccc <tcp_process+0x2b8>)
 800ec8e:	4806      	ldr	r0, [pc, #24]	; (800eca8 <tcp_process+0x294>)
 800ec90:	f005 ff82 	bl	8014b98 <iprintf>
          pcb->unsent = rseg->next;
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	66da      	str	r2, [r3, #108]	; 0x6c
 800ec9c:	e01c      	b.n	800ecd8 <tcp_process+0x2c4>
 800ec9e:	bf00      	nop
 800eca0:	08016d80 	.word	0x08016d80
 800eca4:	08016fb8 	.word	0x08016fb8
 800eca8:	08016dcc 	.word	0x08016dcc
 800ecac:	2004f1c0 	.word	0x2004f1c0
 800ecb0:	2004f1b8 	.word	0x2004f1b8
 800ecb4:	2004f1b4 	.word	0x2004f1b4
 800ecb8:	08016fd4 	.word	0x08016fd4
 800ecbc:	2004f1c1 	.word	0x2004f1c1
 800ecc0:	2004f17c 	.word	0x2004f17c
 800ecc4:	2004f1a4 	.word	0x2004f1a4
 800ecc8:	08016ff4 	.word	0x08016ff4
 800eccc:	0801700c 	.word	0x0801700c
        } else {
          pcb->unacked = rseg->next;
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ecd8:	69f8      	ldr	r0, [r7, #28]
 800ecda:	f7fe fd22 	bl	800d722 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d104      	bne.n	800ecf0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecec:	861a      	strh	r2, [r3, #48]	; 0x30
 800ecee:	e006      	b.n	800ecfe <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00a      	beq.n	800ed1e <tcp_process+0x30a>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	6910      	ldr	r0, [r2, #16]
 800ed12:	2200      	movs	r2, #0
 800ed14:	6879      	ldr	r1, [r7, #4]
 800ed16:	4798      	blx	r3
 800ed18:	4603      	mov	r3, r0
 800ed1a:	76bb      	strb	r3, [r7, #26]
 800ed1c:	e001      	b.n	800ed22 <tcp_process+0x30e>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ed22:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed26:	f113 0f0d 	cmn.w	r3, #13
 800ed2a:	d102      	bne.n	800ed32 <tcp_process+0x31e>
          return ERR_ABRT;
 800ed2c:	f06f 030c 	mvn.w	r3, #12
 800ed30:	e250      	b.n	800f1d4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	8b5b      	ldrh	r3, [r3, #26]
 800ed36:	f043 0302 	orr.w	r3, r3, #2
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ed40:	e23a      	b.n	800f1b8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ed42:	4b98      	ldr	r3, [pc, #608]	; (800efa4 <tcp_process+0x590>)
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	f003 0310 	and.w	r3, r3, #16
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f000 8234 	beq.w	800f1b8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed50:	4b95      	ldr	r3, [pc, #596]	; (800efa8 <tcp_process+0x594>)
 800ed52:	6819      	ldr	r1, [r3, #0]
 800ed54:	4b95      	ldr	r3, [pc, #596]	; (800efac <tcp_process+0x598>)
 800ed56:	881b      	ldrh	r3, [r3, #0]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	4b95      	ldr	r3, [pc, #596]	; (800efb0 <tcp_process+0x59c>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed60:	4b94      	ldr	r3, [pc, #592]	; (800efb4 <tcp_process+0x5a0>)
 800ed62:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed64:	885b      	ldrh	r3, [r3, #2]
 800ed66:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed68:	4a92      	ldr	r2, [pc, #584]	; (800efb4 <tcp_process+0x5a0>)
 800ed6a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed6c:	8812      	ldrh	r2, [r2, #0]
 800ed6e:	b292      	uxth	r2, r2
 800ed70:	9202      	str	r2, [sp, #8]
 800ed72:	9301      	str	r3, [sp, #4]
 800ed74:	4b90      	ldr	r3, [pc, #576]	; (800efb8 <tcp_process+0x5a4>)
 800ed76:	9300      	str	r3, [sp, #0]
 800ed78:	4b90      	ldr	r3, [pc, #576]	; (800efbc <tcp_process+0x5a8>)
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f002 fc85 	bl	801168c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed88:	2b05      	cmp	r3, #5
 800ed8a:	f200 8215 	bhi.w	800f1b8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f002 fa4f 	bl	8011238 <tcp_rexmit_rto>
      break;
 800ed9a:	e20d      	b.n	800f1b8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ed9c:	4b81      	ldr	r3, [pc, #516]	; (800efa4 <tcp_process+0x590>)
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	f003 0310 	and.w	r3, r3, #16
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	f000 80a1 	beq.w	800eeec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800edaa:	4b7f      	ldr	r3, [pc, #508]	; (800efa8 <tcp_process+0x594>)
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	3b01      	subs	r3, #1
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	db7e      	blt.n	800eeb8 <tcp_process+0x4a4>
 800edba:	4b7b      	ldr	r3, [pc, #492]	; (800efa8 <tcp_process+0x594>)
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	dc77      	bgt.n	800eeb8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2204      	movs	r2, #4
 800edcc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d102      	bne.n	800eddc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800edd6:	23fa      	movs	r3, #250	; 0xfa
 800edd8:	76bb      	strb	r3, [r7, #26]
 800edda:	e01d      	b.n	800ee18 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d106      	bne.n	800edf4 <tcp_process+0x3e0>
 800ede6:	4b76      	ldr	r3, [pc, #472]	; (800efc0 <tcp_process+0x5ac>)
 800ede8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800edec:	4975      	ldr	r1, [pc, #468]	; (800efc4 <tcp_process+0x5b0>)
 800edee:	4876      	ldr	r0, [pc, #472]	; (800efc8 <tcp_process+0x5b4>)
 800edf0:	f005 fed2 	bl	8014b98 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edf8:	699b      	ldr	r3, [r3, #24]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00a      	beq.n	800ee14 <tcp_process+0x400>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee02:	699b      	ldr	r3, [r3, #24]
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	6910      	ldr	r0, [r2, #16]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	6879      	ldr	r1, [r7, #4]
 800ee0c:	4798      	blx	r3
 800ee0e:	4603      	mov	r3, r0
 800ee10:	76bb      	strb	r3, [r7, #26]
 800ee12:	e001      	b.n	800ee18 <tcp_process+0x404>
 800ee14:	23f0      	movs	r3, #240	; 0xf0
 800ee16:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ee18:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d00a      	beq.n	800ee36 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ee20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee24:	f113 0f0d 	cmn.w	r3, #13
 800ee28:	d002      	beq.n	800ee30 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7fd ff8e 	bl	800cd4c <tcp_abort>
            }
            return ERR_ABRT;
 800ee30:	f06f 030c 	mvn.w	r3, #12
 800ee34:	e1ce      	b.n	800f1d4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 fae0 	bl	800f3fc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ee3c:	4b63      	ldr	r3, [pc, #396]	; (800efcc <tcp_process+0x5b8>)
 800ee3e:	881b      	ldrh	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d005      	beq.n	800ee50 <tcp_process+0x43c>
            recv_acked--;
 800ee44:	4b61      	ldr	r3, [pc, #388]	; (800efcc <tcp_process+0x5b8>)
 800ee46:	881b      	ldrh	r3, [r3, #0]
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	4b5f      	ldr	r3, [pc, #380]	; (800efcc <tcp_process+0x5b8>)
 800ee4e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee54:	009a      	lsls	r2, r3, #2
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee5a:	005b      	lsls	r3, r3, #1
 800ee5c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ee60:	428b      	cmp	r3, r1
 800ee62:	bf38      	it	cc
 800ee64:	460b      	movcc	r3, r1
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d204      	bcs.n	800ee74 <tcp_process+0x460>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	e00d      	b.n	800ee90 <tcp_process+0x47c>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee78:	005b      	lsls	r3, r3, #1
 800ee7a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d904      	bls.n	800ee8c <tcp_process+0x478>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	e001      	b.n	800ee90 <tcp_process+0x47c>
 800ee8c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ee96:	4b4e      	ldr	r3, [pc, #312]	; (800efd0 <tcp_process+0x5bc>)
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	f003 0320 	and.w	r3, r3, #32
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d037      	beq.n	800ef12 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	8b5b      	ldrh	r3, [r3, #26]
 800eea6:	f043 0302 	orr.w	r3, r3, #2
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2207      	movs	r2, #7
 800eeb4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800eeb6:	e02c      	b.n	800ef12 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeb8:	4b3b      	ldr	r3, [pc, #236]	; (800efa8 <tcp_process+0x594>)
 800eeba:	6819      	ldr	r1, [r3, #0]
 800eebc:	4b3b      	ldr	r3, [pc, #236]	; (800efac <tcp_process+0x598>)
 800eebe:	881b      	ldrh	r3, [r3, #0]
 800eec0:	461a      	mov	r2, r3
 800eec2:	4b3b      	ldr	r3, [pc, #236]	; (800efb0 <tcp_process+0x59c>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eec8:	4b3a      	ldr	r3, [pc, #232]	; (800efb4 <tcp_process+0x5a0>)
 800eeca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eecc:	885b      	ldrh	r3, [r3, #2]
 800eece:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eed0:	4a38      	ldr	r2, [pc, #224]	; (800efb4 <tcp_process+0x5a0>)
 800eed2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eed4:	8812      	ldrh	r2, [r2, #0]
 800eed6:	b292      	uxth	r2, r2
 800eed8:	9202      	str	r2, [sp, #8]
 800eeda:	9301      	str	r3, [sp, #4]
 800eedc:	4b36      	ldr	r3, [pc, #216]	; (800efb8 <tcp_process+0x5a4>)
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	4b36      	ldr	r3, [pc, #216]	; (800efbc <tcp_process+0x5a8>)
 800eee2:	4602      	mov	r2, r0
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f002 fbd1 	bl	801168c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800eeea:	e167      	b.n	800f1bc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800eeec:	4b2d      	ldr	r3, [pc, #180]	; (800efa4 <tcp_process+0x590>)
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	f003 0302 	and.w	r3, r3, #2
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	f000 8161 	beq.w	800f1bc <tcp_process+0x7a8>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefe:	1e5a      	subs	r2, r3, #1
 800ef00:	4b2b      	ldr	r3, [pc, #172]	; (800efb0 <tcp_process+0x59c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	f040 8159 	bne.w	800f1bc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f002 f9b6 	bl	801127c <tcp_rexmit>
      break;
 800ef10:	e154      	b.n	800f1bc <tcp_process+0x7a8>
 800ef12:	e153      	b.n	800f1bc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fa71 	bl	800f3fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ef1a:	4b2d      	ldr	r3, [pc, #180]	; (800efd0 <tcp_process+0x5bc>)
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	f003 0320 	and.w	r3, r3, #32
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f000 814c 	beq.w	800f1c0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	8b5b      	ldrh	r3, [r3, #26]
 800ef2c:	f043 0302 	orr.w	r3, r3, #2
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2207      	movs	r2, #7
 800ef3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef3c:	e140      	b.n	800f1c0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 fa5c 	bl	800f3fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef44:	4b22      	ldr	r3, [pc, #136]	; (800efd0 <tcp_process+0x5bc>)
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	f003 0320 	and.w	r3, r3, #32
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d071      	beq.n	800f034 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef50:	4b14      	ldr	r3, [pc, #80]	; (800efa4 <tcp_process+0x590>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	f003 0310 	and.w	r3, r3, #16
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d060      	beq.n	800f01e <tcp_process+0x60a>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef60:	4b11      	ldr	r3, [pc, #68]	; (800efa8 <tcp_process+0x594>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d15a      	bne.n	800f01e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d156      	bne.n	800f01e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	8b5b      	ldrh	r3, [r3, #26]
 800ef74:	f043 0302 	orr.w	r3, r3, #2
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f7fe fdbc 	bl	800dafc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ef84:	4b13      	ldr	r3, [pc, #76]	; (800efd4 <tcp_process+0x5c0>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d105      	bne.n	800ef9a <tcp_process+0x586>
 800ef8e:	4b11      	ldr	r3, [pc, #68]	; (800efd4 <tcp_process+0x5c0>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	4a0f      	ldr	r2, [pc, #60]	; (800efd4 <tcp_process+0x5c0>)
 800ef96:	6013      	str	r3, [r2, #0]
 800ef98:	e02e      	b.n	800eff8 <tcp_process+0x5e4>
 800ef9a:	4b0e      	ldr	r3, [pc, #56]	; (800efd4 <tcp_process+0x5c0>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	617b      	str	r3, [r7, #20]
 800efa0:	e027      	b.n	800eff2 <tcp_process+0x5de>
 800efa2:	bf00      	nop
 800efa4:	2004f1c0 	.word	0x2004f1c0
 800efa8:	2004f1b8 	.word	0x2004f1b8
 800efac:	2004f1be 	.word	0x2004f1be
 800efb0:	2004f1b4 	.word	0x2004f1b4
 800efb4:	2004f1a4 	.word	0x2004f1a4
 800efb8:	2004ac78 	.word	0x2004ac78
 800efbc:	2004ac7c 	.word	0x2004ac7c
 800efc0:	08016d80 	.word	0x08016d80
 800efc4:	08017020 	.word	0x08017020
 800efc8:	08016dcc 	.word	0x08016dcc
 800efcc:	2004f1bc 	.word	0x2004f1bc
 800efd0:	2004f1c1 	.word	0x2004f1c1
 800efd4:	2004f188 	.word	0x2004f188
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d104      	bne.n	800efec <tcp_process+0x5d8>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	68da      	ldr	r2, [r3, #12]
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	60da      	str	r2, [r3, #12]
 800efea:	e005      	b.n	800eff8 <tcp_process+0x5e4>
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	617b      	str	r3, [r7, #20]
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1ef      	bne.n	800efd8 <tcp_process+0x5c4>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2200      	movs	r2, #0
 800effc:	60da      	str	r2, [r3, #12]
 800effe:	4b77      	ldr	r3, [pc, #476]	; (800f1dc <tcp_process+0x7c8>)
 800f000:	2201      	movs	r2, #1
 800f002:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	220a      	movs	r2, #10
 800f008:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f00a:	4b75      	ldr	r3, [pc, #468]	; (800f1e0 <tcp_process+0x7cc>)
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	60da      	str	r2, [r3, #12]
 800f012:	4a73      	ldr	r2, [pc, #460]	; (800f1e0 <tcp_process+0x7cc>)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6013      	str	r3, [r2, #0]
 800f018:	f002 fcfa 	bl	8011a10 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f01c:	e0d2      	b.n	800f1c4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	8b5b      	ldrh	r3, [r3, #26]
 800f022:	f043 0302 	orr.w	r3, r3, #2
 800f026:	b29a      	uxth	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2208      	movs	r2, #8
 800f030:	751a      	strb	r2, [r3, #20]
      break;
 800f032:	e0c7      	b.n	800f1c4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f034:	4b6b      	ldr	r3, [pc, #428]	; (800f1e4 <tcp_process+0x7d0>)
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	f003 0310 	and.w	r3, r3, #16
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f000 80c1 	beq.w	800f1c4 <tcp_process+0x7b0>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f046:	4b68      	ldr	r3, [pc, #416]	; (800f1e8 <tcp_process+0x7d4>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	f040 80ba 	bne.w	800f1c4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f054:	2b00      	cmp	r3, #0
 800f056:	f040 80b5 	bne.w	800f1c4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2206      	movs	r2, #6
 800f05e:	751a      	strb	r2, [r3, #20]
      break;
 800f060:	e0b0      	b.n	800f1c4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 f9ca 	bl	800f3fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f068:	4b60      	ldr	r3, [pc, #384]	; (800f1ec <tcp_process+0x7d8>)
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	f003 0320 	and.w	r3, r3, #32
 800f070:	2b00      	cmp	r3, #0
 800f072:	f000 80a9 	beq.w	800f1c8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	8b5b      	ldrh	r3, [r3, #26]
 800f07a:	f043 0302 	orr.w	r3, r3, #2
 800f07e:	b29a      	uxth	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7fe fd39 	bl	800dafc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f08a:	4b59      	ldr	r3, [pc, #356]	; (800f1f0 <tcp_process+0x7dc>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	429a      	cmp	r2, r3
 800f092:	d105      	bne.n	800f0a0 <tcp_process+0x68c>
 800f094:	4b56      	ldr	r3, [pc, #344]	; (800f1f0 <tcp_process+0x7dc>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68db      	ldr	r3, [r3, #12]
 800f09a:	4a55      	ldr	r2, [pc, #340]	; (800f1f0 <tcp_process+0x7dc>)
 800f09c:	6013      	str	r3, [r2, #0]
 800f09e:	e013      	b.n	800f0c8 <tcp_process+0x6b4>
 800f0a0:	4b53      	ldr	r3, [pc, #332]	; (800f1f0 <tcp_process+0x7dc>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	613b      	str	r3, [r7, #16]
 800f0a6:	e00c      	b.n	800f0c2 <tcp_process+0x6ae>
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d104      	bne.n	800f0bc <tcp_process+0x6a8>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68da      	ldr	r2, [r3, #12]
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	60da      	str	r2, [r3, #12]
 800f0ba:	e005      	b.n	800f0c8 <tcp_process+0x6b4>
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	613b      	str	r3, [r7, #16]
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1ef      	bne.n	800f0a8 <tcp_process+0x694>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	60da      	str	r2, [r3, #12]
 800f0ce:	4b43      	ldr	r3, [pc, #268]	; (800f1dc <tcp_process+0x7c8>)
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	220a      	movs	r2, #10
 800f0d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f0da:	4b41      	ldr	r3, [pc, #260]	; (800f1e0 <tcp_process+0x7cc>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	60da      	str	r2, [r3, #12]
 800f0e2:	4a3f      	ldr	r2, [pc, #252]	; (800f1e0 <tcp_process+0x7cc>)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6013      	str	r3, [r2, #0]
 800f0e8:	f002 fc92 	bl	8011a10 <tcp_timer_needed>
      }
      break;
 800f0ec:	e06c      	b.n	800f1c8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f984 	bl	800f3fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f0f4:	4b3b      	ldr	r3, [pc, #236]	; (800f1e4 <tcp_process+0x7d0>)
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	f003 0310 	and.w	r3, r3, #16
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d065      	beq.n	800f1cc <tcp_process+0x7b8>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f104:	4b38      	ldr	r3, [pc, #224]	; (800f1e8 <tcp_process+0x7d4>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d15f      	bne.n	800f1cc <tcp_process+0x7b8>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f110:	2b00      	cmp	r3, #0
 800f112:	d15b      	bne.n	800f1cc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7fe fcf1 	bl	800dafc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f11a:	4b35      	ldr	r3, [pc, #212]	; (800f1f0 <tcp_process+0x7dc>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	429a      	cmp	r2, r3
 800f122:	d105      	bne.n	800f130 <tcp_process+0x71c>
 800f124:	4b32      	ldr	r3, [pc, #200]	; (800f1f0 <tcp_process+0x7dc>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	4a31      	ldr	r2, [pc, #196]	; (800f1f0 <tcp_process+0x7dc>)
 800f12c:	6013      	str	r3, [r2, #0]
 800f12e:	e013      	b.n	800f158 <tcp_process+0x744>
 800f130:	4b2f      	ldr	r3, [pc, #188]	; (800f1f0 <tcp_process+0x7dc>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	60fb      	str	r3, [r7, #12]
 800f136:	e00c      	b.n	800f152 <tcp_process+0x73e>
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d104      	bne.n	800f14c <tcp_process+0x738>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68da      	ldr	r2, [r3, #12]
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	60da      	str	r2, [r3, #12]
 800f14a:	e005      	b.n	800f158 <tcp_process+0x744>
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	60fb      	str	r3, [r7, #12]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d1ef      	bne.n	800f138 <tcp_process+0x724>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	60da      	str	r2, [r3, #12]
 800f15e:	4b1f      	ldr	r3, [pc, #124]	; (800f1dc <tcp_process+0x7c8>)
 800f160:	2201      	movs	r2, #1
 800f162:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	220a      	movs	r2, #10
 800f168:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f16a:	4b1d      	ldr	r3, [pc, #116]	; (800f1e0 <tcp_process+0x7cc>)
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	60da      	str	r2, [r3, #12]
 800f172:	4a1b      	ldr	r2, [pc, #108]	; (800f1e0 <tcp_process+0x7cc>)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	f002 fc4a 	bl	8011a10 <tcp_timer_needed>
      }
      break;
 800f17c:	e026      	b.n	800f1cc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 f93c 	bl	800f3fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f184:	4b17      	ldr	r3, [pc, #92]	; (800f1e4 <tcp_process+0x7d0>)
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	f003 0310 	and.w	r3, r3, #16
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d01f      	beq.n	800f1d0 <tcp_process+0x7bc>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f194:	4b14      	ldr	r3, [pc, #80]	; (800f1e8 <tcp_process+0x7d4>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d119      	bne.n	800f1d0 <tcp_process+0x7bc>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d115      	bne.n	800f1d0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f1a4:	4b11      	ldr	r3, [pc, #68]	; (800f1ec <tcp_process+0x7d8>)
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	f043 0310 	orr.w	r3, r3, #16
 800f1ac:	b2da      	uxtb	r2, r3
 800f1ae:	4b0f      	ldr	r3, [pc, #60]	; (800f1ec <tcp_process+0x7d8>)
 800f1b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f1b2:	e00d      	b.n	800f1d0 <tcp_process+0x7bc>
    default:
      break;
 800f1b4:	bf00      	nop
 800f1b6:	e00c      	b.n	800f1d2 <tcp_process+0x7be>
      break;
 800f1b8:	bf00      	nop
 800f1ba:	e00a      	b.n	800f1d2 <tcp_process+0x7be>
      break;
 800f1bc:	bf00      	nop
 800f1be:	e008      	b.n	800f1d2 <tcp_process+0x7be>
      break;
 800f1c0:	bf00      	nop
 800f1c2:	e006      	b.n	800f1d2 <tcp_process+0x7be>
      break;
 800f1c4:	bf00      	nop
 800f1c6:	e004      	b.n	800f1d2 <tcp_process+0x7be>
      break;
 800f1c8:	bf00      	nop
 800f1ca:	e002      	b.n	800f1d2 <tcp_process+0x7be>
      break;
 800f1cc:	bf00      	nop
 800f1ce:	e000      	b.n	800f1d2 <tcp_process+0x7be>
      break;
 800f1d0:	bf00      	nop
  }
  return ERR_OK;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3724      	adds	r7, #36	; 0x24
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd90      	pop	{r4, r7, pc}
 800f1dc:	2004f190 	.word	0x2004f190
 800f1e0:	2004f18c 	.word	0x2004f18c
 800f1e4:	2004f1c0 	.word	0x2004f1c0
 800f1e8:	2004f1b8 	.word	0x2004f1b8
 800f1ec:	2004f1c1 	.word	0x2004f1c1
 800f1f0:	2004f188 	.word	0x2004f188

0800f1f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f1f4:	b590      	push	{r4, r7, lr}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d106      	bne.n	800f212 <tcp_oos_insert_segment+0x1e>
 800f204:	4b3b      	ldr	r3, [pc, #236]	; (800f2f4 <tcp_oos_insert_segment+0x100>)
 800f206:	f240 421f 	movw	r2, #1055	; 0x41f
 800f20a:	493b      	ldr	r1, [pc, #236]	; (800f2f8 <tcp_oos_insert_segment+0x104>)
 800f20c:	483b      	ldr	r0, [pc, #236]	; (800f2fc <tcp_oos_insert_segment+0x108>)
 800f20e:	f005 fcc3 	bl	8014b98 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	899b      	ldrh	r3, [r3, #12]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fb fc10 	bl	800aa40 <lwip_htons>
 800f220:	4603      	mov	r3, r0
 800f222:	b2db      	uxtb	r3, r3
 800f224:	f003 0301 	and.w	r3, r3, #1
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d028      	beq.n	800f27e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f22c:	6838      	ldr	r0, [r7, #0]
 800f22e:	f7fe fa63 	bl	800d6f8 <tcp_segs_free>
    next = NULL;
 800f232:	2300      	movs	r3, #0
 800f234:	603b      	str	r3, [r7, #0]
 800f236:	e056      	b.n	800f2e6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	899b      	ldrh	r3, [r3, #12]
 800f23e:	b29b      	uxth	r3, r3
 800f240:	4618      	mov	r0, r3
 800f242:	f7fb fbfd 	bl	800aa40 <lwip_htons>
 800f246:	4603      	mov	r3, r0
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	f003 0301 	and.w	r3, r3, #1
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00d      	beq.n	800f26e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	899b      	ldrh	r3, [r3, #12]
 800f258:	b29c      	uxth	r4, r3
 800f25a:	2001      	movs	r0, #1
 800f25c:	f7fb fbf0 	bl	800aa40 <lwip_htons>
 800f260:	4603      	mov	r3, r0
 800f262:	461a      	mov	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	4322      	orrs	r2, r4
 800f26a:	b292      	uxth	r2, r2
 800f26c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f7fe fa52 	bl	800d722 <tcp_seg_free>
    while (next &&
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d00e      	beq.n	800f2a2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	891b      	ldrh	r3, [r3, #8]
 800f288:	461a      	mov	r2, r3
 800f28a:	4b1d      	ldr	r3, [pc, #116]	; (800f300 <tcp_oos_insert_segment+0x10c>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	441a      	add	r2, r3
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	8909      	ldrh	r1, [r1, #8]
 800f29a:	440b      	add	r3, r1
 800f29c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	daca      	bge.n	800f238 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d01e      	beq.n	800f2e6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	891b      	ldrh	r3, [r3, #8]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	4b14      	ldr	r3, [pc, #80]	; (800f300 <tcp_oos_insert_segment+0x10c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	441a      	add	r2, r3
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	dd12      	ble.n	800f2e6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	4b0d      	ldr	r3, [pc, #52]	; (800f300 <tcp_oos_insert_segment+0x10c>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	1ad3      	subs	r3, r2, r3
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	685a      	ldr	r2, [r3, #4]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	891b      	ldrh	r3, [r3, #8]
 800f2de:	4619      	mov	r1, r3
 800f2e0:	4610      	mov	r0, r2
 800f2e2:	f7fc fe19 	bl	800bf18 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	601a      	str	r2, [r3, #0]
}
 800f2ec:	bf00      	nop
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd90      	pop	{r4, r7, pc}
 800f2f4:	08016d80 	.word	0x08016d80
 800f2f8:	08017040 	.word	0x08017040
 800f2fc:	08016dcc 	.word	0x08016dcc
 800f300:	2004f1b4 	.word	0x2004f1b4

0800f304 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f304:	b5b0      	push	{r4, r5, r7, lr}
 800f306:	b086      	sub	sp, #24
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
 800f310:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f312:	e03e      	b.n	800f392 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	4618      	mov	r0, r3
 800f324:	f7fd f80c 	bl	800c340 <pbuf_clen>
 800f328:	4603      	mov	r3, r0
 800f32a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f332:	8a7a      	ldrh	r2, [r7, #18]
 800f334:	429a      	cmp	r2, r3
 800f336:	d906      	bls.n	800f346 <tcp_free_acked_segments+0x42>
 800f338:	4b2a      	ldr	r3, [pc, #168]	; (800f3e4 <tcp_free_acked_segments+0xe0>)
 800f33a:	f240 4257 	movw	r2, #1111	; 0x457
 800f33e:	492a      	ldr	r1, [pc, #168]	; (800f3e8 <tcp_free_acked_segments+0xe4>)
 800f340:	482a      	ldr	r0, [pc, #168]	; (800f3ec <tcp_free_acked_segments+0xe8>)
 800f342:	f005 fc29 	bl	8014b98 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f34c:	8a7b      	ldrh	r3, [r7, #18]
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	b29a      	uxth	r2, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	891a      	ldrh	r2, [r3, #8]
 800f35c:	4b24      	ldr	r3, [pc, #144]	; (800f3f0 <tcp_free_acked_segments+0xec>)
 800f35e:	881b      	ldrh	r3, [r3, #0]
 800f360:	4413      	add	r3, r2
 800f362:	b29a      	uxth	r2, r3
 800f364:	4b22      	ldr	r3, [pc, #136]	; (800f3f0 <tcp_free_acked_segments+0xec>)
 800f366:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f368:	6978      	ldr	r0, [r7, #20]
 800f36a:	f7fe f9da 	bl	800d722 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00c      	beq.n	800f392 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d109      	bne.n	800f392 <tcp_free_acked_segments+0x8e>
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d106      	bne.n	800f392 <tcp_free_acked_segments+0x8e>
 800f384:	4b17      	ldr	r3, [pc, #92]	; (800f3e4 <tcp_free_acked_segments+0xe0>)
 800f386:	f240 4261 	movw	r2, #1121	; 0x461
 800f38a:	491a      	ldr	r1, [pc, #104]	; (800f3f4 <tcp_free_acked_segments+0xf0>)
 800f38c:	4817      	ldr	r0, [pc, #92]	; (800f3ec <tcp_free_acked_segments+0xe8>)
 800f38e:	f005 fc03 	bl	8014b98 <iprintf>
  while (seg_list != NULL &&
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d020      	beq.n	800f3da <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7fb fb63 	bl	800aa6a <lwip_htonl>
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	891b      	ldrh	r3, [r3, #8]
 800f3aa:	461d      	mov	r5, r3
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	899b      	ldrh	r3, [r3, #12]
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7fb fb43 	bl	800aa40 <lwip_htons>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	f003 0303 	and.w	r3, r3, #3
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <tcp_free_acked_segments+0xc6>
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	e000      	b.n	800f3cc <tcp_free_acked_segments+0xc8>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	442b      	add	r3, r5
 800f3ce:	18e2      	adds	r2, r4, r3
 800f3d0:	4b09      	ldr	r3, [pc, #36]	; (800f3f8 <tcp_free_acked_segments+0xf4>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	dd9c      	ble.n	800f314 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f3da:	68bb      	ldr	r3, [r7, #8]
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3718      	adds	r7, #24
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bdb0      	pop	{r4, r5, r7, pc}
 800f3e4:	08016d80 	.word	0x08016d80
 800f3e8:	08017068 	.word	0x08017068
 800f3ec:	08016dcc 	.word	0x08016dcc
 800f3f0:	2004f1bc 	.word	0x2004f1bc
 800f3f4:	08017090 	.word	0x08017090
 800f3f8:	2004f1b8 	.word	0x2004f1b8

0800f3fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f3fc:	b5b0      	push	{r4, r5, r7, lr}
 800f3fe:	b094      	sub	sp, #80	; 0x50
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d106      	bne.n	800f41c <tcp_receive+0x20>
 800f40e:	4b91      	ldr	r3, [pc, #580]	; (800f654 <tcp_receive+0x258>)
 800f410:	f240 427b 	movw	r2, #1147	; 0x47b
 800f414:	4990      	ldr	r1, [pc, #576]	; (800f658 <tcp_receive+0x25c>)
 800f416:	4891      	ldr	r0, [pc, #580]	; (800f65c <tcp_receive+0x260>)
 800f418:	f005 fbbe 	bl	8014b98 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	7d1b      	ldrb	r3, [r3, #20]
 800f420:	2b03      	cmp	r3, #3
 800f422:	d806      	bhi.n	800f432 <tcp_receive+0x36>
 800f424:	4b8b      	ldr	r3, [pc, #556]	; (800f654 <tcp_receive+0x258>)
 800f426:	f240 427c 	movw	r2, #1148	; 0x47c
 800f42a:	498d      	ldr	r1, [pc, #564]	; (800f660 <tcp_receive+0x264>)
 800f42c:	488b      	ldr	r0, [pc, #556]	; (800f65c <tcp_receive+0x260>)
 800f42e:	f005 fbb3 	bl	8014b98 <iprintf>

  if (flags & TCP_ACK) {
 800f432:	4b8c      	ldr	r3, [pc, #560]	; (800f664 <tcp_receive+0x268>)
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	f003 0310 	and.w	r3, r3, #16
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f000 8264 	beq.w	800f908 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f446:	461a      	mov	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f44c:	4413      	add	r3, r2
 800f44e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f454:	4b84      	ldr	r3, [pc, #528]	; (800f668 <tcp_receive+0x26c>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	db1b      	blt.n	800f496 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f462:	4b81      	ldr	r3, [pc, #516]	; (800f668 <tcp_receive+0x26c>)
 800f464:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f466:	429a      	cmp	r2, r3
 800f468:	d106      	bne.n	800f478 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f46e:	4b7f      	ldr	r3, [pc, #508]	; (800f66c <tcp_receive+0x270>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	2b00      	cmp	r3, #0
 800f476:	db0e      	blt.n	800f496 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f47c:	4b7b      	ldr	r3, [pc, #492]	; (800f66c <tcp_receive+0x270>)
 800f47e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f480:	429a      	cmp	r2, r3
 800f482:	d125      	bne.n	800f4d0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f484:	4b7a      	ldr	r3, [pc, #488]	; (800f670 <tcp_receive+0x274>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	89db      	ldrh	r3, [r3, #14]
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f492:	429a      	cmp	r2, r3
 800f494:	d91c      	bls.n	800f4d0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f496:	4b76      	ldr	r3, [pc, #472]	; (800f670 <tcp_receive+0x274>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	89db      	ldrh	r3, [r3, #14]
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d205      	bcs.n	800f4c0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f4c0:	4b69      	ldr	r3, [pc, #420]	; (800f668 <tcp_receive+0x26c>)
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f4c8:	4b68      	ldr	r3, [pc, #416]	; (800f66c <tcp_receive+0x270>)
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f4d0:	4b66      	ldr	r3, [pc, #408]	; (800f66c <tcp_receive+0x270>)
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	dc58      	bgt.n	800f590 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f4de:	4b65      	ldr	r3, [pc, #404]	; (800f674 <tcp_receive+0x278>)
 800f4e0:	881b      	ldrh	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d14b      	bne.n	800f57e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f4f0:	4413      	add	r3, r2
 800f4f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d142      	bne.n	800f57e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	db3d      	blt.n	800f57e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f506:	4b59      	ldr	r3, [pc, #356]	; (800f66c <tcp_receive+0x270>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d137      	bne.n	800f57e <tcp_receive+0x182>
              found_dupack = 1;
 800f50e:	2301      	movs	r3, #1
 800f510:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f518:	2bff      	cmp	r3, #255	; 0xff
 800f51a:	d007      	beq.n	800f52c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f522:	3301      	adds	r3, #1
 800f524:	b2da      	uxtb	r2, r3
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f532:	2b03      	cmp	r3, #3
 800f534:	d91b      	bls.n	800f56e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f540:	4413      	add	r3, r2
 800f542:	b29a      	uxth	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d30a      	bcc.n	800f564 <tcp_receive+0x168>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f558:	4413      	add	r3, r2
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f562:	e004      	b.n	800f56e <tcp_receive+0x172>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f56a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f574:	2b02      	cmp	r3, #2
 800f576:	d902      	bls.n	800f57e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f001 feeb 	bl	8011354 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f580:	2b00      	cmp	r3, #0
 800f582:	f040 8161 	bne.w	800f848 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2200      	movs	r2, #0
 800f58a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f58e:	e15b      	b.n	800f848 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f590:	4b36      	ldr	r3, [pc, #216]	; (800f66c <tcp_receive+0x270>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f598:	1ad3      	subs	r3, r2, r3
 800f59a:	3b01      	subs	r3, #1
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f2c0 814e 	blt.w	800f83e <tcp_receive+0x442>
 800f5a2:	4b32      	ldr	r3, [pc, #200]	; (800f66c <tcp_receive+0x270>)
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5aa:	1ad3      	subs	r3, r2, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f300 8146 	bgt.w	800f83e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	8b5b      	ldrh	r3, [r3, #26]
 800f5b6:	f003 0304 	and.w	r3, r3, #4
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d010      	beq.n	800f5e0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	8b5b      	ldrh	r3, [r3, #26]
 800f5c2:	f023 0304 	bic.w	r3, r3, #4
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f5ee:	10db      	asrs	r3, r3, #3
 800f5f0:	b21b      	sxth	r3, r3
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	4413      	add	r3, r2
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	b21a      	sxth	r2, r3
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f608:	4b18      	ldr	r3, [pc, #96]	; (800f66c <tcp_receive+0x270>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f612:	b29b      	uxth	r3, r3
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f620:	4b12      	ldr	r3, [pc, #72]	; (800f66c <tcp_receive+0x270>)
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	7d1b      	ldrb	r3, [r3, #20]
 800f62c:	2b03      	cmp	r3, #3
 800f62e:	f240 8097 	bls.w	800f760 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f63e:	429a      	cmp	r2, r3
 800f640:	d245      	bcs.n	800f6ce <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	8b5b      	ldrh	r3, [r3, #26]
 800f646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d014      	beq.n	800f678 <tcp_receive+0x27c>
 800f64e:	2301      	movs	r3, #1
 800f650:	e013      	b.n	800f67a <tcp_receive+0x27e>
 800f652:	bf00      	nop
 800f654:	08016d80 	.word	0x08016d80
 800f658:	080170b0 	.word	0x080170b0
 800f65c:	08016dcc 	.word	0x08016dcc
 800f660:	080170cc 	.word	0x080170cc
 800f664:	2004f1c0 	.word	0x2004f1c0
 800f668:	2004f1b4 	.word	0x2004f1b4
 800f66c:	2004f1b8 	.word	0x2004f1b8
 800f670:	2004f1a4 	.word	0x2004f1a4
 800f674:	2004f1be 	.word	0x2004f1be
 800f678:	2302      	movs	r3, #2
 800f67a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f67e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f682:	b29a      	uxth	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f688:	fb12 f303 	smulbb	r3, r2, r3
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f690:	4293      	cmp	r3, r2
 800f692:	bf28      	it	cs
 800f694:	4613      	movcs	r3, r2
 800f696:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f69e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f6a0:	4413      	add	r3, r2
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d309      	bcc.n	800f6c2 <tcp_receive+0x2c6>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f6b6:	4413      	add	r3, r2
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f6c0:	e04e      	b.n	800f760 <tcp_receive+0x364>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f6cc:	e048      	b.n	800f760 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f6d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6d6:	4413      	add	r3, r2
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d309      	bcc.n	800f6f8 <tcp_receive+0x2fc>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f6ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6ec:	4413      	add	r3, r2
 800f6ee:	b29a      	uxth	r2, r3
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f6f6:	e004      	b.n	800f702 <tcp_receive+0x306>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f70e:	429a      	cmp	r2, r3
 800f710:	d326      	bcc.n	800f760 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f71e:	1ad3      	subs	r3, r2, r3
 800f720:	b29a      	uxth	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f732:	4413      	add	r3, r2
 800f734:	b29a      	uxth	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d30a      	bcc.n	800f756 <tcp_receive+0x35a>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f74a:	4413      	add	r3, r2
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f754:	e004      	b.n	800f760 <tcp_receive+0x364>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f75c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f768:	4a98      	ldr	r2, [pc, #608]	; (800f9cc <tcp_receive+0x5d0>)
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7ff fdca 	bl	800f304 <tcp_free_acked_segments>
 800f770:	4602      	mov	r2, r0
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f77e:	4a94      	ldr	r2, [pc, #592]	; (800f9d0 <tcp_receive+0x5d4>)
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7ff fdbf 	bl	800f304 <tcp_free_acked_segments>
 800f786:	4602      	mov	r2, r0
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f790:	2b00      	cmp	r3, #0
 800f792:	d104      	bne.n	800f79e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f79a:	861a      	strh	r2, [r3, #48]	; 0x30
 800f79c:	e002      	b.n	800f7a4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d103      	bne.n	800f7ba <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f7c0:	4b84      	ldr	r3, [pc, #528]	; (800f9d4 <tcp_receive+0x5d8>)
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	4413      	add	r3, r2
 800f7c6:	b29a      	uxth	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	8b5b      	ldrh	r3, [r3, #26]
 800f7d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d035      	beq.n	800f846 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d118      	bne.n	800f814 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00c      	beq.n	800f804 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fb f937 	bl	800aa6a <lwip_htonl>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f800:	2b00      	cmp	r3, #0
 800f802:	dc20      	bgt.n	800f846 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	8b5b      	ldrh	r3, [r3, #26]
 800f808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f812:	e018      	b.n	800f846 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	4618      	mov	r0, r3
 800f822:	f7fb f922 	bl	800aa6a <lwip_htonl>
 800f826:	4603      	mov	r3, r0
 800f828:	1ae3      	subs	r3, r4, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	dc0b      	bgt.n	800f846 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	8b5b      	ldrh	r3, [r3, #26]
 800f832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f836:	b29a      	uxth	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f83c:	e003      	b.n	800f846 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f001 ff76 	bl	8011730 <tcp_send_empty_ack>
 800f844:	e000      	b.n	800f848 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f846:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d05b      	beq.n	800f908 <tcp_receive+0x50c>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f854:	4b60      	ldr	r3, [pc, #384]	; (800f9d8 <tcp_receive+0x5dc>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	da54      	bge.n	800f908 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f85e:	4b5f      	ldr	r3, [pc, #380]	; (800f9dc <tcp_receive+0x5e0>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	b29a      	uxth	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f868:	b29b      	uxth	r3, r3
 800f86a:	1ad3      	subs	r3, r2, r3
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f872:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f87c:	10db      	asrs	r3, r3, #3
 800f87e:	b21b      	sxth	r3, r3
 800f880:	b29b      	uxth	r3, r3
 800f882:	1ad3      	subs	r3, r2, r3
 800f884:	b29b      	uxth	r3, r3
 800f886:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f890:	b29a      	uxth	r2, r3
 800f892:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f896:	4413      	add	r3, r2
 800f898:	b29b      	uxth	r3, r3
 800f89a:	b21a      	sxth	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f8a0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	da05      	bge.n	800f8b4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f8a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f8ac:	425b      	negs	r3, r3
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f8b4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f8be:	109b      	asrs	r3, r3, #2
 800f8c0:	b21b      	sxth	r3, r3
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	1ad3      	subs	r3, r2, r3
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f8d8:	4413      	add	r3, r2
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	b21a      	sxth	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f8e8:	10db      	asrs	r3, r3, #3
 800f8ea:	b21b      	sxth	r3, r3
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	4413      	add	r3, r2
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	b21a      	sxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f908:	4b35      	ldr	r3, [pc, #212]	; (800f9e0 <tcp_receive+0x5e4>)
 800f90a:	881b      	ldrh	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 84e2 	beq.w	80102d6 <tcp_receive+0xeda>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	7d1b      	ldrb	r3, [r3, #20]
 800f916:	2b06      	cmp	r3, #6
 800f918:	f200 84dd 	bhi.w	80102d6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f920:	4b30      	ldr	r3, [pc, #192]	; (800f9e4 <tcp_receive+0x5e8>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	1ad3      	subs	r3, r2, r3
 800f926:	3b01      	subs	r3, #1
 800f928:	2b00      	cmp	r3, #0
 800f92a:	f2c0 808f 	blt.w	800fa4c <tcp_receive+0x650>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f932:	4b2b      	ldr	r3, [pc, #172]	; (800f9e0 <tcp_receive+0x5e4>)
 800f934:	881b      	ldrh	r3, [r3, #0]
 800f936:	4619      	mov	r1, r3
 800f938:	4b2a      	ldr	r3, [pc, #168]	; (800f9e4 <tcp_receive+0x5e8>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	440b      	add	r3, r1
 800f93e:	1ad3      	subs	r3, r2, r3
 800f940:	3301      	adds	r3, #1
 800f942:	2b00      	cmp	r3, #0
 800f944:	f300 8082 	bgt.w	800fa4c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f948:	4b27      	ldr	r3, [pc, #156]	; (800f9e8 <tcp_receive+0x5ec>)
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f952:	4b24      	ldr	r3, [pc, #144]	; (800f9e4 <tcp_receive+0x5e8>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	1ad3      	subs	r3, r2, r3
 800f958:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f95a:	4b23      	ldr	r3, [pc, #140]	; (800f9e8 <tcp_receive+0x5ec>)
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d106      	bne.n	800f970 <tcp_receive+0x574>
 800f962:	4b22      	ldr	r3, [pc, #136]	; (800f9ec <tcp_receive+0x5f0>)
 800f964:	f240 5294 	movw	r2, #1428	; 0x594
 800f968:	4921      	ldr	r1, [pc, #132]	; (800f9f0 <tcp_receive+0x5f4>)
 800f96a:	4822      	ldr	r0, [pc, #136]	; (800f9f4 <tcp_receive+0x5f8>)
 800f96c:	f005 f914 	bl	8014b98 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f976:	4293      	cmp	r3, r2
 800f978:	d906      	bls.n	800f988 <tcp_receive+0x58c>
 800f97a:	4b1c      	ldr	r3, [pc, #112]	; (800f9ec <tcp_receive+0x5f0>)
 800f97c:	f240 5295 	movw	r2, #1429	; 0x595
 800f980:	491d      	ldr	r1, [pc, #116]	; (800f9f8 <tcp_receive+0x5fc>)
 800f982:	481c      	ldr	r0, [pc, #112]	; (800f9f4 <tcp_receive+0x5f8>)
 800f984:	f005 f908 	bl	8014b98 <iprintf>
      off = (u16_t)off32;
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f98e:	4b16      	ldr	r3, [pc, #88]	; (800f9e8 <tcp_receive+0x5ec>)
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	891b      	ldrh	r3, [r3, #8]
 800f994:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f998:	429a      	cmp	r2, r3
 800f99a:	d906      	bls.n	800f9aa <tcp_receive+0x5ae>
 800f99c:	4b13      	ldr	r3, [pc, #76]	; (800f9ec <tcp_receive+0x5f0>)
 800f99e:	f240 5297 	movw	r2, #1431	; 0x597
 800f9a2:	4916      	ldr	r1, [pc, #88]	; (800f9fc <tcp_receive+0x600>)
 800f9a4:	4813      	ldr	r0, [pc, #76]	; (800f9f4 <tcp_receive+0x5f8>)
 800f9a6:	f005 f8f7 	bl	8014b98 <iprintf>
      inseg.len -= off;
 800f9aa:	4b0f      	ldr	r3, [pc, #60]	; (800f9e8 <tcp_receive+0x5ec>)
 800f9ac:	891a      	ldrh	r2, [r3, #8]
 800f9ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	4b0c      	ldr	r3, [pc, #48]	; (800f9e8 <tcp_receive+0x5ec>)
 800f9b8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f9ba:	4b0b      	ldr	r3, [pc, #44]	; (800f9e8 <tcp_receive+0x5ec>)
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	891a      	ldrh	r2, [r3, #8]
 800f9c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9c4:	1ad3      	subs	r3, r2, r3
 800f9c6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f9c8:	e02a      	b.n	800fa20 <tcp_receive+0x624>
 800f9ca:	bf00      	nop
 800f9cc:	080170e8 	.word	0x080170e8
 800f9d0:	080170f0 	.word	0x080170f0
 800f9d4:	2004f1bc 	.word	0x2004f1bc
 800f9d8:	2004f1b8 	.word	0x2004f1b8
 800f9dc:	2004f17c 	.word	0x2004f17c
 800f9e0:	2004f1be 	.word	0x2004f1be
 800f9e4:	2004f1b4 	.word	0x2004f1b4
 800f9e8:	2004f194 	.word	0x2004f194
 800f9ec:	08016d80 	.word	0x08016d80
 800f9f0:	080170f8 	.word	0x080170f8
 800f9f4:	08016dcc 	.word	0x08016dcc
 800f9f8:	08017108 	.word	0x08017108
 800f9fc:	08017118 	.word	0x08017118
        off -= p->len;
 800fa00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa02:	895b      	ldrh	r3, [r3, #10]
 800fa04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa08:	1ad3      	subs	r3, r2, r3
 800fa0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fa0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa10:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fa12:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fa14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa16:	2200      	movs	r2, #0
 800fa18:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fa1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fa20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa22:	895b      	ldrh	r3, [r3, #10]
 800fa24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d8e9      	bhi.n	800fa00 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fa2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa30:	4619      	mov	r1, r3
 800fa32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fa34:	f7fc fb70 	bl	800c118 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3c:	4a91      	ldr	r2, [pc, #580]	; (800fc84 <tcp_receive+0x888>)
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	4b91      	ldr	r3, [pc, #580]	; (800fc88 <tcp_receive+0x88c>)
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	4a8f      	ldr	r2, [pc, #572]	; (800fc84 <tcp_receive+0x888>)
 800fa46:	6812      	ldr	r2, [r2, #0]
 800fa48:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fa4a:	e00d      	b.n	800fa68 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fa4c:	4b8d      	ldr	r3, [pc, #564]	; (800fc84 <tcp_receive+0x888>)
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa54:	1ad3      	subs	r3, r2, r3
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	da06      	bge.n	800fa68 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	8b5b      	ldrh	r3, [r3, #26]
 800fa5e:	f043 0302 	orr.w	r3, r3, #2
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fa68:	4b86      	ldr	r3, [pc, #536]	; (800fc84 <tcp_receive+0x888>)
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa70:	1ad3      	subs	r3, r2, r3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	f2c0 842a 	blt.w	80102cc <tcp_receive+0xed0>
 800fa78:	4b82      	ldr	r3, [pc, #520]	; (800fc84 <tcp_receive+0x888>)
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa80:	6879      	ldr	r1, [r7, #4]
 800fa82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa84:	440b      	add	r3, r1
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	3301      	adds	r3, #1
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f300 841e 	bgt.w	80102cc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa94:	4b7b      	ldr	r3, [pc, #492]	; (800fc84 <tcp_receive+0x888>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	f040 829a 	bne.w	800ffd2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fa9e:	4b7a      	ldr	r3, [pc, #488]	; (800fc88 <tcp_receive+0x88c>)
 800faa0:	891c      	ldrh	r4, [r3, #8]
 800faa2:	4b79      	ldr	r3, [pc, #484]	; (800fc88 <tcp_receive+0x88c>)
 800faa4:	68db      	ldr	r3, [r3, #12]
 800faa6:	899b      	ldrh	r3, [r3, #12]
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	4618      	mov	r0, r3
 800faac:	f7fa ffc8 	bl	800aa40 <lwip_htons>
 800fab0:	4603      	mov	r3, r0
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	f003 0303 	and.w	r3, r3, #3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d001      	beq.n	800fac0 <tcp_receive+0x6c4>
 800fabc:	2301      	movs	r3, #1
 800fabe:	e000      	b.n	800fac2 <tcp_receive+0x6c6>
 800fac0:	2300      	movs	r3, #0
 800fac2:	4423      	add	r3, r4
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	4b71      	ldr	r3, [pc, #452]	; (800fc8c <tcp_receive+0x890>)
 800fac8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800face:	4b6f      	ldr	r3, [pc, #444]	; (800fc8c <tcp_receive+0x890>)
 800fad0:	881b      	ldrh	r3, [r3, #0]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d275      	bcs.n	800fbc2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fad6:	4b6c      	ldr	r3, [pc, #432]	; (800fc88 <tcp_receive+0x88c>)
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	899b      	ldrh	r3, [r3, #12]
 800fadc:	b29b      	uxth	r3, r3
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fa ffae 	bl	800aa40 <lwip_htons>
 800fae4:	4603      	mov	r3, r0
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	f003 0301 	and.w	r3, r3, #1
 800faec:	2b00      	cmp	r3, #0
 800faee:	d01f      	beq.n	800fb30 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800faf0:	4b65      	ldr	r3, [pc, #404]	; (800fc88 <tcp_receive+0x88c>)
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	899b      	ldrh	r3, [r3, #12]
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	b21b      	sxth	r3, r3
 800fafa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fafe:	b21c      	sxth	r4, r3
 800fb00:	4b61      	ldr	r3, [pc, #388]	; (800fc88 <tcp_receive+0x88c>)
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	899b      	ldrh	r3, [r3, #12]
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fa ff99 	bl	800aa40 <lwip_htons>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fa ff90 	bl	800aa40 <lwip_htons>
 800fb20:	4603      	mov	r3, r0
 800fb22:	b21b      	sxth	r3, r3
 800fb24:	4323      	orrs	r3, r4
 800fb26:	b21a      	sxth	r2, r3
 800fb28:	4b57      	ldr	r3, [pc, #348]	; (800fc88 <tcp_receive+0x88c>)
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	b292      	uxth	r2, r2
 800fb2e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb34:	4b54      	ldr	r3, [pc, #336]	; (800fc88 <tcp_receive+0x88c>)
 800fb36:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fb38:	4b53      	ldr	r3, [pc, #332]	; (800fc88 <tcp_receive+0x88c>)
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	899b      	ldrh	r3, [r3, #12]
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fa ff7d 	bl	800aa40 <lwip_htons>
 800fb46:	4603      	mov	r3, r0
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	f003 0302 	and.w	r3, r3, #2
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d005      	beq.n	800fb5e <tcp_receive+0x762>
            inseg.len -= 1;
 800fb52:	4b4d      	ldr	r3, [pc, #308]	; (800fc88 <tcp_receive+0x88c>)
 800fb54:	891b      	ldrh	r3, [r3, #8]
 800fb56:	3b01      	subs	r3, #1
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	4b4b      	ldr	r3, [pc, #300]	; (800fc88 <tcp_receive+0x88c>)
 800fb5c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fb5e:	4b4a      	ldr	r3, [pc, #296]	; (800fc88 <tcp_receive+0x88c>)
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	4a49      	ldr	r2, [pc, #292]	; (800fc88 <tcp_receive+0x88c>)
 800fb64:	8912      	ldrh	r2, [r2, #8]
 800fb66:	4611      	mov	r1, r2
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fc f9d5 	bl	800bf18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fb6e:	4b46      	ldr	r3, [pc, #280]	; (800fc88 <tcp_receive+0x88c>)
 800fb70:	891c      	ldrh	r4, [r3, #8]
 800fb72:	4b45      	ldr	r3, [pc, #276]	; (800fc88 <tcp_receive+0x88c>)
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	899b      	ldrh	r3, [r3, #12]
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7fa ff60 	bl	800aa40 <lwip_htons>
 800fb80:	4603      	mov	r3, r0
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	f003 0303 	and.w	r3, r3, #3
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d001      	beq.n	800fb90 <tcp_receive+0x794>
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	e000      	b.n	800fb92 <tcp_receive+0x796>
 800fb90:	2300      	movs	r3, #0
 800fb92:	4423      	add	r3, r4
 800fb94:	b29a      	uxth	r2, r3
 800fb96:	4b3d      	ldr	r3, [pc, #244]	; (800fc8c <tcp_receive+0x890>)
 800fb98:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fb9a:	4b3c      	ldr	r3, [pc, #240]	; (800fc8c <tcp_receive+0x890>)
 800fb9c:	881b      	ldrh	r3, [r3, #0]
 800fb9e:	461a      	mov	r2, r3
 800fba0:	4b38      	ldr	r3, [pc, #224]	; (800fc84 <tcp_receive+0x888>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	441a      	add	r2, r3
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbaa:	6879      	ldr	r1, [r7, #4]
 800fbac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fbae:	440b      	add	r3, r1
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d006      	beq.n	800fbc2 <tcp_receive+0x7c6>
 800fbb4:	4b36      	ldr	r3, [pc, #216]	; (800fc90 <tcp_receive+0x894>)
 800fbb6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fbba:	4936      	ldr	r1, [pc, #216]	; (800fc94 <tcp_receive+0x898>)
 800fbbc:	4836      	ldr	r0, [pc, #216]	; (800fc98 <tcp_receive+0x89c>)
 800fbbe:	f004 ffeb 	bl	8014b98 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	f000 80e7 	beq.w	800fd9a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fbcc:	4b2e      	ldr	r3, [pc, #184]	; (800fc88 <tcp_receive+0x88c>)
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	899b      	ldrh	r3, [r3, #12]
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7fa ff33 	bl	800aa40 <lwip_htons>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	f003 0301 	and.w	r3, r3, #1
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d010      	beq.n	800fc08 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fbe6:	e00a      	b.n	800fbfe <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbec:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f7fd fd92 	bl	800d722 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d1f0      	bne.n	800fbe8 <tcp_receive+0x7ec>
 800fc06:	e0c8      	b.n	800fd9a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fc0e:	e052      	b.n	800fcb6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fc10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	899b      	ldrh	r3, [r3, #12]
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fa ff11 	bl	800aa40 <lwip_htons>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	f003 0301 	and.w	r3, r3, #1
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d03d      	beq.n	800fca6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fc2a:	4b17      	ldr	r3, [pc, #92]	; (800fc88 <tcp_receive+0x88c>)
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	899b      	ldrh	r3, [r3, #12]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fa ff04 	bl	800aa40 <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d130      	bne.n	800fca6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fc44:	4b10      	ldr	r3, [pc, #64]	; (800fc88 <tcp_receive+0x88c>)
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	899b      	ldrh	r3, [r3, #12]
 800fc4a:	b29c      	uxth	r4, r3
 800fc4c:	2001      	movs	r0, #1
 800fc4e:	f7fa fef7 	bl	800aa40 <lwip_htons>
 800fc52:	4603      	mov	r3, r0
 800fc54:	461a      	mov	r2, r3
 800fc56:	4b0c      	ldr	r3, [pc, #48]	; (800fc88 <tcp_receive+0x88c>)
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	4322      	orrs	r2, r4
 800fc5c:	b292      	uxth	r2, r2
 800fc5e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fc60:	4b09      	ldr	r3, [pc, #36]	; (800fc88 <tcp_receive+0x88c>)
 800fc62:	891c      	ldrh	r4, [r3, #8]
 800fc64:	4b08      	ldr	r3, [pc, #32]	; (800fc88 <tcp_receive+0x88c>)
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	899b      	ldrh	r3, [r3, #12]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fa fee7 	bl	800aa40 <lwip_htons>
 800fc72:	4603      	mov	r3, r0
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	f003 0303 	and.w	r3, r3, #3
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d00e      	beq.n	800fc9c <tcp_receive+0x8a0>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e00d      	b.n	800fc9e <tcp_receive+0x8a2>
 800fc82:	bf00      	nop
 800fc84:	2004f1b4 	.word	0x2004f1b4
 800fc88:	2004f194 	.word	0x2004f194
 800fc8c:	2004f1be 	.word	0x2004f1be
 800fc90:	08016d80 	.word	0x08016d80
 800fc94:	08017128 	.word	0x08017128
 800fc98:	08016dcc 	.word	0x08016dcc
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	4423      	add	r3, r4
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	4b98      	ldr	r3, [pc, #608]	; (800ff04 <tcp_receive+0xb08>)
 800fca4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fcaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fcb0:	6938      	ldr	r0, [r7, #16]
 800fcb2:	f7fd fd36 	bl	800d722 <tcp_seg_free>
            while (next &&
 800fcb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00e      	beq.n	800fcda <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fcbc:	4b91      	ldr	r3, [pc, #580]	; (800ff04 <tcp_receive+0xb08>)
 800fcbe:	881b      	ldrh	r3, [r3, #0]
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	4b91      	ldr	r3, [pc, #580]	; (800ff08 <tcp_receive+0xb0c>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	441a      	add	r2, r3
 800fcc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcca:	68db      	ldr	r3, [r3, #12]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fcd0:	8909      	ldrh	r1, [r1, #8]
 800fcd2:	440b      	add	r3, r1
 800fcd4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	da9a      	bge.n	800fc10 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fcda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d059      	beq.n	800fd94 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800fce0:	4b88      	ldr	r3, [pc, #544]	; (800ff04 <tcp_receive+0xb08>)
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	461a      	mov	r2, r3
 800fce6:	4b88      	ldr	r3, [pc, #544]	; (800ff08 <tcp_receive+0xb0c>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	441a      	add	r2, r3
 800fcec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	dd4d      	ble.n	800fd94 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	4b81      	ldr	r3, [pc, #516]	; (800ff08 <tcp_receive+0xb0c>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	1ad3      	subs	r3, r2, r3
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	4b80      	ldr	r3, [pc, #512]	; (800ff0c <tcp_receive+0xb10>)
 800fd0c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fd0e:	4b7f      	ldr	r3, [pc, #508]	; (800ff0c <tcp_receive+0xb10>)
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	899b      	ldrh	r3, [r3, #12]
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fa fe92 	bl	800aa40 <lwip_htons>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	f003 0302 	and.w	r3, r3, #2
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d005      	beq.n	800fd34 <tcp_receive+0x938>
                inseg.len -= 1;
 800fd28:	4b78      	ldr	r3, [pc, #480]	; (800ff0c <tcp_receive+0xb10>)
 800fd2a:	891b      	ldrh	r3, [r3, #8]
 800fd2c:	3b01      	subs	r3, #1
 800fd2e:	b29a      	uxth	r2, r3
 800fd30:	4b76      	ldr	r3, [pc, #472]	; (800ff0c <tcp_receive+0xb10>)
 800fd32:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fd34:	4b75      	ldr	r3, [pc, #468]	; (800ff0c <tcp_receive+0xb10>)
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	4a74      	ldr	r2, [pc, #464]	; (800ff0c <tcp_receive+0xb10>)
 800fd3a:	8912      	ldrh	r2, [r2, #8]
 800fd3c:	4611      	mov	r1, r2
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7fc f8ea 	bl	800bf18 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fd44:	4b71      	ldr	r3, [pc, #452]	; (800ff0c <tcp_receive+0xb10>)
 800fd46:	891c      	ldrh	r4, [r3, #8]
 800fd48:	4b70      	ldr	r3, [pc, #448]	; (800ff0c <tcp_receive+0xb10>)
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	899b      	ldrh	r3, [r3, #12]
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7fa fe75 	bl	800aa40 <lwip_htons>
 800fd56:	4603      	mov	r3, r0
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	f003 0303 	and.w	r3, r3, #3
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <tcp_receive+0x96a>
 800fd62:	2301      	movs	r3, #1
 800fd64:	e000      	b.n	800fd68 <tcp_receive+0x96c>
 800fd66:	2300      	movs	r3, #0
 800fd68:	4423      	add	r3, r4
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	4b65      	ldr	r3, [pc, #404]	; (800ff04 <tcp_receive+0xb08>)
 800fd6e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fd70:	4b64      	ldr	r3, [pc, #400]	; (800ff04 <tcp_receive+0xb08>)
 800fd72:	881b      	ldrh	r3, [r3, #0]
 800fd74:	461a      	mov	r2, r3
 800fd76:	4b64      	ldr	r3, [pc, #400]	; (800ff08 <tcp_receive+0xb0c>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	441a      	add	r2, r3
 800fd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d006      	beq.n	800fd94 <tcp_receive+0x998>
 800fd86:	4b62      	ldr	r3, [pc, #392]	; (800ff10 <tcp_receive+0xb14>)
 800fd88:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fd8c:	4961      	ldr	r1, [pc, #388]	; (800ff14 <tcp_receive+0xb18>)
 800fd8e:	4862      	ldr	r0, [pc, #392]	; (800ff18 <tcp_receive+0xb1c>)
 800fd90:	f004 ff02 	bl	8014b98 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd98:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fd9a:	4b5a      	ldr	r3, [pc, #360]	; (800ff04 <tcp_receive+0xb08>)
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	4b59      	ldr	r3, [pc, #356]	; (800ff08 <tcp_receive+0xb0c>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	441a      	add	r2, r3
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fdae:	4b55      	ldr	r3, [pc, #340]	; (800ff04 <tcp_receive+0xb08>)
 800fdb0:	881b      	ldrh	r3, [r3, #0]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d206      	bcs.n	800fdc4 <tcp_receive+0x9c8>
 800fdb6:	4b56      	ldr	r3, [pc, #344]	; (800ff10 <tcp_receive+0xb14>)
 800fdb8:	f240 6207 	movw	r2, #1543	; 0x607
 800fdbc:	4957      	ldr	r1, [pc, #348]	; (800ff1c <tcp_receive+0xb20>)
 800fdbe:	4856      	ldr	r0, [pc, #344]	; (800ff18 <tcp_receive+0xb1c>)
 800fdc0:	f004 feea 	bl	8014b98 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fdc8:	4b4e      	ldr	r3, [pc, #312]	; (800ff04 <tcp_receive+0xb08>)
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	1ad3      	subs	r3, r2, r3
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7fc ffc5 	bl	800cd64 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fdda:	4b4c      	ldr	r3, [pc, #304]	; (800ff0c <tcp_receive+0xb10>)
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	891b      	ldrh	r3, [r3, #8]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d006      	beq.n	800fdf2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800fde4:	4b49      	ldr	r3, [pc, #292]	; (800ff0c <tcp_receive+0xb10>)
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	4a4d      	ldr	r2, [pc, #308]	; (800ff20 <tcp_receive+0xb24>)
 800fdea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fdec:	4b47      	ldr	r3, [pc, #284]	; (800ff0c <tcp_receive+0xb10>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fdf2:	4b46      	ldr	r3, [pc, #280]	; (800ff0c <tcp_receive+0xb10>)
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	899b      	ldrh	r3, [r3, #12]
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fa fe20 	bl	800aa40 <lwip_htons>
 800fe00:	4603      	mov	r3, r0
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	f003 0301 	and.w	r3, r3, #1
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f000 80b8 	beq.w	800ff7e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fe0e:	4b45      	ldr	r3, [pc, #276]	; (800ff24 <tcp_receive+0xb28>)
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	f043 0320 	orr.w	r3, r3, #32
 800fe16:	b2da      	uxtb	r2, r3
 800fe18:	4b42      	ldr	r3, [pc, #264]	; (800ff24 <tcp_receive+0xb28>)
 800fe1a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fe1c:	e0af      	b.n	800ff7e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe22:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	4a36      	ldr	r2, [pc, #216]	; (800ff08 <tcp_receive+0xb0c>)
 800fe2e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	891b      	ldrh	r3, [r3, #8]
 800fe34:	461c      	mov	r4, r3
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	899b      	ldrh	r3, [r3, #12]
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fa fdfe 	bl	800aa40 <lwip_htons>
 800fe44:	4603      	mov	r3, r0
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	f003 0303 	and.w	r3, r3, #3
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d001      	beq.n	800fe54 <tcp_receive+0xa58>
 800fe50:	2301      	movs	r3, #1
 800fe52:	e000      	b.n	800fe56 <tcp_receive+0xa5a>
 800fe54:	2300      	movs	r3, #0
 800fe56:	191a      	adds	r2, r3, r4
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe5c:	441a      	add	r2, r3
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe66:	461c      	mov	r4, r3
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	891b      	ldrh	r3, [r3, #8]
 800fe6c:	461d      	mov	r5, r3
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	899b      	ldrh	r3, [r3, #12]
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fa fde2 	bl	800aa40 <lwip_htons>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	f003 0303 	and.w	r3, r3, #3
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d001      	beq.n	800fe8c <tcp_receive+0xa90>
 800fe88:	2301      	movs	r3, #1
 800fe8a:	e000      	b.n	800fe8e <tcp_receive+0xa92>
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	442b      	add	r3, r5
 800fe90:	429c      	cmp	r4, r3
 800fe92:	d206      	bcs.n	800fea2 <tcp_receive+0xaa6>
 800fe94:	4b1e      	ldr	r3, [pc, #120]	; (800ff10 <tcp_receive+0xb14>)
 800fe96:	f240 622b 	movw	r2, #1579	; 0x62b
 800fe9a:	4923      	ldr	r1, [pc, #140]	; (800ff28 <tcp_receive+0xb2c>)
 800fe9c:	481e      	ldr	r0, [pc, #120]	; (800ff18 <tcp_receive+0xb1c>)
 800fe9e:	f004 fe7b 	bl	8014b98 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	891b      	ldrh	r3, [r3, #8]
 800fea6:	461c      	mov	r4, r3
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	899b      	ldrh	r3, [r3, #12]
 800feae:	b29b      	uxth	r3, r3
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7fa fdc5 	bl	800aa40 <lwip_htons>
 800feb6:	4603      	mov	r3, r0
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	f003 0303 	and.w	r3, r3, #3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d001      	beq.n	800fec6 <tcp_receive+0xaca>
 800fec2:	2301      	movs	r3, #1
 800fec4:	e000      	b.n	800fec8 <tcp_receive+0xacc>
 800fec6:	2300      	movs	r3, #0
 800fec8:	1919      	adds	r1, r3, r4
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fece:	b28b      	uxth	r3, r1
 800fed0:	1ad3      	subs	r3, r2, r3
 800fed2:	b29a      	uxth	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7fc ff43 	bl	800cd64 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	891b      	ldrh	r3, [r3, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d028      	beq.n	800ff3a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fee8:	4b0d      	ldr	r3, [pc, #52]	; (800ff20 <tcp_receive+0xb24>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d01d      	beq.n	800ff2c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800fef0:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <tcp_receive+0xb24>)
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	4619      	mov	r1, r3
 800fefa:	4610      	mov	r0, r2
 800fefc:	f7fc fa60 	bl	800c3c0 <pbuf_cat>
 800ff00:	e018      	b.n	800ff34 <tcp_receive+0xb38>
 800ff02:	bf00      	nop
 800ff04:	2004f1be 	.word	0x2004f1be
 800ff08:	2004f1b4 	.word	0x2004f1b4
 800ff0c:	2004f194 	.word	0x2004f194
 800ff10:	08016d80 	.word	0x08016d80
 800ff14:	08017160 	.word	0x08017160
 800ff18:	08016dcc 	.word	0x08016dcc
 800ff1c:	0801719c 	.word	0x0801719c
 800ff20:	2004f1c4 	.word	0x2004f1c4
 800ff24:	2004f1c1 	.word	0x2004f1c1
 800ff28:	080171bc 	.word	0x080171bc
            } else {
              recv_data = cseg->p;
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	4a70      	ldr	r2, [pc, #448]	; (80100f4 <tcp_receive+0xcf8>)
 800ff32:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	2200      	movs	r2, #0
 800ff38:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	899b      	ldrh	r3, [r3, #12]
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fa fd7c 	bl	800aa40 <lwip_htons>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	f003 0301 	and.w	r3, r3, #1
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00d      	beq.n	800ff70 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ff54:	4b68      	ldr	r3, [pc, #416]	; (80100f8 <tcp_receive+0xcfc>)
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	f043 0320 	orr.w	r3, r3, #32
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	4b66      	ldr	r3, [pc, #408]	; (80100f8 <tcp_receive+0xcfc>)
 800ff60:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	7d1b      	ldrb	r3, [r3, #20]
 800ff66:	2b04      	cmp	r3, #4
 800ff68:	d102      	bne.n	800ff70 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2207      	movs	r2, #7
 800ff6e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ff78:	68b8      	ldr	r0, [r7, #8]
 800ff7a:	f7fd fbd2 	bl	800d722 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d008      	beq.n	800ff98 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	685a      	ldr	r2, [r3, #4]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ff92:	429a      	cmp	r2, r3
 800ff94:	f43f af43 	beq.w	800fe1e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	8b5b      	ldrh	r3, [r3, #26]
 800ff9c:	f003 0301 	and.w	r3, r3, #1
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d00e      	beq.n	800ffc2 <tcp_receive+0xbc6>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	8b5b      	ldrh	r3, [r3, #26]
 800ffa8:	f023 0301 	bic.w	r3, r3, #1
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	835a      	strh	r2, [r3, #26]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	8b5b      	ldrh	r3, [r3, #26]
 800ffb6:	f043 0302 	orr.w	r3, r3, #2
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ffc0:	e188      	b.n	80102d4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	8b5b      	ldrh	r3, [r3, #26]
 800ffc6:	f043 0301 	orr.w	r3, r3, #1
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ffd0:	e180      	b.n	80102d4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d106      	bne.n	800ffe8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ffda:	4848      	ldr	r0, [pc, #288]	; (80100fc <tcp_receive+0xd00>)
 800ffdc:	f7fd fbba 	bl	800d754 <tcp_seg_copy>
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	675a      	str	r2, [r3, #116]	; 0x74
 800ffe6:	e16d      	b.n	80102c4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fff0:	63bb      	str	r3, [r7, #56]	; 0x38
 800fff2:	e157      	b.n	80102a4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	685a      	ldr	r2, [r3, #4]
 800fffa:	4b41      	ldr	r3, [pc, #260]	; (8010100 <tcp_receive+0xd04>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d11d      	bne.n	801003e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010002:	4b3e      	ldr	r3, [pc, #248]	; (80100fc <tcp_receive+0xd00>)
 8010004:	891a      	ldrh	r2, [r3, #8]
 8010006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010008:	891b      	ldrh	r3, [r3, #8]
 801000a:	429a      	cmp	r2, r3
 801000c:	f240 814f 	bls.w	80102ae <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010010:	483a      	ldr	r0, [pc, #232]	; (80100fc <tcp_receive+0xd00>)
 8010012:	f7fd fb9f 	bl	800d754 <tcp_seg_copy>
 8010016:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 8149 	beq.w	80102b2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010022:	2b00      	cmp	r3, #0
 8010024:	d003      	beq.n	801002e <tcp_receive+0xc32>
                    prev->next = cseg;
 8010026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010028:	697a      	ldr	r2, [r7, #20]
 801002a:	601a      	str	r2, [r3, #0]
 801002c:	e002      	b.n	8010034 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	697a      	ldr	r2, [r7, #20]
 8010032:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010034:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010036:	6978      	ldr	r0, [r7, #20]
 8010038:	f7ff f8dc 	bl	800f1f4 <tcp_oos_insert_segment>
                }
                break;
 801003c:	e139      	b.n	80102b2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801003e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010040:	2b00      	cmp	r3, #0
 8010042:	d117      	bne.n	8010074 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010044:	4b2e      	ldr	r3, [pc, #184]	; (8010100 <tcp_receive+0xd04>)
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	68db      	ldr	r3, [r3, #12]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	1ad3      	subs	r3, r2, r3
 8010050:	2b00      	cmp	r3, #0
 8010052:	da57      	bge.n	8010104 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010054:	4829      	ldr	r0, [pc, #164]	; (80100fc <tcp_receive+0xd00>)
 8010056:	f7fd fb7d 	bl	800d754 <tcp_seg_copy>
 801005a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801005c:	69bb      	ldr	r3, [r7, #24]
 801005e:	2b00      	cmp	r3, #0
 8010060:	f000 8129 	beq.w	80102b6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	69ba      	ldr	r2, [r7, #24]
 8010068:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801006a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801006c:	69b8      	ldr	r0, [r7, #24]
 801006e:	f7ff f8c1 	bl	800f1f4 <tcp_oos_insert_segment>
                  }
                  break;
 8010072:	e120      	b.n	80102b6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010074:	4b22      	ldr	r3, [pc, #136]	; (8010100 <tcp_receive+0xd04>)
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	1ad3      	subs	r3, r2, r3
 8010080:	3b01      	subs	r3, #1
 8010082:	2b00      	cmp	r3, #0
 8010084:	db3e      	blt.n	8010104 <tcp_receive+0xd08>
 8010086:	4b1e      	ldr	r3, [pc, #120]	; (8010100 <tcp_receive+0xd04>)
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	1ad3      	subs	r3, r2, r3
 8010092:	3301      	adds	r3, #1
 8010094:	2b00      	cmp	r3, #0
 8010096:	dc35      	bgt.n	8010104 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010098:	4818      	ldr	r0, [pc, #96]	; (80100fc <tcp_receive+0xd00>)
 801009a:	f7fd fb5b 	bl	800d754 <tcp_seg_copy>
 801009e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	f000 8109 	beq.w	80102ba <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80100a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100b0:	8912      	ldrh	r2, [r2, #8]
 80100b2:	441a      	add	r2, r3
 80100b4:	4b12      	ldr	r3, [pc, #72]	; (8010100 <tcp_receive+0xd04>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	dd12      	ble.n	80100e4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80100be:	4b10      	ldr	r3, [pc, #64]	; (8010100 <tcp_receive+0xd04>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80100d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d6:	685a      	ldr	r2, [r3, #4]
 80100d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100da:	891b      	ldrh	r3, [r3, #8]
 80100dc:	4619      	mov	r1, r3
 80100de:	4610      	mov	r0, r2
 80100e0:	f7fb ff1a 	bl	800bf18 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80100e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e6:	69fa      	ldr	r2, [r7, #28]
 80100e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80100ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100ec:	69f8      	ldr	r0, [r7, #28]
 80100ee:	f7ff f881 	bl	800f1f4 <tcp_oos_insert_segment>
                  }
                  break;
 80100f2:	e0e2      	b.n	80102ba <tcp_receive+0xebe>
 80100f4:	2004f1c4 	.word	0x2004f1c4
 80100f8:	2004f1c1 	.word	0x2004f1c1
 80100fc:	2004f194 	.word	0x2004f194
 8010100:	2004f1b4 	.word	0x2004f1b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010106:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2b00      	cmp	r3, #0
 801010e:	f040 80c6 	bne.w	801029e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010112:	4b80      	ldr	r3, [pc, #512]	; (8010314 <tcp_receive+0xf18>)
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801011e:	2b00      	cmp	r3, #0
 8010120:	f340 80bd 	ble.w	801029e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	899b      	ldrh	r3, [r3, #12]
 801012a:	b29b      	uxth	r3, r3
 801012c:	4618      	mov	r0, r3
 801012e:	f7fa fc87 	bl	800aa40 <lwip_htons>
 8010132:	4603      	mov	r3, r0
 8010134:	b2db      	uxtb	r3, r3
 8010136:	f003 0301 	and.w	r3, r3, #1
 801013a:	2b00      	cmp	r3, #0
 801013c:	f040 80bf 	bne.w	80102be <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010140:	4875      	ldr	r0, [pc, #468]	; (8010318 <tcp_receive+0xf1c>)
 8010142:	f7fd fb07 	bl	800d754 <tcp_seg_copy>
 8010146:	4602      	mov	r2, r0
 8010148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801014c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	f000 80b6 	beq.w	80102c2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801015e:	8912      	ldrh	r2, [r2, #8]
 8010160:	441a      	add	r2, r3
 8010162:	4b6c      	ldr	r3, [pc, #432]	; (8010314 <tcp_receive+0xf18>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	2b00      	cmp	r3, #0
 801016a:	dd12      	ble.n	8010192 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801016c:	4b69      	ldr	r3, [pc, #420]	; (8010314 <tcp_receive+0xf18>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	b29a      	uxth	r2, r3
 8010172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	685b      	ldr	r3, [r3, #4]
 8010178:	b29b      	uxth	r3, r3
 801017a:	1ad3      	subs	r3, r2, r3
 801017c:	b29a      	uxth	r2, r3
 801017e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010180:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010184:	685a      	ldr	r2, [r3, #4]
 8010186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010188:	891b      	ldrh	r3, [r3, #8]
 801018a:	4619      	mov	r1, r3
 801018c:	4610      	mov	r0, r2
 801018e:	f7fb fec3 	bl	800bf18 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010192:	4b62      	ldr	r3, [pc, #392]	; (801031c <tcp_receive+0xf20>)
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	461a      	mov	r2, r3
 8010198:	4b5e      	ldr	r3, [pc, #376]	; (8010314 <tcp_receive+0xf18>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	441a      	add	r2, r3
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a2:	6879      	ldr	r1, [r7, #4]
 80101a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101a6:	440b      	add	r3, r1
 80101a8:	1ad3      	subs	r3, r2, r3
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f340 8089 	ble.w	80102c2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80101b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	68db      	ldr	r3, [r3, #12]
 80101b6:	899b      	ldrh	r3, [r3, #12]
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fa fc40 	bl	800aa40 <lwip_htons>
 80101c0:	4603      	mov	r3, r0
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	f003 0301 	and.w	r3, r3, #1
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d022      	beq.n	8010212 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80101cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	899b      	ldrh	r3, [r3, #12]
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	b21b      	sxth	r3, r3
 80101d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80101dc:	b21c      	sxth	r4, r3
 80101de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	899b      	ldrh	r3, [r3, #12]
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7fa fc29 	bl	800aa40 <lwip_htons>
 80101ee:	4603      	mov	r3, r0
 80101f0:	b2db      	uxtb	r3, r3
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fa fc20 	bl	800aa40 <lwip_htons>
 8010200:	4603      	mov	r3, r0
 8010202:	b21b      	sxth	r3, r3
 8010204:	4323      	orrs	r3, r4
 8010206:	b21a      	sxth	r2, r3
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	b292      	uxth	r2, r2
 8010210:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010216:	b29a      	uxth	r2, r3
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801021c:	4413      	add	r3, r2
 801021e:	b299      	uxth	r1, r3
 8010220:	4b3c      	ldr	r3, [pc, #240]	; (8010314 <tcp_receive+0xf18>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	b29a      	uxth	r2, r3
 8010226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	1a8a      	subs	r2, r1, r2
 801022c:	b292      	uxth	r2, r2
 801022e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	685a      	ldr	r2, [r3, #4]
 8010236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	891b      	ldrh	r3, [r3, #8]
 801023c:	4619      	mov	r1, r3
 801023e:	4610      	mov	r0, r2
 8010240:	f7fb fe6a 	bl	800bf18 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	891c      	ldrh	r4, [r3, #8]
 801024a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	899b      	ldrh	r3, [r3, #12]
 8010252:	b29b      	uxth	r3, r3
 8010254:	4618      	mov	r0, r3
 8010256:	f7fa fbf3 	bl	800aa40 <lwip_htons>
 801025a:	4603      	mov	r3, r0
 801025c:	b2db      	uxtb	r3, r3
 801025e:	f003 0303 	and.w	r3, r3, #3
 8010262:	2b00      	cmp	r3, #0
 8010264:	d001      	beq.n	801026a <tcp_receive+0xe6e>
 8010266:	2301      	movs	r3, #1
 8010268:	e000      	b.n	801026c <tcp_receive+0xe70>
 801026a:	2300      	movs	r3, #0
 801026c:	4423      	add	r3, r4
 801026e:	b29a      	uxth	r2, r3
 8010270:	4b2a      	ldr	r3, [pc, #168]	; (801031c <tcp_receive+0xf20>)
 8010272:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010274:	4b29      	ldr	r3, [pc, #164]	; (801031c <tcp_receive+0xf20>)
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	461a      	mov	r2, r3
 801027a:	4b26      	ldr	r3, [pc, #152]	; (8010314 <tcp_receive+0xf18>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	441a      	add	r2, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010284:	6879      	ldr	r1, [r7, #4]
 8010286:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010288:	440b      	add	r3, r1
 801028a:	429a      	cmp	r2, r3
 801028c:	d019      	beq.n	80102c2 <tcp_receive+0xec6>
 801028e:	4b24      	ldr	r3, [pc, #144]	; (8010320 <tcp_receive+0xf24>)
 8010290:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010294:	4923      	ldr	r1, [pc, #140]	; (8010324 <tcp_receive+0xf28>)
 8010296:	4824      	ldr	r0, [pc, #144]	; (8010328 <tcp_receive+0xf2c>)
 8010298:	f004 fc7e 	bl	8014b98 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801029c:	e011      	b.n	80102c2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801029e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80102a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f47f aea4 	bne.w	800fff4 <tcp_receive+0xbf8>
 80102ac:	e00a      	b.n	80102c4 <tcp_receive+0xec8>
                break;
 80102ae:	bf00      	nop
 80102b0:	e008      	b.n	80102c4 <tcp_receive+0xec8>
                break;
 80102b2:	bf00      	nop
 80102b4:	e006      	b.n	80102c4 <tcp_receive+0xec8>
                  break;
 80102b6:	bf00      	nop
 80102b8:	e004      	b.n	80102c4 <tcp_receive+0xec8>
                  break;
 80102ba:	bf00      	nop
 80102bc:	e002      	b.n	80102c4 <tcp_receive+0xec8>
                  break;
 80102be:	bf00      	nop
 80102c0:	e000      	b.n	80102c4 <tcp_receive+0xec8>
                break;
 80102c2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f001 fa33 	bl	8011730 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80102ca:	e003      	b.n	80102d4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f001 fa2f 	bl	8011730 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80102d2:	e01a      	b.n	801030a <tcp_receive+0xf0e>
 80102d4:	e019      	b.n	801030a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80102d6:	4b0f      	ldr	r3, [pc, #60]	; (8010314 <tcp_receive+0xf18>)
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102de:	1ad3      	subs	r3, r2, r3
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	db0a      	blt.n	80102fa <tcp_receive+0xefe>
 80102e4:	4b0b      	ldr	r3, [pc, #44]	; (8010314 <tcp_receive+0xf18>)
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ec:	6879      	ldr	r1, [r7, #4]
 80102ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80102f0:	440b      	add	r3, r1
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	3301      	adds	r3, #1
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	dd07      	ble.n	801030a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	8b5b      	ldrh	r3, [r3, #26]
 80102fe:	f043 0302 	orr.w	r3, r3, #2
 8010302:	b29a      	uxth	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010308:	e7ff      	b.n	801030a <tcp_receive+0xf0e>
 801030a:	bf00      	nop
 801030c:	3750      	adds	r7, #80	; 0x50
 801030e:	46bd      	mov	sp, r7
 8010310:	bdb0      	pop	{r4, r5, r7, pc}
 8010312:	bf00      	nop
 8010314:	2004f1b4 	.word	0x2004f1b4
 8010318:	2004f194 	.word	0x2004f194
 801031c:	2004f1be 	.word	0x2004f1be
 8010320:	08016d80 	.word	0x08016d80
 8010324:	08017128 	.word	0x08017128
 8010328:	08016dcc 	.word	0x08016dcc

0801032c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801032c:	b480      	push	{r7}
 801032e:	b083      	sub	sp, #12
 8010330:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010332:	4b15      	ldr	r3, [pc, #84]	; (8010388 <tcp_get_next_optbyte+0x5c>)
 8010334:	881b      	ldrh	r3, [r3, #0]
 8010336:	1c5a      	adds	r2, r3, #1
 8010338:	b291      	uxth	r1, r2
 801033a:	4a13      	ldr	r2, [pc, #76]	; (8010388 <tcp_get_next_optbyte+0x5c>)
 801033c:	8011      	strh	r1, [r2, #0]
 801033e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010340:	4b12      	ldr	r3, [pc, #72]	; (801038c <tcp_get_next_optbyte+0x60>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d004      	beq.n	8010352 <tcp_get_next_optbyte+0x26>
 8010348:	4b11      	ldr	r3, [pc, #68]	; (8010390 <tcp_get_next_optbyte+0x64>)
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	88fa      	ldrh	r2, [r7, #6]
 801034e:	429a      	cmp	r2, r3
 8010350:	d208      	bcs.n	8010364 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010352:	4b10      	ldr	r3, [pc, #64]	; (8010394 <tcp_get_next_optbyte+0x68>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	3314      	adds	r3, #20
 8010358:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801035a:	88fb      	ldrh	r3, [r7, #6]
 801035c:	683a      	ldr	r2, [r7, #0]
 801035e:	4413      	add	r3, r2
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	e00b      	b.n	801037c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010364:	88fb      	ldrh	r3, [r7, #6]
 8010366:	b2da      	uxtb	r2, r3
 8010368:	4b09      	ldr	r3, [pc, #36]	; (8010390 <tcp_get_next_optbyte+0x64>)
 801036a:	881b      	ldrh	r3, [r3, #0]
 801036c:	b2db      	uxtb	r3, r3
 801036e:	1ad3      	subs	r3, r2, r3
 8010370:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010372:	4b06      	ldr	r3, [pc, #24]	; (801038c <tcp_get_next_optbyte+0x60>)
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	797b      	ldrb	r3, [r7, #5]
 8010378:	4413      	add	r3, r2
 801037a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801037c:	4618      	mov	r0, r3
 801037e:	370c      	adds	r7, #12
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr
 8010388:	2004f1b0 	.word	0x2004f1b0
 801038c:	2004f1ac 	.word	0x2004f1ac
 8010390:	2004f1aa 	.word	0x2004f1aa
 8010394:	2004f1a4 	.word	0x2004f1a4

08010398 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d106      	bne.n	80103b4 <tcp_parseopt+0x1c>
 80103a6:	4b32      	ldr	r3, [pc, #200]	; (8010470 <tcp_parseopt+0xd8>)
 80103a8:	f240 727d 	movw	r2, #1917	; 0x77d
 80103ac:	4931      	ldr	r1, [pc, #196]	; (8010474 <tcp_parseopt+0xdc>)
 80103ae:	4832      	ldr	r0, [pc, #200]	; (8010478 <tcp_parseopt+0xe0>)
 80103b0:	f004 fbf2 	bl	8014b98 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80103b4:	4b31      	ldr	r3, [pc, #196]	; (801047c <tcp_parseopt+0xe4>)
 80103b6:	881b      	ldrh	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d055      	beq.n	8010468 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80103bc:	4b30      	ldr	r3, [pc, #192]	; (8010480 <tcp_parseopt+0xe8>)
 80103be:	2200      	movs	r2, #0
 80103c0:	801a      	strh	r2, [r3, #0]
 80103c2:	e045      	b.n	8010450 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80103c4:	f7ff ffb2 	bl	801032c <tcp_get_next_optbyte>
 80103c8:	4603      	mov	r3, r0
 80103ca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80103cc:	7bfb      	ldrb	r3, [r7, #15]
 80103ce:	2b02      	cmp	r3, #2
 80103d0:	d006      	beq.n	80103e0 <tcp_parseopt+0x48>
 80103d2:	2b02      	cmp	r3, #2
 80103d4:	dc2b      	bgt.n	801042e <tcp_parseopt+0x96>
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d041      	beq.n	801045e <tcp_parseopt+0xc6>
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d127      	bne.n	801042e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80103de:	e037      	b.n	8010450 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80103e0:	f7ff ffa4 	bl	801032c <tcp_get_next_optbyte>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2b04      	cmp	r3, #4
 80103e8:	d13b      	bne.n	8010462 <tcp_parseopt+0xca>
 80103ea:	4b25      	ldr	r3, [pc, #148]	; (8010480 <tcp_parseopt+0xe8>)
 80103ec:	881b      	ldrh	r3, [r3, #0]
 80103ee:	3301      	adds	r3, #1
 80103f0:	4a22      	ldr	r2, [pc, #136]	; (801047c <tcp_parseopt+0xe4>)
 80103f2:	8812      	ldrh	r2, [r2, #0]
 80103f4:	4293      	cmp	r3, r2
 80103f6:	da34      	bge.n	8010462 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80103f8:	f7ff ff98 	bl	801032c <tcp_get_next_optbyte>
 80103fc:	4603      	mov	r3, r0
 80103fe:	b29b      	uxth	r3, r3
 8010400:	021b      	lsls	r3, r3, #8
 8010402:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010404:	f7ff ff92 	bl	801032c <tcp_get_next_optbyte>
 8010408:	4603      	mov	r3, r0
 801040a:	b29a      	uxth	r2, r3
 801040c:	89bb      	ldrh	r3, [r7, #12]
 801040e:	4313      	orrs	r3, r2
 8010410:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010412:	89bb      	ldrh	r3, [r7, #12]
 8010414:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010418:	d804      	bhi.n	8010424 <tcp_parseopt+0x8c>
 801041a:	89bb      	ldrh	r3, [r7, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d001      	beq.n	8010424 <tcp_parseopt+0x8c>
 8010420:	89ba      	ldrh	r2, [r7, #12]
 8010422:	e001      	b.n	8010428 <tcp_parseopt+0x90>
 8010424:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801042c:	e010      	b.n	8010450 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801042e:	f7ff ff7d 	bl	801032c <tcp_get_next_optbyte>
 8010432:	4603      	mov	r3, r0
 8010434:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010436:	7afb      	ldrb	r3, [r7, #11]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d914      	bls.n	8010466 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801043c:	7afb      	ldrb	r3, [r7, #11]
 801043e:	b29a      	uxth	r2, r3
 8010440:	4b0f      	ldr	r3, [pc, #60]	; (8010480 <tcp_parseopt+0xe8>)
 8010442:	881b      	ldrh	r3, [r3, #0]
 8010444:	4413      	add	r3, r2
 8010446:	b29b      	uxth	r3, r3
 8010448:	3b02      	subs	r3, #2
 801044a:	b29a      	uxth	r2, r3
 801044c:	4b0c      	ldr	r3, [pc, #48]	; (8010480 <tcp_parseopt+0xe8>)
 801044e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010450:	4b0b      	ldr	r3, [pc, #44]	; (8010480 <tcp_parseopt+0xe8>)
 8010452:	881a      	ldrh	r2, [r3, #0]
 8010454:	4b09      	ldr	r3, [pc, #36]	; (801047c <tcp_parseopt+0xe4>)
 8010456:	881b      	ldrh	r3, [r3, #0]
 8010458:	429a      	cmp	r2, r3
 801045a:	d3b3      	bcc.n	80103c4 <tcp_parseopt+0x2c>
 801045c:	e004      	b.n	8010468 <tcp_parseopt+0xd0>
          return;
 801045e:	bf00      	nop
 8010460:	e002      	b.n	8010468 <tcp_parseopt+0xd0>
            return;
 8010462:	bf00      	nop
 8010464:	e000      	b.n	8010468 <tcp_parseopt+0xd0>
            return;
 8010466:	bf00      	nop
      }
    }
  }
}
 8010468:	3710      	adds	r7, #16
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	08016d80 	.word	0x08016d80
 8010474:	080171e4 	.word	0x080171e4
 8010478:	08016dcc 	.word	0x08016dcc
 801047c:	2004f1a8 	.word	0x2004f1a8
 8010480:	2004f1b0 	.word	0x2004f1b0

08010484 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010484:	b480      	push	{r7}
 8010486:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010488:	4b05      	ldr	r3, [pc, #20]	; (80104a0 <tcp_trigger_input_pcb_close+0x1c>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	f043 0310 	orr.w	r3, r3, #16
 8010490:	b2da      	uxtb	r2, r3
 8010492:	4b03      	ldr	r3, [pc, #12]	; (80104a0 <tcp_trigger_input_pcb_close+0x1c>)
 8010494:	701a      	strb	r2, [r3, #0]
}
 8010496:	bf00      	nop
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr
 80104a0:	2004f1c1 	.word	0x2004f1c1

080104a4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d00a      	beq.n	80104cc <tcp_route+0x28>
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	7a1b      	ldrb	r3, [r3, #8]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d006      	beq.n	80104cc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	7a1b      	ldrb	r3, [r3, #8]
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7fb fb20 	bl	800bb08 <netif_get_by_index>
 80104c8:	4603      	mov	r3, r0
 80104ca:	e003      	b.n	80104d4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f002 fead 	bl	801322c <ip4_route>
 80104d2:	4603      	mov	r3, r0
  }
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80104dc:	b590      	push	{r4, r7, lr}
 80104de:	b087      	sub	sp, #28
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	603b      	str	r3, [r7, #0]
 80104e8:	4613      	mov	r3, r2
 80104ea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d105      	bne.n	80104fe <tcp_create_segment+0x22>
 80104f2:	4b44      	ldr	r3, [pc, #272]	; (8010604 <tcp_create_segment+0x128>)
 80104f4:	22a3      	movs	r2, #163	; 0xa3
 80104f6:	4944      	ldr	r1, [pc, #272]	; (8010608 <tcp_create_segment+0x12c>)
 80104f8:	4844      	ldr	r0, [pc, #272]	; (801060c <tcp_create_segment+0x130>)
 80104fa:	f004 fb4d 	bl	8014b98 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d105      	bne.n	8010510 <tcp_create_segment+0x34>
 8010504:	4b3f      	ldr	r3, [pc, #252]	; (8010604 <tcp_create_segment+0x128>)
 8010506:	22a4      	movs	r2, #164	; 0xa4
 8010508:	4941      	ldr	r1, [pc, #260]	; (8010610 <tcp_create_segment+0x134>)
 801050a:	4840      	ldr	r0, [pc, #256]	; (801060c <tcp_create_segment+0x130>)
 801050c:	f004 fb44 	bl	8014b98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010510:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010514:	009b      	lsls	r3, r3, #2
 8010516:	b2db      	uxtb	r3, r3
 8010518:	f003 0304 	and.w	r3, r3, #4
 801051c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801051e:	2003      	movs	r0, #3
 8010520:	f7fa ff66 	bl	800b3f0 <memp_malloc>
 8010524:	6138      	str	r0, [r7, #16]
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d104      	bne.n	8010536 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801052c:	68b8      	ldr	r0, [r7, #8]
 801052e:	f7fb fe79 	bl	800c224 <pbuf_free>
    return NULL;
 8010532:	2300      	movs	r3, #0
 8010534:	e061      	b.n	80105fa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801053c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	2200      	movs	r2, #0
 8010542:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	68ba      	ldr	r2, [r7, #8]
 8010548:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	891a      	ldrh	r2, [r3, #8]
 801054e:	7dfb      	ldrb	r3, [r7, #23]
 8010550:	b29b      	uxth	r3, r3
 8010552:	429a      	cmp	r2, r3
 8010554:	d205      	bcs.n	8010562 <tcp_create_segment+0x86>
 8010556:	4b2b      	ldr	r3, [pc, #172]	; (8010604 <tcp_create_segment+0x128>)
 8010558:	22b0      	movs	r2, #176	; 0xb0
 801055a:	492e      	ldr	r1, [pc, #184]	; (8010614 <tcp_create_segment+0x138>)
 801055c:	482b      	ldr	r0, [pc, #172]	; (801060c <tcp_create_segment+0x130>)
 801055e:	f004 fb1b 	bl	8014b98 <iprintf>
  seg->len = p->tot_len - optlen;
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	891a      	ldrh	r2, [r3, #8]
 8010566:	7dfb      	ldrb	r3, [r7, #23]
 8010568:	b29b      	uxth	r3, r3
 801056a:	1ad3      	subs	r3, r2, r3
 801056c:	b29a      	uxth	r2, r3
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010572:	2114      	movs	r1, #20
 8010574:	68b8      	ldr	r0, [r7, #8]
 8010576:	f7fb fdbf 	bl	800c0f8 <pbuf_add_header>
 801057a:	4603      	mov	r3, r0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d004      	beq.n	801058a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010580:	6938      	ldr	r0, [r7, #16]
 8010582:	f7fd f8ce 	bl	800d722 <tcp_seg_free>
    return NULL;
 8010586:	2300      	movs	r3, #0
 8010588:	e037      	b.n	80105fa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	685a      	ldr	r2, [r3, #4]
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	8ada      	ldrh	r2, [r3, #22]
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	68dc      	ldr	r4, [r3, #12]
 801059c:	4610      	mov	r0, r2
 801059e:	f7fa fa4f 	bl	800aa40 <lwip_htons>
 80105a2:	4603      	mov	r3, r0
 80105a4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	8b1a      	ldrh	r2, [r3, #24]
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	68dc      	ldr	r4, [r3, #12]
 80105ae:	4610      	mov	r0, r2
 80105b0:	f7fa fa46 	bl	800aa40 <lwip_htons>
 80105b4:	4603      	mov	r3, r0
 80105b6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	68dc      	ldr	r4, [r3, #12]
 80105bc:	6838      	ldr	r0, [r7, #0]
 80105be:	f7fa fa54 	bl	800aa6a <lwip_htonl>
 80105c2:	4603      	mov	r3, r0
 80105c4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80105c6:	7dfb      	ldrb	r3, [r7, #23]
 80105c8:	089b      	lsrs	r3, r3, #2
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	3305      	adds	r3, #5
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	031b      	lsls	r3, r3, #12
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	79fb      	ldrb	r3, [r7, #7]
 80105d8:	b29b      	uxth	r3, r3
 80105da:	4313      	orrs	r3, r2
 80105dc:	b29a      	uxth	r2, r3
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	68dc      	ldr	r4, [r3, #12]
 80105e2:	4610      	mov	r0, r2
 80105e4:	f7fa fa2c 	bl	800aa40 <lwip_htons>
 80105e8:	4603      	mov	r3, r0
 80105ea:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	2200      	movs	r2, #0
 80105f2:	749a      	strb	r2, [r3, #18]
 80105f4:	2200      	movs	r2, #0
 80105f6:	74da      	strb	r2, [r3, #19]
  return seg;
 80105f8:	693b      	ldr	r3, [r7, #16]
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	371c      	adds	r7, #28
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd90      	pop	{r4, r7, pc}
 8010602:	bf00      	nop
 8010604:	08017200 	.word	0x08017200
 8010608:	08017234 	.word	0x08017234
 801060c:	08017254 	.word	0x08017254
 8010610:	0801727c 	.word	0x0801727c
 8010614:	080172a0 	.word	0x080172a0

08010618 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010618:	b590      	push	{r4, r7, lr}
 801061a:	b08b      	sub	sp, #44	; 0x2c
 801061c:	af02      	add	r7, sp, #8
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	460b      	mov	r3, r1
 8010622:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010624:	2300      	movs	r3, #0
 8010626:	61fb      	str	r3, [r7, #28]
 8010628:	2300      	movs	r3, #0
 801062a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801062c:	2300      	movs	r3, #0
 801062e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d106      	bne.n	8010644 <tcp_split_unsent_seg+0x2c>
 8010636:	4b95      	ldr	r3, [pc, #596]	; (801088c <tcp_split_unsent_seg+0x274>)
 8010638:	f240 324b 	movw	r2, #843	; 0x34b
 801063c:	4994      	ldr	r1, [pc, #592]	; (8010890 <tcp_split_unsent_seg+0x278>)
 801063e:	4895      	ldr	r0, [pc, #596]	; (8010894 <tcp_split_unsent_seg+0x27c>)
 8010640:	f004 faaa 	bl	8014b98 <iprintf>

  useg = pcb->unsent;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010648:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d102      	bne.n	8010656 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010654:	e116      	b.n	8010884 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010656:	887b      	ldrh	r3, [r7, #2]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d109      	bne.n	8010670 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801065c:	4b8b      	ldr	r3, [pc, #556]	; (801088c <tcp_split_unsent_seg+0x274>)
 801065e:	f240 3253 	movw	r2, #851	; 0x353
 8010662:	498d      	ldr	r1, [pc, #564]	; (8010898 <tcp_split_unsent_seg+0x280>)
 8010664:	488b      	ldr	r0, [pc, #556]	; (8010894 <tcp_split_unsent_seg+0x27c>)
 8010666:	f004 fa97 	bl	8014b98 <iprintf>
    return ERR_VAL;
 801066a:	f06f 0305 	mvn.w	r3, #5
 801066e:	e109      	b.n	8010884 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	891b      	ldrh	r3, [r3, #8]
 8010674:	887a      	ldrh	r2, [r7, #2]
 8010676:	429a      	cmp	r2, r3
 8010678:	d301      	bcc.n	801067e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801067a:	2300      	movs	r3, #0
 801067c:	e102      	b.n	8010884 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010682:	887a      	ldrh	r2, [r7, #2]
 8010684:	429a      	cmp	r2, r3
 8010686:	d906      	bls.n	8010696 <tcp_split_unsent_seg+0x7e>
 8010688:	4b80      	ldr	r3, [pc, #512]	; (801088c <tcp_split_unsent_seg+0x274>)
 801068a:	f240 325b 	movw	r2, #859	; 0x35b
 801068e:	4983      	ldr	r1, [pc, #524]	; (801089c <tcp_split_unsent_seg+0x284>)
 8010690:	4880      	ldr	r0, [pc, #512]	; (8010894 <tcp_split_unsent_seg+0x27c>)
 8010692:	f004 fa81 	bl	8014b98 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	891b      	ldrh	r3, [r3, #8]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d106      	bne.n	80106ac <tcp_split_unsent_seg+0x94>
 801069e:	4b7b      	ldr	r3, [pc, #492]	; (801088c <tcp_split_unsent_seg+0x274>)
 80106a0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80106a4:	497e      	ldr	r1, [pc, #504]	; (80108a0 <tcp_split_unsent_seg+0x288>)
 80106a6:	487b      	ldr	r0, [pc, #492]	; (8010894 <tcp_split_unsent_seg+0x27c>)
 80106a8:	f004 fa76 	bl	8014b98 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	7a9b      	ldrb	r3, [r3, #10]
 80106b0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80106b2:	7bfb      	ldrb	r3, [r7, #15]
 80106b4:	009b      	lsls	r3, r3, #2
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	f003 0304 	and.w	r3, r3, #4
 80106bc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	891a      	ldrh	r2, [r3, #8]
 80106c2:	887b      	ldrh	r3, [r7, #2]
 80106c4:	1ad3      	subs	r3, r2, r3
 80106c6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80106c8:	7bbb      	ldrb	r3, [r7, #14]
 80106ca:	b29a      	uxth	r2, r3
 80106cc:	89bb      	ldrh	r3, [r7, #12]
 80106ce:	4413      	add	r3, r2
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80106d6:	4619      	mov	r1, r3
 80106d8:	2036      	movs	r0, #54	; 0x36
 80106da:	f7fb fabf 	bl	800bc5c <pbuf_alloc>
 80106de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	f000 80b7 	beq.w	8010856 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	891a      	ldrh	r2, [r3, #8]
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	891b      	ldrh	r3, [r3, #8]
 80106f2:	1ad3      	subs	r3, r2, r3
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	887b      	ldrh	r3, [r7, #2]
 80106f8:	4413      	add	r3, r2
 80106fa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	6858      	ldr	r0, [r3, #4]
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	685a      	ldr	r2, [r3, #4]
 8010704:	7bbb      	ldrb	r3, [r7, #14]
 8010706:	18d1      	adds	r1, r2, r3
 8010708:	897b      	ldrh	r3, [r7, #10]
 801070a:	89ba      	ldrh	r2, [r7, #12]
 801070c:	f7fb ff80 	bl	800c610 <pbuf_copy_partial>
 8010710:	4603      	mov	r3, r0
 8010712:	461a      	mov	r2, r3
 8010714:	89bb      	ldrh	r3, [r7, #12]
 8010716:	4293      	cmp	r3, r2
 8010718:	f040 809f 	bne.w	801085a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	899b      	ldrh	r3, [r3, #12]
 8010722:	b29b      	uxth	r3, r3
 8010724:	4618      	mov	r0, r3
 8010726:	f7fa f98b 	bl	800aa40 <lwip_htons>
 801072a:	4603      	mov	r3, r0
 801072c:	b2db      	uxtb	r3, r3
 801072e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010732:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010734:	2300      	movs	r3, #0
 8010736:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010738:	7efb      	ldrb	r3, [r7, #27]
 801073a:	f003 0308 	and.w	r3, r3, #8
 801073e:	2b00      	cmp	r3, #0
 8010740:	d007      	beq.n	8010752 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010742:	7efb      	ldrb	r3, [r7, #27]
 8010744:	f023 0308 	bic.w	r3, r3, #8
 8010748:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801074a:	7ebb      	ldrb	r3, [r7, #26]
 801074c:	f043 0308 	orr.w	r3, r3, #8
 8010750:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010752:	7efb      	ldrb	r3, [r7, #27]
 8010754:	f003 0301 	and.w	r3, r3, #1
 8010758:	2b00      	cmp	r3, #0
 801075a:	d007      	beq.n	801076c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801075c:	7efb      	ldrb	r3, [r7, #27]
 801075e:	f023 0301 	bic.w	r3, r3, #1
 8010762:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010764:	7ebb      	ldrb	r3, [r7, #26]
 8010766:	f043 0301 	orr.w	r3, r3, #1
 801076a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	4618      	mov	r0, r3
 8010774:	f7fa f979 	bl	800aa6a <lwip_htonl>
 8010778:	4602      	mov	r2, r0
 801077a:	887b      	ldrh	r3, [r7, #2]
 801077c:	18d1      	adds	r1, r2, r3
 801077e:	7eba      	ldrb	r2, [r7, #26]
 8010780:	7bfb      	ldrb	r3, [r7, #15]
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	460b      	mov	r3, r1
 8010786:	6939      	ldr	r1, [r7, #16]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7ff fea7 	bl	80104dc <tcp_create_segment>
 801078e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d063      	beq.n	801085e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	4618      	mov	r0, r3
 801079c:	f7fb fdd0 	bl	800c340 <pbuf_clen>
 80107a0:	4603      	mov	r3, r0
 80107a2:	461a      	mov	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107aa:	1a9b      	subs	r3, r3, r2
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	6858      	ldr	r0, [r3, #4]
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	891a      	ldrh	r2, [r3, #8]
 80107be:	89bb      	ldrh	r3, [r7, #12]
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	4619      	mov	r1, r3
 80107c6:	f7fb fba7 	bl	800bf18 <pbuf_realloc>
  useg->len -= remainder;
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	891a      	ldrh	r2, [r3, #8]
 80107ce:	89bb      	ldrh	r3, [r7, #12]
 80107d0:	1ad3      	subs	r3, r2, r3
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	899b      	ldrh	r3, [r3, #12]
 80107de:	b29c      	uxth	r4, r3
 80107e0:	7efb      	ldrb	r3, [r7, #27]
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fa f92b 	bl	800aa40 <lwip_htons>
 80107ea:	4603      	mov	r3, r0
 80107ec:	461a      	mov	r2, r3
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	4322      	orrs	r2, r4
 80107f4:	b292      	uxth	r2, r2
 80107f6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7fb fd9f 	bl	800c340 <pbuf_clen>
 8010802:	4603      	mov	r3, r0
 8010804:	461a      	mov	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801080c:	4413      	add	r3, r2
 801080e:	b29a      	uxth	r2, r3
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	4618      	mov	r0, r3
 801081c:	f7fb fd90 	bl	800c340 <pbuf_clen>
 8010820:	4603      	mov	r3, r0
 8010822:	461a      	mov	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801082a:	4413      	add	r3, r2
 801082c:	b29a      	uxth	r2, r3
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	69fa      	ldr	r2, [r7, #28]
 8010840:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d103      	bne.n	8010852 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2200      	movs	r2, #0
 801084e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010852:	2300      	movs	r3, #0
 8010854:	e016      	b.n	8010884 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010856:	bf00      	nop
 8010858:	e002      	b.n	8010860 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801085a:	bf00      	nop
 801085c:	e000      	b.n	8010860 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801085e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d006      	beq.n	8010874 <tcp_split_unsent_seg+0x25c>
 8010866:	4b09      	ldr	r3, [pc, #36]	; (801088c <tcp_split_unsent_seg+0x274>)
 8010868:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801086c:	490d      	ldr	r1, [pc, #52]	; (80108a4 <tcp_split_unsent_seg+0x28c>)
 801086e:	4809      	ldr	r0, [pc, #36]	; (8010894 <tcp_split_unsent_seg+0x27c>)
 8010870:	f004 f992 	bl	8014b98 <iprintf>
  if (p != NULL) {
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d002      	beq.n	8010880 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801087a:	6938      	ldr	r0, [r7, #16]
 801087c:	f7fb fcd2 	bl	800c224 <pbuf_free>
  }

  return ERR_MEM;
 8010880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010884:	4618      	mov	r0, r3
 8010886:	3724      	adds	r7, #36	; 0x24
 8010888:	46bd      	mov	sp, r7
 801088a:	bd90      	pop	{r4, r7, pc}
 801088c:	08017200 	.word	0x08017200
 8010890:	08017594 	.word	0x08017594
 8010894:	08017254 	.word	0x08017254
 8010898:	080175b8 	.word	0x080175b8
 801089c:	080175dc 	.word	0x080175dc
 80108a0:	080175ec 	.word	0x080175ec
 80108a4:	080175fc 	.word	0x080175fc

080108a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80108a8:	b590      	push	{r4, r7, lr}
 80108aa:	b085      	sub	sp, #20
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d106      	bne.n	80108c4 <tcp_send_fin+0x1c>
 80108b6:	4b21      	ldr	r3, [pc, #132]	; (801093c <tcp_send_fin+0x94>)
 80108b8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80108bc:	4920      	ldr	r1, [pc, #128]	; (8010940 <tcp_send_fin+0x98>)
 80108be:	4821      	ldr	r0, [pc, #132]	; (8010944 <tcp_send_fin+0x9c>)
 80108c0:	f004 f96a 	bl	8014b98 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d02e      	beq.n	801092a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108d0:	60fb      	str	r3, [r7, #12]
 80108d2:	e002      	b.n	80108da <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1f8      	bne.n	80108d4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	899b      	ldrh	r3, [r3, #12]
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fa f8a8 	bl	800aa40 <lwip_htons>
 80108f0:	4603      	mov	r3, r0
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	f003 0307 	and.w	r3, r3, #7
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d116      	bne.n	801092a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	68db      	ldr	r3, [r3, #12]
 8010900:	899b      	ldrh	r3, [r3, #12]
 8010902:	b29c      	uxth	r4, r3
 8010904:	2001      	movs	r0, #1
 8010906:	f7fa f89b 	bl	800aa40 <lwip_htons>
 801090a:	4603      	mov	r3, r0
 801090c:	461a      	mov	r2, r3
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	4322      	orrs	r2, r4
 8010914:	b292      	uxth	r2, r2
 8010916:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	8b5b      	ldrh	r3, [r3, #26]
 801091c:	f043 0320 	orr.w	r3, r3, #32
 8010920:	b29a      	uxth	r2, r3
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010926:	2300      	movs	r3, #0
 8010928:	e004      	b.n	8010934 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801092a:	2101      	movs	r1, #1
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f000 f80b 	bl	8010948 <tcp_enqueue_flags>
 8010932:	4603      	mov	r3, r0
}
 8010934:	4618      	mov	r0, r3
 8010936:	3714      	adds	r7, #20
 8010938:	46bd      	mov	sp, r7
 801093a:	bd90      	pop	{r4, r7, pc}
 801093c:	08017200 	.word	0x08017200
 8010940:	08017608 	.word	0x08017608
 8010944:	08017254 	.word	0x08017254

08010948 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b08a      	sub	sp, #40	; 0x28
 801094c:	af02      	add	r7, sp, #8
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	460b      	mov	r3, r1
 8010952:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010954:	2300      	movs	r3, #0
 8010956:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010958:	2300      	movs	r3, #0
 801095a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801095c:	78fb      	ldrb	r3, [r7, #3]
 801095e:	f003 0303 	and.w	r3, r3, #3
 8010962:	2b00      	cmp	r3, #0
 8010964:	d106      	bne.n	8010974 <tcp_enqueue_flags+0x2c>
 8010966:	4b67      	ldr	r3, [pc, #412]	; (8010b04 <tcp_enqueue_flags+0x1bc>)
 8010968:	f240 4211 	movw	r2, #1041	; 0x411
 801096c:	4966      	ldr	r1, [pc, #408]	; (8010b08 <tcp_enqueue_flags+0x1c0>)
 801096e:	4867      	ldr	r0, [pc, #412]	; (8010b0c <tcp_enqueue_flags+0x1c4>)
 8010970:	f004 f912 	bl	8014b98 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d106      	bne.n	8010988 <tcp_enqueue_flags+0x40>
 801097a:	4b62      	ldr	r3, [pc, #392]	; (8010b04 <tcp_enqueue_flags+0x1bc>)
 801097c:	f240 4213 	movw	r2, #1043	; 0x413
 8010980:	4963      	ldr	r1, [pc, #396]	; (8010b10 <tcp_enqueue_flags+0x1c8>)
 8010982:	4862      	ldr	r0, [pc, #392]	; (8010b0c <tcp_enqueue_flags+0x1c4>)
 8010984:	f004 f908 	bl	8014b98 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010988:	78fb      	ldrb	r3, [r7, #3]
 801098a:	f003 0302 	and.w	r3, r3, #2
 801098e:	2b00      	cmp	r3, #0
 8010990:	d001      	beq.n	8010996 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010992:	2301      	movs	r3, #1
 8010994:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010996:	7ffb      	ldrb	r3, [r7, #31]
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	b2db      	uxtb	r3, r3
 801099c:	f003 0304 	and.w	r3, r3, #4
 80109a0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80109a2:	7dfb      	ldrb	r3, [r7, #23]
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109aa:	4619      	mov	r1, r3
 80109ac:	2036      	movs	r0, #54	; 0x36
 80109ae:	f7fb f955 	bl	800bc5c <pbuf_alloc>
 80109b2:	6138      	str	r0, [r7, #16]
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d109      	bne.n	80109ce <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	8b5b      	ldrh	r3, [r3, #26]
 80109be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80109c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109cc:	e095      	b.n	8010afa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	895a      	ldrh	r2, [r3, #10]
 80109d2:	7dfb      	ldrb	r3, [r7, #23]
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d206      	bcs.n	80109e8 <tcp_enqueue_flags+0xa0>
 80109da:	4b4a      	ldr	r3, [pc, #296]	; (8010b04 <tcp_enqueue_flags+0x1bc>)
 80109dc:	f240 4239 	movw	r2, #1081	; 0x439
 80109e0:	494c      	ldr	r1, [pc, #304]	; (8010b14 <tcp_enqueue_flags+0x1cc>)
 80109e2:	484a      	ldr	r0, [pc, #296]	; (8010b0c <tcp_enqueue_flags+0x1c4>)
 80109e4:	f004 f8d8 	bl	8014b98 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80109ec:	78fa      	ldrb	r2, [r7, #3]
 80109ee:	7ffb      	ldrb	r3, [r7, #31]
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	460b      	mov	r3, r1
 80109f4:	6939      	ldr	r1, [r7, #16]
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7ff fd70 	bl	80104dc <tcp_create_segment>
 80109fc:	60f8      	str	r0, [r7, #12]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d109      	bne.n	8010a18 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	8b5b      	ldrh	r3, [r3, #26]
 8010a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a16:	e070      	b.n	8010afa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	68db      	ldr	r3, [r3, #12]
 8010a1c:	f003 0303 	and.w	r3, r3, #3
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d006      	beq.n	8010a32 <tcp_enqueue_flags+0xea>
 8010a24:	4b37      	ldr	r3, [pc, #220]	; (8010b04 <tcp_enqueue_flags+0x1bc>)
 8010a26:	f240 4242 	movw	r2, #1090	; 0x442
 8010a2a:	493b      	ldr	r1, [pc, #236]	; (8010b18 <tcp_enqueue_flags+0x1d0>)
 8010a2c:	4837      	ldr	r0, [pc, #220]	; (8010b0c <tcp_enqueue_flags+0x1c4>)
 8010a2e:	f004 f8b3 	bl	8014b98 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	891b      	ldrh	r3, [r3, #8]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d006      	beq.n	8010a48 <tcp_enqueue_flags+0x100>
 8010a3a:	4b32      	ldr	r3, [pc, #200]	; (8010b04 <tcp_enqueue_flags+0x1bc>)
 8010a3c:	f240 4243 	movw	r2, #1091	; 0x443
 8010a40:	4936      	ldr	r1, [pc, #216]	; (8010b1c <tcp_enqueue_flags+0x1d4>)
 8010a42:	4832      	ldr	r0, [pc, #200]	; (8010b0c <tcp_enqueue_flags+0x1c4>)
 8010a44:	f004 f8a8 	bl	8014b98 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d103      	bne.n	8010a58 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	66da      	str	r2, [r3, #108]	; 0x6c
 8010a56:	e00d      	b.n	8010a74 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a5c:	61bb      	str	r3, [r7, #24]
 8010a5e:	e002      	b.n	8010a66 <tcp_enqueue_flags+0x11e>
 8010a60:	69bb      	ldr	r3, [r7, #24]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	61bb      	str	r3, [r7, #24]
 8010a66:	69bb      	ldr	r3, [r7, #24]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d1f8      	bne.n	8010a60 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010a6e:	69bb      	ldr	r3, [r7, #24]
 8010a70:	68fa      	ldr	r2, [r7, #12]
 8010a72:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2200      	movs	r2, #0
 8010a78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010a7c:	78fb      	ldrb	r3, [r7, #3]
 8010a7e:	f003 0302 	and.w	r3, r3, #2
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d104      	bne.n	8010a90 <tcp_enqueue_flags+0x148>
 8010a86:	78fb      	ldrb	r3, [r7, #3]
 8010a88:	f003 0301 	and.w	r3, r3, #1
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d004      	beq.n	8010a9a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a94:	1c5a      	adds	r2, r3, #1
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010a9a:	78fb      	ldrb	r3, [r7, #3]
 8010a9c:	f003 0301 	and.w	r3, r3, #1
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d006      	beq.n	8010ab2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	8b5b      	ldrh	r3, [r3, #26]
 8010aa8:	f043 0320 	orr.w	r3, r3, #32
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7fb fc42 	bl	800c340 <pbuf_clen>
 8010abc:	4603      	mov	r3, r0
 8010abe:	461a      	mov	r2, r3
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ac6:	4413      	add	r3, r2
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d00e      	beq.n	8010af8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d10a      	bne.n	8010af8 <tcp_enqueue_flags+0x1b0>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d106      	bne.n	8010af8 <tcp_enqueue_flags+0x1b0>
 8010aea:	4b06      	ldr	r3, [pc, #24]	; (8010b04 <tcp_enqueue_flags+0x1bc>)
 8010aec:	f240 4265 	movw	r2, #1125	; 0x465
 8010af0:	490b      	ldr	r1, [pc, #44]	; (8010b20 <tcp_enqueue_flags+0x1d8>)
 8010af2:	4806      	ldr	r0, [pc, #24]	; (8010b0c <tcp_enqueue_flags+0x1c4>)
 8010af4:	f004 f850 	bl	8014b98 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010af8:	2300      	movs	r3, #0
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3720      	adds	r7, #32
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	08017200 	.word	0x08017200
 8010b08:	08017624 	.word	0x08017624
 8010b0c:	08017254 	.word	0x08017254
 8010b10:	0801767c 	.word	0x0801767c
 8010b14:	0801769c 	.word	0x0801769c
 8010b18:	080176d8 	.word	0x080176d8
 8010b1c:	080176f0 	.word	0x080176f0
 8010b20:	0801771c 	.word	0x0801771c

08010b24 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010b24:	b5b0      	push	{r4, r5, r7, lr}
 8010b26:	b08a      	sub	sp, #40	; 0x28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d106      	bne.n	8010b40 <tcp_output+0x1c>
 8010b32:	4b8a      	ldr	r3, [pc, #552]	; (8010d5c <tcp_output+0x238>)
 8010b34:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010b38:	4989      	ldr	r1, [pc, #548]	; (8010d60 <tcp_output+0x23c>)
 8010b3a:	488a      	ldr	r0, [pc, #552]	; (8010d64 <tcp_output+0x240>)
 8010b3c:	f004 f82c 	bl	8014b98 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	7d1b      	ldrb	r3, [r3, #20]
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d106      	bne.n	8010b56 <tcp_output+0x32>
 8010b48:	4b84      	ldr	r3, [pc, #528]	; (8010d5c <tcp_output+0x238>)
 8010b4a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010b4e:	4986      	ldr	r1, [pc, #536]	; (8010d68 <tcp_output+0x244>)
 8010b50:	4884      	ldr	r0, [pc, #528]	; (8010d64 <tcp_output+0x240>)
 8010b52:	f004 f821 	bl	8014b98 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010b56:	4b85      	ldr	r3, [pc, #532]	; (8010d6c <tcp_output+0x248>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d101      	bne.n	8010b64 <tcp_output+0x40>
    return ERR_OK;
 8010b60:	2300      	movs	r3, #0
 8010b62:	e1ce      	b.n	8010f02 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b70:	4293      	cmp	r3, r2
 8010b72:	bf28      	it	cs
 8010b74:	4613      	movcs	r3, r2
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d10b      	bne.n	8010b9e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	8b5b      	ldrh	r3, [r3, #26]
 8010b8a:	f003 0302 	and.w	r3, r3, #2
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f000 81aa 	beq.w	8010ee8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 fdcb 	bl	8011730 <tcp_send_empty_ack>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	e1b1      	b.n	8010f02 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010b9e:	6879      	ldr	r1, [r7, #4]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	3304      	adds	r3, #4
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f7ff fc7c 	bl	80104a4 <tcp_route>
 8010bac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d102      	bne.n	8010bba <tcp_output+0x96>
    return ERR_RTE;
 8010bb4:	f06f 0303 	mvn.w	r3, #3
 8010bb8:	e1a3      	b.n	8010f02 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d003      	beq.n	8010bc8 <tcp_output+0xa4>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d111      	bne.n	8010bec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d002      	beq.n	8010bd4 <tcp_output+0xb0>
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	3304      	adds	r3, #4
 8010bd2:	e000      	b.n	8010bd6 <tcp_output+0xb2>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d102      	bne.n	8010be4 <tcp_output+0xc0>
      return ERR_RTE;
 8010bde:	f06f 0303 	mvn.w	r3, #3
 8010be2:	e18e      	b.n	8010f02 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7f9 ff39 	bl	800aa6a <lwip_htonl>
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bfe:	1ad3      	subs	r3, r2, r3
 8010c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c02:	8912      	ldrh	r2, [r2, #8]
 8010c04:	4413      	add	r3, r2
 8010c06:	69ba      	ldr	r2, [r7, #24]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d227      	bcs.n	8010c5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c12:	461a      	mov	r2, r3
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	4293      	cmp	r3, r2
 8010c18:	d114      	bne.n	8010c44 <tcp_output+0x120>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d110      	bne.n	8010c44 <tcp_output+0x120>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d10b      	bne.n	8010c44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2201      	movs	r2, #1
 8010c38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	8b5b      	ldrh	r3, [r3, #26]
 8010c48:	f003 0302 	and.w	r3, r3, #2
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	f000 814d 	beq.w	8010eec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f000 fd6c 	bl	8011730 <tcp_send_empty_ack>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	e152      	b.n	8010f02 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010c6a:	6a3b      	ldr	r3, [r7, #32]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	f000 811c 	beq.w	8010eaa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010c72:	e002      	b.n	8010c7a <tcp_output+0x156>
 8010c74:	6a3b      	ldr	r3, [r7, #32]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	623b      	str	r3, [r7, #32]
 8010c7a:	6a3b      	ldr	r3, [r7, #32]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d1f8      	bne.n	8010c74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010c82:	e112      	b.n	8010eaa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c86:	68db      	ldr	r3, [r3, #12]
 8010c88:	899b      	ldrh	r3, [r3, #12]
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f9 fed7 	bl	800aa40 <lwip_htons>
 8010c92:	4603      	mov	r3, r0
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	f003 0304 	and.w	r3, r3, #4
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d006      	beq.n	8010cac <tcp_output+0x188>
 8010c9e:	4b2f      	ldr	r3, [pc, #188]	; (8010d5c <tcp_output+0x238>)
 8010ca0:	f240 5236 	movw	r2, #1334	; 0x536
 8010ca4:	4932      	ldr	r1, [pc, #200]	; (8010d70 <tcp_output+0x24c>)
 8010ca6:	482f      	ldr	r0, [pc, #188]	; (8010d64 <tcp_output+0x240>)
 8010ca8:	f003 ff76 	bl	8014b98 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d01f      	beq.n	8010cf4 <tcp_output+0x1d0>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	8b5b      	ldrh	r3, [r3, #26]
 8010cb8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d119      	bne.n	8010cf4 <tcp_output+0x1d0>
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00b      	beq.n	8010ce0 <tcp_output+0x1bc>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d110      	bne.n	8010cf4 <tcp_output+0x1d0>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cd6:	891a      	ldrh	r2, [r3, #8]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d209      	bcs.n	8010cf4 <tcp_output+0x1d0>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d004      	beq.n	8010cf4 <tcp_output+0x1d0>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cf0:	2b08      	cmp	r3, #8
 8010cf2:	d901      	bls.n	8010cf8 <tcp_output+0x1d4>
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	e000      	b.n	8010cfa <tcp_output+0x1d6>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d106      	bne.n	8010d0c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	8b5b      	ldrh	r3, [r3, #26]
 8010d02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	f000 80e4 	beq.w	8010ed4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	7d1b      	ldrb	r3, [r3, #20]
 8010d10:	2b02      	cmp	r3, #2
 8010d12:	d00d      	beq.n	8010d30 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d16:	68db      	ldr	r3, [r3, #12]
 8010d18:	899b      	ldrh	r3, [r3, #12]
 8010d1a:	b29c      	uxth	r4, r3
 8010d1c:	2010      	movs	r0, #16
 8010d1e:	f7f9 fe8f 	bl	800aa40 <lwip_htons>
 8010d22:	4603      	mov	r3, r0
 8010d24:	461a      	mov	r2, r3
 8010d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d28:	68db      	ldr	r3, [r3, #12]
 8010d2a:	4322      	orrs	r2, r4
 8010d2c:	b292      	uxth	r2, r2
 8010d2e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010d30:	697a      	ldr	r2, [r7, #20]
 8010d32:	6879      	ldr	r1, [r7, #4]
 8010d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d36:	f000 f909 	bl	8010f4c <tcp_output_segment>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d016      	beq.n	8010d74 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	8b5b      	ldrh	r3, [r3, #26]
 8010d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	835a      	strh	r2, [r3, #26]
      return err;
 8010d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d58:	e0d3      	b.n	8010f02 <tcp_output+0x3de>
 8010d5a:	bf00      	nop
 8010d5c:	08017200 	.word	0x08017200
 8010d60:	08017744 	.word	0x08017744
 8010d64:	08017254 	.word	0x08017254
 8010d68:	0801775c 	.word	0x0801775c
 8010d6c:	2004f1c8 	.word	0x2004f1c8
 8010d70:	08017784 	.word	0x08017784
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	7d1b      	ldrb	r3, [r3, #20]
 8010d80:	2b02      	cmp	r3, #2
 8010d82:	d006      	beq.n	8010d92 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	8b5b      	ldrh	r3, [r3, #26]
 8010d88:	f023 0303 	bic.w	r3, r3, #3
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7f9 fe66 	bl	800aa6a <lwip_htonl>
 8010d9e:	4604      	mov	r4, r0
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	891b      	ldrh	r3, [r3, #8]
 8010da4:	461d      	mov	r5, r3
 8010da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	899b      	ldrh	r3, [r3, #12]
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7f9 fe46 	bl	800aa40 <lwip_htons>
 8010db4:	4603      	mov	r3, r0
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	f003 0303 	and.w	r3, r3, #3
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d001      	beq.n	8010dc4 <tcp_output+0x2a0>
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	e000      	b.n	8010dc6 <tcp_output+0x2a2>
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	442b      	add	r3, r5
 8010dc8:	4423      	add	r3, r4
 8010dca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	da02      	bge.n	8010dde <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	68ba      	ldr	r2, [r7, #8]
 8010ddc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de0:	891b      	ldrh	r3, [r3, #8]
 8010de2:	461c      	mov	r4, r3
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	68db      	ldr	r3, [r3, #12]
 8010de8:	899b      	ldrh	r3, [r3, #12]
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7f9 fe27 	bl	800aa40 <lwip_htons>
 8010df2:	4603      	mov	r3, r0
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	f003 0303 	and.w	r3, r3, #3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d001      	beq.n	8010e02 <tcp_output+0x2de>
 8010dfe:	2301      	movs	r3, #1
 8010e00:	e000      	b.n	8010e04 <tcp_output+0x2e0>
 8010e02:	2300      	movs	r3, #0
 8010e04:	4423      	add	r3, r4
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d049      	beq.n	8010e9e <tcp_output+0x37a>
      seg->next = NULL;
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d105      	bne.n	8010e24 <tcp_output+0x300>
        pcb->unacked = seg;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e1c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e20:	623b      	str	r3, [r7, #32]
 8010e22:	e03f      	b.n	8010ea4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7f9 fe1d 	bl	800aa6a <lwip_htonl>
 8010e30:	4604      	mov	r4, r0
 8010e32:	6a3b      	ldr	r3, [r7, #32]
 8010e34:	68db      	ldr	r3, [r3, #12]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7f9 fe16 	bl	800aa6a <lwip_htonl>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	1ae3      	subs	r3, r4, r3
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	da24      	bge.n	8010e90 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	3370      	adds	r3, #112	; 0x70
 8010e4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010e4c:	e002      	b.n	8010e54 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d011      	beq.n	8010e80 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7f9 fe00 	bl	800aa6a <lwip_htonl>
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7f9 fdf9 	bl	800aa6a <lwip_htonl>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	dbe6      	blt.n	8010e4e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e86:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e8c:	601a      	str	r2, [r3, #0]
 8010e8e:	e009      	b.n	8010ea4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010e90:	6a3b      	ldr	r3, [r7, #32]
 8010e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e94:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010e96:	6a3b      	ldr	r3, [r7, #32]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	623b      	str	r3, [r7, #32]
 8010e9c:	e002      	b.n	8010ea4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010e9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ea0:	f7fc fc3f 	bl	800d722 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ea8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d012      	beq.n	8010ed6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7f9 fdd7 	bl	800aa6a <lwip_htonl>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ec2:	1ad3      	subs	r3, r2, r3
 8010ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ec6:	8912      	ldrh	r2, [r2, #8]
 8010ec8:	4413      	add	r3, r2
  while (seg != NULL &&
 8010eca:	69ba      	ldr	r2, [r7, #24]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	f4bf aed9 	bcs.w	8010c84 <tcp_output+0x160>
 8010ed2:	e000      	b.n	8010ed6 <tcp_output+0x3b2>
      break;
 8010ed4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d108      	bne.n	8010ef0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010ee6:	e004      	b.n	8010ef2 <tcp_output+0x3ce>
    goto output_done;
 8010ee8:	bf00      	nop
 8010eea:	e002      	b.n	8010ef2 <tcp_output+0x3ce>
    goto output_done;
 8010eec:	bf00      	nop
 8010eee:	e000      	b.n	8010ef2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010ef0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	8b5b      	ldrh	r3, [r3, #26]
 8010ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010f00:	2300      	movs	r3, #0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3728      	adds	r7, #40	; 0x28
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bdb0      	pop	{r4, r5, r7, pc}
 8010f0a:	bf00      	nop

08010f0c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d106      	bne.n	8010f28 <tcp_output_segment_busy+0x1c>
 8010f1a:	4b09      	ldr	r3, [pc, #36]	; (8010f40 <tcp_output_segment_busy+0x34>)
 8010f1c:	f240 529a 	movw	r2, #1434	; 0x59a
 8010f20:	4908      	ldr	r1, [pc, #32]	; (8010f44 <tcp_output_segment_busy+0x38>)
 8010f22:	4809      	ldr	r0, [pc, #36]	; (8010f48 <tcp_output_segment_busy+0x3c>)
 8010f24:	f003 fe38 	bl	8014b98 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	7b9b      	ldrb	r3, [r3, #14]
 8010f2e:	2b01      	cmp	r3, #1
 8010f30:	d001      	beq.n	8010f36 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010f32:	2301      	movs	r3, #1
 8010f34:	e000      	b.n	8010f38 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010f36:	2300      	movs	r3, #0
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3708      	adds	r7, #8
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	08017200 	.word	0x08017200
 8010f44:	0801779c 	.word	0x0801779c
 8010f48:	08017254 	.word	0x08017254

08010f4c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010f4c:	b5b0      	push	{r4, r5, r7, lr}
 8010f4e:	b08c      	sub	sp, #48	; 0x30
 8010f50:	af04      	add	r7, sp, #16
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d106      	bne.n	8010f6c <tcp_output_segment+0x20>
 8010f5e:	4b63      	ldr	r3, [pc, #396]	; (80110ec <tcp_output_segment+0x1a0>)
 8010f60:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010f64:	4962      	ldr	r1, [pc, #392]	; (80110f0 <tcp_output_segment+0x1a4>)
 8010f66:	4863      	ldr	r0, [pc, #396]	; (80110f4 <tcp_output_segment+0x1a8>)
 8010f68:	f003 fe16 	bl	8014b98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d106      	bne.n	8010f80 <tcp_output_segment+0x34>
 8010f72:	4b5e      	ldr	r3, [pc, #376]	; (80110ec <tcp_output_segment+0x1a0>)
 8010f74:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010f78:	495f      	ldr	r1, [pc, #380]	; (80110f8 <tcp_output_segment+0x1ac>)
 8010f7a:	485e      	ldr	r0, [pc, #376]	; (80110f4 <tcp_output_segment+0x1a8>)
 8010f7c:	f003 fe0c 	bl	8014b98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d106      	bne.n	8010f94 <tcp_output_segment+0x48>
 8010f86:	4b59      	ldr	r3, [pc, #356]	; (80110ec <tcp_output_segment+0x1a0>)
 8010f88:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010f8c:	495b      	ldr	r1, [pc, #364]	; (80110fc <tcp_output_segment+0x1b0>)
 8010f8e:	4859      	ldr	r0, [pc, #356]	; (80110f4 <tcp_output_segment+0x1a8>)
 8010f90:	f003 fe02 	bl	8014b98 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f7ff ffb9 	bl	8010f0c <tcp_output_segment_busy>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d001      	beq.n	8010fa4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	e09f      	b.n	80110e4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	68dc      	ldr	r4, [r3, #12]
 8010fac:	4610      	mov	r0, r2
 8010fae:	f7f9 fd5c 	bl	800aa6a <lwip_htonl>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	68dc      	ldr	r4, [r3, #12]
 8010fbe:	4610      	mov	r0, r2
 8010fc0:	f7f9 fd3e 	bl	800aa40 <lwip_htons>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010fd0:	441a      	add	r2, r3
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	3314      	adds	r3, #20
 8010fdc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	7a9b      	ldrb	r3, [r3, #10]
 8010fe2:	f003 0301 	and.w	r3, r3, #1
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d015      	beq.n	8011016 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	3304      	adds	r3, #4
 8010fee:	461a      	mov	r2, r3
 8010ff0:	6879      	ldr	r1, [r7, #4]
 8010ff2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010ff6:	f7fc fe8b 	bl	800dd10 <tcp_eff_send_mss_netif>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010ffe:	8b7b      	ldrh	r3, [r7, #26]
 8011000:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011004:	4618      	mov	r0, r3
 8011006:	f7f9 fd30 	bl	800aa6a <lwip_htonl>
 801100a:	4602      	mov	r2, r0
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011010:	69fb      	ldr	r3, [r7, #28]
 8011012:	3304      	adds	r3, #4
 8011014:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801101c:	2b00      	cmp	r3, #0
 801101e:	da02      	bge.n	8011026 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	2200      	movs	r2, #0
 8011024:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801102a:	2b00      	cmp	r3, #0
 801102c:	d10c      	bne.n	8011048 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801102e:	4b34      	ldr	r3, [pc, #208]	; (8011100 <tcp_output_segment+0x1b4>)
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	68db      	ldr	r3, [r3, #12]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	4618      	mov	r0, r3
 801103e:	f7f9 fd14 	bl	800aa6a <lwip_htonl>
 8011042:	4602      	mov	r2, r0
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	68da      	ldr	r2, [r3, #12]
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	8959      	ldrh	r1, [r3, #10]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	8b3a      	ldrh	r2, [r7, #24]
 8011062:	1a8a      	subs	r2, r1, r2
 8011064:	b292      	uxth	r2, r2
 8011066:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	8919      	ldrh	r1, [r3, #8]
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	8b3a      	ldrh	r2, [r7, #24]
 8011074:	1a8a      	subs	r2, r1, r2
 8011076:	b292      	uxth	r2, r2
 8011078:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	68fa      	ldr	r2, [r7, #12]
 8011080:	68d2      	ldr	r2, [r2, #12]
 8011082:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	2200      	movs	r2, #0
 801108a:	741a      	strb	r2, [r3, #16]
 801108c:	2200      	movs	r2, #0
 801108e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	f103 0214 	add.w	r2, r3, #20
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	7a9b      	ldrb	r3, [r3, #10]
 801109c:	009b      	lsls	r3, r3, #2
 801109e:	f003 0304 	and.w	r3, r3, #4
 80110a2:	4413      	add	r3, r2
 80110a4:	69fa      	ldr	r2, [r7, #28]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d006      	beq.n	80110b8 <tcp_output_segment+0x16c>
 80110aa:	4b10      	ldr	r3, [pc, #64]	; (80110ec <tcp_output_segment+0x1a0>)
 80110ac:	f240 621c 	movw	r2, #1564	; 0x61c
 80110b0:	4914      	ldr	r1, [pc, #80]	; (8011104 <tcp_output_segment+0x1b8>)
 80110b2:	4810      	ldr	r0, [pc, #64]	; (80110f4 <tcp_output_segment+0x1a8>)
 80110b4:	f003 fd70 	bl	8014b98 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	6858      	ldr	r0, [r3, #4]
 80110bc:	68b9      	ldr	r1, [r7, #8]
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	1d1c      	adds	r4, r3, #4
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	7add      	ldrb	r5, [r3, #11]
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	7a9b      	ldrb	r3, [r3, #10]
 80110ca:	687a      	ldr	r2, [r7, #4]
 80110cc:	9202      	str	r2, [sp, #8]
 80110ce:	2206      	movs	r2, #6
 80110d0:	9201      	str	r2, [sp, #4]
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	462b      	mov	r3, r5
 80110d6:	4622      	mov	r2, r4
 80110d8:	f002 fa66 	bl	80135a8 <ip4_output_if>
 80110dc:	4603      	mov	r3, r0
 80110de:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80110e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3720      	adds	r7, #32
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bdb0      	pop	{r4, r5, r7, pc}
 80110ec:	08017200 	.word	0x08017200
 80110f0:	080177c4 	.word	0x080177c4
 80110f4:	08017254 	.word	0x08017254
 80110f8:	080177e4 	.word	0x080177e4
 80110fc:	08017804 	.word	0x08017804
 8011100:	2004f17c 	.word	0x2004f17c
 8011104:	08017828 	.word	0x08017828

08011108 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011108:	b5b0      	push	{r4, r5, r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d106      	bne.n	8011124 <tcp_rexmit_rto_prepare+0x1c>
 8011116:	4b31      	ldr	r3, [pc, #196]	; (80111dc <tcp_rexmit_rto_prepare+0xd4>)
 8011118:	f240 6263 	movw	r2, #1635	; 0x663
 801111c:	4930      	ldr	r1, [pc, #192]	; (80111e0 <tcp_rexmit_rto_prepare+0xd8>)
 801111e:	4831      	ldr	r0, [pc, #196]	; (80111e4 <tcp_rexmit_rto_prepare+0xdc>)
 8011120:	f003 fd3a 	bl	8014b98 <iprintf>

  if (pcb->unacked == NULL) {
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011128:	2b00      	cmp	r3, #0
 801112a:	d102      	bne.n	8011132 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801112c:	f06f 0305 	mvn.w	r3, #5
 8011130:	e050      	b.n	80111d4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011136:	60fb      	str	r3, [r7, #12]
 8011138:	e00b      	b.n	8011152 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801113a:	68f8      	ldr	r0, [r7, #12]
 801113c:	f7ff fee6 	bl	8010f0c <tcp_output_segment_busy>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d002      	beq.n	801114c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011146:	f06f 0305 	mvn.w	r3, #5
 801114a:	e043      	b.n	80111d4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	60fb      	str	r3, [r7, #12]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d1ef      	bne.n	801113a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f7ff fed6 	bl	8010f0c <tcp_output_segment_busy>
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d002      	beq.n	801116c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011166:	f06f 0305 	mvn.w	r3, #5
 801116a:	e033      	b.n	80111d4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8b5b      	ldrh	r3, [r3, #26]
 8011186:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801118a:	b29a      	uxth	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	4618      	mov	r0, r3
 8011198:	f7f9 fc67 	bl	800aa6a <lwip_htonl>
 801119c:	4604      	mov	r4, r0
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	891b      	ldrh	r3, [r3, #8]
 80111a2:	461d      	mov	r5, r3
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	899b      	ldrh	r3, [r3, #12]
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7f9 fc47 	bl	800aa40 <lwip_htons>
 80111b2:	4603      	mov	r3, r0
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	f003 0303 	and.w	r3, r3, #3
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d001      	beq.n	80111c2 <tcp_rexmit_rto_prepare+0xba>
 80111be:	2301      	movs	r3, #1
 80111c0:	e000      	b.n	80111c4 <tcp_rexmit_rto_prepare+0xbc>
 80111c2:	2300      	movs	r3, #0
 80111c4:	442b      	add	r3, r5
 80111c6:	18e2      	adds	r2, r4, r3
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80111d2:	2300      	movs	r3, #0
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bdb0      	pop	{r4, r5, r7, pc}
 80111dc:	08017200 	.word	0x08017200
 80111e0:	0801783c 	.word	0x0801783c
 80111e4:	08017254 	.word	0x08017254

080111e8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d106      	bne.n	8011204 <tcp_rexmit_rto_commit+0x1c>
 80111f6:	4b0d      	ldr	r3, [pc, #52]	; (801122c <tcp_rexmit_rto_commit+0x44>)
 80111f8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80111fc:	490c      	ldr	r1, [pc, #48]	; (8011230 <tcp_rexmit_rto_commit+0x48>)
 80111fe:	480d      	ldr	r0, [pc, #52]	; (8011234 <tcp_rexmit_rto_commit+0x4c>)
 8011200:	f003 fcca 	bl	8014b98 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801120a:	2bff      	cmp	r3, #255	; 0xff
 801120c:	d007      	beq.n	801121e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011214:	3301      	adds	r3, #1
 8011216:	b2da      	uxtb	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7ff fc80 	bl	8010b24 <tcp_output>
}
 8011224:	bf00      	nop
 8011226:	3708      	adds	r7, #8
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	08017200 	.word	0x08017200
 8011230:	08017860 	.word	0x08017860
 8011234:	08017254 	.word	0x08017254

08011238 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d106      	bne.n	8011254 <tcp_rexmit_rto+0x1c>
 8011246:	4b0a      	ldr	r3, [pc, #40]	; (8011270 <tcp_rexmit_rto+0x38>)
 8011248:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801124c:	4909      	ldr	r1, [pc, #36]	; (8011274 <tcp_rexmit_rto+0x3c>)
 801124e:	480a      	ldr	r0, [pc, #40]	; (8011278 <tcp_rexmit_rto+0x40>)
 8011250:	f003 fca2 	bl	8014b98 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ff57 	bl	8011108 <tcp_rexmit_rto_prepare>
 801125a:	4603      	mov	r3, r0
 801125c:	2b00      	cmp	r3, #0
 801125e:	d102      	bne.n	8011266 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f7ff ffc1 	bl	80111e8 <tcp_rexmit_rto_commit>
  }
}
 8011266:	bf00      	nop
 8011268:	3708      	adds	r7, #8
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	08017200 	.word	0x08017200
 8011274:	08017884 	.word	0x08017884
 8011278:	08017254 	.word	0x08017254

0801127c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801127c:	b590      	push	{r4, r7, lr}
 801127e:	b085      	sub	sp, #20
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d106      	bne.n	8011298 <tcp_rexmit+0x1c>
 801128a:	4b2f      	ldr	r3, [pc, #188]	; (8011348 <tcp_rexmit+0xcc>)
 801128c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011290:	492e      	ldr	r1, [pc, #184]	; (801134c <tcp_rexmit+0xd0>)
 8011292:	482f      	ldr	r0, [pc, #188]	; (8011350 <tcp_rexmit+0xd4>)
 8011294:	f003 fc80 	bl	8014b98 <iprintf>

  if (pcb->unacked == NULL) {
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801129c:	2b00      	cmp	r3, #0
 801129e:	d102      	bne.n	80112a6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80112a0:	f06f 0305 	mvn.w	r3, #5
 80112a4:	e04c      	b.n	8011340 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112aa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80112ac:	68b8      	ldr	r0, [r7, #8]
 80112ae:	f7ff fe2d 	bl	8010f0c <tcp_output_segment_busy>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d002      	beq.n	80112be <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80112b8:	f06f 0305 	mvn.w	r3, #5
 80112bc:	e040      	b.n	8011340 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	336c      	adds	r3, #108	; 0x6c
 80112ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80112cc:	e002      	b.n	80112d4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d011      	beq.n	8011300 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7f9 fbc0 	bl	800aa6a <lwip_htonl>
 80112ea:	4604      	mov	r4, r0
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7f9 fbb9 	bl	800aa6a <lwip_htonl>
 80112f8:	4603      	mov	r3, r0
 80112fa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	dbe6      	blt.n	80112ce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	68ba      	ldr	r2, [r7, #8]
 801130c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d103      	bne.n	801131e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2200      	movs	r2, #0
 801131a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011324:	2bff      	cmp	r3, #255	; 0xff
 8011326:	d007      	beq.n	8011338 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801132e:	3301      	adds	r3, #1
 8011330:	b2da      	uxtb	r2, r3
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801133e:	2300      	movs	r3, #0
}
 8011340:	4618      	mov	r0, r3
 8011342:	3714      	adds	r7, #20
 8011344:	46bd      	mov	sp, r7
 8011346:	bd90      	pop	{r4, r7, pc}
 8011348:	08017200 	.word	0x08017200
 801134c:	080178a0 	.word	0x080178a0
 8011350:	08017254 	.word	0x08017254

08011354 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d106      	bne.n	8011370 <tcp_rexmit_fast+0x1c>
 8011362:	4b2a      	ldr	r3, [pc, #168]	; (801140c <tcp_rexmit_fast+0xb8>)
 8011364:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011368:	4929      	ldr	r1, [pc, #164]	; (8011410 <tcp_rexmit_fast+0xbc>)
 801136a:	482a      	ldr	r0, [pc, #168]	; (8011414 <tcp_rexmit_fast+0xc0>)
 801136c:	f003 fc14 	bl	8014b98 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011374:	2b00      	cmp	r3, #0
 8011376:	d045      	beq.n	8011404 <tcp_rexmit_fast+0xb0>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	8b5b      	ldrh	r3, [r3, #26]
 801137c:	f003 0304 	and.w	r3, r3, #4
 8011380:	2b00      	cmp	r3, #0
 8011382:	d13f      	bne.n	8011404 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7ff ff79 	bl	801127c <tcp_rexmit>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d139      	bne.n	8011404 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801139c:	4293      	cmp	r3, r2
 801139e:	bf28      	it	cs
 80113a0:	4613      	movcs	r3, r2
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	da00      	bge.n	80113aa <tcp_rexmit_fast+0x56>
 80113a8:	3301      	adds	r3, #1
 80113aa:	105b      	asrs	r3, r3, #1
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80113ba:	461a      	mov	r2, r3
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113c0:	005b      	lsls	r3, r3, #1
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d206      	bcs.n	80113d4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113ca:	005b      	lsls	r3, r3, #1
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113de:	4619      	mov	r1, r3
 80113e0:	0049      	lsls	r1, r1, #1
 80113e2:	440b      	add	r3, r1
 80113e4:	b29b      	uxth	r3, r3
 80113e6:	4413      	add	r3, r2
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	8b5b      	ldrh	r3, [r3, #26]
 80113f4:	f043 0304 	orr.w	r3, r3, #4
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2200      	movs	r2, #0
 8011402:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011404:	bf00      	nop
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	08017200 	.word	0x08017200
 8011410:	080178b8 	.word	0x080178b8
 8011414:	08017254 	.word	0x08017254

08011418 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b086      	sub	sp, #24
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	607b      	str	r3, [r7, #4]
 8011422:	460b      	mov	r3, r1
 8011424:	817b      	strh	r3, [r7, #10]
 8011426:	4613      	mov	r3, r2
 8011428:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801142a:	897a      	ldrh	r2, [r7, #10]
 801142c:	893b      	ldrh	r3, [r7, #8]
 801142e:	4413      	add	r3, r2
 8011430:	b29b      	uxth	r3, r3
 8011432:	3314      	adds	r3, #20
 8011434:	b29b      	uxth	r3, r3
 8011436:	f44f 7220 	mov.w	r2, #640	; 0x280
 801143a:	4619      	mov	r1, r3
 801143c:	2022      	movs	r0, #34	; 0x22
 801143e:	f7fa fc0d 	bl	800bc5c <pbuf_alloc>
 8011442:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d04d      	beq.n	80114e6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801144a:	897b      	ldrh	r3, [r7, #10]
 801144c:	3313      	adds	r3, #19
 801144e:	697a      	ldr	r2, [r7, #20]
 8011450:	8952      	ldrh	r2, [r2, #10]
 8011452:	4293      	cmp	r3, r2
 8011454:	db06      	blt.n	8011464 <tcp_output_alloc_header_common+0x4c>
 8011456:	4b26      	ldr	r3, [pc, #152]	; (80114f0 <tcp_output_alloc_header_common+0xd8>)
 8011458:	f240 7223 	movw	r2, #1827	; 0x723
 801145c:	4925      	ldr	r1, [pc, #148]	; (80114f4 <tcp_output_alloc_header_common+0xdc>)
 801145e:	4826      	ldr	r0, [pc, #152]	; (80114f8 <tcp_output_alloc_header_common+0xe0>)
 8011460:	f003 fb9a 	bl	8014b98 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801146a:	8c3b      	ldrh	r3, [r7, #32]
 801146c:	4618      	mov	r0, r3
 801146e:	f7f9 fae7 	bl	800aa40 <lwip_htons>
 8011472:	4603      	mov	r3, r0
 8011474:	461a      	mov	r2, r3
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801147a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801147c:	4618      	mov	r0, r3
 801147e:	f7f9 fadf 	bl	800aa40 <lwip_htons>
 8011482:	4603      	mov	r3, r0
 8011484:	461a      	mov	r2, r3
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011490:	68f8      	ldr	r0, [r7, #12]
 8011492:	f7f9 faea 	bl	800aa6a <lwip_htonl>
 8011496:	4602      	mov	r2, r0
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801149c:	897b      	ldrh	r3, [r7, #10]
 801149e:	089b      	lsrs	r3, r3, #2
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	3305      	adds	r3, #5
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	031b      	lsls	r3, r3, #12
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	4313      	orrs	r3, r2
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7f9 fac3 	bl	800aa40 <lwip_htons>
 80114ba:	4603      	mov	r3, r0
 80114bc:	461a      	mov	r2, r3
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80114c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7f9 fabb 	bl	800aa40 <lwip_htons>
 80114ca:	4603      	mov	r3, r0
 80114cc:	461a      	mov	r2, r3
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	2200      	movs	r2, #0
 80114d6:	741a      	strb	r2, [r3, #16]
 80114d8:	2200      	movs	r2, #0
 80114da:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	2200      	movs	r2, #0
 80114e0:	749a      	strb	r2, [r3, #18]
 80114e2:	2200      	movs	r2, #0
 80114e4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80114e6:	697b      	ldr	r3, [r7, #20]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3718      	adds	r7, #24
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	08017200 	.word	0x08017200
 80114f4:	080178d8 	.word	0x080178d8
 80114f8:	08017254 	.word	0x08017254

080114fc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80114fc:	b5b0      	push	{r4, r5, r7, lr}
 80114fe:	b08a      	sub	sp, #40	; 0x28
 8011500:	af04      	add	r7, sp, #16
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	607b      	str	r3, [r7, #4]
 8011506:	460b      	mov	r3, r1
 8011508:	817b      	strh	r3, [r7, #10]
 801150a:	4613      	mov	r3, r2
 801150c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d106      	bne.n	8011522 <tcp_output_alloc_header+0x26>
 8011514:	4b15      	ldr	r3, [pc, #84]	; (801156c <tcp_output_alloc_header+0x70>)
 8011516:	f240 7242 	movw	r2, #1858	; 0x742
 801151a:	4915      	ldr	r1, [pc, #84]	; (8011570 <tcp_output_alloc_header+0x74>)
 801151c:	4815      	ldr	r0, [pc, #84]	; (8011574 <tcp_output_alloc_header+0x78>)
 801151e:	f003 fb3b 	bl	8014b98 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	8adb      	ldrh	r3, [r3, #22]
 801152a:	68fa      	ldr	r2, [r7, #12]
 801152c:	8b12      	ldrh	r2, [r2, #24]
 801152e:	68f9      	ldr	r1, [r7, #12]
 8011530:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011532:	893d      	ldrh	r5, [r7, #8]
 8011534:	897c      	ldrh	r4, [r7, #10]
 8011536:	9103      	str	r1, [sp, #12]
 8011538:	2110      	movs	r1, #16
 801153a:	9102      	str	r1, [sp, #8]
 801153c:	9201      	str	r2, [sp, #4]
 801153e:	9300      	str	r3, [sp, #0]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	462a      	mov	r2, r5
 8011544:	4621      	mov	r1, r4
 8011546:	f7ff ff67 	bl	8011418 <tcp_output_alloc_header_common>
 801154a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d006      	beq.n	8011560 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801155a:	441a      	add	r2, r3
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011560:	697b      	ldr	r3, [r7, #20]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3718      	adds	r7, #24
 8011566:	46bd      	mov	sp, r7
 8011568:	bdb0      	pop	{r4, r5, r7, pc}
 801156a:	bf00      	nop
 801156c:	08017200 	.word	0x08017200
 8011570:	08017908 	.word	0x08017908
 8011574:	08017254 	.word	0x08017254

08011578 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b088      	sub	sp, #32
 801157c:	af00      	add	r7, sp, #0
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	4611      	mov	r1, r2
 8011584:	461a      	mov	r2, r3
 8011586:	460b      	mov	r3, r1
 8011588:	71fb      	strb	r3, [r7, #7]
 801158a:	4613      	mov	r3, r2
 801158c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801158e:	2300      	movs	r3, #0
 8011590:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d106      	bne.n	80115a6 <tcp_output_fill_options+0x2e>
 8011598:	4b13      	ldr	r3, [pc, #76]	; (80115e8 <tcp_output_fill_options+0x70>)
 801159a:	f240 7256 	movw	r2, #1878	; 0x756
 801159e:	4913      	ldr	r1, [pc, #76]	; (80115ec <tcp_output_fill_options+0x74>)
 80115a0:	4813      	ldr	r0, [pc, #76]	; (80115f0 <tcp_output_fill_options+0x78>)
 80115a2:	f003 faf9 	bl	8014b98 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	3314      	adds	r3, #20
 80115b0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80115b2:	69bb      	ldr	r3, [r7, #24]
 80115b4:	f103 0214 	add.w	r2, r3, #20
 80115b8:	8bfb      	ldrh	r3, [r7, #30]
 80115ba:	009b      	lsls	r3, r3, #2
 80115bc:	4619      	mov	r1, r3
 80115be:	79fb      	ldrb	r3, [r7, #7]
 80115c0:	009b      	lsls	r3, r3, #2
 80115c2:	f003 0304 	and.w	r3, r3, #4
 80115c6:	440b      	add	r3, r1
 80115c8:	4413      	add	r3, r2
 80115ca:	697a      	ldr	r2, [r7, #20]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d006      	beq.n	80115de <tcp_output_fill_options+0x66>
 80115d0:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <tcp_output_fill_options+0x70>)
 80115d2:	f240 7275 	movw	r2, #1909	; 0x775
 80115d6:	4907      	ldr	r1, [pc, #28]	; (80115f4 <tcp_output_fill_options+0x7c>)
 80115d8:	4805      	ldr	r0, [pc, #20]	; (80115f0 <tcp_output_fill_options+0x78>)
 80115da:	f003 fadd 	bl	8014b98 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80115de:	bf00      	nop
 80115e0:	3720      	adds	r7, #32
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop
 80115e8:	08017200 	.word	0x08017200
 80115ec:	08017930 	.word	0x08017930
 80115f0:	08017254 	.word	0x08017254
 80115f4:	08017828 	.word	0x08017828

080115f8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b08a      	sub	sp, #40	; 0x28
 80115fc:	af04      	add	r7, sp, #16
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	607a      	str	r2, [r7, #4]
 8011604:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d106      	bne.n	801161a <tcp_output_control_segment+0x22>
 801160c:	4b1c      	ldr	r3, [pc, #112]	; (8011680 <tcp_output_control_segment+0x88>)
 801160e:	f240 7287 	movw	r2, #1927	; 0x787
 8011612:	491c      	ldr	r1, [pc, #112]	; (8011684 <tcp_output_control_segment+0x8c>)
 8011614:	481c      	ldr	r0, [pc, #112]	; (8011688 <tcp_output_control_segment+0x90>)
 8011616:	f003 fabf 	bl	8014b98 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	6879      	ldr	r1, [r7, #4]
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f7fe ff40 	bl	80104a4 <tcp_route>
 8011624:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d102      	bne.n	8011632 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801162c:	23fc      	movs	r3, #252	; 0xfc
 801162e:	75fb      	strb	r3, [r7, #23]
 8011630:	e01c      	b.n	801166c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d006      	beq.n	8011646 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	7adb      	ldrb	r3, [r3, #11]
 801163c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	7a9b      	ldrb	r3, [r3, #10]
 8011642:	757b      	strb	r3, [r7, #21]
 8011644:	e003      	b.n	801164e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011646:	23ff      	movs	r3, #255	; 0xff
 8011648:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801164e:	7dba      	ldrb	r2, [r7, #22]
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	9302      	str	r3, [sp, #8]
 8011654:	2306      	movs	r3, #6
 8011656:	9301      	str	r3, [sp, #4]
 8011658:	7d7b      	ldrb	r3, [r7, #21]
 801165a:	9300      	str	r3, [sp, #0]
 801165c:	4613      	mov	r3, r2
 801165e:	683a      	ldr	r2, [r7, #0]
 8011660:	6879      	ldr	r1, [r7, #4]
 8011662:	68b8      	ldr	r0, [r7, #8]
 8011664:	f001 ffa0 	bl	80135a8 <ip4_output_if>
 8011668:	4603      	mov	r3, r0
 801166a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801166c:	68b8      	ldr	r0, [r7, #8]
 801166e:	f7fa fdd9 	bl	800c224 <pbuf_free>
  return err;
 8011672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011676:	4618      	mov	r0, r3
 8011678:	3718      	adds	r7, #24
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
 801167e:	bf00      	nop
 8011680:	08017200 	.word	0x08017200
 8011684:	08017958 	.word	0x08017958
 8011688:	08017254 	.word	0x08017254

0801168c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801168c:	b590      	push	{r4, r7, lr}
 801168e:	b08b      	sub	sp, #44	; 0x2c
 8011690:	af04      	add	r7, sp, #16
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	607a      	str	r2, [r7, #4]
 8011698:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d106      	bne.n	80116ae <tcp_rst+0x22>
 80116a0:	4b1f      	ldr	r3, [pc, #124]	; (8011720 <tcp_rst+0x94>)
 80116a2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80116a6:	491f      	ldr	r1, [pc, #124]	; (8011724 <tcp_rst+0x98>)
 80116a8:	481f      	ldr	r0, [pc, #124]	; (8011728 <tcp_rst+0x9c>)
 80116aa:	f003 fa75 	bl	8014b98 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80116ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d106      	bne.n	80116c2 <tcp_rst+0x36>
 80116b4:	4b1a      	ldr	r3, [pc, #104]	; (8011720 <tcp_rst+0x94>)
 80116b6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80116ba:	491c      	ldr	r1, [pc, #112]	; (801172c <tcp_rst+0xa0>)
 80116bc:	481a      	ldr	r0, [pc, #104]	; (8011728 <tcp_rst+0x9c>)
 80116be:	f003 fa6b 	bl	8014b98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80116c2:	2300      	movs	r3, #0
 80116c4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80116c6:	f246 0308 	movw	r3, #24584	; 0x6008
 80116ca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80116cc:	7dfb      	ldrb	r3, [r7, #23]
 80116ce:	b29c      	uxth	r4, r3
 80116d0:	68b8      	ldr	r0, [r7, #8]
 80116d2:	f7f9 f9ca 	bl	800aa6a <lwip_htonl>
 80116d6:	4602      	mov	r2, r0
 80116d8:	8abb      	ldrh	r3, [r7, #20]
 80116da:	9303      	str	r3, [sp, #12]
 80116dc:	2314      	movs	r3, #20
 80116de:	9302      	str	r3, [sp, #8]
 80116e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80116e2:	9301      	str	r3, [sp, #4]
 80116e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116e6:	9300      	str	r3, [sp, #0]
 80116e8:	4613      	mov	r3, r2
 80116ea:	2200      	movs	r2, #0
 80116ec:	4621      	mov	r1, r4
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f7ff fe92 	bl	8011418 <tcp_output_alloc_header_common>
 80116f4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d00c      	beq.n	8011716 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80116fc:	7dfb      	ldrb	r3, [r7, #23]
 80116fe:	2200      	movs	r2, #0
 8011700:	6939      	ldr	r1, [r7, #16]
 8011702:	68f8      	ldr	r0, [r7, #12]
 8011704:	f7ff ff38 	bl	8011578 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170a:	683a      	ldr	r2, [r7, #0]
 801170c:	6939      	ldr	r1, [r7, #16]
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	f7ff ff72 	bl	80115f8 <tcp_output_control_segment>
 8011714:	e000      	b.n	8011718 <tcp_rst+0x8c>
    return;
 8011716:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011718:	371c      	adds	r7, #28
 801171a:	46bd      	mov	sp, r7
 801171c:	bd90      	pop	{r4, r7, pc}
 801171e:	bf00      	nop
 8011720:	08017200 	.word	0x08017200
 8011724:	08017984 	.word	0x08017984
 8011728:	08017254 	.word	0x08017254
 801172c:	080179a0 	.word	0x080179a0

08011730 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011730:	b590      	push	{r4, r7, lr}
 8011732:	b087      	sub	sp, #28
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011738:	2300      	movs	r3, #0
 801173a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801173c:	2300      	movs	r3, #0
 801173e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d106      	bne.n	8011754 <tcp_send_empty_ack+0x24>
 8011746:	4b28      	ldr	r3, [pc, #160]	; (80117e8 <tcp_send_empty_ack+0xb8>)
 8011748:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801174c:	4927      	ldr	r1, [pc, #156]	; (80117ec <tcp_send_empty_ack+0xbc>)
 801174e:	4828      	ldr	r0, [pc, #160]	; (80117f0 <tcp_send_empty_ack+0xc0>)
 8011750:	f003 fa22 	bl	8014b98 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011754:	7dfb      	ldrb	r3, [r7, #23]
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	b2db      	uxtb	r3, r3
 801175a:	f003 0304 	and.w	r3, r3, #4
 801175e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011760:	7d7b      	ldrb	r3, [r7, #21]
 8011762:	b29c      	uxth	r4, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011768:	4618      	mov	r0, r3
 801176a:	f7f9 f97e 	bl	800aa6a <lwip_htonl>
 801176e:	4603      	mov	r3, r0
 8011770:	2200      	movs	r2, #0
 8011772:	4621      	mov	r1, r4
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f7ff fec1 	bl	80114fc <tcp_output_alloc_header>
 801177a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801177c:	693b      	ldr	r3, [r7, #16]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d109      	bne.n	8011796 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	8b5b      	ldrh	r3, [r3, #26]
 8011786:	f043 0303 	orr.w	r3, r3, #3
 801178a:	b29a      	uxth	r2, r3
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011790:	f06f 0301 	mvn.w	r3, #1
 8011794:	e023      	b.n	80117de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011796:	7dbb      	ldrb	r3, [r7, #22]
 8011798:	7dfa      	ldrb	r2, [r7, #23]
 801179a:	6939      	ldr	r1, [r7, #16]
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7ff feeb 	bl	8011578 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	3304      	adds	r3, #4
 80117a8:	6939      	ldr	r1, [r7, #16]
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f7ff ff24 	bl	80115f8 <tcp_output_control_segment>
 80117b0:	4603      	mov	r3, r0
 80117b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80117b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d007      	beq.n	80117cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	8b5b      	ldrh	r3, [r3, #26]
 80117c0:	f043 0303 	orr.w	r3, r3, #3
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	835a      	strh	r2, [r3, #26]
 80117ca:	e006      	b.n	80117da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	8b5b      	ldrh	r3, [r3, #26]
 80117d0:	f023 0303 	bic.w	r3, r3, #3
 80117d4:	b29a      	uxth	r2, r3
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80117da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80117de:	4618      	mov	r0, r3
 80117e0:	371c      	adds	r7, #28
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd90      	pop	{r4, r7, pc}
 80117e6:	bf00      	nop
 80117e8:	08017200 	.word	0x08017200
 80117ec:	080179bc 	.word	0x080179bc
 80117f0:	08017254 	.word	0x08017254

080117f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80117f4:	b590      	push	{r4, r7, lr}
 80117f6:	b087      	sub	sp, #28
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80117fc:	2300      	movs	r3, #0
 80117fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d106      	bne.n	8011814 <tcp_keepalive+0x20>
 8011806:	4b18      	ldr	r3, [pc, #96]	; (8011868 <tcp_keepalive+0x74>)
 8011808:	f640 0224 	movw	r2, #2084	; 0x824
 801180c:	4917      	ldr	r1, [pc, #92]	; (801186c <tcp_keepalive+0x78>)
 801180e:	4818      	ldr	r0, [pc, #96]	; (8011870 <tcp_keepalive+0x7c>)
 8011810:	f003 f9c2 	bl	8014b98 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011814:	7dfb      	ldrb	r3, [r7, #23]
 8011816:	b29c      	uxth	r4, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801181c:	3b01      	subs	r3, #1
 801181e:	4618      	mov	r0, r3
 8011820:	f7f9 f923 	bl	800aa6a <lwip_htonl>
 8011824:	4603      	mov	r3, r0
 8011826:	2200      	movs	r2, #0
 8011828:	4621      	mov	r1, r4
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7ff fe66 	bl	80114fc <tcp_output_alloc_header>
 8011830:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d102      	bne.n	801183e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801183c:	e010      	b.n	8011860 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801183e:	7dfb      	ldrb	r3, [r7, #23]
 8011840:	2200      	movs	r2, #0
 8011842:	6939      	ldr	r1, [r7, #16]
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7ff fe97 	bl	8011578 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	3304      	adds	r3, #4
 8011850:	6939      	ldr	r1, [r7, #16]
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f7ff fed0 	bl	80115f8 <tcp_output_control_segment>
 8011858:	4603      	mov	r3, r0
 801185a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011860:	4618      	mov	r0, r3
 8011862:	371c      	adds	r7, #28
 8011864:	46bd      	mov	sp, r7
 8011866:	bd90      	pop	{r4, r7, pc}
 8011868:	08017200 	.word	0x08017200
 801186c:	080179dc 	.word	0x080179dc
 8011870:	08017254 	.word	0x08017254

08011874 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011874:	b590      	push	{r4, r7, lr}
 8011876:	b08b      	sub	sp, #44	; 0x2c
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801187c:	2300      	movs	r3, #0
 801187e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d106      	bne.n	8011896 <tcp_zero_window_probe+0x22>
 8011888:	4b4c      	ldr	r3, [pc, #304]	; (80119bc <tcp_zero_window_probe+0x148>)
 801188a:	f640 024f 	movw	r2, #2127	; 0x84f
 801188e:	494c      	ldr	r1, [pc, #304]	; (80119c0 <tcp_zero_window_probe+0x14c>)
 8011890:	484c      	ldr	r0, [pc, #304]	; (80119c4 <tcp_zero_window_probe+0x150>)
 8011892:	f003 f981 	bl	8014b98 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801189a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801189c:	6a3b      	ldr	r3, [r7, #32]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d101      	bne.n	80118a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80118a2:	2300      	movs	r3, #0
 80118a4:	e086      	b.n	80119b4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80118ac:	2bff      	cmp	r3, #255	; 0xff
 80118ae:	d007      	beq.n	80118c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80118b6:	3301      	adds	r3, #1
 80118b8:	b2da      	uxtb	r2, r3
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80118c0:	6a3b      	ldr	r3, [r7, #32]
 80118c2:	68db      	ldr	r3, [r3, #12]
 80118c4:	899b      	ldrh	r3, [r3, #12]
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7f9 f8b9 	bl	800aa40 <lwip_htons>
 80118ce:	4603      	mov	r3, r0
 80118d0:	b2db      	uxtb	r3, r3
 80118d2:	f003 0301 	and.w	r3, r3, #1
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d005      	beq.n	80118e6 <tcp_zero_window_probe+0x72>
 80118da:	6a3b      	ldr	r3, [r7, #32]
 80118dc:	891b      	ldrh	r3, [r3, #8]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d101      	bne.n	80118e6 <tcp_zero_window_probe+0x72>
 80118e2:	2301      	movs	r3, #1
 80118e4:	e000      	b.n	80118e8 <tcp_zero_window_probe+0x74>
 80118e6:	2300      	movs	r3, #0
 80118e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80118ea:	7ffb      	ldrb	r3, [r7, #31]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	bf0c      	ite	eq
 80118f0:	2301      	moveq	r3, #1
 80118f2:	2300      	movne	r3, #0
 80118f4:	b2db      	uxtb	r3, r3
 80118f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80118f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118fc:	b299      	uxth	r1, r3
 80118fe:	6a3b      	ldr	r3, [r7, #32]
 8011900:	68db      	ldr	r3, [r3, #12]
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	8bba      	ldrh	r2, [r7, #28]
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7ff fdf8 	bl	80114fc <tcp_output_alloc_header>
 801190c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d102      	bne.n	801191a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011918:	e04c      	b.n	80119b4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011920:	7ffb      	ldrb	r3, [r7, #31]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d011      	beq.n	801194a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	899b      	ldrh	r3, [r3, #12]
 801192a:	b29b      	uxth	r3, r3
 801192c:	b21b      	sxth	r3, r3
 801192e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011932:	b21c      	sxth	r4, r3
 8011934:	2011      	movs	r0, #17
 8011936:	f7f9 f883 	bl	800aa40 <lwip_htons>
 801193a:	4603      	mov	r3, r0
 801193c:	b21b      	sxth	r3, r3
 801193e:	4323      	orrs	r3, r4
 8011940:	b21b      	sxth	r3, r3
 8011942:	b29a      	uxth	r2, r3
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	819a      	strh	r2, [r3, #12]
 8011948:	e010      	b.n	801196c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801194a:	69bb      	ldr	r3, [r7, #24]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	3314      	adds	r3, #20
 8011950:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011952:	6a3b      	ldr	r3, [r7, #32]
 8011954:	6858      	ldr	r0, [r3, #4]
 8011956:	6a3b      	ldr	r3, [r7, #32]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	891a      	ldrh	r2, [r3, #8]
 801195c:	6a3b      	ldr	r3, [r7, #32]
 801195e:	891b      	ldrh	r3, [r3, #8]
 8011960:	1ad3      	subs	r3, r2, r3
 8011962:	b29b      	uxth	r3, r3
 8011964:	2201      	movs	r2, #1
 8011966:	6939      	ldr	r1, [r7, #16]
 8011968:	f7fa fe52 	bl	800c610 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801196c:	6a3b      	ldr	r3, [r7, #32]
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	4618      	mov	r0, r3
 8011974:	f7f9 f879 	bl	800aa6a <lwip_htonl>
 8011978:	4603      	mov	r3, r0
 801197a:	3301      	adds	r3, #1
 801197c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	1ad3      	subs	r3, r2, r3
 8011986:	2b00      	cmp	r3, #0
 8011988:	da02      	bge.n	8011990 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011994:	2200      	movs	r2, #0
 8011996:	69b9      	ldr	r1, [r7, #24]
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f7ff fded 	bl	8011578 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	3304      	adds	r3, #4
 80119a4:	69b9      	ldr	r1, [r7, #24]
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff fe26 	bl	80115f8 <tcp_output_control_segment>
 80119ac:	4603      	mov	r3, r0
 80119ae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80119b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	372c      	adds	r7, #44	; 0x2c
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd90      	pop	{r4, r7, pc}
 80119bc:	08017200 	.word	0x08017200
 80119c0:	080179f8 	.word	0x080179f8
 80119c4:	08017254 	.word	0x08017254

080119c8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80119d0:	f7fa ff0c 	bl	800c7ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80119d4:	4b0a      	ldr	r3, [pc, #40]	; (8011a00 <tcpip_tcp_timer+0x38>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d103      	bne.n	80119e4 <tcpip_tcp_timer+0x1c>
 80119dc:	4b09      	ldr	r3, [pc, #36]	; (8011a04 <tcpip_tcp_timer+0x3c>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d005      	beq.n	80119f0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80119e4:	2200      	movs	r2, #0
 80119e6:	4908      	ldr	r1, [pc, #32]	; (8011a08 <tcpip_tcp_timer+0x40>)
 80119e8:	20fa      	movs	r0, #250	; 0xfa
 80119ea:	f000 f8f3 	bl	8011bd4 <sys_timeout>
 80119ee:	e003      	b.n	80119f8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80119f0:	4b06      	ldr	r3, [pc, #24]	; (8011a0c <tcpip_tcp_timer+0x44>)
 80119f2:	2200      	movs	r2, #0
 80119f4:	601a      	str	r2, [r3, #0]
  }
}
 80119f6:	bf00      	nop
 80119f8:	bf00      	nop
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	2004f188 	.word	0x2004f188
 8011a04:	2004f18c 	.word	0x2004f18c
 8011a08:	080119c9 	.word	0x080119c9
 8011a0c:	2004f1d4 	.word	0x2004f1d4

08011a10 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011a14:	4b0a      	ldr	r3, [pc, #40]	; (8011a40 <tcp_timer_needed+0x30>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d10f      	bne.n	8011a3c <tcp_timer_needed+0x2c>
 8011a1c:	4b09      	ldr	r3, [pc, #36]	; (8011a44 <tcp_timer_needed+0x34>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d103      	bne.n	8011a2c <tcp_timer_needed+0x1c>
 8011a24:	4b08      	ldr	r3, [pc, #32]	; (8011a48 <tcp_timer_needed+0x38>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d007      	beq.n	8011a3c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011a2c:	4b04      	ldr	r3, [pc, #16]	; (8011a40 <tcp_timer_needed+0x30>)
 8011a2e:	2201      	movs	r2, #1
 8011a30:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011a32:	2200      	movs	r2, #0
 8011a34:	4905      	ldr	r1, [pc, #20]	; (8011a4c <tcp_timer_needed+0x3c>)
 8011a36:	20fa      	movs	r0, #250	; 0xfa
 8011a38:	f000 f8cc 	bl	8011bd4 <sys_timeout>
  }
}
 8011a3c:	bf00      	nop
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	2004f1d4 	.word	0x2004f1d4
 8011a44:	2004f188 	.word	0x2004f188
 8011a48:	2004f18c 	.word	0x2004f18c
 8011a4c:	080119c9 	.word	0x080119c9

08011a50 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b086      	sub	sp, #24
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011a5c:	200a      	movs	r0, #10
 8011a5e:	f7f9 fcc7 	bl	800b3f0 <memp_malloc>
 8011a62:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d109      	bne.n	8011a7e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d151      	bne.n	8011b14 <sys_timeout_abs+0xc4>
 8011a70:	4b2a      	ldr	r3, [pc, #168]	; (8011b1c <sys_timeout_abs+0xcc>)
 8011a72:	22be      	movs	r2, #190	; 0xbe
 8011a74:	492a      	ldr	r1, [pc, #168]	; (8011b20 <sys_timeout_abs+0xd0>)
 8011a76:	482b      	ldr	r0, [pc, #172]	; (8011b24 <sys_timeout_abs+0xd4>)
 8011a78:	f003 f88e 	bl	8014b98 <iprintf>
    return;
 8011a7c:	e04a      	b.n	8011b14 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	2200      	movs	r2, #0
 8011a82:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	68ba      	ldr	r2, [r7, #8]
 8011a88:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	68fa      	ldr	r2, [r7, #12]
 8011a94:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011a96:	4b24      	ldr	r3, [pc, #144]	; (8011b28 <sys_timeout_abs+0xd8>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d103      	bne.n	8011aa6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011a9e:	4a22      	ldr	r2, [pc, #136]	; (8011b28 <sys_timeout_abs+0xd8>)
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	6013      	str	r3, [r2, #0]
    return;
 8011aa4:	e037      	b.n	8011b16 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	685a      	ldr	r2, [r3, #4]
 8011aaa:	4b1f      	ldr	r3, [pc, #124]	; (8011b28 <sys_timeout_abs+0xd8>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	0fdb      	lsrs	r3, r3, #31
 8011ab4:	f003 0301 	and.w	r3, r3, #1
 8011ab8:	b2db      	uxtb	r3, r3
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d007      	beq.n	8011ace <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011abe:	4b1a      	ldr	r3, [pc, #104]	; (8011b28 <sys_timeout_abs+0xd8>)
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011ac6:	4a18      	ldr	r2, [pc, #96]	; (8011b28 <sys_timeout_abs+0xd8>)
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	6013      	str	r3, [r2, #0]
 8011acc:	e023      	b.n	8011b16 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011ace:	4b16      	ldr	r3, [pc, #88]	; (8011b28 <sys_timeout_abs+0xd8>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	617b      	str	r3, [r7, #20]
 8011ad4:	e01a      	b.n	8011b0c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d00b      	beq.n	8011af6 <sys_timeout_abs+0xa6>
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	685a      	ldr	r2, [r3, #4]
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	1ad3      	subs	r3, r2, r3
 8011aea:	0fdb      	lsrs	r3, r3, #31
 8011aec:	f003 0301 	and.w	r3, r3, #1
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d007      	beq.n	8011b06 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	681a      	ldr	r2, [r3, #0]
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	693a      	ldr	r2, [r7, #16]
 8011b02:	601a      	str	r2, [r3, #0]
        break;
 8011b04:	e007      	b.n	8011b16 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	617b      	str	r3, [r7, #20]
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d1e1      	bne.n	8011ad6 <sys_timeout_abs+0x86>
 8011b12:	e000      	b.n	8011b16 <sys_timeout_abs+0xc6>
    return;
 8011b14:	bf00      	nop
      }
    }
  }
}
 8011b16:	3718      	adds	r7, #24
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	08017a1c 	.word	0x08017a1c
 8011b20:	08017a50 	.word	0x08017a50
 8011b24:	08017a90 	.word	0x08017a90
 8011b28:	2004f1cc 	.word	0x2004f1cc

08011b2c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b086      	sub	sp, #24
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	4798      	blx	r3

  now = sys_now();
 8011b3e:	f7f4 fc7f 	bl	8006440 <sys_now>
 8011b42:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	681a      	ldr	r2, [r3, #0]
 8011b48:	4b0f      	ldr	r3, [pc, #60]	; (8011b88 <lwip_cyclic_timer+0x5c>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	4413      	add	r3, r2
 8011b4e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011b50:	68fa      	ldr	r2, [r7, #12]
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	1ad3      	subs	r3, r2, r3
 8011b56:	0fdb      	lsrs	r3, r3, #31
 8011b58:	f003 0301 	and.w	r3, r3, #1
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d009      	beq.n	8011b76 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	4413      	add	r3, r2
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	4907      	ldr	r1, [pc, #28]	; (8011b8c <lwip_cyclic_timer+0x60>)
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7ff ff6e 	bl	8011a50 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011b74:	e004      	b.n	8011b80 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	4904      	ldr	r1, [pc, #16]	; (8011b8c <lwip_cyclic_timer+0x60>)
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f7ff ff68 	bl	8011a50 <sys_timeout_abs>
}
 8011b80:	bf00      	nop
 8011b82:	3718      	adds	r7, #24
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	2004f1d0 	.word	0x2004f1d0
 8011b8c:	08011b2d 	.word	0x08011b2d

08011b90 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b96:	2301      	movs	r3, #1
 8011b98:	607b      	str	r3, [r7, #4]
 8011b9a:	e00e      	b.n	8011bba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011b9c:	4a0b      	ldr	r2, [pc, #44]	; (8011bcc <sys_timeouts_init+0x3c>)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	00db      	lsls	r3, r3, #3
 8011ba8:	4a08      	ldr	r2, [pc, #32]	; (8011bcc <sys_timeouts_init+0x3c>)
 8011baa:	4413      	add	r3, r2
 8011bac:	461a      	mov	r2, r3
 8011bae:	4908      	ldr	r1, [pc, #32]	; (8011bd0 <sys_timeouts_init+0x40>)
 8011bb0:	f000 f810 	bl	8011bd4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	607b      	str	r3, [r7, #4]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2b02      	cmp	r3, #2
 8011bbe:	d9ed      	bls.n	8011b9c <sys_timeouts_init+0xc>
  }
}
 8011bc0:	bf00      	nop
 8011bc2:	bf00      	nop
 8011bc4:	3708      	adds	r7, #8
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	0801866c 	.word	0x0801866c
 8011bd0:	08011b2d 	.word	0x08011b2d

08011bd4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b086      	sub	sp, #24
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011be6:	d306      	bcc.n	8011bf6 <sys_timeout+0x22>
 8011be8:	4b0a      	ldr	r3, [pc, #40]	; (8011c14 <sys_timeout+0x40>)
 8011bea:	f240 1229 	movw	r2, #297	; 0x129
 8011bee:	490a      	ldr	r1, [pc, #40]	; (8011c18 <sys_timeout+0x44>)
 8011bf0:	480a      	ldr	r0, [pc, #40]	; (8011c1c <sys_timeout+0x48>)
 8011bf2:	f002 ffd1 	bl	8014b98 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011bf6:	f7f4 fc23 	bl	8006440 <sys_now>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	4413      	add	r3, r2
 8011c00:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	68b9      	ldr	r1, [r7, #8]
 8011c06:	6978      	ldr	r0, [r7, #20]
 8011c08:	f7ff ff22 	bl	8011a50 <sys_timeout_abs>
#endif
}
 8011c0c:	bf00      	nop
 8011c0e:	3718      	adds	r7, #24
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	08017a1c 	.word	0x08017a1c
 8011c18:	08017ab8 	.word	0x08017ab8
 8011c1c:	08017a90 	.word	0x08017a90

08011c20 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011c26:	f7f4 fc0b 	bl	8006440 <sys_now>
 8011c2a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011c2c:	4b17      	ldr	r3, [pc, #92]	; (8011c8c <sys_check_timeouts+0x6c>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d022      	beq.n	8011c7e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	68fa      	ldr	r2, [r7, #12]
 8011c3e:	1ad3      	subs	r3, r2, r3
 8011c40:	0fdb      	lsrs	r3, r3, #31
 8011c42:	f003 0301 	and.w	r3, r3, #1
 8011c46:	b2db      	uxtb	r3, r3
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d11a      	bne.n	8011c82 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	4a0e      	ldr	r2, [pc, #56]	; (8011c8c <sys_check_timeouts+0x6c>)
 8011c52:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	4a0a      	ldr	r2, [pc, #40]	; (8011c90 <sys_check_timeouts+0x70>)
 8011c66:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011c68:	68b9      	ldr	r1, [r7, #8]
 8011c6a:	200a      	movs	r0, #10
 8011c6c:	f7f9 fc36 	bl	800b4dc <memp_free>
    if (handler != NULL) {
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d0da      	beq.n	8011c2c <sys_check_timeouts+0xc>
      handler(arg);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6838      	ldr	r0, [r7, #0]
 8011c7a:	4798      	blx	r3
  do {
 8011c7c:	e7d6      	b.n	8011c2c <sys_check_timeouts+0xc>
      return;
 8011c7e:	bf00      	nop
 8011c80:	e000      	b.n	8011c84 <sys_check_timeouts+0x64>
      return;
 8011c82:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011c84:	3710      	adds	r7, #16
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	2004f1cc 	.word	0x2004f1cc
 8011c90:	2004f1d0 	.word	0x2004f1d0

08011c94 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b082      	sub	sp, #8
 8011c98:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011c9a:	4b16      	ldr	r3, [pc, #88]	; (8011cf4 <sys_timeouts_sleeptime+0x60>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d102      	bne.n	8011ca8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ca6:	e020      	b.n	8011cea <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011ca8:	f7f4 fbca 	bl	8006440 <sys_now>
 8011cac:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011cae:	4b11      	ldr	r3, [pc, #68]	; (8011cf4 <sys_timeouts_sleeptime+0x60>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	685a      	ldr	r2, [r3, #4]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	1ad3      	subs	r3, r2, r3
 8011cb8:	0fdb      	lsrs	r3, r3, #31
 8011cba:	f003 0301 	and.w	r3, r3, #1
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d001      	beq.n	8011cc8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	e010      	b.n	8011cea <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011cc8:	4b0a      	ldr	r3, [pc, #40]	; (8011cf4 <sys_timeouts_sleeptime+0x60>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	685a      	ldr	r2, [r3, #4]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	da06      	bge.n	8011ce8 <sys_timeouts_sleeptime+0x54>
 8011cda:	4b07      	ldr	r3, [pc, #28]	; (8011cf8 <sys_timeouts_sleeptime+0x64>)
 8011cdc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011ce0:	4906      	ldr	r1, [pc, #24]	; (8011cfc <sys_timeouts_sleeptime+0x68>)
 8011ce2:	4807      	ldr	r0, [pc, #28]	; (8011d00 <sys_timeouts_sleeptime+0x6c>)
 8011ce4:	f002 ff58 	bl	8014b98 <iprintf>
    return ret;
 8011ce8:	683b      	ldr	r3, [r7, #0]
  }
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3708      	adds	r7, #8
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	2004f1cc 	.word	0x2004f1cc
 8011cf8:	08017a1c 	.word	0x08017a1c
 8011cfc:	08017af0 	.word	0x08017af0
 8011d00:	08017a90 	.word	0x08017a90

08011d04 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011d08:	f002 ff5e 	bl	8014bc8 <rand>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011d1a:	b29a      	uxth	r2, r3
 8011d1c:	4b01      	ldr	r3, [pc, #4]	; (8011d24 <udp_init+0x20>)
 8011d1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011d20:	bf00      	nop
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	20001830 	.word	0x20001830

08011d28 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	4613      	mov	r3, r2
 8011d34:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d105      	bne.n	8011d48 <udp_input_local_match+0x20>
 8011d3c:	4b27      	ldr	r3, [pc, #156]	; (8011ddc <udp_input_local_match+0xb4>)
 8011d3e:	2287      	movs	r2, #135	; 0x87
 8011d40:	4927      	ldr	r1, [pc, #156]	; (8011de0 <udp_input_local_match+0xb8>)
 8011d42:	4828      	ldr	r0, [pc, #160]	; (8011de4 <udp_input_local_match+0xbc>)
 8011d44:	f002 ff28 	bl	8014b98 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d105      	bne.n	8011d5a <udp_input_local_match+0x32>
 8011d4e:	4b23      	ldr	r3, [pc, #140]	; (8011ddc <udp_input_local_match+0xb4>)
 8011d50:	2288      	movs	r2, #136	; 0x88
 8011d52:	4925      	ldr	r1, [pc, #148]	; (8011de8 <udp_input_local_match+0xc0>)
 8011d54:	4823      	ldr	r0, [pc, #140]	; (8011de4 <udp_input_local_match+0xbc>)
 8011d56:	f002 ff1f 	bl	8014b98 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	7a1b      	ldrb	r3, [r3, #8]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00b      	beq.n	8011d7a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	7a1a      	ldrb	r2, [r3, #8]
 8011d66:	4b21      	ldr	r3, [pc, #132]	; (8011dec <udp_input_local_match+0xc4>)
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011d6e:	3301      	adds	r3, #1
 8011d70:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d001      	beq.n	8011d7a <udp_input_local_match+0x52>
    return 0;
 8011d76:	2300      	movs	r3, #0
 8011d78:	e02b      	b.n	8011dd2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011d7a:	79fb      	ldrb	r3, [r7, #7]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d018      	beq.n	8011db2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d013      	beq.n	8011dae <udp_input_local_match+0x86>
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00f      	beq.n	8011dae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011d8e:	4b17      	ldr	r3, [pc, #92]	; (8011dec <udp_input_local_match+0xc4>)
 8011d90:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d96:	d00a      	beq.n	8011dae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	4b13      	ldr	r3, [pc, #76]	; (8011dec <udp_input_local_match+0xc4>)
 8011d9e:	695b      	ldr	r3, [r3, #20]
 8011da0:	405a      	eors	r2, r3
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	3308      	adds	r3, #8
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d110      	bne.n	8011dd0 <udp_input_local_match+0xa8>
          return 1;
 8011dae:	2301      	movs	r3, #1
 8011db0:	e00f      	b.n	8011dd2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d009      	beq.n	8011dcc <udp_input_local_match+0xa4>
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d005      	beq.n	8011dcc <udp_input_local_match+0xa4>
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	4b09      	ldr	r3, [pc, #36]	; (8011dec <udp_input_local_match+0xc4>)
 8011dc6:	695b      	ldr	r3, [r3, #20]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d101      	bne.n	8011dd0 <udp_input_local_match+0xa8>
        return 1;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	e000      	b.n	8011dd2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011dd0:	2300      	movs	r3, #0
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	08017b04 	.word	0x08017b04
 8011de0:	08017b34 	.word	0x08017b34
 8011de4:	08017b58 	.word	0x08017b58
 8011de8:	08017b80 	.word	0x08017b80
 8011dec:	2004ac68 	.word	0x2004ac68

08011df0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011df0:	b590      	push	{r4, r7, lr}
 8011df2:	b08d      	sub	sp, #52	; 0x34
 8011df4:	af02      	add	r7, sp, #8
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d105      	bne.n	8011e10 <udp_input+0x20>
 8011e04:	4b7c      	ldr	r3, [pc, #496]	; (8011ff8 <udp_input+0x208>)
 8011e06:	22cf      	movs	r2, #207	; 0xcf
 8011e08:	497c      	ldr	r1, [pc, #496]	; (8011ffc <udp_input+0x20c>)
 8011e0a:	487d      	ldr	r0, [pc, #500]	; (8012000 <udp_input+0x210>)
 8011e0c:	f002 fec4 	bl	8014b98 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d105      	bne.n	8011e22 <udp_input+0x32>
 8011e16:	4b78      	ldr	r3, [pc, #480]	; (8011ff8 <udp_input+0x208>)
 8011e18:	22d0      	movs	r2, #208	; 0xd0
 8011e1a:	497a      	ldr	r1, [pc, #488]	; (8012004 <udp_input+0x214>)
 8011e1c:	4878      	ldr	r0, [pc, #480]	; (8012000 <udp_input+0x210>)
 8011e1e:	f002 febb 	bl	8014b98 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	895b      	ldrh	r3, [r3, #10]
 8011e26:	2b07      	cmp	r3, #7
 8011e28:	d803      	bhi.n	8011e32 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7fa f9fa 	bl	800c224 <pbuf_free>
    goto end;
 8011e30:	e0de      	b.n	8011ff0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011e38:	4b73      	ldr	r3, [pc, #460]	; (8012008 <udp_input+0x218>)
 8011e3a:	695b      	ldr	r3, [r3, #20]
 8011e3c:	4a72      	ldr	r2, [pc, #456]	; (8012008 <udp_input+0x218>)
 8011e3e:	6812      	ldr	r2, [r2, #0]
 8011e40:	4611      	mov	r1, r2
 8011e42:	4618      	mov	r0, r3
 8011e44:	f001 fc88 	bl	8013758 <ip4_addr_isbroadcast_u32>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	881b      	ldrh	r3, [r3, #0]
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7f8 fdf4 	bl	800aa40 <lwip_htons>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	885b      	ldrh	r3, [r3, #2]
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7f8 fdec 	bl	800aa40 <lwip_htons>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011e70:	2300      	movs	r3, #0
 8011e72:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011e74:	2300      	movs	r3, #0
 8011e76:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e78:	4b64      	ldr	r3, [pc, #400]	; (801200c <udp_input+0x21c>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8011e7e:	e054      	b.n	8011f2a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	8a5b      	ldrh	r3, [r3, #18]
 8011e84:	89fa      	ldrh	r2, [r7, #14]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d14a      	bne.n	8011f20 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011e8a:	7cfb      	ldrb	r3, [r7, #19]
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	6839      	ldr	r1, [r7, #0]
 8011e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e92:	f7ff ff49 	bl	8011d28 <udp_input_local_match>
 8011e96:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d041      	beq.n	8011f20 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9e:	7c1b      	ldrb	r3, [r3, #16]
 8011ea0:	f003 0304 	and.w	r3, r3, #4
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d11d      	bne.n	8011ee4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d102      	bne.n	8011eb4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb0:	61fb      	str	r3, [r7, #28]
 8011eb2:	e017      	b.n	8011ee4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011eb4:	7cfb      	ldrb	r3, [r7, #19]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d014      	beq.n	8011ee4 <udp_input+0xf4>
 8011eba:	4b53      	ldr	r3, [pc, #332]	; (8012008 <udp_input+0x218>)
 8011ebc:	695b      	ldr	r3, [r3, #20]
 8011ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ec2:	d10f      	bne.n	8011ee4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	3304      	adds	r3, #4
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d008      	beq.n	8011ee4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	3304      	adds	r3, #4
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d101      	bne.n	8011ee4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee6:	8a9b      	ldrh	r3, [r3, #20]
 8011ee8:	8a3a      	ldrh	r2, [r7, #16]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d118      	bne.n	8011f20 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d005      	beq.n	8011f02 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef8:	685a      	ldr	r2, [r3, #4]
 8011efa:	4b43      	ldr	r3, [pc, #268]	; (8012008 <udp_input+0x218>)
 8011efc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d10e      	bne.n	8011f20 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011f02:	6a3b      	ldr	r3, [r7, #32]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d014      	beq.n	8011f32 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0a:	68da      	ldr	r2, [r3, #12]
 8011f0c:	6a3b      	ldr	r3, [r7, #32]
 8011f0e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011f10:	4b3e      	ldr	r3, [pc, #248]	; (801200c <udp_input+0x21c>)
 8011f12:	681a      	ldr	r2, [r3, #0]
 8011f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f16:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011f18:	4a3c      	ldr	r2, [pc, #240]	; (801200c <udp_input+0x21c>)
 8011f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011f1e:	e008      	b.n	8011f32 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f22:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f26:	68db      	ldr	r3, [r3, #12]
 8011f28:	627b      	str	r3, [r7, #36]	; 0x24
 8011f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d1a7      	bne.n	8011e80 <udp_input+0x90>
 8011f30:	e000      	b.n	8011f34 <udp_input+0x144>
        break;
 8011f32:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d101      	bne.n	8011f3e <udp_input+0x14e>
    pcb = uncon_pcb;
 8011f3a:	69fb      	ldr	r3, [r7, #28]
 8011f3c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d002      	beq.n	8011f4a <udp_input+0x15a>
    for_us = 1;
 8011f44:	2301      	movs	r3, #1
 8011f46:	76fb      	strb	r3, [r7, #27]
 8011f48:	e00a      	b.n	8011f60 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	3304      	adds	r3, #4
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	4b2d      	ldr	r3, [pc, #180]	; (8012008 <udp_input+0x218>)
 8011f52:	695b      	ldr	r3, [r3, #20]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	bf0c      	ite	eq
 8011f58:	2301      	moveq	r3, #1
 8011f5a:	2300      	movne	r3, #0
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011f60:	7efb      	ldrb	r3, [r7, #27]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d041      	beq.n	8011fea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011f66:	2108      	movs	r1, #8
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7fa f8d5 	bl	800c118 <pbuf_remove_header>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d00a      	beq.n	8011f8a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011f74:	4b20      	ldr	r3, [pc, #128]	; (8011ff8 <udp_input+0x208>)
 8011f76:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011f7a:	4925      	ldr	r1, [pc, #148]	; (8012010 <udp_input+0x220>)
 8011f7c:	4820      	ldr	r0, [pc, #128]	; (8012000 <udp_input+0x210>)
 8011f7e:	f002 fe0b 	bl	8014b98 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f7fa f94e 	bl	800c224 <pbuf_free>
      goto end;
 8011f88:	e032      	b.n	8011ff0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d012      	beq.n	8011fb6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f92:	699b      	ldr	r3, [r3, #24]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d00a      	beq.n	8011fae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9a:	699c      	ldr	r4, [r3, #24]
 8011f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9e:	69d8      	ldr	r0, [r3, #28]
 8011fa0:	8a3b      	ldrh	r3, [r7, #16]
 8011fa2:	9300      	str	r3, [sp, #0]
 8011fa4:	4b1b      	ldr	r3, [pc, #108]	; (8012014 <udp_input+0x224>)
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011faa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011fac:	e021      	b.n	8011ff2 <udp_input+0x202>
        pbuf_free(p);
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7fa f938 	bl	800c224 <pbuf_free>
        goto end;
 8011fb4:	e01c      	b.n	8011ff0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011fb6:	7cfb      	ldrb	r3, [r7, #19]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d112      	bne.n	8011fe2 <udp_input+0x1f2>
 8011fbc:	4b12      	ldr	r3, [pc, #72]	; (8012008 <udp_input+0x218>)
 8011fbe:	695b      	ldr	r3, [r3, #20]
 8011fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fc4:	2be0      	cmp	r3, #224	; 0xe0
 8011fc6:	d00c      	beq.n	8011fe2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011fc8:	4b0f      	ldr	r3, [pc, #60]	; (8012008 <udp_input+0x218>)
 8011fca:	899b      	ldrh	r3, [r3, #12]
 8011fcc:	3308      	adds	r3, #8
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	b21b      	sxth	r3, r3
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f7fa f912 	bl	800c1fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011fda:	2103      	movs	r1, #3
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f001 f89b 	bl	8013118 <icmp_dest_unreach>
      pbuf_free(p);
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f7fa f91e 	bl	800c224 <pbuf_free>
  return;
 8011fe8:	e003      	b.n	8011ff2 <udp_input+0x202>
    pbuf_free(p);
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f7fa f91a 	bl	800c224 <pbuf_free>
  return;
 8011ff0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011ff2:	372c      	adds	r7, #44	; 0x2c
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd90      	pop	{r4, r7, pc}
 8011ff8:	08017b04 	.word	0x08017b04
 8011ffc:	08017ba8 	.word	0x08017ba8
 8012000:	08017b58 	.word	0x08017b58
 8012004:	08017bc0 	.word	0x08017bc0
 8012008:	2004ac68 	.word	0x2004ac68
 801200c:	2004f1d8 	.word	0x2004f1d8
 8012010:	08017bdc 	.word	0x08017bdc
 8012014:	2004ac78 	.word	0x2004ac78

08012018 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012018:	b480      	push	{r7}
 801201a:	b085      	sub	sp, #20
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d01e      	beq.n	8012066 <udp_netif_ip_addr_changed+0x4e>
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d01a      	beq.n	8012066 <udp_netif_ip_addr_changed+0x4e>
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d017      	beq.n	8012066 <udp_netif_ip_addr_changed+0x4e>
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d013      	beq.n	8012066 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801203e:	4b0d      	ldr	r3, [pc, #52]	; (8012074 <udp_netif_ip_addr_changed+0x5c>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	60fb      	str	r3, [r7, #12]
 8012044:	e00c      	b.n	8012060 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	429a      	cmp	r2, r3
 8012050:	d103      	bne.n	801205a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	60fb      	str	r3, [r7, #12]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d1ef      	bne.n	8012046 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012066:	bf00      	nop
 8012068:	3714      	adds	r7, #20
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	2004f1d8 	.word	0x2004f1d8

08012078 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012080:	4915      	ldr	r1, [pc, #84]	; (80120d8 <etharp_free_entry+0x60>)
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	4613      	mov	r3, r2
 8012086:	005b      	lsls	r3, r3, #1
 8012088:	4413      	add	r3, r2
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	440b      	add	r3, r1
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d013      	beq.n	80120bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012094:	4910      	ldr	r1, [pc, #64]	; (80120d8 <etharp_free_entry+0x60>)
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	4613      	mov	r3, r2
 801209a:	005b      	lsls	r3, r3, #1
 801209c:	4413      	add	r3, r2
 801209e:	00db      	lsls	r3, r3, #3
 80120a0:	440b      	add	r3, r1
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7fa f8bd 	bl	800c224 <pbuf_free>
    arp_table[i].q = NULL;
 80120aa:	490b      	ldr	r1, [pc, #44]	; (80120d8 <etharp_free_entry+0x60>)
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	4613      	mov	r3, r2
 80120b0:	005b      	lsls	r3, r3, #1
 80120b2:	4413      	add	r3, r2
 80120b4:	00db      	lsls	r3, r3, #3
 80120b6:	440b      	add	r3, r1
 80120b8:	2200      	movs	r2, #0
 80120ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80120bc:	4906      	ldr	r1, [pc, #24]	; (80120d8 <etharp_free_entry+0x60>)
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	4613      	mov	r3, r2
 80120c2:	005b      	lsls	r3, r3, #1
 80120c4:	4413      	add	r3, r2
 80120c6:	00db      	lsls	r3, r3, #3
 80120c8:	440b      	add	r3, r1
 80120ca:	3314      	adds	r3, #20
 80120cc:	2200      	movs	r2, #0
 80120ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80120d0:	bf00      	nop
 80120d2:	3708      	adds	r7, #8
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	2004f1dc 	.word	0x2004f1dc

080120dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120e2:	2300      	movs	r3, #0
 80120e4:	607b      	str	r3, [r7, #4]
 80120e6:	e096      	b.n	8012216 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80120e8:	494f      	ldr	r1, [pc, #316]	; (8012228 <etharp_tmr+0x14c>)
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	4613      	mov	r3, r2
 80120ee:	005b      	lsls	r3, r3, #1
 80120f0:	4413      	add	r3, r2
 80120f2:	00db      	lsls	r3, r3, #3
 80120f4:	440b      	add	r3, r1
 80120f6:	3314      	adds	r3, #20
 80120f8:	781b      	ldrb	r3, [r3, #0]
 80120fa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80120fc:	78fb      	ldrb	r3, [r7, #3]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f000 8086 	beq.w	8012210 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012104:	4948      	ldr	r1, [pc, #288]	; (8012228 <etharp_tmr+0x14c>)
 8012106:	687a      	ldr	r2, [r7, #4]
 8012108:	4613      	mov	r3, r2
 801210a:	005b      	lsls	r3, r3, #1
 801210c:	4413      	add	r3, r2
 801210e:	00db      	lsls	r3, r3, #3
 8012110:	440b      	add	r3, r1
 8012112:	3312      	adds	r3, #18
 8012114:	881b      	ldrh	r3, [r3, #0]
 8012116:	3301      	adds	r3, #1
 8012118:	b298      	uxth	r0, r3
 801211a:	4943      	ldr	r1, [pc, #268]	; (8012228 <etharp_tmr+0x14c>)
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	4613      	mov	r3, r2
 8012120:	005b      	lsls	r3, r3, #1
 8012122:	4413      	add	r3, r2
 8012124:	00db      	lsls	r3, r3, #3
 8012126:	440b      	add	r3, r1
 8012128:	3312      	adds	r3, #18
 801212a:	4602      	mov	r2, r0
 801212c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801212e:	493e      	ldr	r1, [pc, #248]	; (8012228 <etharp_tmr+0x14c>)
 8012130:	687a      	ldr	r2, [r7, #4]
 8012132:	4613      	mov	r3, r2
 8012134:	005b      	lsls	r3, r3, #1
 8012136:	4413      	add	r3, r2
 8012138:	00db      	lsls	r3, r3, #3
 801213a:	440b      	add	r3, r1
 801213c:	3312      	adds	r3, #18
 801213e:	881b      	ldrh	r3, [r3, #0]
 8012140:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012144:	d215      	bcs.n	8012172 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012146:	4938      	ldr	r1, [pc, #224]	; (8012228 <etharp_tmr+0x14c>)
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	4613      	mov	r3, r2
 801214c:	005b      	lsls	r3, r3, #1
 801214e:	4413      	add	r3, r2
 8012150:	00db      	lsls	r3, r3, #3
 8012152:	440b      	add	r3, r1
 8012154:	3314      	adds	r3, #20
 8012156:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012158:	2b01      	cmp	r3, #1
 801215a:	d10e      	bne.n	801217a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801215c:	4932      	ldr	r1, [pc, #200]	; (8012228 <etharp_tmr+0x14c>)
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	4613      	mov	r3, r2
 8012162:	005b      	lsls	r3, r3, #1
 8012164:	4413      	add	r3, r2
 8012166:	00db      	lsls	r3, r3, #3
 8012168:	440b      	add	r3, r1
 801216a:	3312      	adds	r3, #18
 801216c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801216e:	2b04      	cmp	r3, #4
 8012170:	d903      	bls.n	801217a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f7ff ff80 	bl	8012078 <etharp_free_entry>
 8012178:	e04a      	b.n	8012210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801217a:	492b      	ldr	r1, [pc, #172]	; (8012228 <etharp_tmr+0x14c>)
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	4613      	mov	r3, r2
 8012180:	005b      	lsls	r3, r3, #1
 8012182:	4413      	add	r3, r2
 8012184:	00db      	lsls	r3, r3, #3
 8012186:	440b      	add	r3, r1
 8012188:	3314      	adds	r3, #20
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	2b03      	cmp	r3, #3
 801218e:	d10a      	bne.n	80121a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012190:	4925      	ldr	r1, [pc, #148]	; (8012228 <etharp_tmr+0x14c>)
 8012192:	687a      	ldr	r2, [r7, #4]
 8012194:	4613      	mov	r3, r2
 8012196:	005b      	lsls	r3, r3, #1
 8012198:	4413      	add	r3, r2
 801219a:	00db      	lsls	r3, r3, #3
 801219c:	440b      	add	r3, r1
 801219e:	3314      	adds	r3, #20
 80121a0:	2204      	movs	r2, #4
 80121a2:	701a      	strb	r2, [r3, #0]
 80121a4:	e034      	b.n	8012210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80121a6:	4920      	ldr	r1, [pc, #128]	; (8012228 <etharp_tmr+0x14c>)
 80121a8:	687a      	ldr	r2, [r7, #4]
 80121aa:	4613      	mov	r3, r2
 80121ac:	005b      	lsls	r3, r3, #1
 80121ae:	4413      	add	r3, r2
 80121b0:	00db      	lsls	r3, r3, #3
 80121b2:	440b      	add	r3, r1
 80121b4:	3314      	adds	r3, #20
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	2b04      	cmp	r3, #4
 80121ba:	d10a      	bne.n	80121d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80121bc:	491a      	ldr	r1, [pc, #104]	; (8012228 <etharp_tmr+0x14c>)
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	4613      	mov	r3, r2
 80121c2:	005b      	lsls	r3, r3, #1
 80121c4:	4413      	add	r3, r2
 80121c6:	00db      	lsls	r3, r3, #3
 80121c8:	440b      	add	r3, r1
 80121ca:	3314      	adds	r3, #20
 80121cc:	2202      	movs	r2, #2
 80121ce:	701a      	strb	r2, [r3, #0]
 80121d0:	e01e      	b.n	8012210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80121d2:	4915      	ldr	r1, [pc, #84]	; (8012228 <etharp_tmr+0x14c>)
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	4613      	mov	r3, r2
 80121d8:	005b      	lsls	r3, r3, #1
 80121da:	4413      	add	r3, r2
 80121dc:	00db      	lsls	r3, r3, #3
 80121de:	440b      	add	r3, r1
 80121e0:	3314      	adds	r3, #20
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d113      	bne.n	8012210 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80121e8:	490f      	ldr	r1, [pc, #60]	; (8012228 <etharp_tmr+0x14c>)
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	4613      	mov	r3, r2
 80121ee:	005b      	lsls	r3, r3, #1
 80121f0:	4413      	add	r3, r2
 80121f2:	00db      	lsls	r3, r3, #3
 80121f4:	440b      	add	r3, r1
 80121f6:	3308      	adds	r3, #8
 80121f8:	6818      	ldr	r0, [r3, #0]
 80121fa:	687a      	ldr	r2, [r7, #4]
 80121fc:	4613      	mov	r3, r2
 80121fe:	005b      	lsls	r3, r3, #1
 8012200:	4413      	add	r3, r2
 8012202:	00db      	lsls	r3, r3, #3
 8012204:	4a08      	ldr	r2, [pc, #32]	; (8012228 <etharp_tmr+0x14c>)
 8012206:	4413      	add	r3, r2
 8012208:	3304      	adds	r3, #4
 801220a:	4619      	mov	r1, r3
 801220c:	f000 fe6e 	bl	8012eec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	3301      	adds	r3, #1
 8012214:	607b      	str	r3, [r7, #4]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2b09      	cmp	r3, #9
 801221a:	f77f af65 	ble.w	80120e8 <etharp_tmr+0xc>
      }
    }
  }
}
 801221e:	bf00      	nop
 8012220:	bf00      	nop
 8012222:	3708      	adds	r7, #8
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	2004f1dc 	.word	0x2004f1dc

0801222c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b08a      	sub	sp, #40	; 0x28
 8012230:	af00      	add	r7, sp, #0
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	460b      	mov	r3, r1
 8012236:	607a      	str	r2, [r7, #4]
 8012238:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801223a:	230a      	movs	r3, #10
 801223c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801223e:	230a      	movs	r3, #10
 8012240:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012242:	230a      	movs	r3, #10
 8012244:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012246:	2300      	movs	r3, #0
 8012248:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801224a:	230a      	movs	r3, #10
 801224c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801224e:	2300      	movs	r3, #0
 8012250:	83bb      	strh	r3, [r7, #28]
 8012252:	2300      	movs	r3, #0
 8012254:	837b      	strh	r3, [r7, #26]
 8012256:	2300      	movs	r3, #0
 8012258:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801225a:	2300      	movs	r3, #0
 801225c:	843b      	strh	r3, [r7, #32]
 801225e:	e0ae      	b.n	80123be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012260:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012264:	49a6      	ldr	r1, [pc, #664]	; (8012500 <etharp_find_entry+0x2d4>)
 8012266:	4613      	mov	r3, r2
 8012268:	005b      	lsls	r3, r3, #1
 801226a:	4413      	add	r3, r2
 801226c:	00db      	lsls	r3, r3, #3
 801226e:	440b      	add	r3, r1
 8012270:	3314      	adds	r3, #20
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012276:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801227a:	2b0a      	cmp	r3, #10
 801227c:	d105      	bne.n	801228a <etharp_find_entry+0x5e>
 801227e:	7dfb      	ldrb	r3, [r7, #23]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d102      	bne.n	801228a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012284:	8c3b      	ldrh	r3, [r7, #32]
 8012286:	847b      	strh	r3, [r7, #34]	; 0x22
 8012288:	e095      	b.n	80123b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801228a:	7dfb      	ldrb	r3, [r7, #23]
 801228c:	2b00      	cmp	r3, #0
 801228e:	f000 8092 	beq.w	80123b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012292:	7dfb      	ldrb	r3, [r7, #23]
 8012294:	2b01      	cmp	r3, #1
 8012296:	d009      	beq.n	80122ac <etharp_find_entry+0x80>
 8012298:	7dfb      	ldrb	r3, [r7, #23]
 801229a:	2b01      	cmp	r3, #1
 801229c:	d806      	bhi.n	80122ac <etharp_find_entry+0x80>
 801229e:	4b99      	ldr	r3, [pc, #612]	; (8012504 <etharp_find_entry+0x2d8>)
 80122a0:	f240 1223 	movw	r2, #291	; 0x123
 80122a4:	4998      	ldr	r1, [pc, #608]	; (8012508 <etharp_find_entry+0x2dc>)
 80122a6:	4899      	ldr	r0, [pc, #612]	; (801250c <etharp_find_entry+0x2e0>)
 80122a8:	f002 fc76 	bl	8014b98 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d020      	beq.n	80122f4 <etharp_find_entry+0xc8>
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	6819      	ldr	r1, [r3, #0]
 80122b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122ba:	4891      	ldr	r0, [pc, #580]	; (8012500 <etharp_find_entry+0x2d4>)
 80122bc:	4613      	mov	r3, r2
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	4413      	add	r3, r2
 80122c2:	00db      	lsls	r3, r3, #3
 80122c4:	4403      	add	r3, r0
 80122c6:	3304      	adds	r3, #4
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4299      	cmp	r1, r3
 80122cc:	d112      	bne.n	80122f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d00c      	beq.n	80122ee <etharp_find_entry+0xc2>
 80122d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122d8:	4989      	ldr	r1, [pc, #548]	; (8012500 <etharp_find_entry+0x2d4>)
 80122da:	4613      	mov	r3, r2
 80122dc:	005b      	lsls	r3, r3, #1
 80122de:	4413      	add	r3, r2
 80122e0:	00db      	lsls	r3, r3, #3
 80122e2:	440b      	add	r3, r1
 80122e4:	3308      	adds	r3, #8
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	687a      	ldr	r2, [r7, #4]
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d102      	bne.n	80122f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80122ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122f2:	e100      	b.n	80124f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80122f4:	7dfb      	ldrb	r3, [r7, #23]
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	d140      	bne.n	801237c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80122fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122fe:	4980      	ldr	r1, [pc, #512]	; (8012500 <etharp_find_entry+0x2d4>)
 8012300:	4613      	mov	r3, r2
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	4413      	add	r3, r2
 8012306:	00db      	lsls	r3, r3, #3
 8012308:	440b      	add	r3, r1
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d01a      	beq.n	8012346 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012310:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012314:	497a      	ldr	r1, [pc, #488]	; (8012500 <etharp_find_entry+0x2d4>)
 8012316:	4613      	mov	r3, r2
 8012318:	005b      	lsls	r3, r3, #1
 801231a:	4413      	add	r3, r2
 801231c:	00db      	lsls	r3, r3, #3
 801231e:	440b      	add	r3, r1
 8012320:	3312      	adds	r3, #18
 8012322:	881b      	ldrh	r3, [r3, #0]
 8012324:	8bba      	ldrh	r2, [r7, #28]
 8012326:	429a      	cmp	r2, r3
 8012328:	d845      	bhi.n	80123b6 <etharp_find_entry+0x18a>
            old_queue = i;
 801232a:	8c3b      	ldrh	r3, [r7, #32]
 801232c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801232e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012332:	4973      	ldr	r1, [pc, #460]	; (8012500 <etharp_find_entry+0x2d4>)
 8012334:	4613      	mov	r3, r2
 8012336:	005b      	lsls	r3, r3, #1
 8012338:	4413      	add	r3, r2
 801233a:	00db      	lsls	r3, r3, #3
 801233c:	440b      	add	r3, r1
 801233e:	3312      	adds	r3, #18
 8012340:	881b      	ldrh	r3, [r3, #0]
 8012342:	83bb      	strh	r3, [r7, #28]
 8012344:	e037      	b.n	80123b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801234a:	496d      	ldr	r1, [pc, #436]	; (8012500 <etharp_find_entry+0x2d4>)
 801234c:	4613      	mov	r3, r2
 801234e:	005b      	lsls	r3, r3, #1
 8012350:	4413      	add	r3, r2
 8012352:	00db      	lsls	r3, r3, #3
 8012354:	440b      	add	r3, r1
 8012356:	3312      	adds	r3, #18
 8012358:	881b      	ldrh	r3, [r3, #0]
 801235a:	8b7a      	ldrh	r2, [r7, #26]
 801235c:	429a      	cmp	r2, r3
 801235e:	d82a      	bhi.n	80123b6 <etharp_find_entry+0x18a>
            old_pending = i;
 8012360:	8c3b      	ldrh	r3, [r7, #32]
 8012362:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012368:	4965      	ldr	r1, [pc, #404]	; (8012500 <etharp_find_entry+0x2d4>)
 801236a:	4613      	mov	r3, r2
 801236c:	005b      	lsls	r3, r3, #1
 801236e:	4413      	add	r3, r2
 8012370:	00db      	lsls	r3, r3, #3
 8012372:	440b      	add	r3, r1
 8012374:	3312      	adds	r3, #18
 8012376:	881b      	ldrh	r3, [r3, #0]
 8012378:	837b      	strh	r3, [r7, #26]
 801237a:	e01c      	b.n	80123b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801237c:	7dfb      	ldrb	r3, [r7, #23]
 801237e:	2b01      	cmp	r3, #1
 8012380:	d919      	bls.n	80123b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012382:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012386:	495e      	ldr	r1, [pc, #376]	; (8012500 <etharp_find_entry+0x2d4>)
 8012388:	4613      	mov	r3, r2
 801238a:	005b      	lsls	r3, r3, #1
 801238c:	4413      	add	r3, r2
 801238e:	00db      	lsls	r3, r3, #3
 8012390:	440b      	add	r3, r1
 8012392:	3312      	adds	r3, #18
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	8b3a      	ldrh	r2, [r7, #24]
 8012398:	429a      	cmp	r2, r3
 801239a:	d80c      	bhi.n	80123b6 <etharp_find_entry+0x18a>
            old_stable = i;
 801239c:	8c3b      	ldrh	r3, [r7, #32]
 801239e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80123a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123a4:	4956      	ldr	r1, [pc, #344]	; (8012500 <etharp_find_entry+0x2d4>)
 80123a6:	4613      	mov	r3, r2
 80123a8:	005b      	lsls	r3, r3, #1
 80123aa:	4413      	add	r3, r2
 80123ac:	00db      	lsls	r3, r3, #3
 80123ae:	440b      	add	r3, r1
 80123b0:	3312      	adds	r3, #18
 80123b2:	881b      	ldrh	r3, [r3, #0]
 80123b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80123b6:	8c3b      	ldrh	r3, [r7, #32]
 80123b8:	3301      	adds	r3, #1
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	843b      	strh	r3, [r7, #32]
 80123be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80123c2:	2b09      	cmp	r3, #9
 80123c4:	f77f af4c 	ble.w	8012260 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80123c8:	7afb      	ldrb	r3, [r7, #11]
 80123ca:	f003 0302 	and.w	r3, r3, #2
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d108      	bne.n	80123e4 <etharp_find_entry+0x1b8>
 80123d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80123d6:	2b0a      	cmp	r3, #10
 80123d8:	d107      	bne.n	80123ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80123da:	7afb      	ldrb	r3, [r7, #11]
 80123dc:	f003 0301 	and.w	r3, r3, #1
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d102      	bne.n	80123ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80123e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123e8:	e085      	b.n	80124f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80123ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80123ee:	2b09      	cmp	r3, #9
 80123f0:	dc02      	bgt.n	80123f8 <etharp_find_entry+0x1cc>
    i = empty;
 80123f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123f4:	843b      	strh	r3, [r7, #32]
 80123f6:	e039      	b.n	801246c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80123f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80123fc:	2b09      	cmp	r3, #9
 80123fe:	dc14      	bgt.n	801242a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012402:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012408:	493d      	ldr	r1, [pc, #244]	; (8012500 <etharp_find_entry+0x2d4>)
 801240a:	4613      	mov	r3, r2
 801240c:	005b      	lsls	r3, r3, #1
 801240e:	4413      	add	r3, r2
 8012410:	00db      	lsls	r3, r3, #3
 8012412:	440b      	add	r3, r1
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d018      	beq.n	801244c <etharp_find_entry+0x220>
 801241a:	4b3a      	ldr	r3, [pc, #232]	; (8012504 <etharp_find_entry+0x2d8>)
 801241c:	f240 126d 	movw	r2, #365	; 0x16d
 8012420:	493b      	ldr	r1, [pc, #236]	; (8012510 <etharp_find_entry+0x2e4>)
 8012422:	483a      	ldr	r0, [pc, #232]	; (801250c <etharp_find_entry+0x2e0>)
 8012424:	f002 fbb8 	bl	8014b98 <iprintf>
 8012428:	e010      	b.n	801244c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801242a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801242e:	2b09      	cmp	r3, #9
 8012430:	dc02      	bgt.n	8012438 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012432:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012434:	843b      	strh	r3, [r7, #32]
 8012436:	e009      	b.n	801244c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012438:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801243c:	2b09      	cmp	r3, #9
 801243e:	dc02      	bgt.n	8012446 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012440:	8bfb      	ldrh	r3, [r7, #30]
 8012442:	843b      	strh	r3, [r7, #32]
 8012444:	e002      	b.n	801244c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801244a:	e054      	b.n	80124f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801244c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012450:	2b09      	cmp	r3, #9
 8012452:	dd06      	ble.n	8012462 <etharp_find_entry+0x236>
 8012454:	4b2b      	ldr	r3, [pc, #172]	; (8012504 <etharp_find_entry+0x2d8>)
 8012456:	f240 127f 	movw	r2, #383	; 0x17f
 801245a:	492e      	ldr	r1, [pc, #184]	; (8012514 <etharp_find_entry+0x2e8>)
 801245c:	482b      	ldr	r0, [pc, #172]	; (801250c <etharp_find_entry+0x2e0>)
 801245e:	f002 fb9b 	bl	8014b98 <iprintf>
    etharp_free_entry(i);
 8012462:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012466:	4618      	mov	r0, r3
 8012468:	f7ff fe06 	bl	8012078 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801246c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012470:	2b09      	cmp	r3, #9
 8012472:	dd06      	ble.n	8012482 <etharp_find_entry+0x256>
 8012474:	4b23      	ldr	r3, [pc, #140]	; (8012504 <etharp_find_entry+0x2d8>)
 8012476:	f240 1283 	movw	r2, #387	; 0x183
 801247a:	4926      	ldr	r1, [pc, #152]	; (8012514 <etharp_find_entry+0x2e8>)
 801247c:	4823      	ldr	r0, [pc, #140]	; (801250c <etharp_find_entry+0x2e0>)
 801247e:	f002 fb8b 	bl	8014b98 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012482:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012486:	491e      	ldr	r1, [pc, #120]	; (8012500 <etharp_find_entry+0x2d4>)
 8012488:	4613      	mov	r3, r2
 801248a:	005b      	lsls	r3, r3, #1
 801248c:	4413      	add	r3, r2
 801248e:	00db      	lsls	r3, r3, #3
 8012490:	440b      	add	r3, r1
 8012492:	3314      	adds	r3, #20
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d006      	beq.n	80124a8 <etharp_find_entry+0x27c>
 801249a:	4b1a      	ldr	r3, [pc, #104]	; (8012504 <etharp_find_entry+0x2d8>)
 801249c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80124a0:	491d      	ldr	r1, [pc, #116]	; (8012518 <etharp_find_entry+0x2ec>)
 80124a2:	481a      	ldr	r0, [pc, #104]	; (801250c <etharp_find_entry+0x2e0>)
 80124a4:	f002 fb78 	bl	8014b98 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00b      	beq.n	80124c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80124ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	6819      	ldr	r1, [r3, #0]
 80124b6:	4812      	ldr	r0, [pc, #72]	; (8012500 <etharp_find_entry+0x2d4>)
 80124b8:	4613      	mov	r3, r2
 80124ba:	005b      	lsls	r3, r3, #1
 80124bc:	4413      	add	r3, r2
 80124be:	00db      	lsls	r3, r3, #3
 80124c0:	4403      	add	r3, r0
 80124c2:	3304      	adds	r3, #4
 80124c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80124c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124ca:	490d      	ldr	r1, [pc, #52]	; (8012500 <etharp_find_entry+0x2d4>)
 80124cc:	4613      	mov	r3, r2
 80124ce:	005b      	lsls	r3, r3, #1
 80124d0:	4413      	add	r3, r2
 80124d2:	00db      	lsls	r3, r3, #3
 80124d4:	440b      	add	r3, r1
 80124d6:	3312      	adds	r3, #18
 80124d8:	2200      	movs	r2, #0
 80124da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80124dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124e0:	4907      	ldr	r1, [pc, #28]	; (8012500 <etharp_find_entry+0x2d4>)
 80124e2:	4613      	mov	r3, r2
 80124e4:	005b      	lsls	r3, r3, #1
 80124e6:	4413      	add	r3, r2
 80124e8:	00db      	lsls	r3, r3, #3
 80124ea:	440b      	add	r3, r1
 80124ec:	3308      	adds	r3, #8
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80124f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3728      	adds	r7, #40	; 0x28
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	2004f1dc 	.word	0x2004f1dc
 8012504:	08017e68 	.word	0x08017e68
 8012508:	08017ea0 	.word	0x08017ea0
 801250c:	08017ee0 	.word	0x08017ee0
 8012510:	08017f08 	.word	0x08017f08
 8012514:	08017f20 	.word	0x08017f20
 8012518:	08017f34 	.word	0x08017f34

0801251c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b088      	sub	sp, #32
 8012520:	af02      	add	r7, sp, #8
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	607a      	str	r2, [r7, #4]
 8012528:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012530:	2b06      	cmp	r3, #6
 8012532:	d006      	beq.n	8012542 <etharp_update_arp_entry+0x26>
 8012534:	4b48      	ldr	r3, [pc, #288]	; (8012658 <etharp_update_arp_entry+0x13c>)
 8012536:	f240 12a9 	movw	r2, #425	; 0x1a9
 801253a:	4948      	ldr	r1, [pc, #288]	; (801265c <etharp_update_arp_entry+0x140>)
 801253c:	4848      	ldr	r0, [pc, #288]	; (8012660 <etharp_update_arp_entry+0x144>)
 801253e:	f002 fb2b 	bl	8014b98 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d012      	beq.n	801256e <etharp_update_arp_entry+0x52>
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d00e      	beq.n	801256e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	68f9      	ldr	r1, [r7, #12]
 8012556:	4618      	mov	r0, r3
 8012558:	f001 f8fe 	bl	8013758 <ip4_addr_isbroadcast_u32>
 801255c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801255e:	2b00      	cmp	r3, #0
 8012560:	d105      	bne.n	801256e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801256a:	2be0      	cmp	r3, #224	; 0xe0
 801256c:	d102      	bne.n	8012574 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801256e:	f06f 030f 	mvn.w	r3, #15
 8012572:	e06c      	b.n	801264e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012574:	78fb      	ldrb	r3, [r7, #3]
 8012576:	68fa      	ldr	r2, [r7, #12]
 8012578:	4619      	mov	r1, r3
 801257a:	68b8      	ldr	r0, [r7, #8]
 801257c:	f7ff fe56 	bl	801222c <etharp_find_entry>
 8012580:	4603      	mov	r3, r0
 8012582:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012584:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012588:	2b00      	cmp	r3, #0
 801258a:	da02      	bge.n	8012592 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801258c:	8afb      	ldrh	r3, [r7, #22]
 801258e:	b25b      	sxtb	r3, r3
 8012590:	e05d      	b.n	801264e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012592:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012596:	4933      	ldr	r1, [pc, #204]	; (8012664 <etharp_update_arp_entry+0x148>)
 8012598:	4613      	mov	r3, r2
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	4413      	add	r3, r2
 801259e:	00db      	lsls	r3, r3, #3
 80125a0:	440b      	add	r3, r1
 80125a2:	3314      	adds	r3, #20
 80125a4:	2202      	movs	r2, #2
 80125a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80125a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125ac:	492d      	ldr	r1, [pc, #180]	; (8012664 <etharp_update_arp_entry+0x148>)
 80125ae:	4613      	mov	r3, r2
 80125b0:	005b      	lsls	r3, r3, #1
 80125b2:	4413      	add	r3, r2
 80125b4:	00db      	lsls	r3, r3, #3
 80125b6:	440b      	add	r3, r1
 80125b8:	3308      	adds	r3, #8
 80125ba:	68fa      	ldr	r2, [r7, #12]
 80125bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80125be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125c2:	4613      	mov	r3, r2
 80125c4:	005b      	lsls	r3, r3, #1
 80125c6:	4413      	add	r3, r2
 80125c8:	00db      	lsls	r3, r3, #3
 80125ca:	3308      	adds	r3, #8
 80125cc:	4a25      	ldr	r2, [pc, #148]	; (8012664 <etharp_update_arp_entry+0x148>)
 80125ce:	4413      	add	r3, r2
 80125d0:	3304      	adds	r3, #4
 80125d2:	2206      	movs	r2, #6
 80125d4:	6879      	ldr	r1, [r7, #4]
 80125d6:	4618      	mov	r0, r3
 80125d8:	f002 fa33 	bl	8014a42 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80125dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125e0:	4920      	ldr	r1, [pc, #128]	; (8012664 <etharp_update_arp_entry+0x148>)
 80125e2:	4613      	mov	r3, r2
 80125e4:	005b      	lsls	r3, r3, #1
 80125e6:	4413      	add	r3, r2
 80125e8:	00db      	lsls	r3, r3, #3
 80125ea:	440b      	add	r3, r1
 80125ec:	3312      	adds	r3, #18
 80125ee:	2200      	movs	r2, #0
 80125f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80125f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125f6:	491b      	ldr	r1, [pc, #108]	; (8012664 <etharp_update_arp_entry+0x148>)
 80125f8:	4613      	mov	r3, r2
 80125fa:	005b      	lsls	r3, r3, #1
 80125fc:	4413      	add	r3, r2
 80125fe:	00db      	lsls	r3, r3, #3
 8012600:	440b      	add	r3, r1
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d021      	beq.n	801264c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012608:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801260c:	4915      	ldr	r1, [pc, #84]	; (8012664 <etharp_update_arp_entry+0x148>)
 801260e:	4613      	mov	r3, r2
 8012610:	005b      	lsls	r3, r3, #1
 8012612:	4413      	add	r3, r2
 8012614:	00db      	lsls	r3, r3, #3
 8012616:	440b      	add	r3, r1
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801261c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012620:	4910      	ldr	r1, [pc, #64]	; (8012664 <etharp_update_arp_entry+0x148>)
 8012622:	4613      	mov	r3, r2
 8012624:	005b      	lsls	r3, r3, #1
 8012626:	4413      	add	r3, r2
 8012628:	00db      	lsls	r3, r3, #3
 801262a:	440b      	add	r3, r1
 801262c:	2200      	movs	r2, #0
 801262e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801263a:	9300      	str	r3, [sp, #0]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6939      	ldr	r1, [r7, #16]
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f001 ff97 	bl	8014574 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012646:	6938      	ldr	r0, [r7, #16]
 8012648:	f7f9 fdec 	bl	800c224 <pbuf_free>
  }
  return ERR_OK;
 801264c:	2300      	movs	r3, #0
}
 801264e:	4618      	mov	r0, r3
 8012650:	3718      	adds	r7, #24
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	08017e68 	.word	0x08017e68
 801265c:	08017f60 	.word	0x08017f60
 8012660:	08017ee0 	.word	0x08017ee0
 8012664:	2004f1dc 	.word	0x2004f1dc

08012668 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012670:	2300      	movs	r3, #0
 8012672:	60fb      	str	r3, [r7, #12]
 8012674:	e01e      	b.n	80126b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012676:	4913      	ldr	r1, [pc, #76]	; (80126c4 <etharp_cleanup_netif+0x5c>)
 8012678:	68fa      	ldr	r2, [r7, #12]
 801267a:	4613      	mov	r3, r2
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	4413      	add	r3, r2
 8012680:	00db      	lsls	r3, r3, #3
 8012682:	440b      	add	r3, r1
 8012684:	3314      	adds	r3, #20
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801268a:	7afb      	ldrb	r3, [r7, #11]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d00e      	beq.n	80126ae <etharp_cleanup_netif+0x46>
 8012690:	490c      	ldr	r1, [pc, #48]	; (80126c4 <etharp_cleanup_netif+0x5c>)
 8012692:	68fa      	ldr	r2, [r7, #12]
 8012694:	4613      	mov	r3, r2
 8012696:	005b      	lsls	r3, r3, #1
 8012698:	4413      	add	r3, r2
 801269a:	00db      	lsls	r3, r3, #3
 801269c:	440b      	add	r3, r1
 801269e:	3308      	adds	r3, #8
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	687a      	ldr	r2, [r7, #4]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d102      	bne.n	80126ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80126a8:	68f8      	ldr	r0, [r7, #12]
 80126aa:	f7ff fce5 	bl	8012078 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	3301      	adds	r3, #1
 80126b2:	60fb      	str	r3, [r7, #12]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2b09      	cmp	r3, #9
 80126b8:	dddd      	ble.n	8012676 <etharp_cleanup_netif+0xe>
    }
  }
}
 80126ba:	bf00      	nop
 80126bc:	bf00      	nop
 80126be:	3710      	adds	r7, #16
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}
 80126c4:	2004f1dc 	.word	0x2004f1dc

080126c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80126c8:	b5b0      	push	{r4, r5, r7, lr}
 80126ca:	b08a      	sub	sp, #40	; 0x28
 80126cc:	af04      	add	r7, sp, #16
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d107      	bne.n	80126e8 <etharp_input+0x20>
 80126d8:	4b3d      	ldr	r3, [pc, #244]	; (80127d0 <etharp_input+0x108>)
 80126da:	f240 228a 	movw	r2, #650	; 0x28a
 80126de:	493d      	ldr	r1, [pc, #244]	; (80127d4 <etharp_input+0x10c>)
 80126e0:	483d      	ldr	r0, [pc, #244]	; (80127d8 <etharp_input+0x110>)
 80126e2:	f002 fa59 	bl	8014b98 <iprintf>
 80126e6:	e06f      	b.n	80127c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	881b      	ldrh	r3, [r3, #0]
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80126f8:	d10c      	bne.n	8012714 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80126fe:	2b06      	cmp	r3, #6
 8012700:	d108      	bne.n	8012714 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012706:	2b04      	cmp	r3, #4
 8012708:	d104      	bne.n	8012714 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	885b      	ldrh	r3, [r3, #2]
 801270e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012710:	2b08      	cmp	r3, #8
 8012712:	d003      	beq.n	801271c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7f9 fd85 	bl	800c224 <pbuf_free>
    return;
 801271a:	e055      	b.n	80127c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	330e      	adds	r3, #14
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	3318      	adds	r3, #24
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	3304      	adds	r3, #4
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d102      	bne.n	801273c <etharp_input+0x74>
    for_us = 0;
 8012736:	2300      	movs	r3, #0
 8012738:	75fb      	strb	r3, [r7, #23]
 801273a:	e009      	b.n	8012750 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801273c:	68ba      	ldr	r2, [r7, #8]
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	3304      	adds	r3, #4
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	429a      	cmp	r2, r3
 8012746:	bf0c      	ite	eq
 8012748:	2301      	moveq	r3, #1
 801274a:	2300      	movne	r3, #0
 801274c:	b2db      	uxtb	r3, r3
 801274e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	f103 0208 	add.w	r2, r3, #8
 8012756:	7dfb      	ldrb	r3, [r7, #23]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d001      	beq.n	8012760 <etharp_input+0x98>
 801275c:	2301      	movs	r3, #1
 801275e:	e000      	b.n	8012762 <etharp_input+0x9a>
 8012760:	2302      	movs	r3, #2
 8012762:	f107 010c 	add.w	r1, r7, #12
 8012766:	6838      	ldr	r0, [r7, #0]
 8012768:	f7ff fed8 	bl	801251c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	88db      	ldrh	r3, [r3, #6]
 8012770:	b29b      	uxth	r3, r3
 8012772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012776:	d003      	beq.n	8012780 <etharp_input+0xb8>
 8012778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801277c:	d01e      	beq.n	80127bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801277e:	e020      	b.n	80127c2 <etharp_input+0xfa>
      if (for_us) {
 8012780:	7dfb      	ldrb	r3, [r7, #23]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d01c      	beq.n	80127c0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801279c:	693a      	ldr	r2, [r7, #16]
 801279e:	3208      	adds	r2, #8
        etharp_raw(netif,
 80127a0:	2102      	movs	r1, #2
 80127a2:	9103      	str	r1, [sp, #12]
 80127a4:	f107 010c 	add.w	r1, r7, #12
 80127a8:	9102      	str	r1, [sp, #8]
 80127aa:	9201      	str	r2, [sp, #4]
 80127ac:	9300      	str	r3, [sp, #0]
 80127ae:	462b      	mov	r3, r5
 80127b0:	4622      	mov	r2, r4
 80127b2:	4601      	mov	r1, r0
 80127b4:	6838      	ldr	r0, [r7, #0]
 80127b6:	f000 faeb 	bl	8012d90 <etharp_raw>
      break;
 80127ba:	e001      	b.n	80127c0 <etharp_input+0xf8>
      break;
 80127bc:	bf00      	nop
 80127be:	e000      	b.n	80127c2 <etharp_input+0xfa>
      break;
 80127c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f7f9 fd2e 	bl	800c224 <pbuf_free>
}
 80127c8:	3718      	adds	r7, #24
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bdb0      	pop	{r4, r5, r7, pc}
 80127ce:	bf00      	nop
 80127d0:	08017e68 	.word	0x08017e68
 80127d4:	08017fb8 	.word	0x08017fb8
 80127d8:	08017ee0 	.word	0x08017ee0

080127dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b086      	sub	sp, #24
 80127e0:	af02      	add	r7, sp, #8
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	4613      	mov	r3, r2
 80127e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80127ea:	79fa      	ldrb	r2, [r7, #7]
 80127ec:	4944      	ldr	r1, [pc, #272]	; (8012900 <etharp_output_to_arp_index+0x124>)
 80127ee:	4613      	mov	r3, r2
 80127f0:	005b      	lsls	r3, r3, #1
 80127f2:	4413      	add	r3, r2
 80127f4:	00db      	lsls	r3, r3, #3
 80127f6:	440b      	add	r3, r1
 80127f8:	3314      	adds	r3, #20
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	2b01      	cmp	r3, #1
 80127fe:	d806      	bhi.n	801280e <etharp_output_to_arp_index+0x32>
 8012800:	4b40      	ldr	r3, [pc, #256]	; (8012904 <etharp_output_to_arp_index+0x128>)
 8012802:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012806:	4940      	ldr	r1, [pc, #256]	; (8012908 <etharp_output_to_arp_index+0x12c>)
 8012808:	4840      	ldr	r0, [pc, #256]	; (801290c <etharp_output_to_arp_index+0x130>)
 801280a:	f002 f9c5 	bl	8014b98 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801280e:	79fa      	ldrb	r2, [r7, #7]
 8012810:	493b      	ldr	r1, [pc, #236]	; (8012900 <etharp_output_to_arp_index+0x124>)
 8012812:	4613      	mov	r3, r2
 8012814:	005b      	lsls	r3, r3, #1
 8012816:	4413      	add	r3, r2
 8012818:	00db      	lsls	r3, r3, #3
 801281a:	440b      	add	r3, r1
 801281c:	3314      	adds	r3, #20
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	2b02      	cmp	r3, #2
 8012822:	d153      	bne.n	80128cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012824:	79fa      	ldrb	r2, [r7, #7]
 8012826:	4936      	ldr	r1, [pc, #216]	; (8012900 <etharp_output_to_arp_index+0x124>)
 8012828:	4613      	mov	r3, r2
 801282a:	005b      	lsls	r3, r3, #1
 801282c:	4413      	add	r3, r2
 801282e:	00db      	lsls	r3, r3, #3
 8012830:	440b      	add	r3, r1
 8012832:	3312      	adds	r3, #18
 8012834:	881b      	ldrh	r3, [r3, #0]
 8012836:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801283a:	d919      	bls.n	8012870 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801283c:	79fa      	ldrb	r2, [r7, #7]
 801283e:	4613      	mov	r3, r2
 8012840:	005b      	lsls	r3, r3, #1
 8012842:	4413      	add	r3, r2
 8012844:	00db      	lsls	r3, r3, #3
 8012846:	4a2e      	ldr	r2, [pc, #184]	; (8012900 <etharp_output_to_arp_index+0x124>)
 8012848:	4413      	add	r3, r2
 801284a:	3304      	adds	r3, #4
 801284c:	4619      	mov	r1, r3
 801284e:	68f8      	ldr	r0, [r7, #12]
 8012850:	f000 fb4c 	bl	8012eec <etharp_request>
 8012854:	4603      	mov	r3, r0
 8012856:	2b00      	cmp	r3, #0
 8012858:	d138      	bne.n	80128cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801285a:	79fa      	ldrb	r2, [r7, #7]
 801285c:	4928      	ldr	r1, [pc, #160]	; (8012900 <etharp_output_to_arp_index+0x124>)
 801285e:	4613      	mov	r3, r2
 8012860:	005b      	lsls	r3, r3, #1
 8012862:	4413      	add	r3, r2
 8012864:	00db      	lsls	r3, r3, #3
 8012866:	440b      	add	r3, r1
 8012868:	3314      	adds	r3, #20
 801286a:	2203      	movs	r2, #3
 801286c:	701a      	strb	r2, [r3, #0]
 801286e:	e02d      	b.n	80128cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012870:	79fa      	ldrb	r2, [r7, #7]
 8012872:	4923      	ldr	r1, [pc, #140]	; (8012900 <etharp_output_to_arp_index+0x124>)
 8012874:	4613      	mov	r3, r2
 8012876:	005b      	lsls	r3, r3, #1
 8012878:	4413      	add	r3, r2
 801287a:	00db      	lsls	r3, r3, #3
 801287c:	440b      	add	r3, r1
 801287e:	3312      	adds	r3, #18
 8012880:	881b      	ldrh	r3, [r3, #0]
 8012882:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012886:	d321      	bcc.n	80128cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012888:	79fa      	ldrb	r2, [r7, #7]
 801288a:	4613      	mov	r3, r2
 801288c:	005b      	lsls	r3, r3, #1
 801288e:	4413      	add	r3, r2
 8012890:	00db      	lsls	r3, r3, #3
 8012892:	4a1b      	ldr	r2, [pc, #108]	; (8012900 <etharp_output_to_arp_index+0x124>)
 8012894:	4413      	add	r3, r2
 8012896:	1d19      	adds	r1, r3, #4
 8012898:	79fa      	ldrb	r2, [r7, #7]
 801289a:	4613      	mov	r3, r2
 801289c:	005b      	lsls	r3, r3, #1
 801289e:	4413      	add	r3, r2
 80128a0:	00db      	lsls	r3, r3, #3
 80128a2:	3308      	adds	r3, #8
 80128a4:	4a16      	ldr	r2, [pc, #88]	; (8012900 <etharp_output_to_arp_index+0x124>)
 80128a6:	4413      	add	r3, r2
 80128a8:	3304      	adds	r3, #4
 80128aa:	461a      	mov	r2, r3
 80128ac:	68f8      	ldr	r0, [r7, #12]
 80128ae:	f000 fafb 	bl	8012ea8 <etharp_request_dst>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d109      	bne.n	80128cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80128b8:	79fa      	ldrb	r2, [r7, #7]
 80128ba:	4911      	ldr	r1, [pc, #68]	; (8012900 <etharp_output_to_arp_index+0x124>)
 80128bc:	4613      	mov	r3, r2
 80128be:	005b      	lsls	r3, r3, #1
 80128c0:	4413      	add	r3, r2
 80128c2:	00db      	lsls	r3, r3, #3
 80128c4:	440b      	add	r3, r1
 80128c6:	3314      	adds	r3, #20
 80128c8:	2203      	movs	r2, #3
 80128ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80128d2:	79fa      	ldrb	r2, [r7, #7]
 80128d4:	4613      	mov	r3, r2
 80128d6:	005b      	lsls	r3, r3, #1
 80128d8:	4413      	add	r3, r2
 80128da:	00db      	lsls	r3, r3, #3
 80128dc:	3308      	adds	r3, #8
 80128de:	4a08      	ldr	r2, [pc, #32]	; (8012900 <etharp_output_to_arp_index+0x124>)
 80128e0:	4413      	add	r3, r2
 80128e2:	3304      	adds	r3, #4
 80128e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80128e8:	9200      	str	r2, [sp, #0]
 80128ea:	460a      	mov	r2, r1
 80128ec:	68b9      	ldr	r1, [r7, #8]
 80128ee:	68f8      	ldr	r0, [r7, #12]
 80128f0:	f001 fe40 	bl	8014574 <ethernet_output>
 80128f4:	4603      	mov	r3, r0
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3710      	adds	r7, #16
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	2004f1dc 	.word	0x2004f1dc
 8012904:	08017e68 	.word	0x08017e68
 8012908:	08017fd8 	.word	0x08017fd8
 801290c:	08017ee0 	.word	0x08017ee0

08012910 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b08a      	sub	sp, #40	; 0x28
 8012914:	af02      	add	r7, sp, #8
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d106      	bne.n	8012934 <etharp_output+0x24>
 8012926:	4b73      	ldr	r3, [pc, #460]	; (8012af4 <etharp_output+0x1e4>)
 8012928:	f240 321e 	movw	r2, #798	; 0x31e
 801292c:	4972      	ldr	r1, [pc, #456]	; (8012af8 <etharp_output+0x1e8>)
 801292e:	4873      	ldr	r0, [pc, #460]	; (8012afc <etharp_output+0x1ec>)
 8012930:	f002 f932 	bl	8014b98 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d106      	bne.n	8012948 <etharp_output+0x38>
 801293a:	4b6e      	ldr	r3, [pc, #440]	; (8012af4 <etharp_output+0x1e4>)
 801293c:	f240 321f 	movw	r2, #799	; 0x31f
 8012940:	496f      	ldr	r1, [pc, #444]	; (8012b00 <etharp_output+0x1f0>)
 8012942:	486e      	ldr	r0, [pc, #440]	; (8012afc <etharp_output+0x1ec>)
 8012944:	f002 f928 	bl	8014b98 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d106      	bne.n	801295c <etharp_output+0x4c>
 801294e:	4b69      	ldr	r3, [pc, #420]	; (8012af4 <etharp_output+0x1e4>)
 8012950:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012954:	496b      	ldr	r1, [pc, #428]	; (8012b04 <etharp_output+0x1f4>)
 8012956:	4869      	ldr	r0, [pc, #420]	; (8012afc <etharp_output+0x1ec>)
 8012958:	f002 f91e 	bl	8014b98 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	68f9      	ldr	r1, [r7, #12]
 8012962:	4618      	mov	r0, r3
 8012964:	f000 fef8 	bl	8013758 <ip4_addr_isbroadcast_u32>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d002      	beq.n	8012974 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801296e:	4b66      	ldr	r3, [pc, #408]	; (8012b08 <etharp_output+0x1f8>)
 8012970:	61fb      	str	r3, [r7, #28]
 8012972:	e0af      	b.n	8012ad4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801297c:	2be0      	cmp	r3, #224	; 0xe0
 801297e:	d118      	bne.n	80129b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012980:	2301      	movs	r3, #1
 8012982:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012984:	2300      	movs	r3, #0
 8012986:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012988:	235e      	movs	r3, #94	; 0x5e
 801298a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	3301      	adds	r3, #1
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012996:	b2db      	uxtb	r3, r3
 8012998:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	3302      	adds	r3, #2
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	3303      	adds	r3, #3
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80129aa:	f107 0310 	add.w	r3, r7, #16
 80129ae:	61fb      	str	r3, [r7, #28]
 80129b0:	e090      	b.n	8012ad4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	3304      	adds	r3, #4
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	405a      	eors	r2, r3
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	3308      	adds	r3, #8
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	4013      	ands	r3, r2
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d012      	beq.n	80129f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80129d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80129d4:	4293      	cmp	r3, r2
 80129d6:	d00b      	beq.n	80129f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	330c      	adds	r3, #12
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d003      	beq.n	80129ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	330c      	adds	r3, #12
 80129e6:	61bb      	str	r3, [r7, #24]
 80129e8:	e002      	b.n	80129f0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80129ea:	f06f 0303 	mvn.w	r3, #3
 80129ee:	e07d      	b.n	8012aec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80129f0:	4b46      	ldr	r3, [pc, #280]	; (8012b0c <etharp_output+0x1fc>)
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	4619      	mov	r1, r3
 80129f6:	4a46      	ldr	r2, [pc, #280]	; (8012b10 <etharp_output+0x200>)
 80129f8:	460b      	mov	r3, r1
 80129fa:	005b      	lsls	r3, r3, #1
 80129fc:	440b      	add	r3, r1
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	4413      	add	r3, r2
 8012a02:	3314      	adds	r3, #20
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d925      	bls.n	8012a56 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012a0a:	4b40      	ldr	r3, [pc, #256]	; (8012b0c <etharp_output+0x1fc>)
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	4619      	mov	r1, r3
 8012a10:	4a3f      	ldr	r2, [pc, #252]	; (8012b10 <etharp_output+0x200>)
 8012a12:	460b      	mov	r3, r1
 8012a14:	005b      	lsls	r3, r3, #1
 8012a16:	440b      	add	r3, r1
 8012a18:	00db      	lsls	r3, r3, #3
 8012a1a:	4413      	add	r3, r2
 8012a1c:	3308      	adds	r3, #8
 8012a1e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a20:	68fa      	ldr	r2, [r7, #12]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d117      	bne.n	8012a56 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	681a      	ldr	r2, [r3, #0]
 8012a2a:	4b38      	ldr	r3, [pc, #224]	; (8012b0c <etharp_output+0x1fc>)
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	4937      	ldr	r1, [pc, #220]	; (8012b10 <etharp_output+0x200>)
 8012a32:	4603      	mov	r3, r0
 8012a34:	005b      	lsls	r3, r3, #1
 8012a36:	4403      	add	r3, r0
 8012a38:	00db      	lsls	r3, r3, #3
 8012a3a:	440b      	add	r3, r1
 8012a3c:	3304      	adds	r3, #4
 8012a3e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d108      	bne.n	8012a56 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012a44:	4b31      	ldr	r3, [pc, #196]	; (8012b0c <etharp_output+0x1fc>)
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	461a      	mov	r2, r3
 8012a4a:	68b9      	ldr	r1, [r7, #8]
 8012a4c:	68f8      	ldr	r0, [r7, #12]
 8012a4e:	f7ff fec5 	bl	80127dc <etharp_output_to_arp_index>
 8012a52:	4603      	mov	r3, r0
 8012a54:	e04a      	b.n	8012aec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012a56:	2300      	movs	r3, #0
 8012a58:	75fb      	strb	r3, [r7, #23]
 8012a5a:	e031      	b.n	8012ac0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012a5c:	7dfa      	ldrb	r2, [r7, #23]
 8012a5e:	492c      	ldr	r1, [pc, #176]	; (8012b10 <etharp_output+0x200>)
 8012a60:	4613      	mov	r3, r2
 8012a62:	005b      	lsls	r3, r3, #1
 8012a64:	4413      	add	r3, r2
 8012a66:	00db      	lsls	r3, r3, #3
 8012a68:	440b      	add	r3, r1
 8012a6a:	3314      	adds	r3, #20
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d923      	bls.n	8012aba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012a72:	7dfa      	ldrb	r2, [r7, #23]
 8012a74:	4926      	ldr	r1, [pc, #152]	; (8012b10 <etharp_output+0x200>)
 8012a76:	4613      	mov	r3, r2
 8012a78:	005b      	lsls	r3, r3, #1
 8012a7a:	4413      	add	r3, r2
 8012a7c:	00db      	lsls	r3, r3, #3
 8012a7e:	440b      	add	r3, r1
 8012a80:	3308      	adds	r3, #8
 8012a82:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012a84:	68fa      	ldr	r2, [r7, #12]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d117      	bne.n	8012aba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	6819      	ldr	r1, [r3, #0]
 8012a8e:	7dfa      	ldrb	r2, [r7, #23]
 8012a90:	481f      	ldr	r0, [pc, #124]	; (8012b10 <etharp_output+0x200>)
 8012a92:	4613      	mov	r3, r2
 8012a94:	005b      	lsls	r3, r3, #1
 8012a96:	4413      	add	r3, r2
 8012a98:	00db      	lsls	r3, r3, #3
 8012a9a:	4403      	add	r3, r0
 8012a9c:	3304      	adds	r3, #4
 8012a9e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012aa0:	4299      	cmp	r1, r3
 8012aa2:	d10a      	bne.n	8012aba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012aa4:	4a19      	ldr	r2, [pc, #100]	; (8012b0c <etharp_output+0x1fc>)
 8012aa6:	7dfb      	ldrb	r3, [r7, #23]
 8012aa8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012aaa:	7dfb      	ldrb	r3, [r7, #23]
 8012aac:	461a      	mov	r2, r3
 8012aae:	68b9      	ldr	r1, [r7, #8]
 8012ab0:	68f8      	ldr	r0, [r7, #12]
 8012ab2:	f7ff fe93 	bl	80127dc <etharp_output_to_arp_index>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	e018      	b.n	8012aec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012aba:	7dfb      	ldrb	r3, [r7, #23]
 8012abc:	3301      	adds	r3, #1
 8012abe:	75fb      	strb	r3, [r7, #23]
 8012ac0:	7dfb      	ldrb	r3, [r7, #23]
 8012ac2:	2b09      	cmp	r3, #9
 8012ac4:	d9ca      	bls.n	8012a5c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012ac6:	68ba      	ldr	r2, [r7, #8]
 8012ac8:	69b9      	ldr	r1, [r7, #24]
 8012aca:	68f8      	ldr	r0, [r7, #12]
 8012acc:	f000 f822 	bl	8012b14 <etharp_query>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	e00b      	b.n	8012aec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ade:	9300      	str	r3, [sp, #0]
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	68b9      	ldr	r1, [r7, #8]
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	f001 fd45 	bl	8014574 <ethernet_output>
 8012aea:	4603      	mov	r3, r0
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3720      	adds	r7, #32
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}
 8012af4:	08017e68 	.word	0x08017e68
 8012af8:	08017fb8 	.word	0x08017fb8
 8012afc:	08017ee0 	.word	0x08017ee0
 8012b00:	08018008 	.word	0x08018008
 8012b04:	08017fa8 	.word	0x08017fa8
 8012b08:	08018688 	.word	0x08018688
 8012b0c:	2004f2cc 	.word	0x2004f2cc
 8012b10:	2004f1dc 	.word	0x2004f1dc

08012b14 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b08c      	sub	sp, #48	; 0x30
 8012b18:	af02      	add	r7, sp, #8
 8012b1a:	60f8      	str	r0, [r7, #12]
 8012b1c:	60b9      	str	r1, [r7, #8]
 8012b1e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	3326      	adds	r3, #38	; 0x26
 8012b24:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012b26:	23ff      	movs	r3, #255	; 0xff
 8012b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	68f9      	ldr	r1, [r7, #12]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f000 fe0e 	bl	8013758 <ip4_addr_isbroadcast_u32>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d10c      	bne.n	8012b5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b4a:	2be0      	cmp	r3, #224	; 0xe0
 8012b4c:	d006      	beq.n	8012b5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d003      	beq.n	8012b5c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d102      	bne.n	8012b62 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012b5c:	f06f 030f 	mvn.w	r3, #15
 8012b60:	e101      	b.n	8012d66 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012b62:	68fa      	ldr	r2, [r7, #12]
 8012b64:	2101      	movs	r1, #1
 8012b66:	68b8      	ldr	r0, [r7, #8]
 8012b68:	f7ff fb60 	bl	801222c <etharp_find_entry>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012b70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	da02      	bge.n	8012b7e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012b78:	8a7b      	ldrh	r3, [r7, #18]
 8012b7a:	b25b      	sxtb	r3, r3
 8012b7c:	e0f3      	b.n	8012d66 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012b7e:	8a7b      	ldrh	r3, [r7, #18]
 8012b80:	2b7e      	cmp	r3, #126	; 0x7e
 8012b82:	d906      	bls.n	8012b92 <etharp_query+0x7e>
 8012b84:	4b7a      	ldr	r3, [pc, #488]	; (8012d70 <etharp_query+0x25c>)
 8012b86:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012b8a:	497a      	ldr	r1, [pc, #488]	; (8012d74 <etharp_query+0x260>)
 8012b8c:	487a      	ldr	r0, [pc, #488]	; (8012d78 <etharp_query+0x264>)
 8012b8e:	f002 f803 	bl	8014b98 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012b92:	8a7b      	ldrh	r3, [r7, #18]
 8012b94:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012b96:	7c7a      	ldrb	r2, [r7, #17]
 8012b98:	4978      	ldr	r1, [pc, #480]	; (8012d7c <etharp_query+0x268>)
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	005b      	lsls	r3, r3, #1
 8012b9e:	4413      	add	r3, r2
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	440b      	add	r3, r1
 8012ba4:	3314      	adds	r3, #20
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d115      	bne.n	8012bd8 <etharp_query+0xc4>
    is_new_entry = 1;
 8012bac:	2301      	movs	r3, #1
 8012bae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012bb0:	7c7a      	ldrb	r2, [r7, #17]
 8012bb2:	4972      	ldr	r1, [pc, #456]	; (8012d7c <etharp_query+0x268>)
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	005b      	lsls	r3, r3, #1
 8012bb8:	4413      	add	r3, r2
 8012bba:	00db      	lsls	r3, r3, #3
 8012bbc:	440b      	add	r3, r1
 8012bbe:	3314      	adds	r3, #20
 8012bc0:	2201      	movs	r2, #1
 8012bc2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012bc4:	7c7a      	ldrb	r2, [r7, #17]
 8012bc6:	496d      	ldr	r1, [pc, #436]	; (8012d7c <etharp_query+0x268>)
 8012bc8:	4613      	mov	r3, r2
 8012bca:	005b      	lsls	r3, r3, #1
 8012bcc:	4413      	add	r3, r2
 8012bce:	00db      	lsls	r3, r3, #3
 8012bd0:	440b      	add	r3, r1
 8012bd2:	3308      	adds	r3, #8
 8012bd4:	68fa      	ldr	r2, [r7, #12]
 8012bd6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012bd8:	7c7a      	ldrb	r2, [r7, #17]
 8012bda:	4968      	ldr	r1, [pc, #416]	; (8012d7c <etharp_query+0x268>)
 8012bdc:	4613      	mov	r3, r2
 8012bde:	005b      	lsls	r3, r3, #1
 8012be0:	4413      	add	r3, r2
 8012be2:	00db      	lsls	r3, r3, #3
 8012be4:	440b      	add	r3, r1
 8012be6:	3314      	adds	r3, #20
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d011      	beq.n	8012c12 <etharp_query+0xfe>
 8012bee:	7c7a      	ldrb	r2, [r7, #17]
 8012bf0:	4962      	ldr	r1, [pc, #392]	; (8012d7c <etharp_query+0x268>)
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	005b      	lsls	r3, r3, #1
 8012bf6:	4413      	add	r3, r2
 8012bf8:	00db      	lsls	r3, r3, #3
 8012bfa:	440b      	add	r3, r1
 8012bfc:	3314      	adds	r3, #20
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d806      	bhi.n	8012c12 <etharp_query+0xfe>
 8012c04:	4b5a      	ldr	r3, [pc, #360]	; (8012d70 <etharp_query+0x25c>)
 8012c06:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012c0a:	495d      	ldr	r1, [pc, #372]	; (8012d80 <etharp_query+0x26c>)
 8012c0c:	485a      	ldr	r0, [pc, #360]	; (8012d78 <etharp_query+0x264>)
 8012c0e:	f001 ffc3 	bl	8014b98 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012c12:	6a3b      	ldr	r3, [r7, #32]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d102      	bne.n	8012c1e <etharp_query+0x10a>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d10c      	bne.n	8012c38 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012c1e:	68b9      	ldr	r1, [r7, #8]
 8012c20:	68f8      	ldr	r0, [r7, #12]
 8012c22:	f000 f963 	bl	8012eec <etharp_request>
 8012c26:	4603      	mov	r3, r0
 8012c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d102      	bne.n	8012c38 <etharp_query+0x124>
      return result;
 8012c32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012c36:	e096      	b.n	8012d66 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d106      	bne.n	8012c4c <etharp_query+0x138>
 8012c3e:	4b4c      	ldr	r3, [pc, #304]	; (8012d70 <etharp_query+0x25c>)
 8012c40:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012c44:	494f      	ldr	r1, [pc, #316]	; (8012d84 <etharp_query+0x270>)
 8012c46:	484c      	ldr	r0, [pc, #304]	; (8012d78 <etharp_query+0x264>)
 8012c48:	f001 ffa6 	bl	8014b98 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012c4c:	7c7a      	ldrb	r2, [r7, #17]
 8012c4e:	494b      	ldr	r1, [pc, #300]	; (8012d7c <etharp_query+0x268>)
 8012c50:	4613      	mov	r3, r2
 8012c52:	005b      	lsls	r3, r3, #1
 8012c54:	4413      	add	r3, r2
 8012c56:	00db      	lsls	r3, r3, #3
 8012c58:	440b      	add	r3, r1
 8012c5a:	3314      	adds	r3, #20
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	2b01      	cmp	r3, #1
 8012c60:	d917      	bls.n	8012c92 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012c62:	4a49      	ldr	r2, [pc, #292]	; (8012d88 <etharp_query+0x274>)
 8012c64:	7c7b      	ldrb	r3, [r7, #17]
 8012c66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012c68:	7c7a      	ldrb	r2, [r7, #17]
 8012c6a:	4613      	mov	r3, r2
 8012c6c:	005b      	lsls	r3, r3, #1
 8012c6e:	4413      	add	r3, r2
 8012c70:	00db      	lsls	r3, r3, #3
 8012c72:	3308      	adds	r3, #8
 8012c74:	4a41      	ldr	r2, [pc, #260]	; (8012d7c <etharp_query+0x268>)
 8012c76:	4413      	add	r3, r2
 8012c78:	3304      	adds	r3, #4
 8012c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012c7e:	9200      	str	r2, [sp, #0]
 8012c80:	697a      	ldr	r2, [r7, #20]
 8012c82:	6879      	ldr	r1, [r7, #4]
 8012c84:	68f8      	ldr	r0, [r7, #12]
 8012c86:	f001 fc75 	bl	8014574 <ethernet_output>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012c90:	e067      	b.n	8012d62 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012c92:	7c7a      	ldrb	r2, [r7, #17]
 8012c94:	4939      	ldr	r1, [pc, #228]	; (8012d7c <etharp_query+0x268>)
 8012c96:	4613      	mov	r3, r2
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	4413      	add	r3, r2
 8012c9c:	00db      	lsls	r3, r3, #3
 8012c9e:	440b      	add	r3, r1
 8012ca0:	3314      	adds	r3, #20
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	d15c      	bne.n	8012d62 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012cb0:	e01c      	b.n	8012cec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012cb2:	69fb      	ldr	r3, [r7, #28]
 8012cb4:	895a      	ldrh	r2, [r3, #10]
 8012cb6:	69fb      	ldr	r3, [r7, #28]
 8012cb8:	891b      	ldrh	r3, [r3, #8]
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d10a      	bne.n	8012cd4 <etharp_query+0x1c0>
 8012cbe:	69fb      	ldr	r3, [r7, #28]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d006      	beq.n	8012cd4 <etharp_query+0x1c0>
 8012cc6:	4b2a      	ldr	r3, [pc, #168]	; (8012d70 <etharp_query+0x25c>)
 8012cc8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012ccc:	492f      	ldr	r1, [pc, #188]	; (8012d8c <etharp_query+0x278>)
 8012cce:	482a      	ldr	r0, [pc, #168]	; (8012d78 <etharp_query+0x264>)
 8012cd0:	f001 ff62 	bl	8014b98 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012cd4:	69fb      	ldr	r3, [r7, #28]
 8012cd6:	7b1b      	ldrb	r3, [r3, #12]
 8012cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d002      	beq.n	8012ce6 <etharp_query+0x1d2>
        copy_needed = 1;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	61bb      	str	r3, [r7, #24]
        break;
 8012ce4:	e005      	b.n	8012cf2 <etharp_query+0x1de>
      }
      p = p->next;
 8012ce6:	69fb      	ldr	r3, [r7, #28]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d1df      	bne.n	8012cb2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012cf2:	69bb      	ldr	r3, [r7, #24]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d007      	beq.n	8012d08 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012cfe:	200e      	movs	r0, #14
 8012d00:	f7f9 fcf8 	bl	800c6f4 <pbuf_clone>
 8012d04:	61f8      	str	r0, [r7, #28]
 8012d06:	e004      	b.n	8012d12 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012d0c:	69f8      	ldr	r0, [r7, #28]
 8012d0e:	f7f9 fb2f 	bl	800c370 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d021      	beq.n	8012d5c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012d18:	7c7a      	ldrb	r2, [r7, #17]
 8012d1a:	4918      	ldr	r1, [pc, #96]	; (8012d7c <etharp_query+0x268>)
 8012d1c:	4613      	mov	r3, r2
 8012d1e:	005b      	lsls	r3, r3, #1
 8012d20:	4413      	add	r3, r2
 8012d22:	00db      	lsls	r3, r3, #3
 8012d24:	440b      	add	r3, r1
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d00a      	beq.n	8012d42 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012d2c:	7c7a      	ldrb	r2, [r7, #17]
 8012d2e:	4913      	ldr	r1, [pc, #76]	; (8012d7c <etharp_query+0x268>)
 8012d30:	4613      	mov	r3, r2
 8012d32:	005b      	lsls	r3, r3, #1
 8012d34:	4413      	add	r3, r2
 8012d36:	00db      	lsls	r3, r3, #3
 8012d38:	440b      	add	r3, r1
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7f9 fa71 	bl	800c224 <pbuf_free>
      }
      arp_table[i].q = p;
 8012d42:	7c7a      	ldrb	r2, [r7, #17]
 8012d44:	490d      	ldr	r1, [pc, #52]	; (8012d7c <etharp_query+0x268>)
 8012d46:	4613      	mov	r3, r2
 8012d48:	005b      	lsls	r3, r3, #1
 8012d4a:	4413      	add	r3, r2
 8012d4c:	00db      	lsls	r3, r3, #3
 8012d4e:	440b      	add	r3, r1
 8012d50:	69fa      	ldr	r2, [r7, #28]
 8012d52:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012d54:	2300      	movs	r3, #0
 8012d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d5a:	e002      	b.n	8012d62 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012d5c:	23ff      	movs	r3, #255	; 0xff
 8012d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012d62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3728      	adds	r7, #40	; 0x28
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	08017e68 	.word	0x08017e68
 8012d74:	08018014 	.word	0x08018014
 8012d78:	08017ee0 	.word	0x08017ee0
 8012d7c:	2004f1dc 	.word	0x2004f1dc
 8012d80:	08018024 	.word	0x08018024
 8012d84:	08018008 	.word	0x08018008
 8012d88:	2004f2cc 	.word	0x2004f2cc
 8012d8c:	0801804c 	.word	0x0801804c

08012d90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b08a      	sub	sp, #40	; 0x28
 8012d94:	af02      	add	r7, sp, #8
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
 8012d9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d106      	bne.n	8012db6 <etharp_raw+0x26>
 8012da8:	4b3a      	ldr	r3, [pc, #232]	; (8012e94 <etharp_raw+0x104>)
 8012daa:	f240 4257 	movw	r2, #1111	; 0x457
 8012dae:	493a      	ldr	r1, [pc, #232]	; (8012e98 <etharp_raw+0x108>)
 8012db0:	483a      	ldr	r0, [pc, #232]	; (8012e9c <etharp_raw+0x10c>)
 8012db2:	f001 fef1 	bl	8014b98 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012db6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012dba:	211c      	movs	r1, #28
 8012dbc:	200e      	movs	r0, #14
 8012dbe:	f7f8 ff4d 	bl	800bc5c <pbuf_alloc>
 8012dc2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d102      	bne.n	8012dd0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dce:	e05d      	b.n	8012e8c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012dd0:	69bb      	ldr	r3, [r7, #24]
 8012dd2:	895b      	ldrh	r3, [r3, #10]
 8012dd4:	2b1b      	cmp	r3, #27
 8012dd6:	d806      	bhi.n	8012de6 <etharp_raw+0x56>
 8012dd8:	4b2e      	ldr	r3, [pc, #184]	; (8012e94 <etharp_raw+0x104>)
 8012dda:	f240 4262 	movw	r2, #1122	; 0x462
 8012dde:	4930      	ldr	r1, [pc, #192]	; (8012ea0 <etharp_raw+0x110>)
 8012de0:	482e      	ldr	r0, [pc, #184]	; (8012e9c <etharp_raw+0x10c>)
 8012de2:	f001 fed9 	bl	8014b98 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012de6:	69bb      	ldr	r3, [r7, #24]
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012dec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7f7 fe26 	bl	800aa40 <lwip_htons>
 8012df4:	4603      	mov	r3, r0
 8012df6:	461a      	mov	r2, r3
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012e02:	2b06      	cmp	r3, #6
 8012e04:	d006      	beq.n	8012e14 <etharp_raw+0x84>
 8012e06:	4b23      	ldr	r3, [pc, #140]	; (8012e94 <etharp_raw+0x104>)
 8012e08:	f240 4269 	movw	r2, #1129	; 0x469
 8012e0c:	4925      	ldr	r1, [pc, #148]	; (8012ea4 <etharp_raw+0x114>)
 8012e0e:	4823      	ldr	r0, [pc, #140]	; (8012e9c <etharp_raw+0x10c>)
 8012e10:	f001 fec2 	bl	8014b98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	3308      	adds	r3, #8
 8012e18:	2206      	movs	r2, #6
 8012e1a:	6839      	ldr	r1, [r7, #0]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f001 fe10 	bl	8014a42 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	3312      	adds	r3, #18
 8012e26:	2206      	movs	r2, #6
 8012e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f001 fe09 	bl	8014a42 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	330e      	adds	r3, #14
 8012e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e36:	6812      	ldr	r2, [r2, #0]
 8012e38:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	3318      	adds	r3, #24
 8012e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e40:	6812      	ldr	r2, [r2, #0]
 8012e42:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	2200      	movs	r2, #0
 8012e48:	701a      	strb	r2, [r3, #0]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	f042 0201 	orr.w	r2, r2, #1
 8012e50:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	2200      	movs	r2, #0
 8012e56:	f042 0208 	orr.w	r2, r2, #8
 8012e5a:	709a      	strb	r2, [r3, #2]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012e60:	697b      	ldr	r3, [r7, #20]
 8012e62:	2206      	movs	r2, #6
 8012e64:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	2204      	movs	r2, #4
 8012e6a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012e6c:	f640 0306 	movw	r3, #2054	; 0x806
 8012e70:	9300      	str	r3, [sp, #0]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	68ba      	ldr	r2, [r7, #8]
 8012e76:	69b9      	ldr	r1, [r7, #24]
 8012e78:	68f8      	ldr	r0, [r7, #12]
 8012e7a:	f001 fb7b 	bl	8014574 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012e7e:	69b8      	ldr	r0, [r7, #24]
 8012e80:	f7f9 f9d0 	bl	800c224 <pbuf_free>
  p = NULL;
 8012e84:	2300      	movs	r3, #0
 8012e86:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012e88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3720      	adds	r7, #32
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}
 8012e94:	08017e68 	.word	0x08017e68
 8012e98:	08017fb8 	.word	0x08017fb8
 8012e9c:	08017ee0 	.word	0x08017ee0
 8012ea0:	08018068 	.word	0x08018068
 8012ea4:	0801809c 	.word	0x0801809c

08012ea8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b088      	sub	sp, #32
 8012eac:	af04      	add	r7, sp, #16
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	9203      	str	r2, [sp, #12]
 8012ec8:	68ba      	ldr	r2, [r7, #8]
 8012eca:	9202      	str	r2, [sp, #8]
 8012ecc:	4a06      	ldr	r2, [pc, #24]	; (8012ee8 <etharp_request_dst+0x40>)
 8012ece:	9201      	str	r2, [sp, #4]
 8012ed0:	9300      	str	r3, [sp, #0]
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	68f8      	ldr	r0, [r7, #12]
 8012ed8:	f7ff ff5a 	bl	8012d90 <etharp_raw>
 8012edc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3710      	adds	r7, #16
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	08018690 	.word	0x08018690

08012eec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012ef6:	4a05      	ldr	r2, [pc, #20]	; (8012f0c <etharp_request+0x20>)
 8012ef8:	6839      	ldr	r1, [r7, #0]
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f7ff ffd4 	bl	8012ea8 <etharp_request_dst>
 8012f00:	4603      	mov	r3, r0
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3708      	adds	r7, #8
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	08018688 	.word	0x08018688

08012f10 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b08e      	sub	sp, #56	; 0x38
 8012f14:	af04      	add	r7, sp, #16
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012f1a:	4b79      	ldr	r3, [pc, #484]	; (8013100 <icmp_input+0x1f0>)
 8012f1c:	689b      	ldr	r3, [r3, #8]
 8012f1e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	f003 030f 	and.w	r3, r3, #15
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	009b      	lsls	r3, r3, #2
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f32:	2b13      	cmp	r3, #19
 8012f34:	f240 80cd 	bls.w	80130d2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	895b      	ldrh	r3, [r3, #10]
 8012f3c:	2b03      	cmp	r3, #3
 8012f3e:	f240 80ca 	bls.w	80130d6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012f4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	f000 80b7 	beq.w	80130c4 <icmp_input+0x1b4>
 8012f56:	2b08      	cmp	r3, #8
 8012f58:	f040 80b7 	bne.w	80130ca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012f5c:	4b69      	ldr	r3, [pc, #420]	; (8013104 <icmp_input+0x1f4>)
 8012f5e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012f60:	4b67      	ldr	r3, [pc, #412]	; (8013100 <icmp_input+0x1f0>)
 8012f62:	695b      	ldr	r3, [r3, #20]
 8012f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f68:	2be0      	cmp	r3, #224	; 0xe0
 8012f6a:	f000 80bb 	beq.w	80130e4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012f6e:	4b64      	ldr	r3, [pc, #400]	; (8013100 <icmp_input+0x1f0>)
 8012f70:	695b      	ldr	r3, [r3, #20]
 8012f72:	4a63      	ldr	r2, [pc, #396]	; (8013100 <icmp_input+0x1f0>)
 8012f74:	6812      	ldr	r2, [r2, #0]
 8012f76:	4611      	mov	r1, r2
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f000 fbed 	bl	8013758 <ip4_addr_isbroadcast_u32>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f040 80b1 	bne.w	80130e8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	891b      	ldrh	r3, [r3, #8]
 8012f8a:	2b07      	cmp	r3, #7
 8012f8c:	f240 80a5 	bls.w	80130da <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f92:	330e      	adds	r3, #14
 8012f94:	4619      	mov	r1, r3
 8012f96:	6878      	ldr	r0, [r7, #4]
 8012f98:	f7f9 f8ae 	bl	800c0f8 <pbuf_add_header>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d04b      	beq.n	801303a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	891a      	ldrh	r2, [r3, #8]
 8012fa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fa8:	4413      	add	r3, r2
 8012faa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	891b      	ldrh	r3, [r3, #8]
 8012fb0:	8b7a      	ldrh	r2, [r7, #26]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	f0c0 809a 	bcc.w	80130ec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012fb8:	8b7b      	ldrh	r3, [r7, #26]
 8012fba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	200e      	movs	r0, #14
 8012fc2:	f7f8 fe4b 	bl	800bc5c <pbuf_alloc>
 8012fc6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	f000 8090 	beq.w	80130f0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	895b      	ldrh	r3, [r3, #10]
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fd8:	3308      	adds	r3, #8
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d203      	bcs.n	8012fe6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012fde:	6978      	ldr	r0, [r7, #20]
 8012fe0:	f7f9 f920 	bl	800c224 <pbuf_free>
          goto icmperr;
 8012fe4:	e085      	b.n	80130f2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f001 fd27 	bl	8014a42 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012ff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	6978      	ldr	r0, [r7, #20]
 8012ffa:	f7f9 f88d 	bl	800c118 <pbuf_remove_header>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d009      	beq.n	8013018 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013004:	4b40      	ldr	r3, [pc, #256]	; (8013108 <icmp_input+0x1f8>)
 8013006:	22b6      	movs	r2, #182	; 0xb6
 8013008:	4940      	ldr	r1, [pc, #256]	; (801310c <icmp_input+0x1fc>)
 801300a:	4841      	ldr	r0, [pc, #260]	; (8013110 <icmp_input+0x200>)
 801300c:	f001 fdc4 	bl	8014b98 <iprintf>
          pbuf_free(r);
 8013010:	6978      	ldr	r0, [r7, #20]
 8013012:	f7f9 f907 	bl	800c224 <pbuf_free>
          goto icmperr;
 8013016:	e06c      	b.n	80130f2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013018:	6879      	ldr	r1, [r7, #4]
 801301a:	6978      	ldr	r0, [r7, #20]
 801301c:	f7f9 fa26 	bl	800c46c <pbuf_copy>
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d003      	beq.n	801302e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013026:	6978      	ldr	r0, [r7, #20]
 8013028:	f7f9 f8fc 	bl	800c224 <pbuf_free>
          goto icmperr;
 801302c:	e061      	b.n	80130f2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7f9 f8f8 	bl	800c224 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	607b      	str	r3, [r7, #4]
 8013038:	e00f      	b.n	801305a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801303a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801303c:	330e      	adds	r3, #14
 801303e:	4619      	mov	r1, r3
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7f9 f869 	bl	800c118 <pbuf_remove_header>
 8013046:	4603      	mov	r3, r0
 8013048:	2b00      	cmp	r3, #0
 801304a:	d006      	beq.n	801305a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801304c:	4b2e      	ldr	r3, [pc, #184]	; (8013108 <icmp_input+0x1f8>)
 801304e:	22c7      	movs	r2, #199	; 0xc7
 8013050:	4930      	ldr	r1, [pc, #192]	; (8013114 <icmp_input+0x204>)
 8013052:	482f      	ldr	r0, [pc, #188]	; (8013110 <icmp_input+0x200>)
 8013054:	f001 fda0 	bl	8014b98 <iprintf>
          goto icmperr;
 8013058:	e04b      	b.n	80130f2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013062:	4619      	mov	r1, r3
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f7f9 f847 	bl	800c0f8 <pbuf_add_header>
 801306a:	4603      	mov	r3, r0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d12b      	bne.n	80130c8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	685b      	ldr	r3, [r3, #4]
 8013074:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013076:	69fb      	ldr	r3, [r7, #28]
 8013078:	681a      	ldr	r2, [r3, #0]
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801307e:	4b20      	ldr	r3, [pc, #128]	; (8013100 <icmp_input+0x1f0>)
 8013080:	691a      	ldr	r2, [r3, #16]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	2200      	movs	r2, #0
 801308a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801308c:	693b      	ldr	r3, [r7, #16]
 801308e:	2200      	movs	r2, #0
 8013090:	709a      	strb	r2, [r3, #2]
 8013092:	2200      	movs	r2, #0
 8013094:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	22ff      	movs	r2, #255	; 0xff
 801309a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2200      	movs	r2, #0
 80130a0:	729a      	strb	r2, [r3, #10]
 80130a2:	2200      	movs	r2, #0
 80130a4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	9302      	str	r3, [sp, #8]
 80130aa:	2301      	movs	r3, #1
 80130ac:	9301      	str	r3, [sp, #4]
 80130ae:	2300      	movs	r3, #0
 80130b0:	9300      	str	r3, [sp, #0]
 80130b2:	23ff      	movs	r3, #255	; 0xff
 80130b4:	2200      	movs	r2, #0
 80130b6:	69f9      	ldr	r1, [r7, #28]
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f000 fa75 	bl	80135a8 <ip4_output_if>
 80130be:	4603      	mov	r3, r0
 80130c0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80130c2:	e001      	b.n	80130c8 <icmp_input+0x1b8>
      break;
 80130c4:	bf00      	nop
 80130c6:	e000      	b.n	80130ca <icmp_input+0x1ba>
      break;
 80130c8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f7f9 f8aa 	bl	800c224 <pbuf_free>
  return;
 80130d0:	e013      	b.n	80130fa <icmp_input+0x1ea>
    goto lenerr;
 80130d2:	bf00      	nop
 80130d4:	e002      	b.n	80130dc <icmp_input+0x1cc>
    goto lenerr;
 80130d6:	bf00      	nop
 80130d8:	e000      	b.n	80130dc <icmp_input+0x1cc>
        goto lenerr;
 80130da:	bf00      	nop
lenerr:
  pbuf_free(p);
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f7f9 f8a1 	bl	800c224 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80130e2:	e00a      	b.n	80130fa <icmp_input+0x1ea>
        goto icmperr;
 80130e4:	bf00      	nop
 80130e6:	e004      	b.n	80130f2 <icmp_input+0x1e2>
        goto icmperr;
 80130e8:	bf00      	nop
 80130ea:	e002      	b.n	80130f2 <icmp_input+0x1e2>
          goto icmperr;
 80130ec:	bf00      	nop
 80130ee:	e000      	b.n	80130f2 <icmp_input+0x1e2>
          goto icmperr;
 80130f0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7f9 f896 	bl	800c224 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80130f8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80130fa:	3728      	adds	r7, #40	; 0x28
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	2004ac68 	.word	0x2004ac68
 8013104:	2004ac7c 	.word	0x2004ac7c
 8013108:	080180e0 	.word	0x080180e0
 801310c:	08018118 	.word	0x08018118
 8013110:	08018150 	.word	0x08018150
 8013114:	08018178 	.word	0x08018178

08013118 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	460b      	mov	r3, r1
 8013122:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013124:	78fb      	ldrb	r3, [r7, #3]
 8013126:	461a      	mov	r2, r3
 8013128:	2103      	movs	r1, #3
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f000 f814 	bl	8013158 <icmp_send_response>
}
 8013130:	bf00      	nop
 8013132:	3708      	adds	r7, #8
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
 8013140:	460b      	mov	r3, r1
 8013142:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013144:	78fb      	ldrb	r3, [r7, #3]
 8013146:	461a      	mov	r2, r3
 8013148:	210b      	movs	r1, #11
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 f804 	bl	8013158 <icmp_send_response>
}
 8013150:	bf00      	nop
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b08c      	sub	sp, #48	; 0x30
 801315c:	af04      	add	r7, sp, #16
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	460b      	mov	r3, r1
 8013162:	70fb      	strb	r3, [r7, #3]
 8013164:	4613      	mov	r3, r2
 8013166:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013168:	f44f 7220 	mov.w	r2, #640	; 0x280
 801316c:	2124      	movs	r1, #36	; 0x24
 801316e:	2022      	movs	r0, #34	; 0x22
 8013170:	f7f8 fd74 	bl	800bc5c <pbuf_alloc>
 8013174:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d04c      	beq.n	8013216 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	895b      	ldrh	r3, [r3, #10]
 8013180:	2b23      	cmp	r3, #35	; 0x23
 8013182:	d806      	bhi.n	8013192 <icmp_send_response+0x3a>
 8013184:	4b26      	ldr	r3, [pc, #152]	; (8013220 <icmp_send_response+0xc8>)
 8013186:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801318a:	4926      	ldr	r1, [pc, #152]	; (8013224 <icmp_send_response+0xcc>)
 801318c:	4826      	ldr	r0, [pc, #152]	; (8013228 <icmp_send_response+0xd0>)
 801318e:	f001 fd03 	bl	8014b98 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	78fa      	ldrb	r2, [r7, #3]
 80131a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	78ba      	ldrb	r2, [r7, #2]
 80131a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	2200      	movs	r2, #0
 80131ae:	711a      	strb	r2, [r3, #4]
 80131b0:	2200      	movs	r2, #0
 80131b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	2200      	movs	r2, #0
 80131b8:	719a      	strb	r2, [r3, #6]
 80131ba:	2200      	movs	r2, #0
 80131bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	f103 0008 	add.w	r0, r3, #8
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	221c      	movs	r2, #28
 80131cc:	4619      	mov	r1, r3
 80131ce:	f001 fc38 	bl	8014a42 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80131d2:	69bb      	ldr	r3, [r7, #24]
 80131d4:	68db      	ldr	r3, [r3, #12]
 80131d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80131d8:	f107 030c 	add.w	r3, r7, #12
 80131dc:	4618      	mov	r0, r3
 80131de:	f000 f825 	bl	801322c <ip4_route>
 80131e2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d011      	beq.n	801320e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	2200      	movs	r2, #0
 80131ee:	709a      	strb	r2, [r3, #2]
 80131f0:	2200      	movs	r2, #0
 80131f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80131f4:	f107 020c 	add.w	r2, r7, #12
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	9302      	str	r3, [sp, #8]
 80131fc:	2301      	movs	r3, #1
 80131fe:	9301      	str	r3, [sp, #4]
 8013200:	2300      	movs	r3, #0
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	23ff      	movs	r3, #255	; 0xff
 8013206:	2100      	movs	r1, #0
 8013208:	69f8      	ldr	r0, [r7, #28]
 801320a:	f000 f9cd 	bl	80135a8 <ip4_output_if>
  }
  pbuf_free(q);
 801320e:	69f8      	ldr	r0, [r7, #28]
 8013210:	f7f9 f808 	bl	800c224 <pbuf_free>
 8013214:	e000      	b.n	8013218 <icmp_send_response+0xc0>
    return;
 8013216:	bf00      	nop
}
 8013218:	3720      	adds	r7, #32
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
 801321e:	bf00      	nop
 8013220:	080180e0 	.word	0x080180e0
 8013224:	080181ac 	.word	0x080181ac
 8013228:	08018150 	.word	0x08018150

0801322c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801322c:	b480      	push	{r7}
 801322e:	b085      	sub	sp, #20
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013234:	4b33      	ldr	r3, [pc, #204]	; (8013304 <ip4_route+0xd8>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	60fb      	str	r3, [r7, #12]
 801323a:	e036      	b.n	80132aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013242:	f003 0301 	and.w	r3, r3, #1
 8013246:	b2db      	uxtb	r3, r3
 8013248:	2b00      	cmp	r3, #0
 801324a:	d02b      	beq.n	80132a4 <ip4_route+0x78>
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013252:	089b      	lsrs	r3, r3, #2
 8013254:	f003 0301 	and.w	r3, r3, #1
 8013258:	b2db      	uxtb	r3, r3
 801325a:	2b00      	cmp	r3, #0
 801325c:	d022      	beq.n	80132a4 <ip4_route+0x78>
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	3304      	adds	r3, #4
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d01d      	beq.n	80132a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	3304      	adds	r3, #4
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	405a      	eors	r2, r3
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	3308      	adds	r3, #8
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	4013      	ands	r3, r2
 801327c:	2b00      	cmp	r3, #0
 801327e:	d101      	bne.n	8013284 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	e038      	b.n	80132f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801328a:	f003 0302 	and.w	r3, r3, #2
 801328e:	2b00      	cmp	r3, #0
 8013290:	d108      	bne.n	80132a4 <ip4_route+0x78>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681a      	ldr	r2, [r3, #0]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	330c      	adds	r3, #12
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	429a      	cmp	r2, r3
 801329e:	d101      	bne.n	80132a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	e028      	b.n	80132f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	60fb      	str	r3, [r7, #12]
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d1c5      	bne.n	801323c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80132b0:	4b15      	ldr	r3, [pc, #84]	; (8013308 <ip4_route+0xdc>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d01a      	beq.n	80132ee <ip4_route+0xc2>
 80132b8:	4b13      	ldr	r3, [pc, #76]	; (8013308 <ip4_route+0xdc>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132c0:	f003 0301 	and.w	r3, r3, #1
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d012      	beq.n	80132ee <ip4_route+0xc2>
 80132c8:	4b0f      	ldr	r3, [pc, #60]	; (8013308 <ip4_route+0xdc>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132d0:	f003 0304 	and.w	r3, r3, #4
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d00a      	beq.n	80132ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80132d8:	4b0b      	ldr	r3, [pc, #44]	; (8013308 <ip4_route+0xdc>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	3304      	adds	r3, #4
 80132de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d004      	beq.n	80132ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	b2db      	uxtb	r3, r3
 80132ea:	2b7f      	cmp	r3, #127	; 0x7f
 80132ec:	d101      	bne.n	80132f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80132ee:	2300      	movs	r3, #0
 80132f0:	e001      	b.n	80132f6 <ip4_route+0xca>
  }

  return netif_default;
 80132f2:	4b05      	ldr	r3, [pc, #20]	; (8013308 <ip4_route+0xdc>)
 80132f4:	681b      	ldr	r3, [r3, #0]
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3714      	adds	r7, #20
 80132fa:	46bd      	mov	sp, r7
 80132fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop
 8013304:	2004f170 	.word	0x2004f170
 8013308:	2004f174 	.word	0x2004f174

0801330c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801331a:	f003 0301 	and.w	r3, r3, #1
 801331e:	b2db      	uxtb	r3, r3
 8013320:	2b00      	cmp	r3, #0
 8013322:	d016      	beq.n	8013352 <ip4_input_accept+0x46>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	3304      	adds	r3, #4
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d011      	beq.n	8013352 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801332e:	4b0b      	ldr	r3, [pc, #44]	; (801335c <ip4_input_accept+0x50>)
 8013330:	695a      	ldr	r2, [r3, #20]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	3304      	adds	r3, #4
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	429a      	cmp	r2, r3
 801333a:	d008      	beq.n	801334e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801333c:	4b07      	ldr	r3, [pc, #28]	; (801335c <ip4_input_accept+0x50>)
 801333e:	695b      	ldr	r3, [r3, #20]
 8013340:	6879      	ldr	r1, [r7, #4]
 8013342:	4618      	mov	r0, r3
 8013344:	f000 fa08 	bl	8013758 <ip4_addr_isbroadcast_u32>
 8013348:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801334a:	2b00      	cmp	r3, #0
 801334c:	d001      	beq.n	8013352 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801334e:	2301      	movs	r3, #1
 8013350:	e000      	b.n	8013354 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	3708      	adds	r7, #8
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}
 801335c:	2004ac68 	.word	0x2004ac68

08013360 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	091b      	lsrs	r3, r3, #4
 8013376:	b2db      	uxtb	r3, r3
 8013378:	2b04      	cmp	r3, #4
 801337a:	d004      	beq.n	8013386 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f7f8 ff51 	bl	800c224 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013382:	2300      	movs	r3, #0
 8013384:	e107      	b.n	8013596 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	f003 030f 	and.w	r3, r3, #15
 801338e:	b2db      	uxtb	r3, r3
 8013390:	009b      	lsls	r3, r3, #2
 8013392:	b2db      	uxtb	r3, r3
 8013394:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	885b      	ldrh	r3, [r3, #2]
 801339a:	b29b      	uxth	r3, r3
 801339c:	4618      	mov	r0, r3
 801339e:	f7f7 fb4f 	bl	800aa40 <lwip_htons>
 80133a2:	4603      	mov	r3, r0
 80133a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	891b      	ldrh	r3, [r3, #8]
 80133aa:	89ba      	ldrh	r2, [r7, #12]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d204      	bcs.n	80133ba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80133b0:	89bb      	ldrh	r3, [r7, #12]
 80133b2:	4619      	mov	r1, r3
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7f8 fdaf 	bl	800bf18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	895b      	ldrh	r3, [r3, #10]
 80133be:	89fa      	ldrh	r2, [r7, #14]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d807      	bhi.n	80133d4 <ip4_input+0x74>
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	891b      	ldrh	r3, [r3, #8]
 80133c8:	89ba      	ldrh	r2, [r7, #12]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d802      	bhi.n	80133d4 <ip4_input+0x74>
 80133ce:	89fb      	ldrh	r3, [r7, #14]
 80133d0:	2b13      	cmp	r3, #19
 80133d2:	d804      	bhi.n	80133de <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f7f8 ff25 	bl	800c224 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80133da:	2300      	movs	r3, #0
 80133dc:	e0db      	b.n	8013596 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	691b      	ldr	r3, [r3, #16]
 80133e2:	4a6f      	ldr	r2, [pc, #444]	; (80135a0 <ip4_input+0x240>)
 80133e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	4a6d      	ldr	r2, [pc, #436]	; (80135a0 <ip4_input+0x240>)
 80133ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80133ee:	4b6c      	ldr	r3, [pc, #432]	; (80135a0 <ip4_input+0x240>)
 80133f0:	695b      	ldr	r3, [r3, #20]
 80133f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133f6:	2be0      	cmp	r3, #224	; 0xe0
 80133f8:	d112      	bne.n	8013420 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013400:	f003 0301 	and.w	r3, r3, #1
 8013404:	b2db      	uxtb	r3, r3
 8013406:	2b00      	cmp	r3, #0
 8013408:	d007      	beq.n	801341a <ip4_input+0xba>
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	3304      	adds	r3, #4
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d002      	beq.n	801341a <ip4_input+0xba>
      netif = inp;
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	613b      	str	r3, [r7, #16]
 8013418:	e02a      	b.n	8013470 <ip4_input+0x110>
    } else {
      netif = NULL;
 801341a:	2300      	movs	r3, #0
 801341c:	613b      	str	r3, [r7, #16]
 801341e:	e027      	b.n	8013470 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013420:	6838      	ldr	r0, [r7, #0]
 8013422:	f7ff ff73 	bl	801330c <ip4_input_accept>
 8013426:	4603      	mov	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <ip4_input+0xd2>
      netif = inp;
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	613b      	str	r3, [r7, #16]
 8013430:	e01e      	b.n	8013470 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013432:	2300      	movs	r3, #0
 8013434:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013436:	4b5a      	ldr	r3, [pc, #360]	; (80135a0 <ip4_input+0x240>)
 8013438:	695b      	ldr	r3, [r3, #20]
 801343a:	b2db      	uxtb	r3, r3
 801343c:	2b7f      	cmp	r3, #127	; 0x7f
 801343e:	d017      	beq.n	8013470 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013440:	4b58      	ldr	r3, [pc, #352]	; (80135a4 <ip4_input+0x244>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	613b      	str	r3, [r7, #16]
 8013446:	e00e      	b.n	8013466 <ip4_input+0x106>
          if (netif == inp) {
 8013448:	693a      	ldr	r2, [r7, #16]
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	429a      	cmp	r2, r3
 801344e:	d006      	beq.n	801345e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013450:	6938      	ldr	r0, [r7, #16]
 8013452:	f7ff ff5b 	bl	801330c <ip4_input_accept>
 8013456:	4603      	mov	r3, r0
 8013458:	2b00      	cmp	r3, #0
 801345a:	d108      	bne.n	801346e <ip4_input+0x10e>
 801345c:	e000      	b.n	8013460 <ip4_input+0x100>
            continue;
 801345e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	613b      	str	r3, [r7, #16]
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d1ed      	bne.n	8013448 <ip4_input+0xe8>
 801346c:	e000      	b.n	8013470 <ip4_input+0x110>
            break;
 801346e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013470:	4b4b      	ldr	r3, [pc, #300]	; (80135a0 <ip4_input+0x240>)
 8013472:	691b      	ldr	r3, [r3, #16]
 8013474:	6839      	ldr	r1, [r7, #0]
 8013476:	4618      	mov	r0, r3
 8013478:	f000 f96e 	bl	8013758 <ip4_addr_isbroadcast_u32>
 801347c:	4603      	mov	r3, r0
 801347e:	2b00      	cmp	r3, #0
 8013480:	d105      	bne.n	801348e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013482:	4b47      	ldr	r3, [pc, #284]	; (80135a0 <ip4_input+0x240>)
 8013484:	691b      	ldr	r3, [r3, #16]
 8013486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801348a:	2be0      	cmp	r3, #224	; 0xe0
 801348c:	d104      	bne.n	8013498 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f7f8 fec8 	bl	800c224 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013494:	2300      	movs	r3, #0
 8013496:	e07e      	b.n	8013596 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d104      	bne.n	80134a8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f7f8 fec0 	bl	800c224 <pbuf_free>
    return ERR_OK;
 80134a4:	2300      	movs	r3, #0
 80134a6:	e076      	b.n	8013596 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	88db      	ldrh	r3, [r3, #6]
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	461a      	mov	r2, r3
 80134b0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80134b4:	4013      	ands	r3, r2
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d00b      	beq.n	80134d2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f000 fc92 	bl	8013de4 <ip4_reass>
 80134c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d101      	bne.n	80134cc <ip4_input+0x16c>
      return ERR_OK;
 80134c8:	2300      	movs	r3, #0
 80134ca:	e064      	b.n	8013596 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80134d2:	4a33      	ldr	r2, [pc, #204]	; (80135a0 <ip4_input+0x240>)
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80134d8:	4a31      	ldr	r2, [pc, #196]	; (80135a0 <ip4_input+0x240>)
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80134de:	4a30      	ldr	r2, [pc, #192]	; (80135a0 <ip4_input+0x240>)
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	f003 030f 	and.w	r3, r3, #15
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	b2db      	uxtb	r3, r3
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	4b2a      	ldr	r3, [pc, #168]	; (80135a0 <ip4_input+0x240>)
 80134f6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80134f8:	89fb      	ldrh	r3, [r7, #14]
 80134fa:	4619      	mov	r1, r3
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7f8 fe0b 	bl	800c118 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	7a5b      	ldrb	r3, [r3, #9]
 8013506:	2b11      	cmp	r3, #17
 8013508:	d006      	beq.n	8013518 <ip4_input+0x1b8>
 801350a:	2b11      	cmp	r3, #17
 801350c:	dc13      	bgt.n	8013536 <ip4_input+0x1d6>
 801350e:	2b01      	cmp	r3, #1
 8013510:	d00c      	beq.n	801352c <ip4_input+0x1cc>
 8013512:	2b06      	cmp	r3, #6
 8013514:	d005      	beq.n	8013522 <ip4_input+0x1c2>
 8013516:	e00e      	b.n	8013536 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013518:	6839      	ldr	r1, [r7, #0]
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f7fe fc68 	bl	8011df0 <udp_input>
        break;
 8013520:	e026      	b.n	8013570 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013522:	6839      	ldr	r1, [r7, #0]
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7fa fcb1 	bl	800de8c <tcp_input>
        break;
 801352a:	e021      	b.n	8013570 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801352c:	6839      	ldr	r1, [r7, #0]
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f7ff fcee 	bl	8012f10 <icmp_input>
        break;
 8013534:	e01c      	b.n	8013570 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013536:	4b1a      	ldr	r3, [pc, #104]	; (80135a0 <ip4_input+0x240>)
 8013538:	695b      	ldr	r3, [r3, #20]
 801353a:	6939      	ldr	r1, [r7, #16]
 801353c:	4618      	mov	r0, r3
 801353e:	f000 f90b 	bl	8013758 <ip4_addr_isbroadcast_u32>
 8013542:	4603      	mov	r3, r0
 8013544:	2b00      	cmp	r3, #0
 8013546:	d10f      	bne.n	8013568 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013548:	4b15      	ldr	r3, [pc, #84]	; (80135a0 <ip4_input+0x240>)
 801354a:	695b      	ldr	r3, [r3, #20]
 801354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013550:	2be0      	cmp	r3, #224	; 0xe0
 8013552:	d009      	beq.n	8013568 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013554:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013558:	4619      	mov	r1, r3
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f7f8 fe4f 	bl	800c1fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013560:	2102      	movs	r1, #2
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f7ff fdd8 	bl	8013118 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f7f8 fe5b 	bl	800c224 <pbuf_free>
        break;
 801356e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013570:	4b0b      	ldr	r3, [pc, #44]	; (80135a0 <ip4_input+0x240>)
 8013572:	2200      	movs	r2, #0
 8013574:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013576:	4b0a      	ldr	r3, [pc, #40]	; (80135a0 <ip4_input+0x240>)
 8013578:	2200      	movs	r2, #0
 801357a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801357c:	4b08      	ldr	r3, [pc, #32]	; (80135a0 <ip4_input+0x240>)
 801357e:	2200      	movs	r2, #0
 8013580:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013582:	4b07      	ldr	r3, [pc, #28]	; (80135a0 <ip4_input+0x240>)
 8013584:	2200      	movs	r2, #0
 8013586:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013588:	4b05      	ldr	r3, [pc, #20]	; (80135a0 <ip4_input+0x240>)
 801358a:	2200      	movs	r2, #0
 801358c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801358e:	4b04      	ldr	r3, [pc, #16]	; (80135a0 <ip4_input+0x240>)
 8013590:	2200      	movs	r2, #0
 8013592:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013594:	2300      	movs	r3, #0
}
 8013596:	4618      	mov	r0, r3
 8013598:	3718      	adds	r7, #24
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	2004ac68 	.word	0x2004ac68
 80135a4:	2004f170 	.word	0x2004f170

080135a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b08a      	sub	sp, #40	; 0x28
 80135ac:	af04      	add	r7, sp, #16
 80135ae:	60f8      	str	r0, [r7, #12]
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	607a      	str	r2, [r7, #4]
 80135b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d009      	beq.n	80135d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d003      	beq.n	80135ce <ip4_output_if+0x26>
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d102      	bne.n	80135d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80135ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d0:	3304      	adds	r3, #4
 80135d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80135d4:	78fa      	ldrb	r2, [r7, #3]
 80135d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d8:	9302      	str	r3, [sp, #8]
 80135da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80135de:	9301      	str	r3, [sp, #4]
 80135e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80135e4:	9300      	str	r3, [sp, #0]
 80135e6:	4613      	mov	r3, r2
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	6979      	ldr	r1, [r7, #20]
 80135ec:	68f8      	ldr	r0, [r7, #12]
 80135ee:	f000 f805 	bl	80135fc <ip4_output_if_src>
 80135f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3718      	adds	r7, #24
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}

080135fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b088      	sub	sp, #32
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
 8013608:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	7b9b      	ldrb	r3, [r3, #14]
 801360e:	2b01      	cmp	r3, #1
 8013610:	d006      	beq.n	8013620 <ip4_output_if_src+0x24>
 8013612:	4b4b      	ldr	r3, [pc, #300]	; (8013740 <ip4_output_if_src+0x144>)
 8013614:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013618:	494a      	ldr	r1, [pc, #296]	; (8013744 <ip4_output_if_src+0x148>)
 801361a:	484b      	ldr	r0, [pc, #300]	; (8013748 <ip4_output_if_src+0x14c>)
 801361c:	f001 fabc 	bl	8014b98 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d060      	beq.n	80136e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013626:	2314      	movs	r3, #20
 8013628:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801362a:	2114      	movs	r1, #20
 801362c:	68f8      	ldr	r0, [r7, #12]
 801362e:	f7f8 fd63 	bl	800c0f8 <pbuf_add_header>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d002      	beq.n	801363e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013638:	f06f 0301 	mvn.w	r3, #1
 801363c:	e07c      	b.n	8013738 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	685b      	ldr	r3, [r3, #4]
 8013642:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	895b      	ldrh	r3, [r3, #10]
 8013648:	2b13      	cmp	r3, #19
 801364a:	d806      	bhi.n	801365a <ip4_output_if_src+0x5e>
 801364c:	4b3c      	ldr	r3, [pc, #240]	; (8013740 <ip4_output_if_src+0x144>)
 801364e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013652:	493e      	ldr	r1, [pc, #248]	; (801374c <ip4_output_if_src+0x150>)
 8013654:	483c      	ldr	r0, [pc, #240]	; (8013748 <ip4_output_if_src+0x14c>)
 8013656:	f001 fa9f 	bl	8014b98 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801365a:	69fb      	ldr	r3, [r7, #28]
 801365c:	78fa      	ldrb	r2, [r7, #3]
 801365e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013660:	69fb      	ldr	r3, [r7, #28]
 8013662:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013666:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013670:	8b7b      	ldrh	r3, [r7, #26]
 8013672:	089b      	lsrs	r3, r3, #2
 8013674:	b29b      	uxth	r3, r3
 8013676:	b2db      	uxtb	r3, r3
 8013678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801367c:	b2da      	uxtb	r2, r3
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013688:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	891b      	ldrh	r3, [r3, #8]
 801368e:	4618      	mov	r0, r3
 8013690:	f7f7 f9d6 	bl	800aa40 <lwip_htons>
 8013694:	4603      	mov	r3, r0
 8013696:	461a      	mov	r2, r3
 8013698:	69fb      	ldr	r3, [r7, #28]
 801369a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	2200      	movs	r2, #0
 80136a0:	719a      	strb	r2, [r3, #6]
 80136a2:	2200      	movs	r2, #0
 80136a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80136a6:	4b2a      	ldr	r3, [pc, #168]	; (8013750 <ip4_output_if_src+0x154>)
 80136a8:	881b      	ldrh	r3, [r3, #0]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7f7 f9c8 	bl	800aa40 <lwip_htons>
 80136b0:	4603      	mov	r3, r0
 80136b2:	461a      	mov	r2, r3
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80136b8:	4b25      	ldr	r3, [pc, #148]	; (8013750 <ip4_output_if_src+0x154>)
 80136ba:	881b      	ldrh	r3, [r3, #0]
 80136bc:	3301      	adds	r3, #1
 80136be:	b29a      	uxth	r2, r3
 80136c0:	4b23      	ldr	r3, [pc, #140]	; (8013750 <ip4_output_if_src+0x154>)
 80136c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d104      	bne.n	80136d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80136ca:	4b22      	ldr	r3, [pc, #136]	; (8013754 <ip4_output_if_src+0x158>)
 80136cc:	681a      	ldr	r2, [r3, #0]
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	60da      	str	r2, [r3, #12]
 80136d2:	e003      	b.n	80136dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80136dc:	69fb      	ldr	r3, [r7, #28]
 80136de:	2200      	movs	r2, #0
 80136e0:	729a      	strb	r2, [r3, #10]
 80136e2:	2200      	movs	r2, #0
 80136e4:	72da      	strb	r2, [r3, #11]
 80136e6:	e00f      	b.n	8013708 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	895b      	ldrh	r3, [r3, #10]
 80136ec:	2b13      	cmp	r3, #19
 80136ee:	d802      	bhi.n	80136f6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80136f0:	f06f 0301 	mvn.w	r3, #1
 80136f4:	e020      	b.n	8013738 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	691b      	ldr	r3, [r3, #16]
 8013700:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013702:	f107 0314 	add.w	r3, r7, #20
 8013706:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801370c:	2b00      	cmp	r3, #0
 801370e:	d00c      	beq.n	801372a <ip4_output_if_src+0x12e>
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	891a      	ldrh	r2, [r3, #8]
 8013714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013716:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013718:	429a      	cmp	r2, r3
 801371a:	d906      	bls.n	801372a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801371c:	687a      	ldr	r2, [r7, #4]
 801371e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013720:	68f8      	ldr	r0, [r7, #12]
 8013722:	f000 fd53 	bl	80141cc <ip4_frag>
 8013726:	4603      	mov	r3, r0
 8013728:	e006      	b.n	8013738 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	695b      	ldr	r3, [r3, #20]
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	68f9      	ldr	r1, [r7, #12]
 8013732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013734:	4798      	blx	r3
 8013736:	4603      	mov	r3, r0
}
 8013738:	4618      	mov	r0, r3
 801373a:	3720      	adds	r7, #32
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	080181d8 	.word	0x080181d8
 8013744:	0801820c 	.word	0x0801820c
 8013748:	08018218 	.word	0x08018218
 801374c:	08018240 	.word	0x08018240
 8013750:	2004f2ce 	.word	0x2004f2ce
 8013754:	08018684 	.word	0x08018684

08013758 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013758:	b480      	push	{r7}
 801375a:	b085      	sub	sp, #20
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801376c:	d002      	beq.n	8013774 <ip4_addr_isbroadcast_u32+0x1c>
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d101      	bne.n	8013778 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013774:	2301      	movs	r3, #1
 8013776:	e02a      	b.n	80137ce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801377e:	f003 0302 	and.w	r3, r3, #2
 8013782:	2b00      	cmp	r3, #0
 8013784:	d101      	bne.n	801378a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013786:	2300      	movs	r3, #0
 8013788:	e021      	b.n	80137ce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	3304      	adds	r3, #4
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	429a      	cmp	r2, r3
 8013794:	d101      	bne.n	801379a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013796:	2300      	movs	r3, #0
 8013798:	e019      	b.n	80137ce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801379a:	68fa      	ldr	r2, [r7, #12]
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	3304      	adds	r3, #4
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	405a      	eors	r2, r3
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	3308      	adds	r3, #8
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	4013      	ands	r3, r2
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d10d      	bne.n	80137cc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	3308      	adds	r3, #8
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	43da      	mvns	r2, r3
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	3308      	adds	r3, #8
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d101      	bne.n	80137cc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80137c8:	2301      	movs	r3, #1
 80137ca:	e000      	b.n	80137ce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80137cc:	2300      	movs	r3, #0
  }
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3714      	adds	r7, #20
 80137d2:	46bd      	mov	sp, r7
 80137d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d8:	4770      	bx	lr
	...

080137dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b084      	sub	sp, #16
 80137e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80137e2:	2300      	movs	r3, #0
 80137e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80137e6:	4b12      	ldr	r3, [pc, #72]	; (8013830 <ip_reass_tmr+0x54>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80137ec:	e018      	b.n	8013820 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	7fdb      	ldrb	r3, [r3, #31]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d00b      	beq.n	801380e <ip_reass_tmr+0x32>
      r->timer--;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	7fdb      	ldrb	r3, [r3, #31]
 80137fa:	3b01      	subs	r3, #1
 80137fc:	b2da      	uxtb	r2, r3
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	60fb      	str	r3, [r7, #12]
 801380c:	e008      	b.n	8013820 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013818:	68b9      	ldr	r1, [r7, #8]
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	f000 f80a 	bl	8013834 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d1e3      	bne.n	80137ee <ip_reass_tmr+0x12>
    }
  }
}
 8013826:	bf00      	nop
 8013828:	bf00      	nop
 801382a:	3710      	adds	r7, #16
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}
 8013830:	2004f2d0 	.word	0x2004f2d0

08013834 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b088      	sub	sp, #32
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801383e:	2300      	movs	r3, #0
 8013840:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013842:	683a      	ldr	r2, [r7, #0]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	429a      	cmp	r2, r3
 8013848:	d105      	bne.n	8013856 <ip_reass_free_complete_datagram+0x22>
 801384a:	4b45      	ldr	r3, [pc, #276]	; (8013960 <ip_reass_free_complete_datagram+0x12c>)
 801384c:	22ab      	movs	r2, #171	; 0xab
 801384e:	4945      	ldr	r1, [pc, #276]	; (8013964 <ip_reass_free_complete_datagram+0x130>)
 8013850:	4845      	ldr	r0, [pc, #276]	; (8013968 <ip_reass_free_complete_datagram+0x134>)
 8013852:	f001 f9a1 	bl	8014b98 <iprintf>
  if (prev != NULL) {
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d00a      	beq.n	8013872 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	687a      	ldr	r2, [r7, #4]
 8013862:	429a      	cmp	r2, r3
 8013864:	d005      	beq.n	8013872 <ip_reass_free_complete_datagram+0x3e>
 8013866:	4b3e      	ldr	r3, [pc, #248]	; (8013960 <ip_reass_free_complete_datagram+0x12c>)
 8013868:	22ad      	movs	r2, #173	; 0xad
 801386a:	4940      	ldr	r1, [pc, #256]	; (801396c <ip_reass_free_complete_datagram+0x138>)
 801386c:	483e      	ldr	r0, [pc, #248]	; (8013968 <ip_reass_free_complete_datagram+0x134>)
 801386e:	f001 f993 	bl	8014b98 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	889b      	ldrh	r3, [r3, #4]
 801387e:	b29b      	uxth	r3, r3
 8013880:	2b00      	cmp	r3, #0
 8013882:	d12a      	bne.n	80138da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	681a      	ldr	r2, [r3, #0]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	6858      	ldr	r0, [r3, #4]
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	3308      	adds	r3, #8
 801389a:	2214      	movs	r2, #20
 801389c:	4619      	mov	r1, r3
 801389e:	f001 f8d0 	bl	8014a42 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80138a2:	2101      	movs	r1, #1
 80138a4:	69b8      	ldr	r0, [r7, #24]
 80138a6:	f7ff fc47 	bl	8013138 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80138aa:	69b8      	ldr	r0, [r7, #24]
 80138ac:	f7f8 fd48 	bl	800c340 <pbuf_clen>
 80138b0:	4603      	mov	r3, r0
 80138b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80138b4:	8bfa      	ldrh	r2, [r7, #30]
 80138b6:	8a7b      	ldrh	r3, [r7, #18]
 80138b8:	4413      	add	r3, r2
 80138ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80138be:	db05      	blt.n	80138cc <ip_reass_free_complete_datagram+0x98>
 80138c0:	4b27      	ldr	r3, [pc, #156]	; (8013960 <ip_reass_free_complete_datagram+0x12c>)
 80138c2:	22bc      	movs	r2, #188	; 0xbc
 80138c4:	492a      	ldr	r1, [pc, #168]	; (8013970 <ip_reass_free_complete_datagram+0x13c>)
 80138c6:	4828      	ldr	r0, [pc, #160]	; (8013968 <ip_reass_free_complete_datagram+0x134>)
 80138c8:	f001 f966 	bl	8014b98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80138cc:	8bfa      	ldrh	r2, [r7, #30]
 80138ce:	8a7b      	ldrh	r3, [r7, #18]
 80138d0:	4413      	add	r3, r2
 80138d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80138d4:	69b8      	ldr	r0, [r7, #24]
 80138d6:	f7f8 fca5 	bl	800c224 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80138e0:	e01f      	b.n	8013922 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	685b      	ldr	r3, [r3, #4]
 80138e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f7f8 fd24 	bl	800c340 <pbuf_clen>
 80138f8:	4603      	mov	r3, r0
 80138fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80138fc:	8bfa      	ldrh	r2, [r7, #30]
 80138fe:	8a7b      	ldrh	r3, [r7, #18]
 8013900:	4413      	add	r3, r2
 8013902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013906:	db05      	blt.n	8013914 <ip_reass_free_complete_datagram+0xe0>
 8013908:	4b15      	ldr	r3, [pc, #84]	; (8013960 <ip_reass_free_complete_datagram+0x12c>)
 801390a:	22cc      	movs	r2, #204	; 0xcc
 801390c:	4918      	ldr	r1, [pc, #96]	; (8013970 <ip_reass_free_complete_datagram+0x13c>)
 801390e:	4816      	ldr	r0, [pc, #88]	; (8013968 <ip_reass_free_complete_datagram+0x134>)
 8013910:	f001 f942 	bl	8014b98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013914:	8bfa      	ldrh	r2, [r7, #30]
 8013916:	8a7b      	ldrh	r3, [r7, #18]
 8013918:	4413      	add	r3, r2
 801391a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801391c:	68f8      	ldr	r0, [r7, #12]
 801391e:	f7f8 fc81 	bl	800c224 <pbuf_free>
  while (p != NULL) {
 8013922:	69bb      	ldr	r3, [r7, #24]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d1dc      	bne.n	80138e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013928:	6839      	ldr	r1, [r7, #0]
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f000 f8c2 	bl	8013ab4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013930:	4b10      	ldr	r3, [pc, #64]	; (8013974 <ip_reass_free_complete_datagram+0x140>)
 8013932:	881b      	ldrh	r3, [r3, #0]
 8013934:	8bfa      	ldrh	r2, [r7, #30]
 8013936:	429a      	cmp	r2, r3
 8013938:	d905      	bls.n	8013946 <ip_reass_free_complete_datagram+0x112>
 801393a:	4b09      	ldr	r3, [pc, #36]	; (8013960 <ip_reass_free_complete_datagram+0x12c>)
 801393c:	22d2      	movs	r2, #210	; 0xd2
 801393e:	490e      	ldr	r1, [pc, #56]	; (8013978 <ip_reass_free_complete_datagram+0x144>)
 8013940:	4809      	ldr	r0, [pc, #36]	; (8013968 <ip_reass_free_complete_datagram+0x134>)
 8013942:	f001 f929 	bl	8014b98 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013946:	4b0b      	ldr	r3, [pc, #44]	; (8013974 <ip_reass_free_complete_datagram+0x140>)
 8013948:	881a      	ldrh	r2, [r3, #0]
 801394a:	8bfb      	ldrh	r3, [r7, #30]
 801394c:	1ad3      	subs	r3, r2, r3
 801394e:	b29a      	uxth	r2, r3
 8013950:	4b08      	ldr	r3, [pc, #32]	; (8013974 <ip_reass_free_complete_datagram+0x140>)
 8013952:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013954:	8bfb      	ldrh	r3, [r7, #30]
}
 8013956:	4618      	mov	r0, r3
 8013958:	3720      	adds	r7, #32
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
 801395e:	bf00      	nop
 8013960:	08018270 	.word	0x08018270
 8013964:	080182ac 	.word	0x080182ac
 8013968:	080182b8 	.word	0x080182b8
 801396c:	080182e0 	.word	0x080182e0
 8013970:	080182f4 	.word	0x080182f4
 8013974:	2004f2d4 	.word	0x2004f2d4
 8013978:	08018314 	.word	0x08018314

0801397c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b08a      	sub	sp, #40	; 0x28
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013986:	2300      	movs	r3, #0
 8013988:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801398a:	2300      	movs	r3, #0
 801398c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801398e:	2300      	movs	r3, #0
 8013990:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013992:	2300      	movs	r3, #0
 8013994:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013996:	2300      	movs	r3, #0
 8013998:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801399a:	4b28      	ldr	r3, [pc, #160]	; (8013a3c <ip_reass_remove_oldest_datagram+0xc0>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80139a0:	e030      	b.n	8013a04 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80139a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a4:	695a      	ldr	r2, [r3, #20]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d10c      	bne.n	80139c8 <ip_reass_remove_oldest_datagram+0x4c>
 80139ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b0:	699a      	ldr	r2, [r3, #24]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	691b      	ldr	r3, [r3, #16]
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d106      	bne.n	80139c8 <ip_reass_remove_oldest_datagram+0x4c>
 80139ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139bc:	899a      	ldrh	r2, [r3, #12]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	889b      	ldrh	r3, [r3, #4]
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d014      	beq.n	80139f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	3301      	adds	r3, #1
 80139cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80139ce:	6a3b      	ldr	r3, [r7, #32]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d104      	bne.n	80139de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80139d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	61bb      	str	r3, [r7, #24]
 80139dc:	e009      	b.n	80139f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80139de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e0:	7fda      	ldrb	r2, [r3, #31]
 80139e2:	6a3b      	ldr	r3, [r7, #32]
 80139e4:	7fdb      	ldrb	r3, [r3, #31]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d803      	bhi.n	80139f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80139ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80139ee:	69fb      	ldr	r3, [r7, #28]
 80139f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80139f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d001      	beq.n	80139fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80139fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80139fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d1cb      	bne.n	80139a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d008      	beq.n	8013a22 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013a10:	69b9      	ldr	r1, [r7, #24]
 8013a12:	6a38      	ldr	r0, [r7, #32]
 8013a14:	f7ff ff0e 	bl	8013834 <ip_reass_free_complete_datagram>
 8013a18:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013a1a:	697a      	ldr	r2, [r7, #20]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	4413      	add	r3, r2
 8013a20:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013a22:	697a      	ldr	r2, [r7, #20]
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	da02      	bge.n	8013a30 <ip_reass_remove_oldest_datagram+0xb4>
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	dcac      	bgt.n	801398a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013a30:	697b      	ldr	r3, [r7, #20]
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3728      	adds	r7, #40	; 0x28
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	2004f2d0 	.word	0x2004f2d0

08013a40 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013a4a:	2004      	movs	r0, #4
 8013a4c:	f7f7 fcd0 	bl	800b3f0 <memp_malloc>
 8013a50:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d110      	bne.n	8013a7a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013a58:	6839      	ldr	r1, [r7, #0]
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f7ff ff8e 	bl	801397c <ip_reass_remove_oldest_datagram>
 8013a60:	4602      	mov	r2, r0
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	4293      	cmp	r3, r2
 8013a66:	dc03      	bgt.n	8013a70 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013a68:	2004      	movs	r0, #4
 8013a6a:	f7f7 fcc1 	bl	800b3f0 <memp_malloc>
 8013a6e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d101      	bne.n	8013a7a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013a76:	2300      	movs	r3, #0
 8013a78:	e016      	b.n	8013aa8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013a7a:	2220      	movs	r2, #32
 8013a7c:	2100      	movs	r1, #0
 8013a7e:	68f8      	ldr	r0, [r7, #12]
 8013a80:	f000 ffed 	bl	8014a5e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	220f      	movs	r2, #15
 8013a88:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013a8a:	4b09      	ldr	r3, [pc, #36]	; (8013ab0 <ip_reass_enqueue_new_datagram+0x70>)
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013a92:	4a07      	ldr	r2, [pc, #28]	; (8013ab0 <ip_reass_enqueue_new_datagram+0x70>)
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	3308      	adds	r3, #8
 8013a9c:	2214      	movs	r2, #20
 8013a9e:	6879      	ldr	r1, [r7, #4]
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f000 ffce 	bl	8014a42 <memcpy>
  return ipr;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3710      	adds	r7, #16
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}
 8013ab0:	2004f2d0 	.word	0x2004f2d0

08013ab4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013abe:	4b10      	ldr	r3, [pc, #64]	; (8013b00 <ip_reass_dequeue_datagram+0x4c>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	687a      	ldr	r2, [r7, #4]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d104      	bne.n	8013ad2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	4a0c      	ldr	r2, [pc, #48]	; (8013b00 <ip_reass_dequeue_datagram+0x4c>)
 8013ace:	6013      	str	r3, [r2, #0]
 8013ad0:	e00d      	b.n	8013aee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d106      	bne.n	8013ae6 <ip_reass_dequeue_datagram+0x32>
 8013ad8:	4b0a      	ldr	r3, [pc, #40]	; (8013b04 <ip_reass_dequeue_datagram+0x50>)
 8013ada:	f240 1245 	movw	r2, #325	; 0x145
 8013ade:	490a      	ldr	r1, [pc, #40]	; (8013b08 <ip_reass_dequeue_datagram+0x54>)
 8013ae0:	480a      	ldr	r0, [pc, #40]	; (8013b0c <ip_reass_dequeue_datagram+0x58>)
 8013ae2:	f001 f859 	bl	8014b98 <iprintf>
    prev->next = ipr->next;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013aee:	6879      	ldr	r1, [r7, #4]
 8013af0:	2004      	movs	r0, #4
 8013af2:	f7f7 fcf3 	bl	800b4dc <memp_free>
}
 8013af6:	bf00      	nop
 8013af8:	3708      	adds	r7, #8
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
 8013afe:	bf00      	nop
 8013b00:	2004f2d0 	.word	0x2004f2d0
 8013b04:	08018270 	.word	0x08018270
 8013b08:	08018338 	.word	0x08018338
 8013b0c:	080182b8 	.word	0x080182b8

08013b10 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b08c      	sub	sp, #48	; 0x30
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013b20:	2301      	movs	r3, #1
 8013b22:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	685b      	ldr	r3, [r3, #4]
 8013b28:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013b2a:	69fb      	ldr	r3, [r7, #28]
 8013b2c:	885b      	ldrh	r3, [r3, #2]
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7f6 ff85 	bl	800aa40 <lwip_htons>
 8013b36:	4603      	mov	r3, r0
 8013b38:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	f003 030f 	and.w	r3, r3, #15
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	009b      	lsls	r3, r3, #2
 8013b46:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013b48:	7e7b      	ldrb	r3, [r7, #25]
 8013b4a:	b29b      	uxth	r3, r3
 8013b4c:	8b7a      	ldrh	r2, [r7, #26]
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d202      	bcs.n	8013b58 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b56:	e135      	b.n	8013dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013b58:	7e7b      	ldrb	r3, [r7, #25]
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	8b7a      	ldrh	r2, [r7, #26]
 8013b5e:	1ad3      	subs	r3, r2, r3
 8013b60:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	88db      	ldrh	r3, [r3, #6]
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7f6 ff69 	bl	800aa40 <lwip_htons>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	00db      	lsls	r3, r3, #3
 8013b78:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b82:	2200      	movs	r2, #0
 8013b84:	701a      	strb	r2, [r3, #0]
 8013b86:	2200      	movs	r2, #0
 8013b88:	705a      	strb	r2, [r3, #1]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	709a      	strb	r2, [r3, #2]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b94:	8afa      	ldrh	r2, [r7, #22]
 8013b96:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013b98:	8afa      	ldrh	r2, [r7, #22]
 8013b9a:	8b7b      	ldrh	r3, [r7, #26]
 8013b9c:	4413      	add	r3, r2
 8013b9e:	b29a      	uxth	r2, r3
 8013ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba6:	88db      	ldrh	r3, [r3, #6]
 8013ba8:	b29b      	uxth	r3, r3
 8013baa:	8afa      	ldrh	r2, [r7, #22]
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d902      	bls.n	8013bb6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bb4:	e106      	b.n	8013dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	627b      	str	r3, [r7, #36]	; 0x24
 8013bbc:	e068      	b.n	8013c90 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc6:	889b      	ldrh	r3, [r3, #4]
 8013bc8:	b29a      	uxth	r2, r3
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	889b      	ldrh	r3, [r3, #4]
 8013bce:	b29b      	uxth	r3, r3
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	d235      	bcs.n	8013c40 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d020      	beq.n	8013c22 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be2:	889b      	ldrh	r3, [r3, #4]
 8013be4:	b29a      	uxth	r2, r3
 8013be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be8:	88db      	ldrh	r3, [r3, #6]
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d307      	bcc.n	8013c00 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf2:	88db      	ldrh	r3, [r3, #6]
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	693b      	ldr	r3, [r7, #16]
 8013bf8:	889b      	ldrh	r3, [r3, #4]
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d902      	bls.n	8013c06 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c04:	e0de      	b.n	8013dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c08:	68ba      	ldr	r2, [r7, #8]
 8013c0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0e:	88db      	ldrh	r3, [r3, #6]
 8013c10:	b29a      	uxth	r2, r3
 8013c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c14:	889b      	ldrh	r3, [r3, #4]
 8013c16:	b29b      	uxth	r3, r3
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d03d      	beq.n	8013c98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013c20:	e03a      	b.n	8013c98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c24:	88db      	ldrh	r3, [r3, #6]
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	889b      	ldrh	r3, [r3, #4]
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d902      	bls.n	8013c38 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c36:	e0c5      	b.n	8013dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	68ba      	ldr	r2, [r7, #8]
 8013c3c:	605a      	str	r2, [r3, #4]
      break;
 8013c3e:	e02b      	b.n	8013c98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c42:	889b      	ldrh	r3, [r3, #4]
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	693b      	ldr	r3, [r7, #16]
 8013c48:	889b      	ldrh	r3, [r3, #4]
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d102      	bne.n	8013c56 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c54:	e0b6      	b.n	8013dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c58:	889b      	ldrh	r3, [r3, #4]
 8013c5a:	b29a      	uxth	r2, r3
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	88db      	ldrh	r3, [r3, #6]
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d202      	bcs.n	8013c6c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c6a:	e0ab      	b.n	8013dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d009      	beq.n	8013c86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c74:	88db      	ldrh	r3, [r3, #6]
 8013c76:	b29a      	uxth	r2, r3
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	889b      	ldrh	r3, [r3, #4]
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d001      	beq.n	8013c86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013c82:	2300      	movs	r3, #0
 8013c84:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d193      	bne.n	8013bbe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013c96:	e000      	b.n	8013c9a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013c98:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d12d      	bne.n	8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d01c      	beq.n	8013ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca8:	88db      	ldrh	r3, [r3, #6]
 8013caa:	b29a      	uxth	r2, r3
 8013cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cae:	889b      	ldrh	r3, [r3, #4]
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d906      	bls.n	8013cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013cb6:	4b45      	ldr	r3, [pc, #276]	; (8013dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013cb8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013cbc:	4944      	ldr	r1, [pc, #272]	; (8013dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013cbe:	4845      	ldr	r0, [pc, #276]	; (8013dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013cc0:	f000 ff6a 	bl	8014b98 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc6:	68ba      	ldr	r2, [r7, #8]
 8013cc8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ccc:	88db      	ldrh	r3, [r3, #6]
 8013cce:	b29a      	uxth	r2, r3
 8013cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cd2:	889b      	ldrh	r3, [r3, #4]
 8013cd4:	b29b      	uxth	r3, r3
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d010      	beq.n	8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	623b      	str	r3, [r7, #32]
 8013cde:	e00d      	b.n	8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	685b      	ldr	r3, [r3, #4]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d006      	beq.n	8013cf6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013ce8:	4b38      	ldr	r3, [pc, #224]	; (8013dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013cea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013cee:	493a      	ldr	r1, [pc, #232]	; (8013dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013cf0:	4838      	ldr	r0, [pc, #224]	; (8013dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013cf2:	f000 ff51 	bl	8014b98 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	68ba      	ldr	r2, [r7, #8]
 8013cfa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d105      	bne.n	8013d0e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	7f9b      	ldrb	r3, [r3, #30]
 8013d06:	f003 0301 	and.w	r3, r3, #1
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d059      	beq.n	8013dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013d0e:	6a3b      	ldr	r3, [r7, #32]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d04f      	beq.n	8013db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d006      	beq.n	8013d2a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	685b      	ldr	r3, [r3, #4]
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	889b      	ldrh	r3, [r3, #4]
 8013d24:	b29b      	uxth	r3, r3
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d002      	beq.n	8013d30 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	623b      	str	r3, [r7, #32]
 8013d2e:	e041      	b.n	8013db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d32:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013d3a:	e012      	b.n	8013d62 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d44:	88db      	ldrh	r3, [r3, #6]
 8013d46:	b29a      	uxth	r2, r3
 8013d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d4a:	889b      	ldrh	r3, [r3, #4]
 8013d4c:	b29b      	uxth	r3, r3
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d002      	beq.n	8013d58 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013d52:	2300      	movs	r3, #0
 8013d54:	623b      	str	r3, [r7, #32]
            break;
 8013d56:	e007      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d1e9      	bne.n	8013d3c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013d68:	6a3b      	ldr	r3, [r7, #32]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d022      	beq.n	8013db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	685b      	ldr	r3, [r3, #4]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d106      	bne.n	8013d84 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013d76:	4b15      	ldr	r3, [pc, #84]	; (8013dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d78:	f240 12df 	movw	r2, #479	; 0x1df
 8013d7c:	4917      	ldr	r1, [pc, #92]	; (8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013d7e:	4815      	ldr	r0, [pc, #84]	; (8013dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d80:	f000 ff0a 	bl	8014b98 <iprintf>
          LWIP_ASSERT("sanity check",
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d106      	bne.n	8013d9e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013d90:	4b0e      	ldr	r3, [pc, #56]	; (8013dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013d96:	4911      	ldr	r1, [pc, #68]	; (8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013d98:	480e      	ldr	r0, [pc, #56]	; (8013dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d9a:	f000 fefd 	bl	8014b98 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d006      	beq.n	8013db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013da6:	4b09      	ldr	r3, [pc, #36]	; (8013dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013da8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013dac:	490c      	ldr	r1, [pc, #48]	; (8013de0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013dae:	4809      	ldr	r0, [pc, #36]	; (8013dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013db0:	f000 fef2 	bl	8014b98 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013db4:	6a3b      	ldr	r3, [r7, #32]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	bf14      	ite	ne
 8013dba:	2301      	movne	r3, #1
 8013dbc:	2300      	moveq	r3, #0
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	e000      	b.n	8013dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013dc2:	2300      	movs	r3, #0
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3730      	adds	r7, #48	; 0x30
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	08018270 	.word	0x08018270
 8013dd0:	08018354 	.word	0x08018354
 8013dd4:	080182b8 	.word	0x080182b8
 8013dd8:	08018374 	.word	0x08018374
 8013ddc:	080183ac 	.word	0x080183ac
 8013de0:	080183bc 	.word	0x080183bc

08013de4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b08e      	sub	sp, #56	; 0x38
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	685b      	ldr	r3, [r3, #4]
 8013df0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	f003 030f 	and.w	r3, r3, #15
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	2b14      	cmp	r3, #20
 8013e02:	f040 8171 	bne.w	80140e8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e08:	88db      	ldrh	r3, [r3, #6]
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7f6 fe17 	bl	800aa40 <lwip_htons>
 8013e12:	4603      	mov	r3, r0
 8013e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	00db      	lsls	r3, r3, #3
 8013e1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e20:	885b      	ldrh	r3, [r3, #2]
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7f6 fe0b 	bl	800aa40 <lwip_htons>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e30:	781b      	ldrb	r3, [r3, #0]
 8013e32:	f003 030f 	and.w	r3, r3, #15
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	009b      	lsls	r3, r3, #2
 8013e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013e46:	429a      	cmp	r2, r3
 8013e48:	f0c0 8150 	bcc.w	80140ec <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e50:	b29b      	uxth	r3, r3
 8013e52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013e54:	1ad3      	subs	r3, r2, r3
 8013e56:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7f8 fa71 	bl	800c340 <pbuf_clen>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013e62:	4b8c      	ldr	r3, [pc, #560]	; (8014094 <ip4_reass+0x2b0>)
 8013e64:	881b      	ldrh	r3, [r3, #0]
 8013e66:	461a      	mov	r2, r3
 8013e68:	8c3b      	ldrh	r3, [r7, #32]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	2b0a      	cmp	r3, #10
 8013e6e:	dd10      	ble.n	8013e92 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013e70:	8c3b      	ldrh	r3, [r7, #32]
 8013e72:	4619      	mov	r1, r3
 8013e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e76:	f7ff fd81 	bl	801397c <ip_reass_remove_oldest_datagram>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	f000 8137 	beq.w	80140f0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013e82:	4b84      	ldr	r3, [pc, #528]	; (8014094 <ip4_reass+0x2b0>)
 8013e84:	881b      	ldrh	r3, [r3, #0]
 8013e86:	461a      	mov	r2, r3
 8013e88:	8c3b      	ldrh	r3, [r7, #32]
 8013e8a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013e8c:	2b0a      	cmp	r3, #10
 8013e8e:	f300 812f 	bgt.w	80140f0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013e92:	4b81      	ldr	r3, [pc, #516]	; (8014098 <ip4_reass+0x2b4>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	633b      	str	r3, [r7, #48]	; 0x30
 8013e98:	e015      	b.n	8013ec6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e9c:	695a      	ldr	r2, [r3, #20]
 8013e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d10c      	bne.n	8013ec0 <ip4_reass+0xdc>
 8013ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea8:	699a      	ldr	r2, [r3, #24]
 8013eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eac:	691b      	ldr	r3, [r3, #16]
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d106      	bne.n	8013ec0 <ip4_reass+0xdc>
 8013eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb4:	899a      	ldrh	r2, [r3, #12]
 8013eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb8:	889b      	ldrh	r3, [r3, #4]
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d006      	beq.n	8013ece <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8013ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1e6      	bne.n	8013e9a <ip4_reass+0xb6>
 8013ecc:	e000      	b.n	8013ed0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013ece:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d109      	bne.n	8013eea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013ed6:	8c3b      	ldrh	r3, [r7, #32]
 8013ed8:	4619      	mov	r1, r3
 8013eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013edc:	f7ff fdb0 	bl	8013a40 <ip_reass_enqueue_new_datagram>
 8013ee0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d11c      	bne.n	8013f22 <ip4_reass+0x13e>
      goto nullreturn;
 8013ee8:	e105      	b.n	80140f6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eec:	88db      	ldrh	r3, [r3, #6]
 8013eee:	b29b      	uxth	r3, r3
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7f6 fda5 	bl	800aa40 <lwip_htons>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d110      	bne.n	8013f22 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f02:	89db      	ldrh	r3, [r3, #14]
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7f6 fd9b 	bl	800aa40 <lwip_htons>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d006      	beq.n	8013f22 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f16:	3308      	adds	r3, #8
 8013f18:	2214      	movs	r2, #20
 8013f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f000 fd90 	bl	8014a42 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f24:	88db      	ldrh	r3, [r3, #6]
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	f003 0320 	and.w	r3, r3, #32
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	bf0c      	ite	eq
 8013f30:	2301      	moveq	r3, #1
 8013f32:	2300      	movne	r3, #0
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013f38:	69fb      	ldr	r3, [r7, #28]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d00e      	beq.n	8013f5c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013f3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f42:	4413      	add	r3, r2
 8013f44:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013f46:	8b7a      	ldrh	r2, [r7, #26]
 8013f48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	f0c0 80a0 	bcc.w	8014090 <ip4_reass+0x2ac>
 8013f50:	8b7b      	ldrh	r3, [r7, #26]
 8013f52:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013f56:	4293      	cmp	r3, r2
 8013f58:	f200 809a 	bhi.w	8014090 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013f5c:	69fa      	ldr	r2, [r7, #28]
 8013f5e:	6879      	ldr	r1, [r7, #4]
 8013f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f62:	f7ff fdd5 	bl	8013b10 <ip_reass_chain_frag_into_datagram_and_validate>
 8013f66:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f6e:	f000 809b 	beq.w	80140a8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013f72:	4b48      	ldr	r3, [pc, #288]	; (8014094 <ip4_reass+0x2b0>)
 8013f74:	881a      	ldrh	r2, [r3, #0]
 8013f76:	8c3b      	ldrh	r3, [r7, #32]
 8013f78:	4413      	add	r3, r2
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	4b45      	ldr	r3, [pc, #276]	; (8014094 <ip4_reass+0x2b0>)
 8013f7e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013f80:	69fb      	ldr	r3, [r7, #28]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d00d      	beq.n	8013fa2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013f86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f8a:	4413      	add	r3, r2
 8013f8c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f90:	8a7a      	ldrh	r2, [r7, #18]
 8013f92:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f96:	7f9b      	ldrb	r3, [r3, #30]
 8013f98:	f043 0301 	orr.w	r3, r3, #1
 8013f9c:	b2da      	uxtb	r2, r3
 8013f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	2b01      	cmp	r3, #1
 8013fa6:	d171      	bne.n	801408c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013faa:	8b9b      	ldrh	r3, [r3, #28]
 8013fac:	3314      	adds	r3, #20
 8013fae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb2:	685b      	ldr	r3, [r3, #4]
 8013fb4:	685b      	ldr	r3, [r3, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc4:	3308      	adds	r3, #8
 8013fc6:	2214      	movs	r2, #20
 8013fc8:	4619      	mov	r1, r3
 8013fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fcc:	f000 fd39 	bl	8014a42 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013fd0:	8a3b      	ldrh	r3, [r7, #16]
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7f6 fd34 	bl	800aa40 <lwip_htons>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	461a      	mov	r2, r3
 8013fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fde:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	719a      	strb	r2, [r3, #6]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fec:	2200      	movs	r2, #0
 8013fee:	729a      	strb	r2, [r3, #10]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff6:	685b      	ldr	r3, [r3, #4]
 8013ff8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013ffa:	e00d      	b.n	8014018 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014002:	2114      	movs	r1, #20
 8014004:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014006:	f7f8 f887 	bl	800c118 <pbuf_remove_header>
      pbuf_cat(p, r);
 801400a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f7f8 f9d7 	bl	800c3c0 <pbuf_cat>
      r = iprh->next_pbuf;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801401a:	2b00      	cmp	r3, #0
 801401c:	d1ee      	bne.n	8013ffc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801401e:	4b1e      	ldr	r3, [pc, #120]	; (8014098 <ip4_reass+0x2b4>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014024:	429a      	cmp	r2, r3
 8014026:	d102      	bne.n	801402e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014028:	2300      	movs	r3, #0
 801402a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801402c:	e010      	b.n	8014050 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801402e:	4b1a      	ldr	r3, [pc, #104]	; (8014098 <ip4_reass+0x2b4>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014034:	e007      	b.n	8014046 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801403c:	429a      	cmp	r2, r3
 801403e:	d006      	beq.n	801404e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014048:	2b00      	cmp	r3, #0
 801404a:	d1f4      	bne.n	8014036 <ip4_reass+0x252>
 801404c:	e000      	b.n	8014050 <ip4_reass+0x26c>
          break;
 801404e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014054:	f7ff fd2e 	bl	8013ab4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7f8 f971 	bl	800c340 <pbuf_clen>
 801405e:	4603      	mov	r3, r0
 8014060:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014062:	4b0c      	ldr	r3, [pc, #48]	; (8014094 <ip4_reass+0x2b0>)
 8014064:	881b      	ldrh	r3, [r3, #0]
 8014066:	8c3a      	ldrh	r2, [r7, #32]
 8014068:	429a      	cmp	r2, r3
 801406a:	d906      	bls.n	801407a <ip4_reass+0x296>
 801406c:	4b0b      	ldr	r3, [pc, #44]	; (801409c <ip4_reass+0x2b8>)
 801406e:	f240 229b 	movw	r2, #667	; 0x29b
 8014072:	490b      	ldr	r1, [pc, #44]	; (80140a0 <ip4_reass+0x2bc>)
 8014074:	480b      	ldr	r0, [pc, #44]	; (80140a4 <ip4_reass+0x2c0>)
 8014076:	f000 fd8f 	bl	8014b98 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801407a:	4b06      	ldr	r3, [pc, #24]	; (8014094 <ip4_reass+0x2b0>)
 801407c:	881a      	ldrh	r2, [r3, #0]
 801407e:	8c3b      	ldrh	r3, [r7, #32]
 8014080:	1ad3      	subs	r3, r2, r3
 8014082:	b29a      	uxth	r2, r3
 8014084:	4b03      	ldr	r3, [pc, #12]	; (8014094 <ip4_reass+0x2b0>)
 8014086:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	e038      	b.n	80140fe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801408c:	2300      	movs	r3, #0
 801408e:	e036      	b.n	80140fe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014090:	bf00      	nop
 8014092:	e00a      	b.n	80140aa <ip4_reass+0x2c6>
 8014094:	2004f2d4 	.word	0x2004f2d4
 8014098:	2004f2d0 	.word	0x2004f2d0
 801409c:	08018270 	.word	0x08018270
 80140a0:	080183e0 	.word	0x080183e0
 80140a4:	080182b8 	.word	0x080182b8
    goto nullreturn_ipr;
 80140a8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80140aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d106      	bne.n	80140be <ip4_reass+0x2da>
 80140b0:	4b15      	ldr	r3, [pc, #84]	; (8014108 <ip4_reass+0x324>)
 80140b2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80140b6:	4915      	ldr	r1, [pc, #84]	; (801410c <ip4_reass+0x328>)
 80140b8:	4815      	ldr	r0, [pc, #84]	; (8014110 <ip4_reass+0x32c>)
 80140ba:	f000 fd6d 	bl	8014b98 <iprintf>
  if (ipr->p == NULL) {
 80140be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c0:	685b      	ldr	r3, [r3, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d116      	bne.n	80140f4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80140c6:	4b13      	ldr	r3, [pc, #76]	; (8014114 <ip4_reass+0x330>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d006      	beq.n	80140de <ip4_reass+0x2fa>
 80140d0:	4b0d      	ldr	r3, [pc, #52]	; (8014108 <ip4_reass+0x324>)
 80140d2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80140d6:	4910      	ldr	r1, [pc, #64]	; (8014118 <ip4_reass+0x334>)
 80140d8:	480d      	ldr	r0, [pc, #52]	; (8014110 <ip4_reass+0x32c>)
 80140da:	f000 fd5d 	bl	8014b98 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80140de:	2100      	movs	r1, #0
 80140e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140e2:	f7ff fce7 	bl	8013ab4 <ip_reass_dequeue_datagram>
 80140e6:	e006      	b.n	80140f6 <ip4_reass+0x312>
    goto nullreturn;
 80140e8:	bf00      	nop
 80140ea:	e004      	b.n	80140f6 <ip4_reass+0x312>
    goto nullreturn;
 80140ec:	bf00      	nop
 80140ee:	e002      	b.n	80140f6 <ip4_reass+0x312>
      goto nullreturn;
 80140f0:	bf00      	nop
 80140f2:	e000      	b.n	80140f6 <ip4_reass+0x312>
  }

nullreturn:
 80140f4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f7f8 f894 	bl	800c224 <pbuf_free>
  return NULL;
 80140fc:	2300      	movs	r3, #0
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3738      	adds	r7, #56	; 0x38
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	08018270 	.word	0x08018270
 801410c:	080183fc 	.word	0x080183fc
 8014110:	080182b8 	.word	0x080182b8
 8014114:	2004f2d0 	.word	0x2004f2d0
 8014118:	08018408 	.word	0x08018408

0801411c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014120:	2005      	movs	r0, #5
 8014122:	f7f7 f965 	bl	800b3f0 <memp_malloc>
 8014126:	4603      	mov	r3, r0
}
 8014128:	4618      	mov	r0, r3
 801412a:	bd80      	pop	{r7, pc}

0801412c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d106      	bne.n	8014148 <ip_frag_free_pbuf_custom_ref+0x1c>
 801413a:	4b07      	ldr	r3, [pc, #28]	; (8014158 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801413c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014140:	4906      	ldr	r1, [pc, #24]	; (801415c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014142:	4807      	ldr	r0, [pc, #28]	; (8014160 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014144:	f000 fd28 	bl	8014b98 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014148:	6879      	ldr	r1, [r7, #4]
 801414a:	2005      	movs	r0, #5
 801414c:	f7f7 f9c6 	bl	800b4dc <memp_free>
}
 8014150:	bf00      	nop
 8014152:	3708      	adds	r7, #8
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}
 8014158:	08018270 	.word	0x08018270
 801415c:	08018428 	.word	0x08018428
 8014160:	080182b8 	.word	0x080182b8

08014164 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b084      	sub	sp, #16
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d106      	bne.n	8014184 <ipfrag_free_pbuf_custom+0x20>
 8014176:	4b11      	ldr	r3, [pc, #68]	; (80141bc <ipfrag_free_pbuf_custom+0x58>)
 8014178:	f240 22ce 	movw	r2, #718	; 0x2ce
 801417c:	4910      	ldr	r1, [pc, #64]	; (80141c0 <ipfrag_free_pbuf_custom+0x5c>)
 801417e:	4811      	ldr	r0, [pc, #68]	; (80141c4 <ipfrag_free_pbuf_custom+0x60>)
 8014180:	f000 fd0a 	bl	8014b98 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014184:	68fa      	ldr	r2, [r7, #12]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	429a      	cmp	r2, r3
 801418a:	d006      	beq.n	801419a <ipfrag_free_pbuf_custom+0x36>
 801418c:	4b0b      	ldr	r3, [pc, #44]	; (80141bc <ipfrag_free_pbuf_custom+0x58>)
 801418e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014192:	490d      	ldr	r1, [pc, #52]	; (80141c8 <ipfrag_free_pbuf_custom+0x64>)
 8014194:	480b      	ldr	r0, [pc, #44]	; (80141c4 <ipfrag_free_pbuf_custom+0x60>)
 8014196:	f000 fcff 	bl	8014b98 <iprintf>
  if (pcr->original != NULL) {
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	695b      	ldr	r3, [r3, #20]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d004      	beq.n	80141ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	695b      	ldr	r3, [r3, #20]
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7f8 f83c 	bl	800c224 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80141ac:	68f8      	ldr	r0, [r7, #12]
 80141ae:	f7ff ffbd 	bl	801412c <ip_frag_free_pbuf_custom_ref>
}
 80141b2:	bf00      	nop
 80141b4:	3710      	adds	r7, #16
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}
 80141ba:	bf00      	nop
 80141bc:	08018270 	.word	0x08018270
 80141c0:	08018434 	.word	0x08018434
 80141c4:	080182b8 	.word	0x080182b8
 80141c8:	08018440 	.word	0x08018440

080141cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b094      	sub	sp, #80	; 0x50
 80141d0:	af02      	add	r7, sp, #8
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80141d8:	2300      	movs	r3, #0
 80141da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80141e2:	3b14      	subs	r3, #20
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	da00      	bge.n	80141ea <ip4_frag+0x1e>
 80141e8:	3307      	adds	r3, #7
 80141ea:	10db      	asrs	r3, r3, #3
 80141ec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80141ee:	2314      	movs	r3, #20
 80141f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80141f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80141fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	f003 030f 	and.w	r3, r3, #15
 8014204:	b2db      	uxtb	r3, r3
 8014206:	009b      	lsls	r3, r3, #2
 8014208:	b2db      	uxtb	r3, r3
 801420a:	2b14      	cmp	r3, #20
 801420c:	d002      	beq.n	8014214 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801420e:	f06f 0305 	mvn.w	r3, #5
 8014212:	e110      	b.n	8014436 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	895b      	ldrh	r3, [r3, #10]
 8014218:	2b13      	cmp	r3, #19
 801421a:	d809      	bhi.n	8014230 <ip4_frag+0x64>
 801421c:	4b88      	ldr	r3, [pc, #544]	; (8014440 <ip4_frag+0x274>)
 801421e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014222:	4988      	ldr	r1, [pc, #544]	; (8014444 <ip4_frag+0x278>)
 8014224:	4888      	ldr	r0, [pc, #544]	; (8014448 <ip4_frag+0x27c>)
 8014226:	f000 fcb7 	bl	8014b98 <iprintf>
 801422a:	f06f 0305 	mvn.w	r3, #5
 801422e:	e102      	b.n	8014436 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014232:	88db      	ldrh	r3, [r3, #6]
 8014234:	b29b      	uxth	r3, r3
 8014236:	4618      	mov	r0, r3
 8014238:	f7f6 fc02 	bl	800aa40 <lwip_htons>
 801423c:	4603      	mov	r3, r0
 801423e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014240:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014242:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014246:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801424a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801424c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014250:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	891b      	ldrh	r3, [r3, #8]
 8014256:	3b14      	subs	r3, #20
 8014258:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801425c:	e0e1      	b.n	8014422 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801425e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014260:	00db      	lsls	r3, r3, #3
 8014262:	b29b      	uxth	r3, r3
 8014264:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014268:	4293      	cmp	r3, r2
 801426a:	bf28      	it	cs
 801426c:	4613      	movcs	r3, r2
 801426e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014270:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014274:	2114      	movs	r1, #20
 8014276:	200e      	movs	r0, #14
 8014278:	f7f7 fcf0 	bl	800bc5c <pbuf_alloc>
 801427c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014280:	2b00      	cmp	r3, #0
 8014282:	f000 80d5 	beq.w	8014430 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014288:	895b      	ldrh	r3, [r3, #10]
 801428a:	2b13      	cmp	r3, #19
 801428c:	d806      	bhi.n	801429c <ip4_frag+0xd0>
 801428e:	4b6c      	ldr	r3, [pc, #432]	; (8014440 <ip4_frag+0x274>)
 8014290:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014294:	496d      	ldr	r1, [pc, #436]	; (801444c <ip4_frag+0x280>)
 8014296:	486c      	ldr	r0, [pc, #432]	; (8014448 <ip4_frag+0x27c>)
 8014298:	f000 fc7e 	bl	8014b98 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429e:	685b      	ldr	r3, [r3, #4]
 80142a0:	2214      	movs	r2, #20
 80142a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80142a4:	4618      	mov	r0, r3
 80142a6:	f000 fbcc 	bl	8014a42 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80142aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80142b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80142b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80142b6:	e064      	b.n	8014382 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	895a      	ldrh	r2, [r3, #10]
 80142bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80142be:	1ad3      	subs	r3, r2, r3
 80142c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	895b      	ldrh	r3, [r3, #10]
 80142c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d906      	bls.n	80142da <ip4_frag+0x10e>
 80142cc:	4b5c      	ldr	r3, [pc, #368]	; (8014440 <ip4_frag+0x274>)
 80142ce:	f240 322d 	movw	r2, #813	; 0x32d
 80142d2:	495f      	ldr	r1, [pc, #380]	; (8014450 <ip4_frag+0x284>)
 80142d4:	485c      	ldr	r0, [pc, #368]	; (8014448 <ip4_frag+0x27c>)
 80142d6:	f000 fc5f 	bl	8014b98 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80142da:	8bfa      	ldrh	r2, [r7, #30]
 80142dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80142e0:	4293      	cmp	r3, r2
 80142e2:	bf28      	it	cs
 80142e4:	4613      	movcs	r3, r2
 80142e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80142ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d105      	bne.n	80142fe <ip4_frag+0x132>
        poff = 0;
 80142f2:	2300      	movs	r3, #0
 80142f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	60fb      	str	r3, [r7, #12]
        continue;
 80142fc:	e041      	b.n	8014382 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80142fe:	f7ff ff0d 	bl	801411c <ip_frag_alloc_pbuf_custom_ref>
 8014302:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014304:	69bb      	ldr	r3, [r7, #24]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d103      	bne.n	8014312 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801430a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801430c:	f7f7 ff8a 	bl	800c224 <pbuf_free>
        goto memerr;
 8014310:	e08f      	b.n	8014432 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014312:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014318:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801431a:	4413      	add	r3, r2
 801431c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014320:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014324:	9201      	str	r2, [sp, #4]
 8014326:	9300      	str	r3, [sp, #0]
 8014328:	4603      	mov	r3, r0
 801432a:	2241      	movs	r2, #65	; 0x41
 801432c:	2000      	movs	r0, #0
 801432e:	f7f7 fdbf 	bl	800beb0 <pbuf_alloced_custom>
 8014332:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d106      	bne.n	8014348 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801433a:	69b8      	ldr	r0, [r7, #24]
 801433c:	f7ff fef6 	bl	801412c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014342:	f7f7 ff6f 	bl	800c224 <pbuf_free>
        goto memerr;
 8014346:	e074      	b.n	8014432 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014348:	68f8      	ldr	r0, [r7, #12]
 801434a:	f7f8 f811 	bl	800c370 <pbuf_ref>
      pcr->original = p;
 801434e:	69bb      	ldr	r3, [r7, #24]
 8014350:	68fa      	ldr	r2, [r7, #12]
 8014352:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014354:	69bb      	ldr	r3, [r7, #24]
 8014356:	4a3f      	ldr	r2, [pc, #252]	; (8014454 <ip4_frag+0x288>)
 8014358:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801435a:	6979      	ldr	r1, [r7, #20]
 801435c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801435e:	f7f8 f82f 	bl	800c3c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014362:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014370:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014374:	2b00      	cmp	r3, #0
 8014376:	d004      	beq.n	8014382 <ip4_frag+0x1b6>
        poff = 0;
 8014378:	2300      	movs	r3, #0
 801437a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014382:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014386:	2b00      	cmp	r3, #0
 8014388:	d196      	bne.n	80142b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801438a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801438c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014390:	4413      	add	r3, r2
 8014392:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014398:	f1a3 0213 	sub.w	r2, r3, #19
 801439c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143a0:	429a      	cmp	r2, r3
 80143a2:	bfcc      	ite	gt
 80143a4:	2301      	movgt	r3, #1
 80143a6:	2300      	movle	r3, #0
 80143a8:	b2db      	uxtb	r3, r3
 80143aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80143ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80143b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80143b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80143b6:	6a3b      	ldr	r3, [r7, #32]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d002      	beq.n	80143c2 <ip4_frag+0x1f6>
 80143bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d003      	beq.n	80143ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80143c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80143c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80143c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80143ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7f6 fb37 	bl	800aa40 <lwip_htons>
 80143d2:	4603      	mov	r3, r0
 80143d4:	461a      	mov	r2, r3
 80143d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80143da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80143dc:	3314      	adds	r3, #20
 80143de:	b29b      	uxth	r3, r3
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7f6 fb2d 	bl	800aa40 <lwip_htons>
 80143e6:	4603      	mov	r3, r0
 80143e8:	461a      	mov	r2, r3
 80143ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80143ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f0:	2200      	movs	r2, #0
 80143f2:	729a      	strb	r2, [r3, #10]
 80143f4:	2200      	movs	r2, #0
 80143f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	695b      	ldr	r3, [r3, #20]
 80143fc:	687a      	ldr	r2, [r7, #4]
 80143fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014400:	68b8      	ldr	r0, [r7, #8]
 8014402:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014406:	f7f7 ff0d 	bl	800c224 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801440a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801440e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014410:	1ad3      	subs	r3, r2, r3
 8014412:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014416:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801441a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801441c:	4413      	add	r3, r2
 801441e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014426:	2b00      	cmp	r3, #0
 8014428:	f47f af19 	bne.w	801425e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801442c:	2300      	movs	r3, #0
 801442e:	e002      	b.n	8014436 <ip4_frag+0x26a>
      goto memerr;
 8014430:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014436:	4618      	mov	r0, r3
 8014438:	3748      	adds	r7, #72	; 0x48
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	08018270 	.word	0x08018270
 8014444:	0801844c 	.word	0x0801844c
 8014448:	080182b8 	.word	0x080182b8
 801444c:	08018468 	.word	0x08018468
 8014450:	08018488 	.word	0x08018488
 8014454:	08014165 	.word	0x08014165

08014458 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b086      	sub	sp, #24
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
 8014460:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014462:	230e      	movs	r3, #14
 8014464:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	895b      	ldrh	r3, [r3, #10]
 801446a:	2b0e      	cmp	r3, #14
 801446c:	d96e      	bls.n	801454c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	7bdb      	ldrb	r3, [r3, #15]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d106      	bne.n	8014484 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801447c:	3301      	adds	r3, #1
 801447e:	b2da      	uxtb	r2, r3
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	685b      	ldr	r3, [r3, #4]
 8014488:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	7b1a      	ldrb	r2, [r3, #12]
 801448e:	7b5b      	ldrb	r3, [r3, #13]
 8014490:	021b      	lsls	r3, r3, #8
 8014492:	4313      	orrs	r3, r2
 8014494:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	f003 0301 	and.w	r3, r3, #1
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d023      	beq.n	80144ea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	2b01      	cmp	r3, #1
 80144a8:	d10f      	bne.n	80144ca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	785b      	ldrb	r3, [r3, #1]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d11b      	bne.n	80144ea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80144b6:	2b5e      	cmp	r3, #94	; 0x5e
 80144b8:	d117      	bne.n	80144ea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	7b5b      	ldrb	r3, [r3, #13]
 80144be:	f043 0310 	orr.w	r3, r3, #16
 80144c2:	b2da      	uxtb	r2, r3
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	735a      	strb	r2, [r3, #13]
 80144c8:	e00f      	b.n	80144ea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	2206      	movs	r2, #6
 80144ce:	4928      	ldr	r1, [pc, #160]	; (8014570 <ethernet_input+0x118>)
 80144d0:	4618      	mov	r0, r3
 80144d2:	f000 faa6 	bl	8014a22 <memcmp>
 80144d6:	4603      	mov	r3, r0
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d106      	bne.n	80144ea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	7b5b      	ldrb	r3, [r3, #13]
 80144e0:	f043 0308 	orr.w	r3, r3, #8
 80144e4:	b2da      	uxtb	r2, r3
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80144ea:	89fb      	ldrh	r3, [r7, #14]
 80144ec:	2b08      	cmp	r3, #8
 80144ee:	d003      	beq.n	80144f8 <ethernet_input+0xa0>
 80144f0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80144f4:	d014      	beq.n	8014520 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80144f6:	e032      	b.n	801455e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80144fe:	f003 0308 	and.w	r3, r3, #8
 8014502:	2b00      	cmp	r3, #0
 8014504:	d024      	beq.n	8014550 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014506:	8afb      	ldrh	r3, [r7, #22]
 8014508:	4619      	mov	r1, r3
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f7f7 fe04 	bl	800c118 <pbuf_remove_header>
 8014510:	4603      	mov	r3, r0
 8014512:	2b00      	cmp	r3, #0
 8014514:	d11e      	bne.n	8014554 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014516:	6839      	ldr	r1, [r7, #0]
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f7fe ff21 	bl	8013360 <ip4_input>
      break;
 801451e:	e013      	b.n	8014548 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014526:	f003 0308 	and.w	r3, r3, #8
 801452a:	2b00      	cmp	r3, #0
 801452c:	d014      	beq.n	8014558 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801452e:	8afb      	ldrh	r3, [r7, #22]
 8014530:	4619      	mov	r1, r3
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7f7 fdf0 	bl	800c118 <pbuf_remove_header>
 8014538:	4603      	mov	r3, r0
 801453a:	2b00      	cmp	r3, #0
 801453c:	d10e      	bne.n	801455c <ethernet_input+0x104>
        etharp_input(p, netif);
 801453e:	6839      	ldr	r1, [r7, #0]
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f7fe f8c1 	bl	80126c8 <etharp_input>
      break;
 8014546:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014548:	2300      	movs	r3, #0
 801454a:	e00c      	b.n	8014566 <ethernet_input+0x10e>
    goto free_and_return;
 801454c:	bf00      	nop
 801454e:	e006      	b.n	801455e <ethernet_input+0x106>
        goto free_and_return;
 8014550:	bf00      	nop
 8014552:	e004      	b.n	801455e <ethernet_input+0x106>
        goto free_and_return;
 8014554:	bf00      	nop
 8014556:	e002      	b.n	801455e <ethernet_input+0x106>
        goto free_and_return;
 8014558:	bf00      	nop
 801455a:	e000      	b.n	801455e <ethernet_input+0x106>
        goto free_and_return;
 801455c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f7f7 fe60 	bl	800c224 <pbuf_free>
  return ERR_OK;
 8014564:	2300      	movs	r3, #0
}
 8014566:	4618      	mov	r0, r3
 8014568:	3718      	adds	r7, #24
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	08018688 	.word	0x08018688

08014574 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014574:	b580      	push	{r7, lr}
 8014576:	b086      	sub	sp, #24
 8014578:	af00      	add	r7, sp, #0
 801457a:	60f8      	str	r0, [r7, #12]
 801457c:	60b9      	str	r1, [r7, #8]
 801457e:	607a      	str	r2, [r7, #4]
 8014580:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014582:	8c3b      	ldrh	r3, [r7, #32]
 8014584:	4618      	mov	r0, r3
 8014586:	f7f6 fa5b 	bl	800aa40 <lwip_htons>
 801458a:	4603      	mov	r3, r0
 801458c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801458e:	210e      	movs	r1, #14
 8014590:	68b8      	ldr	r0, [r7, #8]
 8014592:	f7f7 fdb1 	bl	800c0f8 <pbuf_add_header>
 8014596:	4603      	mov	r3, r0
 8014598:	2b00      	cmp	r3, #0
 801459a:	d125      	bne.n	80145e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	8afa      	ldrh	r2, [r7, #22]
 80145a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	2206      	movs	r2, #6
 80145ac:	6839      	ldr	r1, [r7, #0]
 80145ae:	4618      	mov	r0, r3
 80145b0:	f000 fa47 	bl	8014a42 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	3306      	adds	r3, #6
 80145b8:	2206      	movs	r2, #6
 80145ba:	6879      	ldr	r1, [r7, #4]
 80145bc:	4618      	mov	r0, r3
 80145be:	f000 fa40 	bl	8014a42 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80145c8:	2b06      	cmp	r3, #6
 80145ca:	d006      	beq.n	80145da <ethernet_output+0x66>
 80145cc:	4b0a      	ldr	r3, [pc, #40]	; (80145f8 <ethernet_output+0x84>)
 80145ce:	f44f 7299 	mov.w	r2, #306	; 0x132
 80145d2:	490a      	ldr	r1, [pc, #40]	; (80145fc <ethernet_output+0x88>)
 80145d4:	480a      	ldr	r0, [pc, #40]	; (8014600 <ethernet_output+0x8c>)
 80145d6:	f000 fadf 	bl	8014b98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	699b      	ldr	r3, [r3, #24]
 80145de:	68b9      	ldr	r1, [r7, #8]
 80145e0:	68f8      	ldr	r0, [r7, #12]
 80145e2:	4798      	blx	r3
 80145e4:	4603      	mov	r3, r0
 80145e6:	e002      	b.n	80145ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80145e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80145ea:	f06f 0301 	mvn.w	r3, #1
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3718      	adds	r7, #24
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}
 80145f6:	bf00      	nop
 80145f8:	08018498 	.word	0x08018498
 80145fc:	080184d0 	.word	0x080184d0
 8014600:	08018504 	.word	0x08018504

08014604 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	2200      	movs	r2, #0
 8014612:	2104      	movs	r1, #4
 8014614:	4618      	mov	r0, r3
 8014616:	f7f2 fd25 	bl	8007064 <osMessageQueueNew>
 801461a:	4602      	mov	r2, r0
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d102      	bne.n	801462e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8014628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801462c:	e000      	b.n	8014630 <sys_mbox_new+0x2c>

  return ERR_OK;
 801462e:	2300      	movs	r3, #0
}
 8014630:	4618      	mov	r0, r3
 8014632:	3708      	adds	r7, #8
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}

08014638 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b084      	sub	sp, #16
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6818      	ldr	r0, [r3, #0]
 8014646:	4639      	mov	r1, r7
 8014648:	2300      	movs	r3, #0
 801464a:	2200      	movs	r2, #0
 801464c:	f7f2 fd90 	bl	8007170 <osMessageQueuePut>
 8014650:	4603      	mov	r3, r0
 8014652:	2b00      	cmp	r3, #0
 8014654:	d102      	bne.n	801465c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8014656:	2300      	movs	r3, #0
 8014658:	73fb      	strb	r3, [r7, #15]
 801465a:	e001      	b.n	8014660 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801465c:	23ff      	movs	r3, #255	; 0xff
 801465e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014664:	4618      	mov	r0, r3
 8014666:	3710      	adds	r7, #16
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b086      	sub	sp, #24
 8014670:	af00      	add	r7, sp, #0
 8014672:	60f8      	str	r0, [r7, #12]
 8014674:	60b9      	str	r1, [r7, #8]
 8014676:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8014678:	f7f2 f956 	bl	8006928 <osKernelGetTickCount>
 801467c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d013      	beq.n	80146ac <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	6818      	ldr	r0, [r3, #0]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2200      	movs	r2, #0
 801468c:	68b9      	ldr	r1, [r7, #8]
 801468e:	f7f2 fde3 	bl	8007258 <osMessageQueueGet>
 8014692:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014694:	693b      	ldr	r3, [r7, #16]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d105      	bne.n	80146a6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801469a:	f7f2 f945 	bl	8006928 <osKernelGetTickCount>
 801469e:	4602      	mov	r2, r0
 80146a0:	697b      	ldr	r3, [r7, #20]
 80146a2:	1ad3      	subs	r3, r2, r3
 80146a4:	e00f      	b.n	80146c6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80146a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146aa:	e00c      	b.n	80146c6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	6818      	ldr	r0, [r3, #0]
 80146b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146b4:	2200      	movs	r2, #0
 80146b6:	68b9      	ldr	r1, [r7, #8]
 80146b8:	f7f2 fdce 	bl	8007258 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80146bc:	f7f2 f934 	bl	8006928 <osKernelGetTickCount>
 80146c0:	4602      	mov	r2, r0
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3718      	adds	r7, #24
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}

080146ce <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80146ce:	b480      	push	{r7}
 80146d0:	b083      	sub	sp, #12
 80146d2:	af00      	add	r7, sp, #0
 80146d4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d101      	bne.n	80146e2 <sys_mbox_valid+0x14>
    return 0;
 80146de:	2300      	movs	r3, #0
 80146e0:	e000      	b.n	80146e4 <sys_mbox_valid+0x16>
  else
    return 1;
 80146e2:	2301      	movs	r3, #1
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	370c      	adds	r7, #12
 80146e8:	46bd      	mov	sp, r7
 80146ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ee:	4770      	bx	lr

080146f0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80146f4:	2000      	movs	r0, #0
 80146f6:	f7f2 fa13 	bl	8006b20 <osMutexNew>
 80146fa:	4603      	mov	r3, r0
 80146fc:	4a01      	ldr	r2, [pc, #4]	; (8014704 <sys_init+0x14>)
 80146fe:	6013      	str	r3, [r2, #0]
#endif
}
 8014700:	bf00      	nop
 8014702:	bd80      	pop	{r7, pc}
 8014704:	2004f2d8 	.word	0x2004f2d8

08014708 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8014710:	2000      	movs	r0, #0
 8014712:	f7f2 fa05 	bl	8006b20 <osMutexNew>
 8014716:	4602      	mov	r2, r0
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d102      	bne.n	801472a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014728:	e000      	b.n	801472c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801472a:	2300      	movs	r3, #0
}
 801472c:	4618      	mov	r0, r3
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014744:	4618      	mov	r0, r3
 8014746:	f7f2 fa85 	bl	8006c54 <osMutexAcquire>
#endif
}
 801474a:	bf00      	nop
 801474c:	3708      	adds	r7, #8
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}

08014752 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014752:	b580      	push	{r7, lr}
 8014754:	b082      	sub	sp, #8
 8014756:	af00      	add	r7, sp, #0
 8014758:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	4618      	mov	r0, r3
 8014760:	f7f2 fad6 	bl	8006d10 <osMutexRelease>
}
 8014764:	bf00      	nop
 8014766:	3708      	adds	r7, #8
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b08e      	sub	sp, #56	; 0x38
 8014770:	af00      	add	r7, sp, #0
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	607a      	str	r2, [r7, #4]
 8014778:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801477a:	f107 0314 	add.w	r3, r7, #20
 801477e:	2224      	movs	r2, #36	; 0x24
 8014780:	2100      	movs	r1, #0
 8014782:	4618      	mov	r0, r3
 8014784:	f000 f96b 	bl	8014a5e <memset>
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	617b      	str	r3, [r7, #20]
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014792:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014794:	f107 0314 	add.w	r3, r7, #20
 8014798:	461a      	mov	r2, r3
 801479a:	6879      	ldr	r1, [r7, #4]
 801479c:	68b8      	ldr	r0, [r7, #8]
 801479e:	f7f2 f8eb 	bl	8006978 <osThreadNew>
 80147a2:	4603      	mov	r3, r0
#endif
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3738      	adds	r7, #56	; 0x38
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}

080147ac <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80147b0:	4b04      	ldr	r3, [pc, #16]	; (80147c4 <sys_arch_protect+0x18>)
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f2 fa4b 	bl	8006c54 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80147be:	2301      	movs	r3, #1
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	2004f2d8 	.word	0x2004f2d8

080147c8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80147d0:	4b04      	ldr	r3, [pc, #16]	; (80147e4 <sys_arch_unprotect+0x1c>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7f2 fa9b 	bl	8006d10 <osMutexRelease>
}
 80147da:	bf00      	nop
 80147dc:	3708      	adds	r7, #8
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	bf00      	nop
 80147e4:	2004f2d8 	.word	0x2004f2d8

080147e8 <std>:
 80147e8:	2300      	movs	r3, #0
 80147ea:	b510      	push	{r4, lr}
 80147ec:	4604      	mov	r4, r0
 80147ee:	e9c0 3300 	strd	r3, r3, [r0]
 80147f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147f6:	6083      	str	r3, [r0, #8]
 80147f8:	8181      	strh	r1, [r0, #12]
 80147fa:	6643      	str	r3, [r0, #100]	; 0x64
 80147fc:	81c2      	strh	r2, [r0, #14]
 80147fe:	6183      	str	r3, [r0, #24]
 8014800:	4619      	mov	r1, r3
 8014802:	2208      	movs	r2, #8
 8014804:	305c      	adds	r0, #92	; 0x5c
 8014806:	f000 f92a 	bl	8014a5e <memset>
 801480a:	4b05      	ldr	r3, [pc, #20]	; (8014820 <std+0x38>)
 801480c:	6263      	str	r3, [r4, #36]	; 0x24
 801480e:	4b05      	ldr	r3, [pc, #20]	; (8014824 <std+0x3c>)
 8014810:	62a3      	str	r3, [r4, #40]	; 0x28
 8014812:	4b05      	ldr	r3, [pc, #20]	; (8014828 <std+0x40>)
 8014814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014816:	4b05      	ldr	r3, [pc, #20]	; (801482c <std+0x44>)
 8014818:	6224      	str	r4, [r4, #32]
 801481a:	6323      	str	r3, [r4, #48]	; 0x30
 801481c:	bd10      	pop	{r4, pc}
 801481e:	bf00      	nop
 8014820:	08014d39 	.word	0x08014d39
 8014824:	08014d5b 	.word	0x08014d5b
 8014828:	08014d93 	.word	0x08014d93
 801482c:	08014db7 	.word	0x08014db7

08014830 <_cleanup_r>:
 8014830:	4901      	ldr	r1, [pc, #4]	; (8014838 <_cleanup_r+0x8>)
 8014832:	f000 b8af 	b.w	8014994 <_fwalk_reent>
 8014836:	bf00      	nop
 8014838:	08014f4d 	.word	0x08014f4d

0801483c <__sfmoreglue>:
 801483c:	b570      	push	{r4, r5, r6, lr}
 801483e:	2268      	movs	r2, #104	; 0x68
 8014840:	1e4d      	subs	r5, r1, #1
 8014842:	4355      	muls	r5, r2
 8014844:	460e      	mov	r6, r1
 8014846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801484a:	f000 f931 	bl	8014ab0 <_malloc_r>
 801484e:	4604      	mov	r4, r0
 8014850:	b140      	cbz	r0, 8014864 <__sfmoreglue+0x28>
 8014852:	2100      	movs	r1, #0
 8014854:	e9c0 1600 	strd	r1, r6, [r0]
 8014858:	300c      	adds	r0, #12
 801485a:	60a0      	str	r0, [r4, #8]
 801485c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014860:	f000 f8fd 	bl	8014a5e <memset>
 8014864:	4620      	mov	r0, r4
 8014866:	bd70      	pop	{r4, r5, r6, pc}

08014868 <__sfp_lock_acquire>:
 8014868:	4801      	ldr	r0, [pc, #4]	; (8014870 <__sfp_lock_acquire+0x8>)
 801486a:	f000 b8d8 	b.w	8014a1e <__retarget_lock_acquire_recursive>
 801486e:	bf00      	nop
 8014870:	2004f2dd 	.word	0x2004f2dd

08014874 <__sfp_lock_release>:
 8014874:	4801      	ldr	r0, [pc, #4]	; (801487c <__sfp_lock_release+0x8>)
 8014876:	f000 b8d3 	b.w	8014a20 <__retarget_lock_release_recursive>
 801487a:	bf00      	nop
 801487c:	2004f2dd 	.word	0x2004f2dd

08014880 <__sinit_lock_acquire>:
 8014880:	4801      	ldr	r0, [pc, #4]	; (8014888 <__sinit_lock_acquire+0x8>)
 8014882:	f000 b8cc 	b.w	8014a1e <__retarget_lock_acquire_recursive>
 8014886:	bf00      	nop
 8014888:	2004f2de 	.word	0x2004f2de

0801488c <__sinit_lock_release>:
 801488c:	4801      	ldr	r0, [pc, #4]	; (8014894 <__sinit_lock_release+0x8>)
 801488e:	f000 b8c7 	b.w	8014a20 <__retarget_lock_release_recursive>
 8014892:	bf00      	nop
 8014894:	2004f2de 	.word	0x2004f2de

08014898 <__sinit>:
 8014898:	b510      	push	{r4, lr}
 801489a:	4604      	mov	r4, r0
 801489c:	f7ff fff0 	bl	8014880 <__sinit_lock_acquire>
 80148a0:	69a3      	ldr	r3, [r4, #24]
 80148a2:	b11b      	cbz	r3, 80148ac <__sinit+0x14>
 80148a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148a8:	f7ff bff0 	b.w	801488c <__sinit_lock_release>
 80148ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80148b0:	6523      	str	r3, [r4, #80]	; 0x50
 80148b2:	4b13      	ldr	r3, [pc, #76]	; (8014900 <__sinit+0x68>)
 80148b4:	4a13      	ldr	r2, [pc, #76]	; (8014904 <__sinit+0x6c>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80148ba:	42a3      	cmp	r3, r4
 80148bc:	bf04      	itt	eq
 80148be:	2301      	moveq	r3, #1
 80148c0:	61a3      	streq	r3, [r4, #24]
 80148c2:	4620      	mov	r0, r4
 80148c4:	f000 f820 	bl	8014908 <__sfp>
 80148c8:	6060      	str	r0, [r4, #4]
 80148ca:	4620      	mov	r0, r4
 80148cc:	f000 f81c 	bl	8014908 <__sfp>
 80148d0:	60a0      	str	r0, [r4, #8]
 80148d2:	4620      	mov	r0, r4
 80148d4:	f000 f818 	bl	8014908 <__sfp>
 80148d8:	2200      	movs	r2, #0
 80148da:	60e0      	str	r0, [r4, #12]
 80148dc:	2104      	movs	r1, #4
 80148de:	6860      	ldr	r0, [r4, #4]
 80148e0:	f7ff ff82 	bl	80147e8 <std>
 80148e4:	68a0      	ldr	r0, [r4, #8]
 80148e6:	2201      	movs	r2, #1
 80148e8:	2109      	movs	r1, #9
 80148ea:	f7ff ff7d 	bl	80147e8 <std>
 80148ee:	68e0      	ldr	r0, [r4, #12]
 80148f0:	2202      	movs	r2, #2
 80148f2:	2112      	movs	r1, #18
 80148f4:	f7ff ff78 	bl	80147e8 <std>
 80148f8:	2301      	movs	r3, #1
 80148fa:	61a3      	str	r3, [r4, #24]
 80148fc:	e7d2      	b.n	80148a4 <__sinit+0xc>
 80148fe:	bf00      	nop
 8014900:	080186f8 	.word	0x080186f8
 8014904:	08014831 	.word	0x08014831

08014908 <__sfp>:
 8014908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801490a:	4607      	mov	r7, r0
 801490c:	f7ff ffac 	bl	8014868 <__sfp_lock_acquire>
 8014910:	4b1e      	ldr	r3, [pc, #120]	; (801498c <__sfp+0x84>)
 8014912:	681e      	ldr	r6, [r3, #0]
 8014914:	69b3      	ldr	r3, [r6, #24]
 8014916:	b913      	cbnz	r3, 801491e <__sfp+0x16>
 8014918:	4630      	mov	r0, r6
 801491a:	f7ff ffbd 	bl	8014898 <__sinit>
 801491e:	3648      	adds	r6, #72	; 0x48
 8014920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014924:	3b01      	subs	r3, #1
 8014926:	d503      	bpl.n	8014930 <__sfp+0x28>
 8014928:	6833      	ldr	r3, [r6, #0]
 801492a:	b30b      	cbz	r3, 8014970 <__sfp+0x68>
 801492c:	6836      	ldr	r6, [r6, #0]
 801492e:	e7f7      	b.n	8014920 <__sfp+0x18>
 8014930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014934:	b9d5      	cbnz	r5, 801496c <__sfp+0x64>
 8014936:	4b16      	ldr	r3, [pc, #88]	; (8014990 <__sfp+0x88>)
 8014938:	60e3      	str	r3, [r4, #12]
 801493a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801493e:	6665      	str	r5, [r4, #100]	; 0x64
 8014940:	f000 f86c 	bl	8014a1c <__retarget_lock_init_recursive>
 8014944:	f7ff ff96 	bl	8014874 <__sfp_lock_release>
 8014948:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801494c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014950:	6025      	str	r5, [r4, #0]
 8014952:	61a5      	str	r5, [r4, #24]
 8014954:	2208      	movs	r2, #8
 8014956:	4629      	mov	r1, r5
 8014958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801495c:	f000 f87f 	bl	8014a5e <memset>
 8014960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014968:	4620      	mov	r0, r4
 801496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801496c:	3468      	adds	r4, #104	; 0x68
 801496e:	e7d9      	b.n	8014924 <__sfp+0x1c>
 8014970:	2104      	movs	r1, #4
 8014972:	4638      	mov	r0, r7
 8014974:	f7ff ff62 	bl	801483c <__sfmoreglue>
 8014978:	4604      	mov	r4, r0
 801497a:	6030      	str	r0, [r6, #0]
 801497c:	2800      	cmp	r0, #0
 801497e:	d1d5      	bne.n	801492c <__sfp+0x24>
 8014980:	f7ff ff78 	bl	8014874 <__sfp_lock_release>
 8014984:	230c      	movs	r3, #12
 8014986:	603b      	str	r3, [r7, #0]
 8014988:	e7ee      	b.n	8014968 <__sfp+0x60>
 801498a:	bf00      	nop
 801498c:	080186f8 	.word	0x080186f8
 8014990:	ffff0001 	.word	0xffff0001

08014994 <_fwalk_reent>:
 8014994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014998:	4606      	mov	r6, r0
 801499a:	4688      	mov	r8, r1
 801499c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80149a0:	2700      	movs	r7, #0
 80149a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80149a6:	f1b9 0901 	subs.w	r9, r9, #1
 80149aa:	d505      	bpl.n	80149b8 <_fwalk_reent+0x24>
 80149ac:	6824      	ldr	r4, [r4, #0]
 80149ae:	2c00      	cmp	r4, #0
 80149b0:	d1f7      	bne.n	80149a2 <_fwalk_reent+0xe>
 80149b2:	4638      	mov	r0, r7
 80149b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149b8:	89ab      	ldrh	r3, [r5, #12]
 80149ba:	2b01      	cmp	r3, #1
 80149bc:	d907      	bls.n	80149ce <_fwalk_reent+0x3a>
 80149be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149c2:	3301      	adds	r3, #1
 80149c4:	d003      	beq.n	80149ce <_fwalk_reent+0x3a>
 80149c6:	4629      	mov	r1, r5
 80149c8:	4630      	mov	r0, r6
 80149ca:	47c0      	blx	r8
 80149cc:	4307      	orrs	r7, r0
 80149ce:	3568      	adds	r5, #104	; 0x68
 80149d0:	e7e9      	b.n	80149a6 <_fwalk_reent+0x12>
	...

080149d4 <__libc_init_array>:
 80149d4:	b570      	push	{r4, r5, r6, lr}
 80149d6:	4d0d      	ldr	r5, [pc, #52]	; (8014a0c <__libc_init_array+0x38>)
 80149d8:	4c0d      	ldr	r4, [pc, #52]	; (8014a10 <__libc_init_array+0x3c>)
 80149da:	1b64      	subs	r4, r4, r5
 80149dc:	10a4      	asrs	r4, r4, #2
 80149de:	2600      	movs	r6, #0
 80149e0:	42a6      	cmp	r6, r4
 80149e2:	d109      	bne.n	80149f8 <__libc_init_array+0x24>
 80149e4:	4d0b      	ldr	r5, [pc, #44]	; (8014a14 <__libc_init_array+0x40>)
 80149e6:	4c0c      	ldr	r4, [pc, #48]	; (8014a18 <__libc_init_array+0x44>)
 80149e8:	f001 f802 	bl	80159f0 <_init>
 80149ec:	1b64      	subs	r4, r4, r5
 80149ee:	10a4      	asrs	r4, r4, #2
 80149f0:	2600      	movs	r6, #0
 80149f2:	42a6      	cmp	r6, r4
 80149f4:	d105      	bne.n	8014a02 <__libc_init_array+0x2e>
 80149f6:	bd70      	pop	{r4, r5, r6, pc}
 80149f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80149fc:	4798      	blx	r3
 80149fe:	3601      	adds	r6, #1
 8014a00:	e7ee      	b.n	80149e0 <__libc_init_array+0xc>
 8014a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a06:	4798      	blx	r3
 8014a08:	3601      	adds	r6, #1
 8014a0a:	e7f2      	b.n	80149f2 <__libc_init_array+0x1e>
 8014a0c:	080187e8 	.word	0x080187e8
 8014a10:	080187e8 	.word	0x080187e8
 8014a14:	080187e8 	.word	0x080187e8
 8014a18:	080187ec 	.word	0x080187ec

08014a1c <__retarget_lock_init_recursive>:
 8014a1c:	4770      	bx	lr

08014a1e <__retarget_lock_acquire_recursive>:
 8014a1e:	4770      	bx	lr

08014a20 <__retarget_lock_release_recursive>:
 8014a20:	4770      	bx	lr

08014a22 <memcmp>:
 8014a22:	b510      	push	{r4, lr}
 8014a24:	3901      	subs	r1, #1
 8014a26:	4402      	add	r2, r0
 8014a28:	4290      	cmp	r0, r2
 8014a2a:	d101      	bne.n	8014a30 <memcmp+0xe>
 8014a2c:	2000      	movs	r0, #0
 8014a2e:	e005      	b.n	8014a3c <memcmp+0x1a>
 8014a30:	7803      	ldrb	r3, [r0, #0]
 8014a32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014a36:	42a3      	cmp	r3, r4
 8014a38:	d001      	beq.n	8014a3e <memcmp+0x1c>
 8014a3a:	1b18      	subs	r0, r3, r4
 8014a3c:	bd10      	pop	{r4, pc}
 8014a3e:	3001      	adds	r0, #1
 8014a40:	e7f2      	b.n	8014a28 <memcmp+0x6>

08014a42 <memcpy>:
 8014a42:	440a      	add	r2, r1
 8014a44:	4291      	cmp	r1, r2
 8014a46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014a4a:	d100      	bne.n	8014a4e <memcpy+0xc>
 8014a4c:	4770      	bx	lr
 8014a4e:	b510      	push	{r4, lr}
 8014a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a58:	4291      	cmp	r1, r2
 8014a5a:	d1f9      	bne.n	8014a50 <memcpy+0xe>
 8014a5c:	bd10      	pop	{r4, pc}

08014a5e <memset>:
 8014a5e:	4402      	add	r2, r0
 8014a60:	4603      	mov	r3, r0
 8014a62:	4293      	cmp	r3, r2
 8014a64:	d100      	bne.n	8014a68 <memset+0xa>
 8014a66:	4770      	bx	lr
 8014a68:	f803 1b01 	strb.w	r1, [r3], #1
 8014a6c:	e7f9      	b.n	8014a62 <memset+0x4>
	...

08014a70 <sbrk_aligned>:
 8014a70:	b570      	push	{r4, r5, r6, lr}
 8014a72:	4e0e      	ldr	r6, [pc, #56]	; (8014aac <sbrk_aligned+0x3c>)
 8014a74:	460c      	mov	r4, r1
 8014a76:	6831      	ldr	r1, [r6, #0]
 8014a78:	4605      	mov	r5, r0
 8014a7a:	b911      	cbnz	r1, 8014a82 <sbrk_aligned+0x12>
 8014a7c:	f000 f94c 	bl	8014d18 <_sbrk_r>
 8014a80:	6030      	str	r0, [r6, #0]
 8014a82:	4621      	mov	r1, r4
 8014a84:	4628      	mov	r0, r5
 8014a86:	f000 f947 	bl	8014d18 <_sbrk_r>
 8014a8a:	1c43      	adds	r3, r0, #1
 8014a8c:	d00a      	beq.n	8014aa4 <sbrk_aligned+0x34>
 8014a8e:	1cc4      	adds	r4, r0, #3
 8014a90:	f024 0403 	bic.w	r4, r4, #3
 8014a94:	42a0      	cmp	r0, r4
 8014a96:	d007      	beq.n	8014aa8 <sbrk_aligned+0x38>
 8014a98:	1a21      	subs	r1, r4, r0
 8014a9a:	4628      	mov	r0, r5
 8014a9c:	f000 f93c 	bl	8014d18 <_sbrk_r>
 8014aa0:	3001      	adds	r0, #1
 8014aa2:	d101      	bne.n	8014aa8 <sbrk_aligned+0x38>
 8014aa4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014aa8:	4620      	mov	r0, r4
 8014aaa:	bd70      	pop	{r4, r5, r6, pc}
 8014aac:	2004f2e4 	.word	0x2004f2e4

08014ab0 <_malloc_r>:
 8014ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab4:	1ccd      	adds	r5, r1, #3
 8014ab6:	f025 0503 	bic.w	r5, r5, #3
 8014aba:	3508      	adds	r5, #8
 8014abc:	2d0c      	cmp	r5, #12
 8014abe:	bf38      	it	cc
 8014ac0:	250c      	movcc	r5, #12
 8014ac2:	2d00      	cmp	r5, #0
 8014ac4:	4607      	mov	r7, r0
 8014ac6:	db01      	blt.n	8014acc <_malloc_r+0x1c>
 8014ac8:	42a9      	cmp	r1, r5
 8014aca:	d905      	bls.n	8014ad8 <_malloc_r+0x28>
 8014acc:	230c      	movs	r3, #12
 8014ace:	603b      	str	r3, [r7, #0]
 8014ad0:	2600      	movs	r6, #0
 8014ad2:	4630      	mov	r0, r6
 8014ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ad8:	4e2e      	ldr	r6, [pc, #184]	; (8014b94 <_malloc_r+0xe4>)
 8014ada:	f000 fa9f 	bl	801501c <__malloc_lock>
 8014ade:	6833      	ldr	r3, [r6, #0]
 8014ae0:	461c      	mov	r4, r3
 8014ae2:	bb34      	cbnz	r4, 8014b32 <_malloc_r+0x82>
 8014ae4:	4629      	mov	r1, r5
 8014ae6:	4638      	mov	r0, r7
 8014ae8:	f7ff ffc2 	bl	8014a70 <sbrk_aligned>
 8014aec:	1c43      	adds	r3, r0, #1
 8014aee:	4604      	mov	r4, r0
 8014af0:	d14d      	bne.n	8014b8e <_malloc_r+0xde>
 8014af2:	6834      	ldr	r4, [r6, #0]
 8014af4:	4626      	mov	r6, r4
 8014af6:	2e00      	cmp	r6, #0
 8014af8:	d140      	bne.n	8014b7c <_malloc_r+0xcc>
 8014afa:	6823      	ldr	r3, [r4, #0]
 8014afc:	4631      	mov	r1, r6
 8014afe:	4638      	mov	r0, r7
 8014b00:	eb04 0803 	add.w	r8, r4, r3
 8014b04:	f000 f908 	bl	8014d18 <_sbrk_r>
 8014b08:	4580      	cmp	r8, r0
 8014b0a:	d13a      	bne.n	8014b82 <_malloc_r+0xd2>
 8014b0c:	6821      	ldr	r1, [r4, #0]
 8014b0e:	3503      	adds	r5, #3
 8014b10:	1a6d      	subs	r5, r5, r1
 8014b12:	f025 0503 	bic.w	r5, r5, #3
 8014b16:	3508      	adds	r5, #8
 8014b18:	2d0c      	cmp	r5, #12
 8014b1a:	bf38      	it	cc
 8014b1c:	250c      	movcc	r5, #12
 8014b1e:	4629      	mov	r1, r5
 8014b20:	4638      	mov	r0, r7
 8014b22:	f7ff ffa5 	bl	8014a70 <sbrk_aligned>
 8014b26:	3001      	adds	r0, #1
 8014b28:	d02b      	beq.n	8014b82 <_malloc_r+0xd2>
 8014b2a:	6823      	ldr	r3, [r4, #0]
 8014b2c:	442b      	add	r3, r5
 8014b2e:	6023      	str	r3, [r4, #0]
 8014b30:	e00e      	b.n	8014b50 <_malloc_r+0xa0>
 8014b32:	6822      	ldr	r2, [r4, #0]
 8014b34:	1b52      	subs	r2, r2, r5
 8014b36:	d41e      	bmi.n	8014b76 <_malloc_r+0xc6>
 8014b38:	2a0b      	cmp	r2, #11
 8014b3a:	d916      	bls.n	8014b6a <_malloc_r+0xba>
 8014b3c:	1961      	adds	r1, r4, r5
 8014b3e:	42a3      	cmp	r3, r4
 8014b40:	6025      	str	r5, [r4, #0]
 8014b42:	bf18      	it	ne
 8014b44:	6059      	strne	r1, [r3, #4]
 8014b46:	6863      	ldr	r3, [r4, #4]
 8014b48:	bf08      	it	eq
 8014b4a:	6031      	streq	r1, [r6, #0]
 8014b4c:	5162      	str	r2, [r4, r5]
 8014b4e:	604b      	str	r3, [r1, #4]
 8014b50:	4638      	mov	r0, r7
 8014b52:	f104 060b 	add.w	r6, r4, #11
 8014b56:	f000 fa67 	bl	8015028 <__malloc_unlock>
 8014b5a:	f026 0607 	bic.w	r6, r6, #7
 8014b5e:	1d23      	adds	r3, r4, #4
 8014b60:	1af2      	subs	r2, r6, r3
 8014b62:	d0b6      	beq.n	8014ad2 <_malloc_r+0x22>
 8014b64:	1b9b      	subs	r3, r3, r6
 8014b66:	50a3      	str	r3, [r4, r2]
 8014b68:	e7b3      	b.n	8014ad2 <_malloc_r+0x22>
 8014b6a:	6862      	ldr	r2, [r4, #4]
 8014b6c:	42a3      	cmp	r3, r4
 8014b6e:	bf0c      	ite	eq
 8014b70:	6032      	streq	r2, [r6, #0]
 8014b72:	605a      	strne	r2, [r3, #4]
 8014b74:	e7ec      	b.n	8014b50 <_malloc_r+0xa0>
 8014b76:	4623      	mov	r3, r4
 8014b78:	6864      	ldr	r4, [r4, #4]
 8014b7a:	e7b2      	b.n	8014ae2 <_malloc_r+0x32>
 8014b7c:	4634      	mov	r4, r6
 8014b7e:	6876      	ldr	r6, [r6, #4]
 8014b80:	e7b9      	b.n	8014af6 <_malloc_r+0x46>
 8014b82:	230c      	movs	r3, #12
 8014b84:	603b      	str	r3, [r7, #0]
 8014b86:	4638      	mov	r0, r7
 8014b88:	f000 fa4e 	bl	8015028 <__malloc_unlock>
 8014b8c:	e7a1      	b.n	8014ad2 <_malloc_r+0x22>
 8014b8e:	6025      	str	r5, [r4, #0]
 8014b90:	e7de      	b.n	8014b50 <_malloc_r+0xa0>
 8014b92:	bf00      	nop
 8014b94:	2004f2e0 	.word	0x2004f2e0

08014b98 <iprintf>:
 8014b98:	b40f      	push	{r0, r1, r2, r3}
 8014b9a:	4b0a      	ldr	r3, [pc, #40]	; (8014bc4 <iprintf+0x2c>)
 8014b9c:	b513      	push	{r0, r1, r4, lr}
 8014b9e:	681c      	ldr	r4, [r3, #0]
 8014ba0:	b124      	cbz	r4, 8014bac <iprintf+0x14>
 8014ba2:	69a3      	ldr	r3, [r4, #24]
 8014ba4:	b913      	cbnz	r3, 8014bac <iprintf+0x14>
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f7ff fe76 	bl	8014898 <__sinit>
 8014bac:	ab05      	add	r3, sp, #20
 8014bae:	9a04      	ldr	r2, [sp, #16]
 8014bb0:	68a1      	ldr	r1, [r4, #8]
 8014bb2:	9301      	str	r3, [sp, #4]
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f000 fab3 	bl	8015120 <_vfiprintf_r>
 8014bba:	b002      	add	sp, #8
 8014bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bc0:	b004      	add	sp, #16
 8014bc2:	4770      	bx	lr
 8014bc4:	20001834 	.word	0x20001834

08014bc8 <rand>:
 8014bc8:	4b16      	ldr	r3, [pc, #88]	; (8014c24 <rand+0x5c>)
 8014bca:	b510      	push	{r4, lr}
 8014bcc:	681c      	ldr	r4, [r3, #0]
 8014bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014bd0:	b9b3      	cbnz	r3, 8014c00 <rand+0x38>
 8014bd2:	2018      	movs	r0, #24
 8014bd4:	f000 fa1a 	bl	801500c <malloc>
 8014bd8:	63a0      	str	r0, [r4, #56]	; 0x38
 8014bda:	b928      	cbnz	r0, 8014be8 <rand+0x20>
 8014bdc:	4602      	mov	r2, r0
 8014bde:	4b12      	ldr	r3, [pc, #72]	; (8014c28 <rand+0x60>)
 8014be0:	4812      	ldr	r0, [pc, #72]	; (8014c2c <rand+0x64>)
 8014be2:	214e      	movs	r1, #78	; 0x4e
 8014be4:	f000 f8fe 	bl	8014de4 <__assert_func>
 8014be8:	4a11      	ldr	r2, [pc, #68]	; (8014c30 <rand+0x68>)
 8014bea:	4b12      	ldr	r3, [pc, #72]	; (8014c34 <rand+0x6c>)
 8014bec:	e9c0 2300 	strd	r2, r3, [r0]
 8014bf0:	4b11      	ldr	r3, [pc, #68]	; (8014c38 <rand+0x70>)
 8014bf2:	6083      	str	r3, [r0, #8]
 8014bf4:	230b      	movs	r3, #11
 8014bf6:	8183      	strh	r3, [r0, #12]
 8014bf8:	2201      	movs	r2, #1
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014c00:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014c02:	4a0e      	ldr	r2, [pc, #56]	; (8014c3c <rand+0x74>)
 8014c04:	6920      	ldr	r0, [r4, #16]
 8014c06:	6963      	ldr	r3, [r4, #20]
 8014c08:	490d      	ldr	r1, [pc, #52]	; (8014c40 <rand+0x78>)
 8014c0a:	4342      	muls	r2, r0
 8014c0c:	fb01 2203 	mla	r2, r1, r3, r2
 8014c10:	fba0 0101 	umull	r0, r1, r0, r1
 8014c14:	1c43      	adds	r3, r0, #1
 8014c16:	eb42 0001 	adc.w	r0, r2, r1
 8014c1a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8014c1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014c22:	bd10      	pop	{r4, pc}
 8014c24:	20001834 	.word	0x20001834
 8014c28:	080186fc 	.word	0x080186fc
 8014c2c:	08018713 	.word	0x08018713
 8014c30:	abcd330e 	.word	0xabcd330e
 8014c34:	e66d1234 	.word	0xe66d1234
 8014c38:	0005deec 	.word	0x0005deec
 8014c3c:	5851f42d 	.word	0x5851f42d
 8014c40:	4c957f2d 	.word	0x4c957f2d

08014c44 <cleanup_glue>:
 8014c44:	b538      	push	{r3, r4, r5, lr}
 8014c46:	460c      	mov	r4, r1
 8014c48:	6809      	ldr	r1, [r1, #0]
 8014c4a:	4605      	mov	r5, r0
 8014c4c:	b109      	cbz	r1, 8014c52 <cleanup_glue+0xe>
 8014c4e:	f7ff fff9 	bl	8014c44 <cleanup_glue>
 8014c52:	4621      	mov	r1, r4
 8014c54:	4628      	mov	r0, r5
 8014c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c5a:	f000 b9eb 	b.w	8015034 <_free_r>
	...

08014c60 <_reclaim_reent>:
 8014c60:	4b2c      	ldr	r3, [pc, #176]	; (8014d14 <_reclaim_reent+0xb4>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	4283      	cmp	r3, r0
 8014c66:	b570      	push	{r4, r5, r6, lr}
 8014c68:	4604      	mov	r4, r0
 8014c6a:	d051      	beq.n	8014d10 <_reclaim_reent+0xb0>
 8014c6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014c6e:	b143      	cbz	r3, 8014c82 <_reclaim_reent+0x22>
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d14a      	bne.n	8014d0c <_reclaim_reent+0xac>
 8014c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c78:	6819      	ldr	r1, [r3, #0]
 8014c7a:	b111      	cbz	r1, 8014c82 <_reclaim_reent+0x22>
 8014c7c:	4620      	mov	r0, r4
 8014c7e:	f000 f9d9 	bl	8015034 <_free_r>
 8014c82:	6961      	ldr	r1, [r4, #20]
 8014c84:	b111      	cbz	r1, 8014c8c <_reclaim_reent+0x2c>
 8014c86:	4620      	mov	r0, r4
 8014c88:	f000 f9d4 	bl	8015034 <_free_r>
 8014c8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014c8e:	b111      	cbz	r1, 8014c96 <_reclaim_reent+0x36>
 8014c90:	4620      	mov	r0, r4
 8014c92:	f000 f9cf 	bl	8015034 <_free_r>
 8014c96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014c98:	b111      	cbz	r1, 8014ca0 <_reclaim_reent+0x40>
 8014c9a:	4620      	mov	r0, r4
 8014c9c:	f000 f9ca 	bl	8015034 <_free_r>
 8014ca0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014ca2:	b111      	cbz	r1, 8014caa <_reclaim_reent+0x4a>
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	f000 f9c5 	bl	8015034 <_free_r>
 8014caa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014cac:	b111      	cbz	r1, 8014cb4 <_reclaim_reent+0x54>
 8014cae:	4620      	mov	r0, r4
 8014cb0:	f000 f9c0 	bl	8015034 <_free_r>
 8014cb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014cb6:	b111      	cbz	r1, 8014cbe <_reclaim_reent+0x5e>
 8014cb8:	4620      	mov	r0, r4
 8014cba:	f000 f9bb 	bl	8015034 <_free_r>
 8014cbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014cc0:	b111      	cbz	r1, 8014cc8 <_reclaim_reent+0x68>
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f000 f9b6 	bl	8015034 <_free_r>
 8014cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014cca:	b111      	cbz	r1, 8014cd2 <_reclaim_reent+0x72>
 8014ccc:	4620      	mov	r0, r4
 8014cce:	f000 f9b1 	bl	8015034 <_free_r>
 8014cd2:	69a3      	ldr	r3, [r4, #24]
 8014cd4:	b1e3      	cbz	r3, 8014d10 <_reclaim_reent+0xb0>
 8014cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014cd8:	4620      	mov	r0, r4
 8014cda:	4798      	blx	r3
 8014cdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014cde:	b1b9      	cbz	r1, 8014d10 <_reclaim_reent+0xb0>
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ce6:	f7ff bfad 	b.w	8014c44 <cleanup_glue>
 8014cea:	5949      	ldr	r1, [r1, r5]
 8014cec:	b941      	cbnz	r1, 8014d00 <_reclaim_reent+0xa0>
 8014cee:	3504      	adds	r5, #4
 8014cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cf2:	2d80      	cmp	r5, #128	; 0x80
 8014cf4:	68d9      	ldr	r1, [r3, #12]
 8014cf6:	d1f8      	bne.n	8014cea <_reclaim_reent+0x8a>
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	f000 f99b 	bl	8015034 <_free_r>
 8014cfe:	e7ba      	b.n	8014c76 <_reclaim_reent+0x16>
 8014d00:	680e      	ldr	r6, [r1, #0]
 8014d02:	4620      	mov	r0, r4
 8014d04:	f000 f996 	bl	8015034 <_free_r>
 8014d08:	4631      	mov	r1, r6
 8014d0a:	e7ef      	b.n	8014cec <_reclaim_reent+0x8c>
 8014d0c:	2500      	movs	r5, #0
 8014d0e:	e7ef      	b.n	8014cf0 <_reclaim_reent+0x90>
 8014d10:	bd70      	pop	{r4, r5, r6, pc}
 8014d12:	bf00      	nop
 8014d14:	20001834 	.word	0x20001834

08014d18 <_sbrk_r>:
 8014d18:	b538      	push	{r3, r4, r5, lr}
 8014d1a:	4d06      	ldr	r5, [pc, #24]	; (8014d34 <_sbrk_r+0x1c>)
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	4604      	mov	r4, r0
 8014d20:	4608      	mov	r0, r1
 8014d22:	602b      	str	r3, [r5, #0]
 8014d24:	f7ed f974 	bl	8002010 <_sbrk>
 8014d28:	1c43      	adds	r3, r0, #1
 8014d2a:	d102      	bne.n	8014d32 <_sbrk_r+0x1a>
 8014d2c:	682b      	ldr	r3, [r5, #0]
 8014d2e:	b103      	cbz	r3, 8014d32 <_sbrk_r+0x1a>
 8014d30:	6023      	str	r3, [r4, #0]
 8014d32:	bd38      	pop	{r3, r4, r5, pc}
 8014d34:	2004f2e8 	.word	0x2004f2e8

08014d38 <__sread>:
 8014d38:	b510      	push	{r4, lr}
 8014d3a:	460c      	mov	r4, r1
 8014d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d40:	f000 fcb2 	bl	80156a8 <_read_r>
 8014d44:	2800      	cmp	r0, #0
 8014d46:	bfab      	itete	ge
 8014d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8014d4c:	181b      	addge	r3, r3, r0
 8014d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014d52:	bfac      	ite	ge
 8014d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8014d56:	81a3      	strhlt	r3, [r4, #12]
 8014d58:	bd10      	pop	{r4, pc}

08014d5a <__swrite>:
 8014d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d5e:	461f      	mov	r7, r3
 8014d60:	898b      	ldrh	r3, [r1, #12]
 8014d62:	05db      	lsls	r3, r3, #23
 8014d64:	4605      	mov	r5, r0
 8014d66:	460c      	mov	r4, r1
 8014d68:	4616      	mov	r6, r2
 8014d6a:	d505      	bpl.n	8014d78 <__swrite+0x1e>
 8014d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d70:	2302      	movs	r3, #2
 8014d72:	2200      	movs	r2, #0
 8014d74:	f000 f938 	bl	8014fe8 <_lseek_r>
 8014d78:	89a3      	ldrh	r3, [r4, #12]
 8014d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d82:	81a3      	strh	r3, [r4, #12]
 8014d84:	4632      	mov	r2, r6
 8014d86:	463b      	mov	r3, r7
 8014d88:	4628      	mov	r0, r5
 8014d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d8e:	f000 b817 	b.w	8014dc0 <_write_r>

08014d92 <__sseek>:
 8014d92:	b510      	push	{r4, lr}
 8014d94:	460c      	mov	r4, r1
 8014d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d9a:	f000 f925 	bl	8014fe8 <_lseek_r>
 8014d9e:	1c43      	adds	r3, r0, #1
 8014da0:	89a3      	ldrh	r3, [r4, #12]
 8014da2:	bf15      	itete	ne
 8014da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8014da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014dae:	81a3      	strheq	r3, [r4, #12]
 8014db0:	bf18      	it	ne
 8014db2:	81a3      	strhne	r3, [r4, #12]
 8014db4:	bd10      	pop	{r4, pc}

08014db6 <__sclose>:
 8014db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dba:	f000 b831 	b.w	8014e20 <_close_r>
	...

08014dc0 <_write_r>:
 8014dc0:	b538      	push	{r3, r4, r5, lr}
 8014dc2:	4d07      	ldr	r5, [pc, #28]	; (8014de0 <_write_r+0x20>)
 8014dc4:	4604      	mov	r4, r0
 8014dc6:	4608      	mov	r0, r1
 8014dc8:	4611      	mov	r1, r2
 8014dca:	2200      	movs	r2, #0
 8014dcc:	602a      	str	r2, [r5, #0]
 8014dce:	461a      	mov	r2, r3
 8014dd0:	f7ed f8cd 	bl	8001f6e <_write>
 8014dd4:	1c43      	adds	r3, r0, #1
 8014dd6:	d102      	bne.n	8014dde <_write_r+0x1e>
 8014dd8:	682b      	ldr	r3, [r5, #0]
 8014dda:	b103      	cbz	r3, 8014dde <_write_r+0x1e>
 8014ddc:	6023      	str	r3, [r4, #0]
 8014dde:	bd38      	pop	{r3, r4, r5, pc}
 8014de0:	2004f2e8 	.word	0x2004f2e8

08014de4 <__assert_func>:
 8014de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014de6:	4614      	mov	r4, r2
 8014de8:	461a      	mov	r2, r3
 8014dea:	4b09      	ldr	r3, [pc, #36]	; (8014e10 <__assert_func+0x2c>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	4605      	mov	r5, r0
 8014df0:	68d8      	ldr	r0, [r3, #12]
 8014df2:	b14c      	cbz	r4, 8014e08 <__assert_func+0x24>
 8014df4:	4b07      	ldr	r3, [pc, #28]	; (8014e14 <__assert_func+0x30>)
 8014df6:	9100      	str	r1, [sp, #0]
 8014df8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014dfc:	4906      	ldr	r1, [pc, #24]	; (8014e18 <__assert_func+0x34>)
 8014dfe:	462b      	mov	r3, r5
 8014e00:	f000 f8e0 	bl	8014fc4 <fiprintf>
 8014e04:	f000 fd22 	bl	801584c <abort>
 8014e08:	4b04      	ldr	r3, [pc, #16]	; (8014e1c <__assert_func+0x38>)
 8014e0a:	461c      	mov	r4, r3
 8014e0c:	e7f3      	b.n	8014df6 <__assert_func+0x12>
 8014e0e:	bf00      	nop
 8014e10:	20001834 	.word	0x20001834
 8014e14:	0801876e 	.word	0x0801876e
 8014e18:	0801877b 	.word	0x0801877b
 8014e1c:	080187a9 	.word	0x080187a9

08014e20 <_close_r>:
 8014e20:	b538      	push	{r3, r4, r5, lr}
 8014e22:	4d06      	ldr	r5, [pc, #24]	; (8014e3c <_close_r+0x1c>)
 8014e24:	2300      	movs	r3, #0
 8014e26:	4604      	mov	r4, r0
 8014e28:	4608      	mov	r0, r1
 8014e2a:	602b      	str	r3, [r5, #0]
 8014e2c:	f7ed f8bb 	bl	8001fa6 <_close>
 8014e30:	1c43      	adds	r3, r0, #1
 8014e32:	d102      	bne.n	8014e3a <_close_r+0x1a>
 8014e34:	682b      	ldr	r3, [r5, #0]
 8014e36:	b103      	cbz	r3, 8014e3a <_close_r+0x1a>
 8014e38:	6023      	str	r3, [r4, #0]
 8014e3a:	bd38      	pop	{r3, r4, r5, pc}
 8014e3c:	2004f2e8 	.word	0x2004f2e8

08014e40 <__sflush_r>:
 8014e40:	898a      	ldrh	r2, [r1, #12]
 8014e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e46:	4605      	mov	r5, r0
 8014e48:	0710      	lsls	r0, r2, #28
 8014e4a:	460c      	mov	r4, r1
 8014e4c:	d458      	bmi.n	8014f00 <__sflush_r+0xc0>
 8014e4e:	684b      	ldr	r3, [r1, #4]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	dc05      	bgt.n	8014e60 <__sflush_r+0x20>
 8014e54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	dc02      	bgt.n	8014e60 <__sflush_r+0x20>
 8014e5a:	2000      	movs	r0, #0
 8014e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e62:	2e00      	cmp	r6, #0
 8014e64:	d0f9      	beq.n	8014e5a <__sflush_r+0x1a>
 8014e66:	2300      	movs	r3, #0
 8014e68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e6c:	682f      	ldr	r7, [r5, #0]
 8014e6e:	602b      	str	r3, [r5, #0]
 8014e70:	d032      	beq.n	8014ed8 <__sflush_r+0x98>
 8014e72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e74:	89a3      	ldrh	r3, [r4, #12]
 8014e76:	075a      	lsls	r2, r3, #29
 8014e78:	d505      	bpl.n	8014e86 <__sflush_r+0x46>
 8014e7a:	6863      	ldr	r3, [r4, #4]
 8014e7c:	1ac0      	subs	r0, r0, r3
 8014e7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e80:	b10b      	cbz	r3, 8014e86 <__sflush_r+0x46>
 8014e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e84:	1ac0      	subs	r0, r0, r3
 8014e86:	2300      	movs	r3, #0
 8014e88:	4602      	mov	r2, r0
 8014e8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e8c:	6a21      	ldr	r1, [r4, #32]
 8014e8e:	4628      	mov	r0, r5
 8014e90:	47b0      	blx	r6
 8014e92:	1c43      	adds	r3, r0, #1
 8014e94:	89a3      	ldrh	r3, [r4, #12]
 8014e96:	d106      	bne.n	8014ea6 <__sflush_r+0x66>
 8014e98:	6829      	ldr	r1, [r5, #0]
 8014e9a:	291d      	cmp	r1, #29
 8014e9c:	d82c      	bhi.n	8014ef8 <__sflush_r+0xb8>
 8014e9e:	4a2a      	ldr	r2, [pc, #168]	; (8014f48 <__sflush_r+0x108>)
 8014ea0:	40ca      	lsrs	r2, r1
 8014ea2:	07d6      	lsls	r6, r2, #31
 8014ea4:	d528      	bpl.n	8014ef8 <__sflush_r+0xb8>
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	6062      	str	r2, [r4, #4]
 8014eaa:	04d9      	lsls	r1, r3, #19
 8014eac:	6922      	ldr	r2, [r4, #16]
 8014eae:	6022      	str	r2, [r4, #0]
 8014eb0:	d504      	bpl.n	8014ebc <__sflush_r+0x7c>
 8014eb2:	1c42      	adds	r2, r0, #1
 8014eb4:	d101      	bne.n	8014eba <__sflush_r+0x7a>
 8014eb6:	682b      	ldr	r3, [r5, #0]
 8014eb8:	b903      	cbnz	r3, 8014ebc <__sflush_r+0x7c>
 8014eba:	6560      	str	r0, [r4, #84]	; 0x54
 8014ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ebe:	602f      	str	r7, [r5, #0]
 8014ec0:	2900      	cmp	r1, #0
 8014ec2:	d0ca      	beq.n	8014e5a <__sflush_r+0x1a>
 8014ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ec8:	4299      	cmp	r1, r3
 8014eca:	d002      	beq.n	8014ed2 <__sflush_r+0x92>
 8014ecc:	4628      	mov	r0, r5
 8014ece:	f000 f8b1 	bl	8015034 <_free_r>
 8014ed2:	2000      	movs	r0, #0
 8014ed4:	6360      	str	r0, [r4, #52]	; 0x34
 8014ed6:	e7c1      	b.n	8014e5c <__sflush_r+0x1c>
 8014ed8:	6a21      	ldr	r1, [r4, #32]
 8014eda:	2301      	movs	r3, #1
 8014edc:	4628      	mov	r0, r5
 8014ede:	47b0      	blx	r6
 8014ee0:	1c41      	adds	r1, r0, #1
 8014ee2:	d1c7      	bne.n	8014e74 <__sflush_r+0x34>
 8014ee4:	682b      	ldr	r3, [r5, #0]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d0c4      	beq.n	8014e74 <__sflush_r+0x34>
 8014eea:	2b1d      	cmp	r3, #29
 8014eec:	d001      	beq.n	8014ef2 <__sflush_r+0xb2>
 8014eee:	2b16      	cmp	r3, #22
 8014ef0:	d101      	bne.n	8014ef6 <__sflush_r+0xb6>
 8014ef2:	602f      	str	r7, [r5, #0]
 8014ef4:	e7b1      	b.n	8014e5a <__sflush_r+0x1a>
 8014ef6:	89a3      	ldrh	r3, [r4, #12]
 8014ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014efc:	81a3      	strh	r3, [r4, #12]
 8014efe:	e7ad      	b.n	8014e5c <__sflush_r+0x1c>
 8014f00:	690f      	ldr	r7, [r1, #16]
 8014f02:	2f00      	cmp	r7, #0
 8014f04:	d0a9      	beq.n	8014e5a <__sflush_r+0x1a>
 8014f06:	0793      	lsls	r3, r2, #30
 8014f08:	680e      	ldr	r6, [r1, #0]
 8014f0a:	bf08      	it	eq
 8014f0c:	694b      	ldreq	r3, [r1, #20]
 8014f0e:	600f      	str	r7, [r1, #0]
 8014f10:	bf18      	it	ne
 8014f12:	2300      	movne	r3, #0
 8014f14:	eba6 0807 	sub.w	r8, r6, r7
 8014f18:	608b      	str	r3, [r1, #8]
 8014f1a:	f1b8 0f00 	cmp.w	r8, #0
 8014f1e:	dd9c      	ble.n	8014e5a <__sflush_r+0x1a>
 8014f20:	6a21      	ldr	r1, [r4, #32]
 8014f22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f24:	4643      	mov	r3, r8
 8014f26:	463a      	mov	r2, r7
 8014f28:	4628      	mov	r0, r5
 8014f2a:	47b0      	blx	r6
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	dc06      	bgt.n	8014f3e <__sflush_r+0xfe>
 8014f30:	89a3      	ldrh	r3, [r4, #12]
 8014f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f36:	81a3      	strh	r3, [r4, #12]
 8014f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f3c:	e78e      	b.n	8014e5c <__sflush_r+0x1c>
 8014f3e:	4407      	add	r7, r0
 8014f40:	eba8 0800 	sub.w	r8, r8, r0
 8014f44:	e7e9      	b.n	8014f1a <__sflush_r+0xda>
 8014f46:	bf00      	nop
 8014f48:	20400001 	.word	0x20400001

08014f4c <_fflush_r>:
 8014f4c:	b538      	push	{r3, r4, r5, lr}
 8014f4e:	690b      	ldr	r3, [r1, #16]
 8014f50:	4605      	mov	r5, r0
 8014f52:	460c      	mov	r4, r1
 8014f54:	b913      	cbnz	r3, 8014f5c <_fflush_r+0x10>
 8014f56:	2500      	movs	r5, #0
 8014f58:	4628      	mov	r0, r5
 8014f5a:	bd38      	pop	{r3, r4, r5, pc}
 8014f5c:	b118      	cbz	r0, 8014f66 <_fflush_r+0x1a>
 8014f5e:	6983      	ldr	r3, [r0, #24]
 8014f60:	b90b      	cbnz	r3, 8014f66 <_fflush_r+0x1a>
 8014f62:	f7ff fc99 	bl	8014898 <__sinit>
 8014f66:	4b14      	ldr	r3, [pc, #80]	; (8014fb8 <_fflush_r+0x6c>)
 8014f68:	429c      	cmp	r4, r3
 8014f6a:	d11b      	bne.n	8014fa4 <_fflush_r+0x58>
 8014f6c:	686c      	ldr	r4, [r5, #4]
 8014f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d0ef      	beq.n	8014f56 <_fflush_r+0xa>
 8014f76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014f78:	07d0      	lsls	r0, r2, #31
 8014f7a:	d404      	bmi.n	8014f86 <_fflush_r+0x3a>
 8014f7c:	0599      	lsls	r1, r3, #22
 8014f7e:	d402      	bmi.n	8014f86 <_fflush_r+0x3a>
 8014f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f82:	f7ff fd4c 	bl	8014a1e <__retarget_lock_acquire_recursive>
 8014f86:	4628      	mov	r0, r5
 8014f88:	4621      	mov	r1, r4
 8014f8a:	f7ff ff59 	bl	8014e40 <__sflush_r>
 8014f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f90:	07da      	lsls	r2, r3, #31
 8014f92:	4605      	mov	r5, r0
 8014f94:	d4e0      	bmi.n	8014f58 <_fflush_r+0xc>
 8014f96:	89a3      	ldrh	r3, [r4, #12]
 8014f98:	059b      	lsls	r3, r3, #22
 8014f9a:	d4dd      	bmi.n	8014f58 <_fflush_r+0xc>
 8014f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f9e:	f7ff fd3f 	bl	8014a20 <__retarget_lock_release_recursive>
 8014fa2:	e7d9      	b.n	8014f58 <_fflush_r+0xc>
 8014fa4:	4b05      	ldr	r3, [pc, #20]	; (8014fbc <_fflush_r+0x70>)
 8014fa6:	429c      	cmp	r4, r3
 8014fa8:	d101      	bne.n	8014fae <_fflush_r+0x62>
 8014faa:	68ac      	ldr	r4, [r5, #8]
 8014fac:	e7df      	b.n	8014f6e <_fflush_r+0x22>
 8014fae:	4b04      	ldr	r3, [pc, #16]	; (8014fc0 <_fflush_r+0x74>)
 8014fb0:	429c      	cmp	r4, r3
 8014fb2:	bf08      	it	eq
 8014fb4:	68ec      	ldreq	r4, [r5, #12]
 8014fb6:	e7da      	b.n	8014f6e <_fflush_r+0x22>
 8014fb8:	080186b8 	.word	0x080186b8
 8014fbc:	080186d8 	.word	0x080186d8
 8014fc0:	08018698 	.word	0x08018698

08014fc4 <fiprintf>:
 8014fc4:	b40e      	push	{r1, r2, r3}
 8014fc6:	b503      	push	{r0, r1, lr}
 8014fc8:	4601      	mov	r1, r0
 8014fca:	ab03      	add	r3, sp, #12
 8014fcc:	4805      	ldr	r0, [pc, #20]	; (8014fe4 <fiprintf+0x20>)
 8014fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fd2:	6800      	ldr	r0, [r0, #0]
 8014fd4:	9301      	str	r3, [sp, #4]
 8014fd6:	f000 f8a3 	bl	8015120 <_vfiprintf_r>
 8014fda:	b002      	add	sp, #8
 8014fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fe0:	b003      	add	sp, #12
 8014fe2:	4770      	bx	lr
 8014fe4:	20001834 	.word	0x20001834

08014fe8 <_lseek_r>:
 8014fe8:	b538      	push	{r3, r4, r5, lr}
 8014fea:	4d07      	ldr	r5, [pc, #28]	; (8015008 <_lseek_r+0x20>)
 8014fec:	4604      	mov	r4, r0
 8014fee:	4608      	mov	r0, r1
 8014ff0:	4611      	mov	r1, r2
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	602a      	str	r2, [r5, #0]
 8014ff6:	461a      	mov	r2, r3
 8014ff8:	f7ec fffc 	bl	8001ff4 <_lseek>
 8014ffc:	1c43      	adds	r3, r0, #1
 8014ffe:	d102      	bne.n	8015006 <_lseek_r+0x1e>
 8015000:	682b      	ldr	r3, [r5, #0]
 8015002:	b103      	cbz	r3, 8015006 <_lseek_r+0x1e>
 8015004:	6023      	str	r3, [r4, #0]
 8015006:	bd38      	pop	{r3, r4, r5, pc}
 8015008:	2004f2e8 	.word	0x2004f2e8

0801500c <malloc>:
 801500c:	4b02      	ldr	r3, [pc, #8]	; (8015018 <malloc+0xc>)
 801500e:	4601      	mov	r1, r0
 8015010:	6818      	ldr	r0, [r3, #0]
 8015012:	f7ff bd4d 	b.w	8014ab0 <_malloc_r>
 8015016:	bf00      	nop
 8015018:	20001834 	.word	0x20001834

0801501c <__malloc_lock>:
 801501c:	4801      	ldr	r0, [pc, #4]	; (8015024 <__malloc_lock+0x8>)
 801501e:	f7ff bcfe 	b.w	8014a1e <__retarget_lock_acquire_recursive>
 8015022:	bf00      	nop
 8015024:	2004f2dc 	.word	0x2004f2dc

08015028 <__malloc_unlock>:
 8015028:	4801      	ldr	r0, [pc, #4]	; (8015030 <__malloc_unlock+0x8>)
 801502a:	f7ff bcf9 	b.w	8014a20 <__retarget_lock_release_recursive>
 801502e:	bf00      	nop
 8015030:	2004f2dc 	.word	0x2004f2dc

08015034 <_free_r>:
 8015034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015036:	2900      	cmp	r1, #0
 8015038:	d044      	beq.n	80150c4 <_free_r+0x90>
 801503a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801503e:	9001      	str	r0, [sp, #4]
 8015040:	2b00      	cmp	r3, #0
 8015042:	f1a1 0404 	sub.w	r4, r1, #4
 8015046:	bfb8      	it	lt
 8015048:	18e4      	addlt	r4, r4, r3
 801504a:	f7ff ffe7 	bl	801501c <__malloc_lock>
 801504e:	4a1e      	ldr	r2, [pc, #120]	; (80150c8 <_free_r+0x94>)
 8015050:	9801      	ldr	r0, [sp, #4]
 8015052:	6813      	ldr	r3, [r2, #0]
 8015054:	b933      	cbnz	r3, 8015064 <_free_r+0x30>
 8015056:	6063      	str	r3, [r4, #4]
 8015058:	6014      	str	r4, [r2, #0]
 801505a:	b003      	add	sp, #12
 801505c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015060:	f7ff bfe2 	b.w	8015028 <__malloc_unlock>
 8015064:	42a3      	cmp	r3, r4
 8015066:	d908      	bls.n	801507a <_free_r+0x46>
 8015068:	6825      	ldr	r5, [r4, #0]
 801506a:	1961      	adds	r1, r4, r5
 801506c:	428b      	cmp	r3, r1
 801506e:	bf01      	itttt	eq
 8015070:	6819      	ldreq	r1, [r3, #0]
 8015072:	685b      	ldreq	r3, [r3, #4]
 8015074:	1949      	addeq	r1, r1, r5
 8015076:	6021      	streq	r1, [r4, #0]
 8015078:	e7ed      	b.n	8015056 <_free_r+0x22>
 801507a:	461a      	mov	r2, r3
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	b10b      	cbz	r3, 8015084 <_free_r+0x50>
 8015080:	42a3      	cmp	r3, r4
 8015082:	d9fa      	bls.n	801507a <_free_r+0x46>
 8015084:	6811      	ldr	r1, [r2, #0]
 8015086:	1855      	adds	r5, r2, r1
 8015088:	42a5      	cmp	r5, r4
 801508a:	d10b      	bne.n	80150a4 <_free_r+0x70>
 801508c:	6824      	ldr	r4, [r4, #0]
 801508e:	4421      	add	r1, r4
 8015090:	1854      	adds	r4, r2, r1
 8015092:	42a3      	cmp	r3, r4
 8015094:	6011      	str	r1, [r2, #0]
 8015096:	d1e0      	bne.n	801505a <_free_r+0x26>
 8015098:	681c      	ldr	r4, [r3, #0]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	6053      	str	r3, [r2, #4]
 801509e:	4421      	add	r1, r4
 80150a0:	6011      	str	r1, [r2, #0]
 80150a2:	e7da      	b.n	801505a <_free_r+0x26>
 80150a4:	d902      	bls.n	80150ac <_free_r+0x78>
 80150a6:	230c      	movs	r3, #12
 80150a8:	6003      	str	r3, [r0, #0]
 80150aa:	e7d6      	b.n	801505a <_free_r+0x26>
 80150ac:	6825      	ldr	r5, [r4, #0]
 80150ae:	1961      	adds	r1, r4, r5
 80150b0:	428b      	cmp	r3, r1
 80150b2:	bf04      	itt	eq
 80150b4:	6819      	ldreq	r1, [r3, #0]
 80150b6:	685b      	ldreq	r3, [r3, #4]
 80150b8:	6063      	str	r3, [r4, #4]
 80150ba:	bf04      	itt	eq
 80150bc:	1949      	addeq	r1, r1, r5
 80150be:	6021      	streq	r1, [r4, #0]
 80150c0:	6054      	str	r4, [r2, #4]
 80150c2:	e7ca      	b.n	801505a <_free_r+0x26>
 80150c4:	b003      	add	sp, #12
 80150c6:	bd30      	pop	{r4, r5, pc}
 80150c8:	2004f2e0 	.word	0x2004f2e0

080150cc <__sfputc_r>:
 80150cc:	6893      	ldr	r3, [r2, #8]
 80150ce:	3b01      	subs	r3, #1
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	b410      	push	{r4}
 80150d4:	6093      	str	r3, [r2, #8]
 80150d6:	da08      	bge.n	80150ea <__sfputc_r+0x1e>
 80150d8:	6994      	ldr	r4, [r2, #24]
 80150da:	42a3      	cmp	r3, r4
 80150dc:	db01      	blt.n	80150e2 <__sfputc_r+0x16>
 80150de:	290a      	cmp	r1, #10
 80150e0:	d103      	bne.n	80150ea <__sfputc_r+0x1e>
 80150e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150e6:	f000 baf1 	b.w	80156cc <__swbuf_r>
 80150ea:	6813      	ldr	r3, [r2, #0]
 80150ec:	1c58      	adds	r0, r3, #1
 80150ee:	6010      	str	r0, [r2, #0]
 80150f0:	7019      	strb	r1, [r3, #0]
 80150f2:	4608      	mov	r0, r1
 80150f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150f8:	4770      	bx	lr

080150fa <__sfputs_r>:
 80150fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150fc:	4606      	mov	r6, r0
 80150fe:	460f      	mov	r7, r1
 8015100:	4614      	mov	r4, r2
 8015102:	18d5      	adds	r5, r2, r3
 8015104:	42ac      	cmp	r4, r5
 8015106:	d101      	bne.n	801510c <__sfputs_r+0x12>
 8015108:	2000      	movs	r0, #0
 801510a:	e007      	b.n	801511c <__sfputs_r+0x22>
 801510c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015110:	463a      	mov	r2, r7
 8015112:	4630      	mov	r0, r6
 8015114:	f7ff ffda 	bl	80150cc <__sfputc_r>
 8015118:	1c43      	adds	r3, r0, #1
 801511a:	d1f3      	bne.n	8015104 <__sfputs_r+0xa>
 801511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015120 <_vfiprintf_r>:
 8015120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015124:	460d      	mov	r5, r1
 8015126:	b09d      	sub	sp, #116	; 0x74
 8015128:	4614      	mov	r4, r2
 801512a:	4698      	mov	r8, r3
 801512c:	4606      	mov	r6, r0
 801512e:	b118      	cbz	r0, 8015138 <_vfiprintf_r+0x18>
 8015130:	6983      	ldr	r3, [r0, #24]
 8015132:	b90b      	cbnz	r3, 8015138 <_vfiprintf_r+0x18>
 8015134:	f7ff fbb0 	bl	8014898 <__sinit>
 8015138:	4b89      	ldr	r3, [pc, #548]	; (8015360 <_vfiprintf_r+0x240>)
 801513a:	429d      	cmp	r5, r3
 801513c:	d11b      	bne.n	8015176 <_vfiprintf_r+0x56>
 801513e:	6875      	ldr	r5, [r6, #4]
 8015140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015142:	07d9      	lsls	r1, r3, #31
 8015144:	d405      	bmi.n	8015152 <_vfiprintf_r+0x32>
 8015146:	89ab      	ldrh	r3, [r5, #12]
 8015148:	059a      	lsls	r2, r3, #22
 801514a:	d402      	bmi.n	8015152 <_vfiprintf_r+0x32>
 801514c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801514e:	f7ff fc66 	bl	8014a1e <__retarget_lock_acquire_recursive>
 8015152:	89ab      	ldrh	r3, [r5, #12]
 8015154:	071b      	lsls	r3, r3, #28
 8015156:	d501      	bpl.n	801515c <_vfiprintf_r+0x3c>
 8015158:	692b      	ldr	r3, [r5, #16]
 801515a:	b9eb      	cbnz	r3, 8015198 <_vfiprintf_r+0x78>
 801515c:	4629      	mov	r1, r5
 801515e:	4630      	mov	r0, r6
 8015160:	f000 fb06 	bl	8015770 <__swsetup_r>
 8015164:	b1c0      	cbz	r0, 8015198 <_vfiprintf_r+0x78>
 8015166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015168:	07dc      	lsls	r4, r3, #31
 801516a:	d50e      	bpl.n	801518a <_vfiprintf_r+0x6a>
 801516c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015170:	b01d      	add	sp, #116	; 0x74
 8015172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015176:	4b7b      	ldr	r3, [pc, #492]	; (8015364 <_vfiprintf_r+0x244>)
 8015178:	429d      	cmp	r5, r3
 801517a:	d101      	bne.n	8015180 <_vfiprintf_r+0x60>
 801517c:	68b5      	ldr	r5, [r6, #8]
 801517e:	e7df      	b.n	8015140 <_vfiprintf_r+0x20>
 8015180:	4b79      	ldr	r3, [pc, #484]	; (8015368 <_vfiprintf_r+0x248>)
 8015182:	429d      	cmp	r5, r3
 8015184:	bf08      	it	eq
 8015186:	68f5      	ldreq	r5, [r6, #12]
 8015188:	e7da      	b.n	8015140 <_vfiprintf_r+0x20>
 801518a:	89ab      	ldrh	r3, [r5, #12]
 801518c:	0598      	lsls	r0, r3, #22
 801518e:	d4ed      	bmi.n	801516c <_vfiprintf_r+0x4c>
 8015190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015192:	f7ff fc45 	bl	8014a20 <__retarget_lock_release_recursive>
 8015196:	e7e9      	b.n	801516c <_vfiprintf_r+0x4c>
 8015198:	2300      	movs	r3, #0
 801519a:	9309      	str	r3, [sp, #36]	; 0x24
 801519c:	2320      	movs	r3, #32
 801519e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80151a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80151a6:	2330      	movs	r3, #48	; 0x30
 80151a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801536c <_vfiprintf_r+0x24c>
 80151ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80151b0:	f04f 0901 	mov.w	r9, #1
 80151b4:	4623      	mov	r3, r4
 80151b6:	469a      	mov	sl, r3
 80151b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151bc:	b10a      	cbz	r2, 80151c2 <_vfiprintf_r+0xa2>
 80151be:	2a25      	cmp	r2, #37	; 0x25
 80151c0:	d1f9      	bne.n	80151b6 <_vfiprintf_r+0x96>
 80151c2:	ebba 0b04 	subs.w	fp, sl, r4
 80151c6:	d00b      	beq.n	80151e0 <_vfiprintf_r+0xc0>
 80151c8:	465b      	mov	r3, fp
 80151ca:	4622      	mov	r2, r4
 80151cc:	4629      	mov	r1, r5
 80151ce:	4630      	mov	r0, r6
 80151d0:	f7ff ff93 	bl	80150fa <__sfputs_r>
 80151d4:	3001      	adds	r0, #1
 80151d6:	f000 80aa 	beq.w	801532e <_vfiprintf_r+0x20e>
 80151da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151dc:	445a      	add	r2, fp
 80151de:	9209      	str	r2, [sp, #36]	; 0x24
 80151e0:	f89a 3000 	ldrb.w	r3, [sl]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f000 80a2 	beq.w	801532e <_vfiprintf_r+0x20e>
 80151ea:	2300      	movs	r3, #0
 80151ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80151f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151f4:	f10a 0a01 	add.w	sl, sl, #1
 80151f8:	9304      	str	r3, [sp, #16]
 80151fa:	9307      	str	r3, [sp, #28]
 80151fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015200:	931a      	str	r3, [sp, #104]	; 0x68
 8015202:	4654      	mov	r4, sl
 8015204:	2205      	movs	r2, #5
 8015206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801520a:	4858      	ldr	r0, [pc, #352]	; (801536c <_vfiprintf_r+0x24c>)
 801520c:	f7eb f808 	bl	8000220 <memchr>
 8015210:	9a04      	ldr	r2, [sp, #16]
 8015212:	b9d8      	cbnz	r0, 801524c <_vfiprintf_r+0x12c>
 8015214:	06d1      	lsls	r1, r2, #27
 8015216:	bf44      	itt	mi
 8015218:	2320      	movmi	r3, #32
 801521a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801521e:	0713      	lsls	r3, r2, #28
 8015220:	bf44      	itt	mi
 8015222:	232b      	movmi	r3, #43	; 0x2b
 8015224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015228:	f89a 3000 	ldrb.w	r3, [sl]
 801522c:	2b2a      	cmp	r3, #42	; 0x2a
 801522e:	d015      	beq.n	801525c <_vfiprintf_r+0x13c>
 8015230:	9a07      	ldr	r2, [sp, #28]
 8015232:	4654      	mov	r4, sl
 8015234:	2000      	movs	r0, #0
 8015236:	f04f 0c0a 	mov.w	ip, #10
 801523a:	4621      	mov	r1, r4
 801523c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015240:	3b30      	subs	r3, #48	; 0x30
 8015242:	2b09      	cmp	r3, #9
 8015244:	d94e      	bls.n	80152e4 <_vfiprintf_r+0x1c4>
 8015246:	b1b0      	cbz	r0, 8015276 <_vfiprintf_r+0x156>
 8015248:	9207      	str	r2, [sp, #28]
 801524a:	e014      	b.n	8015276 <_vfiprintf_r+0x156>
 801524c:	eba0 0308 	sub.w	r3, r0, r8
 8015250:	fa09 f303 	lsl.w	r3, r9, r3
 8015254:	4313      	orrs	r3, r2
 8015256:	9304      	str	r3, [sp, #16]
 8015258:	46a2      	mov	sl, r4
 801525a:	e7d2      	b.n	8015202 <_vfiprintf_r+0xe2>
 801525c:	9b03      	ldr	r3, [sp, #12]
 801525e:	1d19      	adds	r1, r3, #4
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	9103      	str	r1, [sp, #12]
 8015264:	2b00      	cmp	r3, #0
 8015266:	bfbb      	ittet	lt
 8015268:	425b      	neglt	r3, r3
 801526a:	f042 0202 	orrlt.w	r2, r2, #2
 801526e:	9307      	strge	r3, [sp, #28]
 8015270:	9307      	strlt	r3, [sp, #28]
 8015272:	bfb8      	it	lt
 8015274:	9204      	strlt	r2, [sp, #16]
 8015276:	7823      	ldrb	r3, [r4, #0]
 8015278:	2b2e      	cmp	r3, #46	; 0x2e
 801527a:	d10c      	bne.n	8015296 <_vfiprintf_r+0x176>
 801527c:	7863      	ldrb	r3, [r4, #1]
 801527e:	2b2a      	cmp	r3, #42	; 0x2a
 8015280:	d135      	bne.n	80152ee <_vfiprintf_r+0x1ce>
 8015282:	9b03      	ldr	r3, [sp, #12]
 8015284:	1d1a      	adds	r2, r3, #4
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	9203      	str	r2, [sp, #12]
 801528a:	2b00      	cmp	r3, #0
 801528c:	bfb8      	it	lt
 801528e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015292:	3402      	adds	r4, #2
 8015294:	9305      	str	r3, [sp, #20]
 8015296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801537c <_vfiprintf_r+0x25c>
 801529a:	7821      	ldrb	r1, [r4, #0]
 801529c:	2203      	movs	r2, #3
 801529e:	4650      	mov	r0, sl
 80152a0:	f7ea ffbe 	bl	8000220 <memchr>
 80152a4:	b140      	cbz	r0, 80152b8 <_vfiprintf_r+0x198>
 80152a6:	2340      	movs	r3, #64	; 0x40
 80152a8:	eba0 000a 	sub.w	r0, r0, sl
 80152ac:	fa03 f000 	lsl.w	r0, r3, r0
 80152b0:	9b04      	ldr	r3, [sp, #16]
 80152b2:	4303      	orrs	r3, r0
 80152b4:	3401      	adds	r4, #1
 80152b6:	9304      	str	r3, [sp, #16]
 80152b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152bc:	482c      	ldr	r0, [pc, #176]	; (8015370 <_vfiprintf_r+0x250>)
 80152be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80152c2:	2206      	movs	r2, #6
 80152c4:	f7ea ffac 	bl	8000220 <memchr>
 80152c8:	2800      	cmp	r0, #0
 80152ca:	d03f      	beq.n	801534c <_vfiprintf_r+0x22c>
 80152cc:	4b29      	ldr	r3, [pc, #164]	; (8015374 <_vfiprintf_r+0x254>)
 80152ce:	bb1b      	cbnz	r3, 8015318 <_vfiprintf_r+0x1f8>
 80152d0:	9b03      	ldr	r3, [sp, #12]
 80152d2:	3307      	adds	r3, #7
 80152d4:	f023 0307 	bic.w	r3, r3, #7
 80152d8:	3308      	adds	r3, #8
 80152da:	9303      	str	r3, [sp, #12]
 80152dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152de:	443b      	add	r3, r7
 80152e0:	9309      	str	r3, [sp, #36]	; 0x24
 80152e2:	e767      	b.n	80151b4 <_vfiprintf_r+0x94>
 80152e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80152e8:	460c      	mov	r4, r1
 80152ea:	2001      	movs	r0, #1
 80152ec:	e7a5      	b.n	801523a <_vfiprintf_r+0x11a>
 80152ee:	2300      	movs	r3, #0
 80152f0:	3401      	adds	r4, #1
 80152f2:	9305      	str	r3, [sp, #20]
 80152f4:	4619      	mov	r1, r3
 80152f6:	f04f 0c0a 	mov.w	ip, #10
 80152fa:	4620      	mov	r0, r4
 80152fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015300:	3a30      	subs	r2, #48	; 0x30
 8015302:	2a09      	cmp	r2, #9
 8015304:	d903      	bls.n	801530e <_vfiprintf_r+0x1ee>
 8015306:	2b00      	cmp	r3, #0
 8015308:	d0c5      	beq.n	8015296 <_vfiprintf_r+0x176>
 801530a:	9105      	str	r1, [sp, #20]
 801530c:	e7c3      	b.n	8015296 <_vfiprintf_r+0x176>
 801530e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015312:	4604      	mov	r4, r0
 8015314:	2301      	movs	r3, #1
 8015316:	e7f0      	b.n	80152fa <_vfiprintf_r+0x1da>
 8015318:	ab03      	add	r3, sp, #12
 801531a:	9300      	str	r3, [sp, #0]
 801531c:	462a      	mov	r2, r5
 801531e:	4b16      	ldr	r3, [pc, #88]	; (8015378 <_vfiprintf_r+0x258>)
 8015320:	a904      	add	r1, sp, #16
 8015322:	4630      	mov	r0, r6
 8015324:	f3af 8000 	nop.w
 8015328:	4607      	mov	r7, r0
 801532a:	1c78      	adds	r0, r7, #1
 801532c:	d1d6      	bne.n	80152dc <_vfiprintf_r+0x1bc>
 801532e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015330:	07d9      	lsls	r1, r3, #31
 8015332:	d405      	bmi.n	8015340 <_vfiprintf_r+0x220>
 8015334:	89ab      	ldrh	r3, [r5, #12]
 8015336:	059a      	lsls	r2, r3, #22
 8015338:	d402      	bmi.n	8015340 <_vfiprintf_r+0x220>
 801533a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801533c:	f7ff fb70 	bl	8014a20 <__retarget_lock_release_recursive>
 8015340:	89ab      	ldrh	r3, [r5, #12]
 8015342:	065b      	lsls	r3, r3, #25
 8015344:	f53f af12 	bmi.w	801516c <_vfiprintf_r+0x4c>
 8015348:	9809      	ldr	r0, [sp, #36]	; 0x24
 801534a:	e711      	b.n	8015170 <_vfiprintf_r+0x50>
 801534c:	ab03      	add	r3, sp, #12
 801534e:	9300      	str	r3, [sp, #0]
 8015350:	462a      	mov	r2, r5
 8015352:	4b09      	ldr	r3, [pc, #36]	; (8015378 <_vfiprintf_r+0x258>)
 8015354:	a904      	add	r1, sp, #16
 8015356:	4630      	mov	r0, r6
 8015358:	f000 f880 	bl	801545c <_printf_i>
 801535c:	e7e4      	b.n	8015328 <_vfiprintf_r+0x208>
 801535e:	bf00      	nop
 8015360:	080186b8 	.word	0x080186b8
 8015364:	080186d8 	.word	0x080186d8
 8015368:	08018698 	.word	0x08018698
 801536c:	080187aa 	.word	0x080187aa
 8015370:	080187b4 	.word	0x080187b4
 8015374:	00000000 	.word	0x00000000
 8015378:	080150fb 	.word	0x080150fb
 801537c:	080187b0 	.word	0x080187b0

08015380 <_printf_common>:
 8015380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015384:	4616      	mov	r6, r2
 8015386:	4699      	mov	r9, r3
 8015388:	688a      	ldr	r2, [r1, #8]
 801538a:	690b      	ldr	r3, [r1, #16]
 801538c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015390:	4293      	cmp	r3, r2
 8015392:	bfb8      	it	lt
 8015394:	4613      	movlt	r3, r2
 8015396:	6033      	str	r3, [r6, #0]
 8015398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801539c:	4607      	mov	r7, r0
 801539e:	460c      	mov	r4, r1
 80153a0:	b10a      	cbz	r2, 80153a6 <_printf_common+0x26>
 80153a2:	3301      	adds	r3, #1
 80153a4:	6033      	str	r3, [r6, #0]
 80153a6:	6823      	ldr	r3, [r4, #0]
 80153a8:	0699      	lsls	r1, r3, #26
 80153aa:	bf42      	ittt	mi
 80153ac:	6833      	ldrmi	r3, [r6, #0]
 80153ae:	3302      	addmi	r3, #2
 80153b0:	6033      	strmi	r3, [r6, #0]
 80153b2:	6825      	ldr	r5, [r4, #0]
 80153b4:	f015 0506 	ands.w	r5, r5, #6
 80153b8:	d106      	bne.n	80153c8 <_printf_common+0x48>
 80153ba:	f104 0a19 	add.w	sl, r4, #25
 80153be:	68e3      	ldr	r3, [r4, #12]
 80153c0:	6832      	ldr	r2, [r6, #0]
 80153c2:	1a9b      	subs	r3, r3, r2
 80153c4:	42ab      	cmp	r3, r5
 80153c6:	dc26      	bgt.n	8015416 <_printf_common+0x96>
 80153c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80153cc:	1e13      	subs	r3, r2, #0
 80153ce:	6822      	ldr	r2, [r4, #0]
 80153d0:	bf18      	it	ne
 80153d2:	2301      	movne	r3, #1
 80153d4:	0692      	lsls	r2, r2, #26
 80153d6:	d42b      	bmi.n	8015430 <_printf_common+0xb0>
 80153d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80153dc:	4649      	mov	r1, r9
 80153de:	4638      	mov	r0, r7
 80153e0:	47c0      	blx	r8
 80153e2:	3001      	adds	r0, #1
 80153e4:	d01e      	beq.n	8015424 <_printf_common+0xa4>
 80153e6:	6823      	ldr	r3, [r4, #0]
 80153e8:	68e5      	ldr	r5, [r4, #12]
 80153ea:	6832      	ldr	r2, [r6, #0]
 80153ec:	f003 0306 	and.w	r3, r3, #6
 80153f0:	2b04      	cmp	r3, #4
 80153f2:	bf08      	it	eq
 80153f4:	1aad      	subeq	r5, r5, r2
 80153f6:	68a3      	ldr	r3, [r4, #8]
 80153f8:	6922      	ldr	r2, [r4, #16]
 80153fa:	bf0c      	ite	eq
 80153fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015400:	2500      	movne	r5, #0
 8015402:	4293      	cmp	r3, r2
 8015404:	bfc4      	itt	gt
 8015406:	1a9b      	subgt	r3, r3, r2
 8015408:	18ed      	addgt	r5, r5, r3
 801540a:	2600      	movs	r6, #0
 801540c:	341a      	adds	r4, #26
 801540e:	42b5      	cmp	r5, r6
 8015410:	d11a      	bne.n	8015448 <_printf_common+0xc8>
 8015412:	2000      	movs	r0, #0
 8015414:	e008      	b.n	8015428 <_printf_common+0xa8>
 8015416:	2301      	movs	r3, #1
 8015418:	4652      	mov	r2, sl
 801541a:	4649      	mov	r1, r9
 801541c:	4638      	mov	r0, r7
 801541e:	47c0      	blx	r8
 8015420:	3001      	adds	r0, #1
 8015422:	d103      	bne.n	801542c <_printf_common+0xac>
 8015424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801542c:	3501      	adds	r5, #1
 801542e:	e7c6      	b.n	80153be <_printf_common+0x3e>
 8015430:	18e1      	adds	r1, r4, r3
 8015432:	1c5a      	adds	r2, r3, #1
 8015434:	2030      	movs	r0, #48	; 0x30
 8015436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801543a:	4422      	add	r2, r4
 801543c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015444:	3302      	adds	r3, #2
 8015446:	e7c7      	b.n	80153d8 <_printf_common+0x58>
 8015448:	2301      	movs	r3, #1
 801544a:	4622      	mov	r2, r4
 801544c:	4649      	mov	r1, r9
 801544e:	4638      	mov	r0, r7
 8015450:	47c0      	blx	r8
 8015452:	3001      	adds	r0, #1
 8015454:	d0e6      	beq.n	8015424 <_printf_common+0xa4>
 8015456:	3601      	adds	r6, #1
 8015458:	e7d9      	b.n	801540e <_printf_common+0x8e>
	...

0801545c <_printf_i>:
 801545c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015460:	7e0f      	ldrb	r7, [r1, #24]
 8015462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015464:	2f78      	cmp	r7, #120	; 0x78
 8015466:	4691      	mov	r9, r2
 8015468:	4680      	mov	r8, r0
 801546a:	460c      	mov	r4, r1
 801546c:	469a      	mov	sl, r3
 801546e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015472:	d807      	bhi.n	8015484 <_printf_i+0x28>
 8015474:	2f62      	cmp	r7, #98	; 0x62
 8015476:	d80a      	bhi.n	801548e <_printf_i+0x32>
 8015478:	2f00      	cmp	r7, #0
 801547a:	f000 80d8 	beq.w	801562e <_printf_i+0x1d2>
 801547e:	2f58      	cmp	r7, #88	; 0x58
 8015480:	f000 80a3 	beq.w	80155ca <_printf_i+0x16e>
 8015484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801548c:	e03a      	b.n	8015504 <_printf_i+0xa8>
 801548e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015492:	2b15      	cmp	r3, #21
 8015494:	d8f6      	bhi.n	8015484 <_printf_i+0x28>
 8015496:	a101      	add	r1, pc, #4	; (adr r1, 801549c <_printf_i+0x40>)
 8015498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801549c:	080154f5 	.word	0x080154f5
 80154a0:	08015509 	.word	0x08015509
 80154a4:	08015485 	.word	0x08015485
 80154a8:	08015485 	.word	0x08015485
 80154ac:	08015485 	.word	0x08015485
 80154b0:	08015485 	.word	0x08015485
 80154b4:	08015509 	.word	0x08015509
 80154b8:	08015485 	.word	0x08015485
 80154bc:	08015485 	.word	0x08015485
 80154c0:	08015485 	.word	0x08015485
 80154c4:	08015485 	.word	0x08015485
 80154c8:	08015615 	.word	0x08015615
 80154cc:	08015539 	.word	0x08015539
 80154d0:	080155f7 	.word	0x080155f7
 80154d4:	08015485 	.word	0x08015485
 80154d8:	08015485 	.word	0x08015485
 80154dc:	08015637 	.word	0x08015637
 80154e0:	08015485 	.word	0x08015485
 80154e4:	08015539 	.word	0x08015539
 80154e8:	08015485 	.word	0x08015485
 80154ec:	08015485 	.word	0x08015485
 80154f0:	080155ff 	.word	0x080155ff
 80154f4:	682b      	ldr	r3, [r5, #0]
 80154f6:	1d1a      	adds	r2, r3, #4
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	602a      	str	r2, [r5, #0]
 80154fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015504:	2301      	movs	r3, #1
 8015506:	e0a3      	b.n	8015650 <_printf_i+0x1f4>
 8015508:	6820      	ldr	r0, [r4, #0]
 801550a:	6829      	ldr	r1, [r5, #0]
 801550c:	0606      	lsls	r6, r0, #24
 801550e:	f101 0304 	add.w	r3, r1, #4
 8015512:	d50a      	bpl.n	801552a <_printf_i+0xce>
 8015514:	680e      	ldr	r6, [r1, #0]
 8015516:	602b      	str	r3, [r5, #0]
 8015518:	2e00      	cmp	r6, #0
 801551a:	da03      	bge.n	8015524 <_printf_i+0xc8>
 801551c:	232d      	movs	r3, #45	; 0x2d
 801551e:	4276      	negs	r6, r6
 8015520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015524:	485e      	ldr	r0, [pc, #376]	; (80156a0 <_printf_i+0x244>)
 8015526:	230a      	movs	r3, #10
 8015528:	e019      	b.n	801555e <_printf_i+0x102>
 801552a:	680e      	ldr	r6, [r1, #0]
 801552c:	602b      	str	r3, [r5, #0]
 801552e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015532:	bf18      	it	ne
 8015534:	b236      	sxthne	r6, r6
 8015536:	e7ef      	b.n	8015518 <_printf_i+0xbc>
 8015538:	682b      	ldr	r3, [r5, #0]
 801553a:	6820      	ldr	r0, [r4, #0]
 801553c:	1d19      	adds	r1, r3, #4
 801553e:	6029      	str	r1, [r5, #0]
 8015540:	0601      	lsls	r1, r0, #24
 8015542:	d501      	bpl.n	8015548 <_printf_i+0xec>
 8015544:	681e      	ldr	r6, [r3, #0]
 8015546:	e002      	b.n	801554e <_printf_i+0xf2>
 8015548:	0646      	lsls	r6, r0, #25
 801554a:	d5fb      	bpl.n	8015544 <_printf_i+0xe8>
 801554c:	881e      	ldrh	r6, [r3, #0]
 801554e:	4854      	ldr	r0, [pc, #336]	; (80156a0 <_printf_i+0x244>)
 8015550:	2f6f      	cmp	r7, #111	; 0x6f
 8015552:	bf0c      	ite	eq
 8015554:	2308      	moveq	r3, #8
 8015556:	230a      	movne	r3, #10
 8015558:	2100      	movs	r1, #0
 801555a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801555e:	6865      	ldr	r5, [r4, #4]
 8015560:	60a5      	str	r5, [r4, #8]
 8015562:	2d00      	cmp	r5, #0
 8015564:	bfa2      	ittt	ge
 8015566:	6821      	ldrge	r1, [r4, #0]
 8015568:	f021 0104 	bicge.w	r1, r1, #4
 801556c:	6021      	strge	r1, [r4, #0]
 801556e:	b90e      	cbnz	r6, 8015574 <_printf_i+0x118>
 8015570:	2d00      	cmp	r5, #0
 8015572:	d04d      	beq.n	8015610 <_printf_i+0x1b4>
 8015574:	4615      	mov	r5, r2
 8015576:	fbb6 f1f3 	udiv	r1, r6, r3
 801557a:	fb03 6711 	mls	r7, r3, r1, r6
 801557e:	5dc7      	ldrb	r7, [r0, r7]
 8015580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015584:	4637      	mov	r7, r6
 8015586:	42bb      	cmp	r3, r7
 8015588:	460e      	mov	r6, r1
 801558a:	d9f4      	bls.n	8015576 <_printf_i+0x11a>
 801558c:	2b08      	cmp	r3, #8
 801558e:	d10b      	bne.n	80155a8 <_printf_i+0x14c>
 8015590:	6823      	ldr	r3, [r4, #0]
 8015592:	07de      	lsls	r6, r3, #31
 8015594:	d508      	bpl.n	80155a8 <_printf_i+0x14c>
 8015596:	6923      	ldr	r3, [r4, #16]
 8015598:	6861      	ldr	r1, [r4, #4]
 801559a:	4299      	cmp	r1, r3
 801559c:	bfde      	ittt	le
 801559e:	2330      	movle	r3, #48	; 0x30
 80155a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80155a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80155a8:	1b52      	subs	r2, r2, r5
 80155aa:	6122      	str	r2, [r4, #16]
 80155ac:	f8cd a000 	str.w	sl, [sp]
 80155b0:	464b      	mov	r3, r9
 80155b2:	aa03      	add	r2, sp, #12
 80155b4:	4621      	mov	r1, r4
 80155b6:	4640      	mov	r0, r8
 80155b8:	f7ff fee2 	bl	8015380 <_printf_common>
 80155bc:	3001      	adds	r0, #1
 80155be:	d14c      	bne.n	801565a <_printf_i+0x1fe>
 80155c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155c4:	b004      	add	sp, #16
 80155c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155ca:	4835      	ldr	r0, [pc, #212]	; (80156a0 <_printf_i+0x244>)
 80155cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80155d0:	6829      	ldr	r1, [r5, #0]
 80155d2:	6823      	ldr	r3, [r4, #0]
 80155d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80155d8:	6029      	str	r1, [r5, #0]
 80155da:	061d      	lsls	r5, r3, #24
 80155dc:	d514      	bpl.n	8015608 <_printf_i+0x1ac>
 80155de:	07df      	lsls	r7, r3, #31
 80155e0:	bf44      	itt	mi
 80155e2:	f043 0320 	orrmi.w	r3, r3, #32
 80155e6:	6023      	strmi	r3, [r4, #0]
 80155e8:	b91e      	cbnz	r6, 80155f2 <_printf_i+0x196>
 80155ea:	6823      	ldr	r3, [r4, #0]
 80155ec:	f023 0320 	bic.w	r3, r3, #32
 80155f0:	6023      	str	r3, [r4, #0]
 80155f2:	2310      	movs	r3, #16
 80155f4:	e7b0      	b.n	8015558 <_printf_i+0xfc>
 80155f6:	6823      	ldr	r3, [r4, #0]
 80155f8:	f043 0320 	orr.w	r3, r3, #32
 80155fc:	6023      	str	r3, [r4, #0]
 80155fe:	2378      	movs	r3, #120	; 0x78
 8015600:	4828      	ldr	r0, [pc, #160]	; (80156a4 <_printf_i+0x248>)
 8015602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015606:	e7e3      	b.n	80155d0 <_printf_i+0x174>
 8015608:	0659      	lsls	r1, r3, #25
 801560a:	bf48      	it	mi
 801560c:	b2b6      	uxthmi	r6, r6
 801560e:	e7e6      	b.n	80155de <_printf_i+0x182>
 8015610:	4615      	mov	r5, r2
 8015612:	e7bb      	b.n	801558c <_printf_i+0x130>
 8015614:	682b      	ldr	r3, [r5, #0]
 8015616:	6826      	ldr	r6, [r4, #0]
 8015618:	6961      	ldr	r1, [r4, #20]
 801561a:	1d18      	adds	r0, r3, #4
 801561c:	6028      	str	r0, [r5, #0]
 801561e:	0635      	lsls	r5, r6, #24
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	d501      	bpl.n	8015628 <_printf_i+0x1cc>
 8015624:	6019      	str	r1, [r3, #0]
 8015626:	e002      	b.n	801562e <_printf_i+0x1d2>
 8015628:	0670      	lsls	r0, r6, #25
 801562a:	d5fb      	bpl.n	8015624 <_printf_i+0x1c8>
 801562c:	8019      	strh	r1, [r3, #0]
 801562e:	2300      	movs	r3, #0
 8015630:	6123      	str	r3, [r4, #16]
 8015632:	4615      	mov	r5, r2
 8015634:	e7ba      	b.n	80155ac <_printf_i+0x150>
 8015636:	682b      	ldr	r3, [r5, #0]
 8015638:	1d1a      	adds	r2, r3, #4
 801563a:	602a      	str	r2, [r5, #0]
 801563c:	681d      	ldr	r5, [r3, #0]
 801563e:	6862      	ldr	r2, [r4, #4]
 8015640:	2100      	movs	r1, #0
 8015642:	4628      	mov	r0, r5
 8015644:	f7ea fdec 	bl	8000220 <memchr>
 8015648:	b108      	cbz	r0, 801564e <_printf_i+0x1f2>
 801564a:	1b40      	subs	r0, r0, r5
 801564c:	6060      	str	r0, [r4, #4]
 801564e:	6863      	ldr	r3, [r4, #4]
 8015650:	6123      	str	r3, [r4, #16]
 8015652:	2300      	movs	r3, #0
 8015654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015658:	e7a8      	b.n	80155ac <_printf_i+0x150>
 801565a:	6923      	ldr	r3, [r4, #16]
 801565c:	462a      	mov	r2, r5
 801565e:	4649      	mov	r1, r9
 8015660:	4640      	mov	r0, r8
 8015662:	47d0      	blx	sl
 8015664:	3001      	adds	r0, #1
 8015666:	d0ab      	beq.n	80155c0 <_printf_i+0x164>
 8015668:	6823      	ldr	r3, [r4, #0]
 801566a:	079b      	lsls	r3, r3, #30
 801566c:	d413      	bmi.n	8015696 <_printf_i+0x23a>
 801566e:	68e0      	ldr	r0, [r4, #12]
 8015670:	9b03      	ldr	r3, [sp, #12]
 8015672:	4298      	cmp	r0, r3
 8015674:	bfb8      	it	lt
 8015676:	4618      	movlt	r0, r3
 8015678:	e7a4      	b.n	80155c4 <_printf_i+0x168>
 801567a:	2301      	movs	r3, #1
 801567c:	4632      	mov	r2, r6
 801567e:	4649      	mov	r1, r9
 8015680:	4640      	mov	r0, r8
 8015682:	47d0      	blx	sl
 8015684:	3001      	adds	r0, #1
 8015686:	d09b      	beq.n	80155c0 <_printf_i+0x164>
 8015688:	3501      	adds	r5, #1
 801568a:	68e3      	ldr	r3, [r4, #12]
 801568c:	9903      	ldr	r1, [sp, #12]
 801568e:	1a5b      	subs	r3, r3, r1
 8015690:	42ab      	cmp	r3, r5
 8015692:	dcf2      	bgt.n	801567a <_printf_i+0x21e>
 8015694:	e7eb      	b.n	801566e <_printf_i+0x212>
 8015696:	2500      	movs	r5, #0
 8015698:	f104 0619 	add.w	r6, r4, #25
 801569c:	e7f5      	b.n	801568a <_printf_i+0x22e>
 801569e:	bf00      	nop
 80156a0:	080187bb 	.word	0x080187bb
 80156a4:	080187cc 	.word	0x080187cc

080156a8 <_read_r>:
 80156a8:	b538      	push	{r3, r4, r5, lr}
 80156aa:	4d07      	ldr	r5, [pc, #28]	; (80156c8 <_read_r+0x20>)
 80156ac:	4604      	mov	r4, r0
 80156ae:	4608      	mov	r0, r1
 80156b0:	4611      	mov	r1, r2
 80156b2:	2200      	movs	r2, #0
 80156b4:	602a      	str	r2, [r5, #0]
 80156b6:	461a      	mov	r2, r3
 80156b8:	f7ec fc3c 	bl	8001f34 <_read>
 80156bc:	1c43      	adds	r3, r0, #1
 80156be:	d102      	bne.n	80156c6 <_read_r+0x1e>
 80156c0:	682b      	ldr	r3, [r5, #0]
 80156c2:	b103      	cbz	r3, 80156c6 <_read_r+0x1e>
 80156c4:	6023      	str	r3, [r4, #0]
 80156c6:	bd38      	pop	{r3, r4, r5, pc}
 80156c8:	2004f2e8 	.word	0x2004f2e8

080156cc <__swbuf_r>:
 80156cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ce:	460e      	mov	r6, r1
 80156d0:	4614      	mov	r4, r2
 80156d2:	4605      	mov	r5, r0
 80156d4:	b118      	cbz	r0, 80156de <__swbuf_r+0x12>
 80156d6:	6983      	ldr	r3, [r0, #24]
 80156d8:	b90b      	cbnz	r3, 80156de <__swbuf_r+0x12>
 80156da:	f7ff f8dd 	bl	8014898 <__sinit>
 80156de:	4b21      	ldr	r3, [pc, #132]	; (8015764 <__swbuf_r+0x98>)
 80156e0:	429c      	cmp	r4, r3
 80156e2:	d12b      	bne.n	801573c <__swbuf_r+0x70>
 80156e4:	686c      	ldr	r4, [r5, #4]
 80156e6:	69a3      	ldr	r3, [r4, #24]
 80156e8:	60a3      	str	r3, [r4, #8]
 80156ea:	89a3      	ldrh	r3, [r4, #12]
 80156ec:	071a      	lsls	r2, r3, #28
 80156ee:	d52f      	bpl.n	8015750 <__swbuf_r+0x84>
 80156f0:	6923      	ldr	r3, [r4, #16]
 80156f2:	b36b      	cbz	r3, 8015750 <__swbuf_r+0x84>
 80156f4:	6923      	ldr	r3, [r4, #16]
 80156f6:	6820      	ldr	r0, [r4, #0]
 80156f8:	1ac0      	subs	r0, r0, r3
 80156fa:	6963      	ldr	r3, [r4, #20]
 80156fc:	b2f6      	uxtb	r6, r6
 80156fe:	4283      	cmp	r3, r0
 8015700:	4637      	mov	r7, r6
 8015702:	dc04      	bgt.n	801570e <__swbuf_r+0x42>
 8015704:	4621      	mov	r1, r4
 8015706:	4628      	mov	r0, r5
 8015708:	f7ff fc20 	bl	8014f4c <_fflush_r>
 801570c:	bb30      	cbnz	r0, 801575c <__swbuf_r+0x90>
 801570e:	68a3      	ldr	r3, [r4, #8]
 8015710:	3b01      	subs	r3, #1
 8015712:	60a3      	str	r3, [r4, #8]
 8015714:	6823      	ldr	r3, [r4, #0]
 8015716:	1c5a      	adds	r2, r3, #1
 8015718:	6022      	str	r2, [r4, #0]
 801571a:	701e      	strb	r6, [r3, #0]
 801571c:	6963      	ldr	r3, [r4, #20]
 801571e:	3001      	adds	r0, #1
 8015720:	4283      	cmp	r3, r0
 8015722:	d004      	beq.n	801572e <__swbuf_r+0x62>
 8015724:	89a3      	ldrh	r3, [r4, #12]
 8015726:	07db      	lsls	r3, r3, #31
 8015728:	d506      	bpl.n	8015738 <__swbuf_r+0x6c>
 801572a:	2e0a      	cmp	r6, #10
 801572c:	d104      	bne.n	8015738 <__swbuf_r+0x6c>
 801572e:	4621      	mov	r1, r4
 8015730:	4628      	mov	r0, r5
 8015732:	f7ff fc0b 	bl	8014f4c <_fflush_r>
 8015736:	b988      	cbnz	r0, 801575c <__swbuf_r+0x90>
 8015738:	4638      	mov	r0, r7
 801573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801573c:	4b0a      	ldr	r3, [pc, #40]	; (8015768 <__swbuf_r+0x9c>)
 801573e:	429c      	cmp	r4, r3
 8015740:	d101      	bne.n	8015746 <__swbuf_r+0x7a>
 8015742:	68ac      	ldr	r4, [r5, #8]
 8015744:	e7cf      	b.n	80156e6 <__swbuf_r+0x1a>
 8015746:	4b09      	ldr	r3, [pc, #36]	; (801576c <__swbuf_r+0xa0>)
 8015748:	429c      	cmp	r4, r3
 801574a:	bf08      	it	eq
 801574c:	68ec      	ldreq	r4, [r5, #12]
 801574e:	e7ca      	b.n	80156e6 <__swbuf_r+0x1a>
 8015750:	4621      	mov	r1, r4
 8015752:	4628      	mov	r0, r5
 8015754:	f000 f80c 	bl	8015770 <__swsetup_r>
 8015758:	2800      	cmp	r0, #0
 801575a:	d0cb      	beq.n	80156f4 <__swbuf_r+0x28>
 801575c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015760:	e7ea      	b.n	8015738 <__swbuf_r+0x6c>
 8015762:	bf00      	nop
 8015764:	080186b8 	.word	0x080186b8
 8015768:	080186d8 	.word	0x080186d8
 801576c:	08018698 	.word	0x08018698

08015770 <__swsetup_r>:
 8015770:	4b32      	ldr	r3, [pc, #200]	; (801583c <__swsetup_r+0xcc>)
 8015772:	b570      	push	{r4, r5, r6, lr}
 8015774:	681d      	ldr	r5, [r3, #0]
 8015776:	4606      	mov	r6, r0
 8015778:	460c      	mov	r4, r1
 801577a:	b125      	cbz	r5, 8015786 <__swsetup_r+0x16>
 801577c:	69ab      	ldr	r3, [r5, #24]
 801577e:	b913      	cbnz	r3, 8015786 <__swsetup_r+0x16>
 8015780:	4628      	mov	r0, r5
 8015782:	f7ff f889 	bl	8014898 <__sinit>
 8015786:	4b2e      	ldr	r3, [pc, #184]	; (8015840 <__swsetup_r+0xd0>)
 8015788:	429c      	cmp	r4, r3
 801578a:	d10f      	bne.n	80157ac <__swsetup_r+0x3c>
 801578c:	686c      	ldr	r4, [r5, #4]
 801578e:	89a3      	ldrh	r3, [r4, #12]
 8015790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015794:	0719      	lsls	r1, r3, #28
 8015796:	d42c      	bmi.n	80157f2 <__swsetup_r+0x82>
 8015798:	06dd      	lsls	r5, r3, #27
 801579a:	d411      	bmi.n	80157c0 <__swsetup_r+0x50>
 801579c:	2309      	movs	r3, #9
 801579e:	6033      	str	r3, [r6, #0]
 80157a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80157a4:	81a3      	strh	r3, [r4, #12]
 80157a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80157aa:	e03e      	b.n	801582a <__swsetup_r+0xba>
 80157ac:	4b25      	ldr	r3, [pc, #148]	; (8015844 <__swsetup_r+0xd4>)
 80157ae:	429c      	cmp	r4, r3
 80157b0:	d101      	bne.n	80157b6 <__swsetup_r+0x46>
 80157b2:	68ac      	ldr	r4, [r5, #8]
 80157b4:	e7eb      	b.n	801578e <__swsetup_r+0x1e>
 80157b6:	4b24      	ldr	r3, [pc, #144]	; (8015848 <__swsetup_r+0xd8>)
 80157b8:	429c      	cmp	r4, r3
 80157ba:	bf08      	it	eq
 80157bc:	68ec      	ldreq	r4, [r5, #12]
 80157be:	e7e6      	b.n	801578e <__swsetup_r+0x1e>
 80157c0:	0758      	lsls	r0, r3, #29
 80157c2:	d512      	bpl.n	80157ea <__swsetup_r+0x7a>
 80157c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157c6:	b141      	cbz	r1, 80157da <__swsetup_r+0x6a>
 80157c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157cc:	4299      	cmp	r1, r3
 80157ce:	d002      	beq.n	80157d6 <__swsetup_r+0x66>
 80157d0:	4630      	mov	r0, r6
 80157d2:	f7ff fc2f 	bl	8015034 <_free_r>
 80157d6:	2300      	movs	r3, #0
 80157d8:	6363      	str	r3, [r4, #52]	; 0x34
 80157da:	89a3      	ldrh	r3, [r4, #12]
 80157dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80157e0:	81a3      	strh	r3, [r4, #12]
 80157e2:	2300      	movs	r3, #0
 80157e4:	6063      	str	r3, [r4, #4]
 80157e6:	6923      	ldr	r3, [r4, #16]
 80157e8:	6023      	str	r3, [r4, #0]
 80157ea:	89a3      	ldrh	r3, [r4, #12]
 80157ec:	f043 0308 	orr.w	r3, r3, #8
 80157f0:	81a3      	strh	r3, [r4, #12]
 80157f2:	6923      	ldr	r3, [r4, #16]
 80157f4:	b94b      	cbnz	r3, 801580a <__swsetup_r+0x9a>
 80157f6:	89a3      	ldrh	r3, [r4, #12]
 80157f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80157fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015800:	d003      	beq.n	801580a <__swsetup_r+0x9a>
 8015802:	4621      	mov	r1, r4
 8015804:	4630      	mov	r0, r6
 8015806:	f000 f84d 	bl	80158a4 <__smakebuf_r>
 801580a:	89a0      	ldrh	r0, [r4, #12]
 801580c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015810:	f010 0301 	ands.w	r3, r0, #1
 8015814:	d00a      	beq.n	801582c <__swsetup_r+0xbc>
 8015816:	2300      	movs	r3, #0
 8015818:	60a3      	str	r3, [r4, #8]
 801581a:	6963      	ldr	r3, [r4, #20]
 801581c:	425b      	negs	r3, r3
 801581e:	61a3      	str	r3, [r4, #24]
 8015820:	6923      	ldr	r3, [r4, #16]
 8015822:	b943      	cbnz	r3, 8015836 <__swsetup_r+0xc6>
 8015824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015828:	d1ba      	bne.n	80157a0 <__swsetup_r+0x30>
 801582a:	bd70      	pop	{r4, r5, r6, pc}
 801582c:	0781      	lsls	r1, r0, #30
 801582e:	bf58      	it	pl
 8015830:	6963      	ldrpl	r3, [r4, #20]
 8015832:	60a3      	str	r3, [r4, #8]
 8015834:	e7f4      	b.n	8015820 <__swsetup_r+0xb0>
 8015836:	2000      	movs	r0, #0
 8015838:	e7f7      	b.n	801582a <__swsetup_r+0xba>
 801583a:	bf00      	nop
 801583c:	20001834 	.word	0x20001834
 8015840:	080186b8 	.word	0x080186b8
 8015844:	080186d8 	.word	0x080186d8
 8015848:	08018698 	.word	0x08018698

0801584c <abort>:
 801584c:	b508      	push	{r3, lr}
 801584e:	2006      	movs	r0, #6
 8015850:	f000 f890 	bl	8015974 <raise>
 8015854:	2001      	movs	r0, #1
 8015856:	f7ec fb63 	bl	8001f20 <_exit>

0801585a <__swhatbuf_r>:
 801585a:	b570      	push	{r4, r5, r6, lr}
 801585c:	460e      	mov	r6, r1
 801585e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015862:	2900      	cmp	r1, #0
 8015864:	b096      	sub	sp, #88	; 0x58
 8015866:	4614      	mov	r4, r2
 8015868:	461d      	mov	r5, r3
 801586a:	da08      	bge.n	801587e <__swhatbuf_r+0x24>
 801586c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015870:	2200      	movs	r2, #0
 8015872:	602a      	str	r2, [r5, #0]
 8015874:	061a      	lsls	r2, r3, #24
 8015876:	d410      	bmi.n	801589a <__swhatbuf_r+0x40>
 8015878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801587c:	e00e      	b.n	801589c <__swhatbuf_r+0x42>
 801587e:	466a      	mov	r2, sp
 8015880:	f000 f894 	bl	80159ac <_fstat_r>
 8015884:	2800      	cmp	r0, #0
 8015886:	dbf1      	blt.n	801586c <__swhatbuf_r+0x12>
 8015888:	9a01      	ldr	r2, [sp, #4]
 801588a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801588e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015892:	425a      	negs	r2, r3
 8015894:	415a      	adcs	r2, r3
 8015896:	602a      	str	r2, [r5, #0]
 8015898:	e7ee      	b.n	8015878 <__swhatbuf_r+0x1e>
 801589a:	2340      	movs	r3, #64	; 0x40
 801589c:	2000      	movs	r0, #0
 801589e:	6023      	str	r3, [r4, #0]
 80158a0:	b016      	add	sp, #88	; 0x58
 80158a2:	bd70      	pop	{r4, r5, r6, pc}

080158a4 <__smakebuf_r>:
 80158a4:	898b      	ldrh	r3, [r1, #12]
 80158a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80158a8:	079d      	lsls	r5, r3, #30
 80158aa:	4606      	mov	r6, r0
 80158ac:	460c      	mov	r4, r1
 80158ae:	d507      	bpl.n	80158c0 <__smakebuf_r+0x1c>
 80158b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80158b4:	6023      	str	r3, [r4, #0]
 80158b6:	6123      	str	r3, [r4, #16]
 80158b8:	2301      	movs	r3, #1
 80158ba:	6163      	str	r3, [r4, #20]
 80158bc:	b002      	add	sp, #8
 80158be:	bd70      	pop	{r4, r5, r6, pc}
 80158c0:	ab01      	add	r3, sp, #4
 80158c2:	466a      	mov	r2, sp
 80158c4:	f7ff ffc9 	bl	801585a <__swhatbuf_r>
 80158c8:	9900      	ldr	r1, [sp, #0]
 80158ca:	4605      	mov	r5, r0
 80158cc:	4630      	mov	r0, r6
 80158ce:	f7ff f8ef 	bl	8014ab0 <_malloc_r>
 80158d2:	b948      	cbnz	r0, 80158e8 <__smakebuf_r+0x44>
 80158d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158d8:	059a      	lsls	r2, r3, #22
 80158da:	d4ef      	bmi.n	80158bc <__smakebuf_r+0x18>
 80158dc:	f023 0303 	bic.w	r3, r3, #3
 80158e0:	f043 0302 	orr.w	r3, r3, #2
 80158e4:	81a3      	strh	r3, [r4, #12]
 80158e6:	e7e3      	b.n	80158b0 <__smakebuf_r+0xc>
 80158e8:	4b0d      	ldr	r3, [pc, #52]	; (8015920 <__smakebuf_r+0x7c>)
 80158ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80158ec:	89a3      	ldrh	r3, [r4, #12]
 80158ee:	6020      	str	r0, [r4, #0]
 80158f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158f4:	81a3      	strh	r3, [r4, #12]
 80158f6:	9b00      	ldr	r3, [sp, #0]
 80158f8:	6163      	str	r3, [r4, #20]
 80158fa:	9b01      	ldr	r3, [sp, #4]
 80158fc:	6120      	str	r0, [r4, #16]
 80158fe:	b15b      	cbz	r3, 8015918 <__smakebuf_r+0x74>
 8015900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015904:	4630      	mov	r0, r6
 8015906:	f000 f863 	bl	80159d0 <_isatty_r>
 801590a:	b128      	cbz	r0, 8015918 <__smakebuf_r+0x74>
 801590c:	89a3      	ldrh	r3, [r4, #12]
 801590e:	f023 0303 	bic.w	r3, r3, #3
 8015912:	f043 0301 	orr.w	r3, r3, #1
 8015916:	81a3      	strh	r3, [r4, #12]
 8015918:	89a0      	ldrh	r0, [r4, #12]
 801591a:	4305      	orrs	r5, r0
 801591c:	81a5      	strh	r5, [r4, #12]
 801591e:	e7cd      	b.n	80158bc <__smakebuf_r+0x18>
 8015920:	08014831 	.word	0x08014831

08015924 <_raise_r>:
 8015924:	291f      	cmp	r1, #31
 8015926:	b538      	push	{r3, r4, r5, lr}
 8015928:	4604      	mov	r4, r0
 801592a:	460d      	mov	r5, r1
 801592c:	d904      	bls.n	8015938 <_raise_r+0x14>
 801592e:	2316      	movs	r3, #22
 8015930:	6003      	str	r3, [r0, #0]
 8015932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015936:	bd38      	pop	{r3, r4, r5, pc}
 8015938:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801593a:	b112      	cbz	r2, 8015942 <_raise_r+0x1e>
 801593c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015940:	b94b      	cbnz	r3, 8015956 <_raise_r+0x32>
 8015942:	4620      	mov	r0, r4
 8015944:	f000 f830 	bl	80159a8 <_getpid_r>
 8015948:	462a      	mov	r2, r5
 801594a:	4601      	mov	r1, r0
 801594c:	4620      	mov	r0, r4
 801594e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015952:	f000 b817 	b.w	8015984 <_kill_r>
 8015956:	2b01      	cmp	r3, #1
 8015958:	d00a      	beq.n	8015970 <_raise_r+0x4c>
 801595a:	1c59      	adds	r1, r3, #1
 801595c:	d103      	bne.n	8015966 <_raise_r+0x42>
 801595e:	2316      	movs	r3, #22
 8015960:	6003      	str	r3, [r0, #0]
 8015962:	2001      	movs	r0, #1
 8015964:	e7e7      	b.n	8015936 <_raise_r+0x12>
 8015966:	2400      	movs	r4, #0
 8015968:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801596c:	4628      	mov	r0, r5
 801596e:	4798      	blx	r3
 8015970:	2000      	movs	r0, #0
 8015972:	e7e0      	b.n	8015936 <_raise_r+0x12>

08015974 <raise>:
 8015974:	4b02      	ldr	r3, [pc, #8]	; (8015980 <raise+0xc>)
 8015976:	4601      	mov	r1, r0
 8015978:	6818      	ldr	r0, [r3, #0]
 801597a:	f7ff bfd3 	b.w	8015924 <_raise_r>
 801597e:	bf00      	nop
 8015980:	20001834 	.word	0x20001834

08015984 <_kill_r>:
 8015984:	b538      	push	{r3, r4, r5, lr}
 8015986:	4d07      	ldr	r5, [pc, #28]	; (80159a4 <_kill_r+0x20>)
 8015988:	2300      	movs	r3, #0
 801598a:	4604      	mov	r4, r0
 801598c:	4608      	mov	r0, r1
 801598e:	4611      	mov	r1, r2
 8015990:	602b      	str	r3, [r5, #0]
 8015992:	f7ec fab3 	bl	8001efc <_kill>
 8015996:	1c43      	adds	r3, r0, #1
 8015998:	d102      	bne.n	80159a0 <_kill_r+0x1c>
 801599a:	682b      	ldr	r3, [r5, #0]
 801599c:	b103      	cbz	r3, 80159a0 <_kill_r+0x1c>
 801599e:	6023      	str	r3, [r4, #0]
 80159a0:	bd38      	pop	{r3, r4, r5, pc}
 80159a2:	bf00      	nop
 80159a4:	2004f2e8 	.word	0x2004f2e8

080159a8 <_getpid_r>:
 80159a8:	f7ec baa0 	b.w	8001eec <_getpid>

080159ac <_fstat_r>:
 80159ac:	b538      	push	{r3, r4, r5, lr}
 80159ae:	4d07      	ldr	r5, [pc, #28]	; (80159cc <_fstat_r+0x20>)
 80159b0:	2300      	movs	r3, #0
 80159b2:	4604      	mov	r4, r0
 80159b4:	4608      	mov	r0, r1
 80159b6:	4611      	mov	r1, r2
 80159b8:	602b      	str	r3, [r5, #0]
 80159ba:	f7ec fb00 	bl	8001fbe <_fstat>
 80159be:	1c43      	adds	r3, r0, #1
 80159c0:	d102      	bne.n	80159c8 <_fstat_r+0x1c>
 80159c2:	682b      	ldr	r3, [r5, #0]
 80159c4:	b103      	cbz	r3, 80159c8 <_fstat_r+0x1c>
 80159c6:	6023      	str	r3, [r4, #0]
 80159c8:	bd38      	pop	{r3, r4, r5, pc}
 80159ca:	bf00      	nop
 80159cc:	2004f2e8 	.word	0x2004f2e8

080159d0 <_isatty_r>:
 80159d0:	b538      	push	{r3, r4, r5, lr}
 80159d2:	4d06      	ldr	r5, [pc, #24]	; (80159ec <_isatty_r+0x1c>)
 80159d4:	2300      	movs	r3, #0
 80159d6:	4604      	mov	r4, r0
 80159d8:	4608      	mov	r0, r1
 80159da:	602b      	str	r3, [r5, #0]
 80159dc:	f7ec faff 	bl	8001fde <_isatty>
 80159e0:	1c43      	adds	r3, r0, #1
 80159e2:	d102      	bne.n	80159ea <_isatty_r+0x1a>
 80159e4:	682b      	ldr	r3, [r5, #0]
 80159e6:	b103      	cbz	r3, 80159ea <_isatty_r+0x1a>
 80159e8:	6023      	str	r3, [r4, #0]
 80159ea:	bd38      	pop	{r3, r4, r5, pc}
 80159ec:	2004f2e8 	.word	0x2004f2e8

080159f0 <_init>:
 80159f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f2:	bf00      	nop
 80159f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159f6:	bc08      	pop	{r3}
 80159f8:	469e      	mov	lr, r3
 80159fa:	4770      	bx	lr

080159fc <_fini>:
 80159fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159fe:	bf00      	nop
 8015a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a02:	bc08      	pop	{r3}
 8015a04:	469e      	mov	lr, r3
 8015a06:	4770      	bx	lr
