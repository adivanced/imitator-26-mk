
imitator-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a34  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c0c  08005c0c  00021a38  2**0
                  CONTENTS
  4 .ARM          00000008  08005c0c  08005c0c  00015c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c14  08005c14  00021a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001a38  20000000  08005c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003f5ac  20001a38  08007654  00021a38  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040fe4  08007654  00030fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021a38  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008679  00000000  00000000  00021a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ae  00000000  00000000  0002a0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0002b790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  0002be98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024faf  00000000  00000000  0002c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098a6  00000000  00000000  00051497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e41a1  00000000  00000000  0005ad3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013eede  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b60  00000000  00000000  0013ef30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20001a38 	.word	0x20001a38
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005be4 	.word	0x08005be4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20001a3c 	.word	0x20001a3c
 8000204:	08005be4 	.word	0x08005be4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <keyboard_GPIO_init>:
uint32_t key_count[4][3] = {0};
uint32_t stage = 0;
uint16_t keyboard_state = 0;


void keyboard_GPIO_init(){
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2110      	movs	r1, #16
 8000534:	4826      	ldr	r0, [pc, #152]	; (80005d0 <keyboard_GPIO_init+0xb4>)
 8000536:	f003 fea3 	bl	8004280 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2101      	movs	r1, #1
 800053e:	4825      	ldr	r0, [pc, #148]	; (80005d4 <keyboard_GPIO_init+0xb8>)
 8000540:	f003 fe9e 	bl	8004280 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	21c0      	movs	r1, #192	; 0xc0
 8000548:	4823      	ldr	r0, [pc, #140]	; (80005d8 <keyboard_GPIO_init+0xbc>)
 800054a:	f003 fe99 	bl	8004280 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800054e:	2310      	movs	r3, #16
 8000550:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000556:	2302      	movs	r3, #2
 8000558:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4619      	mov	r1, r3
 8000562:	481b      	ldr	r0, [pc, #108]	; (80005d0 <keyboard_GPIO_init+0xb4>)
 8000564:	f003 fcc8 	bl	8003ef8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI2 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000568:	230c      	movs	r3, #12
 800056a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000570:	2302      	movs	r3, #2
 8000572:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4619      	mov	r1, r3
 8000578:	4816      	ldr	r0, [pc, #88]	; (80005d4 <keyboard_GPIO_init+0xb8>)
 800057a:	f003 fcbd 	bl	8003ef8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800057e:	2301      	movs	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000586:	2302      	movs	r3, #2
 8000588:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <keyboard_GPIO_init+0xb8>)
 8000594:	f003 fcb0 	bl	8003ef8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG7 PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000598:	23c0      	movs	r3, #192	; 0xc0
 800059a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005a0:	2302      	movs	r3, #2
 80005a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <keyboard_GPIO_init+0xbc>)
 80005ae:	f003 fca3 	bl	8003ef8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ba:	2302      	movs	r3, #2
 80005bc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <keyboard_GPIO_init+0xc0>)
 80005c4:	f003 fc98 	bl	8003ef8 <HAL_GPIO_Init>
}
 80005c8:	bf00      	nop
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020400 	.word	0x40020400
 80005d4:	40022000 	.word	0x40022000
 80005d8:	40021800 	.word	0x40021800
 80005dc:	40021c00 	.word	0x40021c00

080005e0 <get_current_keyboard_state>:

void get_current_keyboard_state(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	stage = (stage+1)%8;
 80005e4:	4b95      	ldr	r3, [pc, #596]	; (800083c <get_current_keyboard_state+0x25c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	4a93      	ldr	r2, [pc, #588]	; (800083c <get_current_keyboard_state+0x25c>)
 80005f0:	6013      	str	r3, [r2, #0]
	switch(stage){
 80005f2:	4b92      	ldr	r3, [pc, #584]	; (800083c <get_current_keyboard_state+0x25c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	f200 82a3 	bhi.w	8000b42 <get_current_keyboard_state+0x562>
 80005fc:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <get_current_keyboard_state+0x24>)
 80005fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000602:	bf00      	nop
 8000604:	08000625 	.word	0x08000625
 8000608:	0800064f 	.word	0x0800064f
 800060c:	0800075f 	.word	0x0800075f
 8000610:	08000789 	.word	0x08000789
 8000614:	080008b5 	.word	0x080008b5
 8000618:	080008df 	.word	0x080008df
 800061c:	080009ef 	.word	0x080009ef
 8000620:	08000a19 	.word	0x08000a19
		case 0:{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	4885      	ldr	r0, [pc, #532]	; (8000840 <get_current_keyboard_state+0x260>)
 800062a:	f003 fe29 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);			
 800062e:	2200      	movs	r2, #0
 8000630:	2110      	movs	r1, #16
 8000632:	4884      	ldr	r0, [pc, #528]	; (8000844 <get_current_keyboard_state+0x264>)
 8000634:	f003 fe24 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2101      	movs	r1, #1
 800063c:	4882      	ldr	r0, [pc, #520]	; (8000848 <get_current_keyboard_state+0x268>)
 800063e:	f003 fe1f 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2140      	movs	r1, #64	; 0x40
 8000646:	487e      	ldr	r0, [pc, #504]	; (8000840 <get_current_keyboard_state+0x260>)
 8000648:	f003 fe1a 	bl	8004280 <HAL_GPIO_WritePin>
			break;
 800064c:	e279      	b.n	8000b42 <get_current_keyboard_state+0x562>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[0][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][0]++;}}else{if(key_count[0][0]){key_count[0][0]--;}}
 800064e:	2140      	movs	r1, #64	; 0x40
 8000650:	487e      	ldr	r0, [pc, #504]	; (800084c <get_current_keyboard_state+0x26c>)
 8000652:	f003 fdfd 	bl	8004250 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d109      	bne.n	8000670 <get_current_keyboard_state+0x90>
 800065c:	4b7c      	ldr	r3, [pc, #496]	; (8000850 <get_current_keyboard_state+0x270>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b15      	cmp	r3, #21
 8000662:	d80e      	bhi.n	8000682 <get_current_keyboard_state+0xa2>
 8000664:	4b7a      	ldr	r3, [pc, #488]	; (8000850 <get_current_keyboard_state+0x270>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	4a79      	ldr	r2, [pc, #484]	; (8000850 <get_current_keyboard_state+0x270>)
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	e008      	b.n	8000682 <get_current_keyboard_state+0xa2>
 8000670:	4b77      	ldr	r3, [pc, #476]	; (8000850 <get_current_keyboard_state+0x270>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d004      	beq.n	8000682 <get_current_keyboard_state+0xa2>
 8000678:	4b75      	ldr	r3, [pc, #468]	; (8000850 <get_current_keyboard_state+0x270>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	4a74      	ldr	r2, [pc, #464]	; (8000850 <get_current_keyboard_state+0x270>)
 8000680:	6013      	str	r3, [r2, #0]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[0][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][1]++;}}else{if(key_count[0][1]){key_count[0][1]--;}}
 8000682:	2108      	movs	r1, #8
 8000684:	4870      	ldr	r0, [pc, #448]	; (8000848 <get_current_keyboard_state+0x268>)
 8000686:	f003 fde3 	bl	8004250 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d109      	bne.n	80006a4 <get_current_keyboard_state+0xc4>
 8000690:	4b6f      	ldr	r3, [pc, #444]	; (8000850 <get_current_keyboard_state+0x270>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	2b15      	cmp	r3, #21
 8000696:	d80e      	bhi.n	80006b6 <get_current_keyboard_state+0xd6>
 8000698:	4b6d      	ldr	r3, [pc, #436]	; (8000850 <get_current_keyboard_state+0x270>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	4a6c      	ldr	r2, [pc, #432]	; (8000850 <get_current_keyboard_state+0x270>)
 80006a0:	6053      	str	r3, [r2, #4]
 80006a2:	e008      	b.n	80006b6 <get_current_keyboard_state+0xd6>
 80006a4:	4b6a      	ldr	r3, [pc, #424]	; (8000850 <get_current_keyboard_state+0x270>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d004      	beq.n	80006b6 <get_current_keyboard_state+0xd6>
 80006ac:	4b68      	ldr	r3, [pc, #416]	; (8000850 <get_current_keyboard_state+0x270>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	4a67      	ldr	r2, [pc, #412]	; (8000850 <get_current_keyboard_state+0x270>)
 80006b4:	6053      	str	r3, [r2, #4]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[0][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][2]++;}}else{if(key_count[0][2]){key_count[0][2]--;}}
 80006b6:	2104      	movs	r1, #4
 80006b8:	4863      	ldr	r0, [pc, #396]	; (8000848 <get_current_keyboard_state+0x268>)
 80006ba:	f003 fdc9 	bl	8004250 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d109      	bne.n	80006d8 <get_current_keyboard_state+0xf8>
 80006c4:	4b62      	ldr	r3, [pc, #392]	; (8000850 <get_current_keyboard_state+0x270>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	2b15      	cmp	r3, #21
 80006ca:	d80e      	bhi.n	80006ea <get_current_keyboard_state+0x10a>
 80006cc:	4b60      	ldr	r3, [pc, #384]	; (8000850 <get_current_keyboard_state+0x270>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	3301      	adds	r3, #1
 80006d2:	4a5f      	ldr	r2, [pc, #380]	; (8000850 <get_current_keyboard_state+0x270>)
 80006d4:	6093      	str	r3, [r2, #8]
 80006d6:	e008      	b.n	80006ea <get_current_keyboard_state+0x10a>
 80006d8:	4b5d      	ldr	r3, [pc, #372]	; (8000850 <get_current_keyboard_state+0x270>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <get_current_keyboard_state+0x10a>
 80006e0:	4b5b      	ldr	r3, [pc, #364]	; (8000850 <get_current_keyboard_state+0x270>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	4a5a      	ldr	r2, [pc, #360]	; (8000850 <get_current_keyboard_state+0x270>)
 80006e8:	6093      	str	r3, [r2, #8]

			if(key_count[0][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_TEST;}else{keyboard_state&=~BUTTON_TEST;}
 80006ea:	4b59      	ldr	r3, [pc, #356]	; (8000850 <get_current_keyboard_state+0x270>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b0e      	cmp	r3, #14
 80006f0:	d907      	bls.n	8000702 <get_current_keyboard_state+0x122>
 80006f2:	4b58      	ldr	r3, [pc, #352]	; (8000854 <get_current_keyboard_state+0x274>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b55      	ldr	r3, [pc, #340]	; (8000854 <get_current_keyboard_state+0x274>)
 80006fe:	801a      	strh	r2, [r3, #0]
 8000700:	e006      	b.n	8000710 <get_current_keyboard_state+0x130>
 8000702:	4b54      	ldr	r3, [pc, #336]	; (8000854 <get_current_keyboard_state+0x274>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	f023 0301 	bic.w	r3, r3, #1
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b51      	ldr	r3, [pc, #324]	; (8000854 <get_current_keyboard_state+0x274>)
 800070e:	801a      	strh	r2, [r3, #0]
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 8000710:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <get_current_keyboard_state+0x270>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2b0e      	cmp	r3, #14
 8000716:	d907      	bls.n	8000728 <get_current_keyboard_state+0x148>
 8000718:	4b4e      	ldr	r3, [pc, #312]	; (8000854 <get_current_keyboard_state+0x274>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b4c      	ldr	r3, [pc, #304]	; (8000854 <get_current_keyboard_state+0x274>)
 8000724:	801a      	strh	r2, [r3, #0]
 8000726:	e006      	b.n	8000736 <get_current_keyboard_state+0x156>
 8000728:	4b4a      	ldr	r3, [pc, #296]	; (8000854 <get_current_keyboard_state+0x274>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	f023 0302 	bic.w	r3, r3, #2
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b48      	ldr	r3, [pc, #288]	; (8000854 <get_current_keyboard_state+0x274>)
 8000734:	801a      	strh	r2, [r3, #0]
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 8000736:	4b46      	ldr	r3, [pc, #280]	; (8000850 <get_current_keyboard_state+0x270>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	2b0e      	cmp	r3, #14
 800073c:	d907      	bls.n	800074e <get_current_keyboard_state+0x16e>
 800073e:	4b45      	ldr	r3, [pc, #276]	; (8000854 <get_current_keyboard_state+0x274>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b42      	ldr	r3, [pc, #264]	; (8000854 <get_current_keyboard_state+0x274>)
 800074a:	801a      	strh	r2, [r3, #0]
			break;
 800074c:	e1f9      	b.n	8000b42 <get_current_keyboard_state+0x562>
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <get_current_keyboard_state+0x274>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	f023 0304 	bic.w	r3, r3, #4
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <get_current_keyboard_state+0x274>)
 800075a:	801a      	strh	r2, [r3, #0]
			break;
 800075c:	e1f1      	b.n	8000b42 <get_current_keyboard_state+0x562>
		}
		case 2:{	
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	4837      	ldr	r0, [pc, #220]	; (8000840 <get_current_keyboard_state+0x260>)
 8000764:	f003 fd8c 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	4834      	ldr	r0, [pc, #208]	; (8000840 <get_current_keyboard_state+0x260>)
 800076e:	f003 fd87 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);	
 8000772:	2200      	movs	r2, #0
 8000774:	2101      	movs	r1, #1
 8000776:	4834      	ldr	r0, [pc, #208]	; (8000848 <get_current_keyboard_state+0x268>)
 8000778:	f003 fd82 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);			
 800077c:	2201      	movs	r2, #1
 800077e:	2110      	movs	r1, #16
 8000780:	4830      	ldr	r0, [pc, #192]	; (8000844 <get_current_keyboard_state+0x264>)
 8000782:	f003 fd7d 	bl	8004280 <HAL_GPIO_WritePin>
			break;
 8000786:	e1dc      	b.n	8000b42 <get_current_keyboard_state+0x562>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[1][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][0]++;}}else{if(key_count[1][0]){key_count[1][0]--;}}
 8000788:	2140      	movs	r1, #64	; 0x40
 800078a:	4830      	ldr	r0, [pc, #192]	; (800084c <get_current_keyboard_state+0x26c>)
 800078c:	f003 fd60 	bl	8004250 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d109      	bne.n	80007aa <get_current_keyboard_state+0x1ca>
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <get_current_keyboard_state+0x270>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	2b15      	cmp	r3, #21
 800079c:	d80e      	bhi.n	80007bc <get_current_keyboard_state+0x1dc>
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <get_current_keyboard_state+0x270>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a2a      	ldr	r2, [pc, #168]	; (8000850 <get_current_keyboard_state+0x270>)
 80007a6:	60d3      	str	r3, [r2, #12]
 80007a8:	e008      	b.n	80007bc <get_current_keyboard_state+0x1dc>
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <get_current_keyboard_state+0x270>)
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d004      	beq.n	80007bc <get_current_keyboard_state+0x1dc>
 80007b2:	4b27      	ldr	r3, [pc, #156]	; (8000850 <get_current_keyboard_state+0x270>)
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <get_current_keyboard_state+0x270>)
 80007ba:	60d3      	str	r3, [r2, #12]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[1][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][1]++;}}else{if(key_count[1][1]){key_count[1][1]--;}}
 80007bc:	2108      	movs	r1, #8
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <get_current_keyboard_state+0x268>)
 80007c0:	f003 fd46 	bl	8004250 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d109      	bne.n	80007de <get_current_keyboard_state+0x1fe>
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <get_current_keyboard_state+0x270>)
 80007cc:	691b      	ldr	r3, [r3, #16]
 80007ce:	2b15      	cmp	r3, #21
 80007d0:	d80e      	bhi.n	80007f0 <get_current_keyboard_state+0x210>
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <get_current_keyboard_state+0x270>)
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <get_current_keyboard_state+0x270>)
 80007da:	6113      	str	r3, [r2, #16]
 80007dc:	e008      	b.n	80007f0 <get_current_keyboard_state+0x210>
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <get_current_keyboard_state+0x270>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d004      	beq.n	80007f0 <get_current_keyboard_state+0x210>
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <get_current_keyboard_state+0x270>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a18      	ldr	r2, [pc, #96]	; (8000850 <get_current_keyboard_state+0x270>)
 80007ee:	6113      	str	r3, [r2, #16]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[1][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][2]++;}}else{if(key_count[1][2]){key_count[1][2]--;}}
 80007f0:	2104      	movs	r1, #4
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <get_current_keyboard_state+0x268>)
 80007f4:	f003 fd2c 	bl	8004250 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d109      	bne.n	8000812 <get_current_keyboard_state+0x232>
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <get_current_keyboard_state+0x270>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	2b15      	cmp	r3, #21
 8000804:	d80e      	bhi.n	8000824 <get_current_keyboard_state+0x244>
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <get_current_keyboard_state+0x270>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <get_current_keyboard_state+0x270>)
 800080e:	6153      	str	r3, [r2, #20]
 8000810:	e008      	b.n	8000824 <get_current_keyboard_state+0x244>
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <get_current_keyboard_state+0x270>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <get_current_keyboard_state+0x244>
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <get_current_keyboard_state+0x270>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	3b01      	subs	r3, #1
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <get_current_keyboard_state+0x270>)
 8000822:	6153      	str	r3, [r2, #20]
	
			if(key_count[1][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_CALIBRATION;}else{keyboard_state&=~BUTTON_CALIBRATION;}
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <get_current_keyboard_state+0x270>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	2b0e      	cmp	r3, #14
 800082a:	d915      	bls.n	8000858 <get_current_keyboard_state+0x278>
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <get_current_keyboard_state+0x274>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <get_current_keyboard_state+0x274>)
 8000838:	801a      	strh	r2, [r3, #0]
 800083a:	e014      	b.n	8000866 <get_current_keyboard_state+0x286>
 800083c:	20001a84 	.word	0x20001a84
 8000840:	40021800 	.word	0x40021800
 8000844:	40020400 	.word	0x40020400
 8000848:	40022000 	.word	0x40022000
 800084c:	40021c00 	.word	0x40021c00
 8000850:	20001a54 	.word	0x20001a54
 8000854:	20001a88 	.word	0x20001a88
 8000858:	4b92      	ldr	r3, [pc, #584]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	f023 0308 	bic.w	r3, r3, #8
 8000860:	b29a      	uxth	r2, r3
 8000862:	4b90      	ldr	r3, [pc, #576]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 8000864:	801a      	strh	r2, [r3, #0]
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 8000866:	4b90      	ldr	r3, [pc, #576]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	2b0e      	cmp	r3, #14
 800086c:	d907      	bls.n	800087e <get_current_keyboard_state+0x29e>
 800086e:	4b8d      	ldr	r3, [pc, #564]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b8a      	ldr	r3, [pc, #552]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 800087a:	801a      	strh	r2, [r3, #0]
 800087c:	e006      	b.n	800088c <get_current_keyboard_state+0x2ac>
 800087e:	4b89      	ldr	r3, [pc, #548]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	f023 0310 	bic.w	r3, r3, #16
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b86      	ldr	r3, [pc, #536]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 800088a:	801a      	strh	r2, [r3, #0]
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 800088c:	4b86      	ldr	r3, [pc, #536]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	2b0e      	cmp	r3, #14
 8000892:	d907      	bls.n	80008a4 <get_current_keyboard_state+0x2c4>
 8000894:	4b83      	ldr	r3, [pc, #524]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b81      	ldr	r3, [pc, #516]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80008a0:	801a      	strh	r2, [r3, #0]
			break;
 80008a2:	e14e      	b.n	8000b42 <get_current_keyboard_state+0x562>
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 80008a4:	4b7f      	ldr	r3, [pc, #508]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	f023 0320 	bic.w	r3, r3, #32
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b7d      	ldr	r3, [pc, #500]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80008b0:	801a      	strh	r2, [r3, #0]
			break;
 80008b2:	e146      	b.n	8000b42 <get_current_keyboard_state+0x562>
		}
		case 4:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2110      	movs	r1, #16
 80008b8:	487c      	ldr	r0, [pc, #496]	; (8000aac <get_current_keyboard_state+0x4cc>)
 80008ba:	f003 fce1 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	487b      	ldr	r0, [pc, #492]	; (8000ab0 <get_current_keyboard_state+0x4d0>)
 80008c4:	f003 fcdc 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2101      	movs	r1, #1
 80008cc:	4879      	ldr	r0, [pc, #484]	; (8000ab4 <get_current_keyboard_state+0x4d4>)
 80008ce:	f003 fcd7 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);			
 80008d2:	2201      	movs	r2, #1
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	4876      	ldr	r0, [pc, #472]	; (8000ab0 <get_current_keyboard_state+0x4d0>)
 80008d8:	f003 fcd2 	bl	8004280 <HAL_GPIO_WritePin>
			break;
 80008dc:	e131      	b.n	8000b42 <get_current_keyboard_state+0x562>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[2][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][0]++;}}else{if(key_count[2][0]){key_count[2][0]--;}}
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	4875      	ldr	r0, [pc, #468]	; (8000ab8 <get_current_keyboard_state+0x4d8>)
 80008e2:	f003 fcb5 	bl	8004250 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d109      	bne.n	8000900 <get_current_keyboard_state+0x320>
 80008ec:	4b6e      	ldr	r3, [pc, #440]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	2b15      	cmp	r3, #21
 80008f2:	d80e      	bhi.n	8000912 <get_current_keyboard_state+0x332>
 80008f4:	4b6c      	ldr	r3, [pc, #432]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	3301      	adds	r3, #1
 80008fa:	4a6b      	ldr	r2, [pc, #428]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 80008fc:	6193      	str	r3, [r2, #24]
 80008fe:	e008      	b.n	8000912 <get_current_keyboard_state+0x332>
 8000900:	4b69      	ldr	r3, [pc, #420]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d004      	beq.n	8000912 <get_current_keyboard_state+0x332>
 8000908:	4b67      	ldr	r3, [pc, #412]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	3b01      	subs	r3, #1
 800090e:	4a66      	ldr	r2, [pc, #408]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000910:	6193      	str	r3, [r2, #24]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[2][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][1]++;}}else{if(key_count[2][1]){key_count[2][1]--;}}
 8000912:	2108      	movs	r1, #8
 8000914:	4867      	ldr	r0, [pc, #412]	; (8000ab4 <get_current_keyboard_state+0x4d4>)
 8000916:	f003 fc9b 	bl	8004250 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b01      	cmp	r3, #1
 800091e:	d109      	bne.n	8000934 <get_current_keyboard_state+0x354>
 8000920:	4b61      	ldr	r3, [pc, #388]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	2b15      	cmp	r3, #21
 8000926:	d80e      	bhi.n	8000946 <get_current_keyboard_state+0x366>
 8000928:	4b5f      	ldr	r3, [pc, #380]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	3301      	adds	r3, #1
 800092e:	4a5e      	ldr	r2, [pc, #376]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	e008      	b.n	8000946 <get_current_keyboard_state+0x366>
 8000934:	4b5c      	ldr	r3, [pc, #368]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <get_current_keyboard_state+0x366>
 800093c:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 800093e:	69db      	ldr	r3, [r3, #28]
 8000940:	3b01      	subs	r3, #1
 8000942:	4a59      	ldr	r2, [pc, #356]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000944:	61d3      	str	r3, [r2, #28]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[2][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][2]++;}}else{if(key_count[2][2]){key_count[2][2]--;}}
 8000946:	2104      	movs	r1, #4
 8000948:	485a      	ldr	r0, [pc, #360]	; (8000ab4 <get_current_keyboard_state+0x4d4>)
 800094a:	f003 fc81 	bl	8004250 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d109      	bne.n	8000968 <get_current_keyboard_state+0x388>
 8000954:	4b54      	ldr	r3, [pc, #336]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000956:	6a1b      	ldr	r3, [r3, #32]
 8000958:	2b15      	cmp	r3, #21
 800095a:	d80e      	bhi.n	800097a <get_current_keyboard_state+0x39a>
 800095c:	4b52      	ldr	r3, [pc, #328]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 800095e:	6a1b      	ldr	r3, [r3, #32]
 8000960:	3301      	adds	r3, #1
 8000962:	4a51      	ldr	r2, [pc, #324]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000964:	6213      	str	r3, [r2, #32]
 8000966:	e008      	b.n	800097a <get_current_keyboard_state+0x39a>
 8000968:	4b4f      	ldr	r3, [pc, #316]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 800096a:	6a1b      	ldr	r3, [r3, #32]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d004      	beq.n	800097a <get_current_keyboard_state+0x39a>
 8000970:	4b4d      	ldr	r3, [pc, #308]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000972:	6a1b      	ldr	r3, [r3, #32]
 8000974:	3b01      	subs	r3, #1
 8000976:	4a4c      	ldr	r2, [pc, #304]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000978:	6213      	str	r3, [r2, #32]

			if(key_count[2][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_BRIGHTNESS;}else{keyboard_state&=~BUTTON_BRIGHTNESS;}
 800097a:	4b4b      	ldr	r3, [pc, #300]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	2b0e      	cmp	r3, #14
 8000980:	d907      	bls.n	8000992 <get_current_keyboard_state+0x3b2>
 8000982:	4b48      	ldr	r3, [pc, #288]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 800098e:	801a      	strh	r2, [r3, #0]
 8000990:	e006      	b.n	80009a0 <get_current_keyboard_state+0x3c0>
 8000992:	4b44      	ldr	r3, [pc, #272]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 800099e:	801a      	strh	r2, [r3, #0]
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 80009a0:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	2b0e      	cmp	r3, #14
 80009a6:	d907      	bls.n	80009b8 <get_current_keyboard_state+0x3d8>
 80009a8:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	e006      	b.n	80009c6 <get_current_keyboard_state+0x3e6>
 80009b8:	4b3a      	ldr	r3, [pc, #232]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80009c4:	801a      	strh	r2, [r3, #0]
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 80009c8:	6a1b      	ldr	r3, [r3, #32]
 80009ca:	2b0e      	cmp	r3, #14
 80009cc:	d907      	bls.n	80009de <get_current_keyboard_state+0x3fe>
 80009ce:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80009da:	801a      	strh	r2, [r3, #0]
			break;
 80009dc:	e0b1      	b.n	8000b42 <get_current_keyboard_state+0x562>
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <get_current_keyboard_state+0x4c4>)
 80009ea:	801a      	strh	r2, [r3, #0]
			break;
 80009ec:	e0a9      	b.n	8000b42 <get_current_keyboard_state+0x562>
		}
		case 6:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2110      	movs	r1, #16
 80009f2:	482e      	ldr	r0, [pc, #184]	; (8000aac <get_current_keyboard_state+0x4cc>)
 80009f4:	f003 fc44 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	482c      	ldr	r0, [pc, #176]	; (8000ab0 <get_current_keyboard_state+0x4d0>)
 80009fe:	f003 fc3f 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <get_current_keyboard_state+0x4d0>)
 8000a08:	f003 fc3a 	bl	8004280 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);			
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <get_current_keyboard_state+0x4d4>)
 8000a12:	f003 fc35 	bl	8004280 <HAL_GPIO_WritePin>
			break;
 8000a16:	e094      	b.n	8000b42 <get_current_keyboard_state+0x562>
		}
		case 7:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[3][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][0]++;}}else{if(key_count[3][0]){key_count[3][0]--;}}
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <get_current_keyboard_state+0x4d8>)
 8000a1c:	f003 fc18 	bl	8004250 <HAL_GPIO_ReadPin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d109      	bne.n	8000a3a <get_current_keyboard_state+0x45a>
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2a:	2b15      	cmp	r3, #21
 8000a2c:	d80e      	bhi.n	8000a4c <get_current_keyboard_state+0x46c>
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a36:	6253      	str	r3, [r2, #36]	; 0x24
 8000a38:	e008      	b.n	8000a4c <get_current_keyboard_state+0x46c>
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d004      	beq.n	8000a4c <get_current_keyboard_state+0x46c>
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a4a:	6253      	str	r3, [r2, #36]	; 0x24
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <get_current_keyboard_state+0x4d4>)
 8000a50:	f003 fbfe 	bl	8004250 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d109      	bne.n	8000a6e <get_current_keyboard_state+0x48e>
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	2b15      	cmp	r3, #21
 8000a60:	d80e      	bhi.n	8000a80 <get_current_keyboard_state+0x4a0>
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	3301      	adds	r3, #1
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a6a:	6293      	str	r3, [r2, #40]	; 0x28
 8000a6c:	e008      	b.n	8000a80 <get_current_keyboard_state+0x4a0>
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d004      	beq.n	8000a80 <get_current_keyboard_state+0x4a0>
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a7e:	6293      	str	r3, [r2, #40]	; 0x28
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}
 8000a80:	2104      	movs	r1, #4
 8000a82:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <get_current_keyboard_state+0x4d4>)
 8000a84:	f003 fbe4 	bl	8004250 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d116      	bne.n	8000abc <get_current_keyboard_state+0x4dc>
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a92:	2b15      	cmp	r3, #21
 8000a94:	d81b      	bhi.n	8000ace <get_current_keyboard_state+0x4ee>
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a02      	ldr	r2, [pc, #8]	; (8000aa8 <get_current_keyboard_state+0x4c8>)
 8000a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aa0:	e015      	b.n	8000ace <get_current_keyboard_state+0x4ee>
 8000aa2:	bf00      	nop
 8000aa4:	20001a88 	.word	0x20001a88
 8000aa8:	20001a54 	.word	0x20001a54
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	40021800 	.word	0x40021800
 8000ab4:	40022000 	.word	0x40022000
 8000ab8:	40021c00 	.word	0x40021c00
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <get_current_keyboard_state+0x568>)
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d004      	beq.n	8000ace <get_current_keyboard_state+0x4ee>
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <get_current_keyboard_state+0x568>)
 8000ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <get_current_keyboard_state+0x568>)
 8000acc:	62d3      	str	r3, [r2, #44]	; 0x2c

			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <get_current_keyboard_state+0x568>)
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	2b0e      	cmp	r3, #14
 8000ad4:	d907      	bls.n	8000ae6 <get_current_keyboard_state+0x506>
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000ae2:	801a      	strh	r2, [r3, #0]
 8000ae4:	e006      	b.n	8000af4 <get_current_keyboard_state+0x514>
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000af2:	801a      	strh	r2, [r3, #0]
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <get_current_keyboard_state+0x568>)
 8000af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af8:	2b0e      	cmp	r3, #14
 8000afa:	d907      	bls.n	8000b0c <get_current_keyboard_state+0x52c>
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000b08:	801a      	strh	r2, [r3, #0]
 8000b0a:	e006      	b.n	8000b1a <get_current_keyboard_state+0x53a>
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000b18:	801a      	strh	r2, [r3, #0]
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <get_current_keyboard_state+0x568>)
 8000b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1e:	2b0e      	cmp	r3, #14
 8000b20:	d907      	bls.n	8000b32 <get_current_keyboard_state+0x552>
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000b2e:	801a      	strh	r2, [r3, #0]
			break;
 8000b30:	e006      	b.n	8000b40 <get_current_keyboard_state+0x560>
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <get_current_keyboard_state+0x56c>)
 8000b3e:	801a      	strh	r2, [r3, #0]
			break;
 8000b40:	bf00      	nop
		}

	}
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20001a54 	.word	0x20001a54
 8000b4c:	20001a88 	.word	0x20001a88

08000b50 <spinner_GPIO_init>:

uint32_t pluscnt = 0;
uint32_t minuscnt = 0;


void spinner_GPIO_init(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pins : PF8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b68:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <spinner_GPIO_init+0x60>)
 8000b78:	f003 f9be 	bl	8003ef8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b7c:	2340      	movs	r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <spinner_GPIO_init+0x64>)
 8000b8e:	f003 f9b3 	bl	8003ef8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <spinner_GPIO_init+0x64>)
 8000ba4:	f003 f9a8 	bl	8003ef8 <HAL_GPIO_Init>
}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40021400 	.word	0x40021400
 8000bb4:	40020800 	.word	0x40020800

08000bb8 <get_current_spinner_button_state>:

void get_current_spinner_button_state(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc2:	4815      	ldr	r0, [pc, #84]	; (8000c18 <get_current_spinner_button_state+0x60>)
 8000bc4:	f003 fb44 	bl	8004250 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_RESET){
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d109      	bne.n	8000be6 <get_current_spinner_button_state+0x2e>
		if(spinner_button_count < SPINNER_COUNT_BOUNDRY+SPINNER_COUNT_BOUNDRY/2){
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <get_current_spinner_button_state+0x64>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b3b      	cmp	r3, #59	; 0x3b
 8000bd8:	d80e      	bhi.n	8000bf8 <get_current_spinner_button_state+0x40>
				spinner_button_count++;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <get_current_spinner_button_state+0x64>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <get_current_spinner_button_state+0x64>)
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	e008      	b.n	8000bf8 <get_current_spinner_button_state+0x40>
		}
	}else{
		if(spinner_button_count >= 3){
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <get_current_spinner_button_state+0x64>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d904      	bls.n	8000bf8 <get_current_spinner_button_state+0x40>
			spinner_button_count-=3;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <get_current_spinner_button_state+0x64>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	3b03      	subs	r3, #3
 8000bf4:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <get_current_spinner_button_state+0x64>)
 8000bf6:	6013      	str	r3, [r2, #0]
		}
	}
	if(spinner_button_count >= SPINNER_COUNT_BOUNDRY){
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <get_current_spinner_button_state+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b27      	cmp	r3, #39	; 0x27
 8000bfe:	d903      	bls.n	8000c08 <get_current_spinner_button_state+0x50>
		spinner_button_state=1;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <get_current_spinner_button_state+0x68>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
	}else{
		spinner_button_state=0;
	}
}
 8000c06:	e002      	b.n	8000c0e <get_current_spinner_button_state+0x56>
		spinner_button_state=0;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <get_current_spinner_button_state+0x68>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021400 	.word	0x40021400
 8000c1c:	20001a90 	.word	0x20001a90
 8000c20:	20001a8c 	.word	0x20001a8c

08000c24 <get_spinner_position_change>:


void get_spinner_position_change(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	switch(spinner_stage){
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <get_spinner_position_change+0x130>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	f200 808f 	bhi.w	8000d50 <get_spinner_position_change+0x12c>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <get_spinner_position_change+0x14>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000c51 	.word	0x08000c51
 8000c3c:	08000c7d 	.word	0x08000c7d
 8000c40:	08000cbb 	.word	0x08000cbb
 8000c44:	08000cd1 	.word	0x08000cd1
 8000c48:	08000d0f 	.word	0x08000d0f
 8000c4c:	08000d25 	.word	0x08000d25
		case 0:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	4841      	ldr	r0, [pc, #260]	; (8000d58 <get_spinner_position_change+0x134>)
 8000c54:	f003 fafc 	bl	8004250 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d16d      	bne.n	8000d3a <get_spinner_position_change+0x116>
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	483d      	ldr	r0, [pc, #244]	; (8000d58 <get_spinner_position_change+0x134>)
 8000c62:	f003 faf5 	bl	8004250 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <get_spinner_position_change+0x50>
					spinner_stage = 1;
 8000c6c:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <get_spinner_position_change+0x130>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
				}else{
					spinner_stage = 3;
				}
			}
			break;
 8000c72:	e062      	b.n	8000d3a <get_spinner_position_change+0x116>
					spinner_stage = 3;
 8000c74:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <get_spinner_position_change+0x130>)
 8000c76:	2203      	movs	r2, #3
 8000c78:	601a      	str	r2, [r3, #0]
			break;
 8000c7a:	e05e      	b.n	8000d3a <get_spinner_position_change+0x116>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	4836      	ldr	r0, [pc, #216]	; (8000d58 <get_spinner_position_change+0x134>)
 8000c80:	f003 fae6 	bl	8004250 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d159      	bne.n	8000d3e <get_spinner_position_change+0x11a>
				//if(spinner_position){
					//spinner_position--;
				minuscnt++;
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <get_spinner_position_change+0x138>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a32      	ldr	r2, [pc, #200]	; (8000d5c <get_spinner_position_change+0x138>)
 8000c92:	6013      	str	r3, [r2, #0]
				pluscnt=0;
 8000c94:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <get_spinner_position_change+0x13c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
				if(minuscnt >= 4){
 8000c9a:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <get_spinner_position_change+0x138>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d907      	bls.n	8000cb2 <get_spinner_position_change+0x8e>
					spinner_position--;
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <get_spinner_position_change+0x140>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	4a2e      	ldr	r2, [pc, #184]	; (8000d64 <get_spinner_position_change+0x140>)
 8000caa:	6013      	str	r3, [r2, #0]
					minuscnt=0;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <get_spinner_position_change+0x138>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
				}
				//}
				spinner_stage = 2;
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <get_spinner_position_change+0x130>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000cb8:	e041      	b.n	8000d3e <get_spinner_position_change+0x11a>
		}
		case 2:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	4826      	ldr	r0, [pc, #152]	; (8000d58 <get_spinner_position_change+0x134>)
 8000cbe:	f003 fac7 	bl	8004250 <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d13c      	bne.n	8000d42 <get_spinner_position_change+0x11e>
				spinner_stage = 0;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <get_spinner_position_change+0x130>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000cce:	e038      	b.n	8000d42 <get_spinner_position_change+0x11e>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000cd0:	2140      	movs	r1, #64	; 0x40
 8000cd2:	4821      	ldr	r0, [pc, #132]	; (8000d58 <get_spinner_position_change+0x134>)
 8000cd4:	f003 fabc 	bl	8004250 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d133      	bne.n	8000d46 <get_spinner_position_change+0x122>
				//if(spinner_position < 1000){
					//spinner_position++;
				pluscnt++;
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <get_spinner_position_change+0x13c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <get_spinner_position_change+0x13c>)
 8000ce6:	6013      	str	r3, [r2, #0]
				minuscnt=0;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <get_spinner_position_change+0x138>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
				if(pluscnt>=2){
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <get_spinner_position_change+0x13c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d907      	bls.n	8000d06 <get_spinner_position_change+0xe2>
					spinner_position++;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <get_spinner_position_change+0x140>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <get_spinner_position_change+0x140>)
 8000cfe:	6013      	str	r3, [r2, #0]
					pluscnt=0;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <get_spinner_position_change+0x13c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
				}
				//}				
				spinner_stage = 4;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <get_spinner_position_change+0x130>)
 8000d08:	2204      	movs	r2, #4
 8000d0a:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000d0c:	e01b      	b.n	8000d46 <get_spinner_position_change+0x122>
		}
		case 4:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4811      	ldr	r0, [pc, #68]	; (8000d58 <get_spinner_position_change+0x134>)
 8000d12:	f003 fa9d 	bl	8004250 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d116      	bne.n	8000d4a <get_spinner_position_change+0x126>
				spinner_stage = 5;
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <get_spinner_position_change+0x130>)
 8000d1e:	2205      	movs	r2, #5
 8000d20:	601a      	str	r2, [r3, #0]
			}
			break;
 8000d22:	e012      	b.n	8000d4a <get_spinner_position_change+0x126>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <get_spinner_position_change+0x134>)
 8000d28:	f003 fa92 	bl	8004250 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d10d      	bne.n	8000d4e <get_spinner_position_change+0x12a>
				spinner_stage = 0;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <get_spinner_position_change+0x130>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
			}
			break;
 8000d38:	e009      	b.n	8000d4e <get_spinner_position_change+0x12a>
			break;
 8000d3a:	bf00      	nop
 8000d3c:	e008      	b.n	8000d50 <get_spinner_position_change+0x12c>
			break;			
 8000d3e:	bf00      	nop
 8000d40:	e006      	b.n	8000d50 <get_spinner_position_change+0x12c>
			break;			
 8000d42:	bf00      	nop
 8000d44:	e004      	b.n	8000d50 <get_spinner_position_change+0x12c>
			break;			
 8000d46:	bf00      	nop
 8000d48:	e002      	b.n	8000d50 <get_spinner_position_change+0x12c>
			break;
 8000d4a:	bf00      	nop
 8000d4c:	e000      	b.n	8000d50 <get_spinner_position_change+0x12c>
			break;
 8000d4e:	bf00      	nop
		}
	}
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20001a94 	.word	0x20001a94
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	20001a9c 	.word	0x20001a9c
 8000d60:	20001a98 	.word	0x20001a98
 8000d64:	20000000 	.word	0x20000000

08000d68 <switch_GPIO_init>:
// SWITCH PORTS:
// IN: F10 (PULLUP)

uint32_t switch_state = 0;

void switch_GPIO_init(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d80:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <switch_GPIO_init+0x34>)
 8000d90:	f003 f8b2 	bl	8003ef8 <HAL_GPIO_Init>
}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021400 	.word	0x40021400

08000da0 <get_current_switch_state>:

void get_current_switch_state(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000daa:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <get_current_switch_state+0x30>)
 8000dac:	f003 fa50 	bl	8004250 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_SET){
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d103      	bne.n	8000dc2 <get_current_switch_state+0x22>
		switch_state = 0;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <get_current_switch_state+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
	}else{
		switch_state = 1;
	}
}
 8000dc0:	e002      	b.n	8000dc8 <get_current_switch_state+0x28>
		switch_state = 1;
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <get_current_switch_state+0x34>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021400 	.word	0x40021400
 8000dd4:	20001aa0 	.word	0x20001aa0

08000dd8 <print_rectangle>:
			framebuf[i * SCRWIDTH + j] = color;
		}
	}
}

void print_rectangle(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t color){
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	for(uint32_t i = y; i < y+h; i++){
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	e01a      	b.n	8000e22 <print_rectangle+0x4a>
		for(uint32_t j = x; j < x+w; j++){
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	e00e      	b.n	8000e10 <print_rectangle+0x38>
			framebuf[i*SCRWIDTH+j] = color;
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4613      	mov	r3, r2
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	1a9b      	subs	r3, r3, r2
 8000dfa:	015b      	lsls	r3, r3, #5
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4413      	add	r3, r2
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <print_rectangle+0x64>)
 8000e04:	8c3a      	ldrh	r2, [r7, #32]
 8000e06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t j = x; j < x+w; j++){
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3ea      	bcc.n	8000df2 <print_rectangle+0x1a>
	for(uint32_t i = y; i < y+h; i++){
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d3de      	bcc.n	8000dec <print_rectangle+0x14>
		}
	}
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	20001aa4 	.word	0x20001aa4

08000e40 <print_rectangle_empty>:

void print_rectangle_empty(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t color){
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
	for(uint32_t i = y; i < y+h; i++){
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	e041      	b.n	8000ed8 <print_rectangle_empty+0x98>
		for(uint32_t j = x; j < x+w; j++){
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	e035      	b.n	8000ec6 <print_rectangle_empty+0x86>
			if(i != y && i != y+h-1){
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d022      	beq.n	8000ea8 <print_rectangle_empty+0x68>
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d01b      	beq.n	8000ea8 <print_rectangle_empty+0x68>
				framebuf[i*SCRWIDTH+x] = color;
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	4613      	mov	r3, r2
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	015b      	lsls	r3, r3, #5
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	491c      	ldr	r1, [pc, #112]	; (8000ef4 <print_rectangle_empty+0xb4>)
 8000e82:	8c3a      	ldrh	r2, [r7, #32]
 8000e84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				framebuf[i*SCRWIDTH+x+w-1] = color;
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	1a9b      	subs	r3, r3, r2
 8000e90:	015b      	lsls	r3, r3, #5
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	441a      	add	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	4915      	ldr	r1, [pc, #84]	; (8000ef4 <print_rectangle_empty+0xb4>)
 8000ea0:	8c3a      	ldrh	r2, [r7, #32]
 8000ea2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				break;
 8000ea6:	e014      	b.n	8000ed2 <print_rectangle_empty+0x92>
			}
			framebuf[i*SCRWIDTH+j] = color;
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	015b      	lsls	r3, r3, #5
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <print_rectangle_empty+0xb4>)
 8000eba:	8c3a      	ldrh	r2, [r7, #32]
 8000ebc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t j = x; j < x+w; j++){
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3c3      	bcc.n	8000e5a <print_rectangle_empty+0x1a>
	for(uint32_t i = y; i < y+h; i++){
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3b7      	bcc.n	8000e54 <print_rectangle_empty+0x14>
		}
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	371c      	adds	r7, #28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20001aa4 	.word	0x20001aa4

08000ef8 <print_char>:


void print_char(uint32_t x, uint32_t y, uint8_t index, uint16_t color){
 8000ef8:	b480      	push	{r7}
 8000efa:	b08f      	sub	sp, #60	; 0x3c
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	4611      	mov	r1, r2
 8000f04:	461a      	mov	r2, r3
 8000f06:	460b      	mov	r3, r1
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <print_char+0x150>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
 8000f28:	e03c      	b.n	8000fa4 <print_char+0xac>
		uint32_t yiter = y;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t mask = 0b00000001;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(uint32_t i = 0; i < 8; i++){
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
 8000f38:	e02b      	b.n	8000f92 <print_char+0x9a>
			if(*fptr & mask){
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f42:	4013      	ands	r3, r2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00c      	beq.n	8000f64 <print_char+0x6c>
				framebuf[yiter * SCRWIDTH + xiter] = color;
 8000f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	015b      	lsls	r3, r3, #5
 8000f54:	461a      	mov	r2, r3
 8000f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f58:	4413      	add	r3, r2
 8000f5a:	493c      	ldr	r1, [pc, #240]	; (800104c <print_char+0x154>)
 8000f5c:	88ba      	ldrh	r2, [r7, #4]
 8000f5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000f62:	e00b      	b.n	8000f7c <print_char+0x84>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 8000f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f66:	4613      	mov	r3, r2
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	015b      	lsls	r3, r3, #5
 8000f6e:	461a      	mov	r2, r3
 8000f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f72:	4413      	add	r3, r2
 8000f74:	4a35      	ldr	r2, [pc, #212]	; (800104c <print_char+0x154>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 8000f7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			yiter++;
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	3301      	adds	r3, #1
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i = 0; i < 8; i++){
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	3301      	adds	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	d9d0      	bls.n	8000f3a <print_char+0x42>
		}
		xiter++;
 8000f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	330c      	adds	r3, #12
 8000fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3bd      	bcc.n	8000f2a <print_char+0x32>
	}
	xiter = x;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	330c      	adds	r3, #12
 8000fb6:	623b      	str	r3, [r7, #32]
 8000fb8:	e039      	b.n	800102e <print_char+0x136>
		uint32_t yiter = y+8;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	61fb      	str	r3, [r7, #28]
		uint8_t mask = 0b00000001;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	76fb      	strb	r3, [r7, #27]
		for(uint32_t i = 0; i < 8; i++){
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e028      	b.n	800101c <print_char+0x124>
			if(*fptr & mask){
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	781a      	ldrb	r2, [r3, #0]
 8000fce:	7efb      	ldrb	r3, [r7, #27]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00c      	beq.n	8000ff2 <print_char+0xfa>
				framebuf[yiter * 480 + xiter] = color;
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4918      	ldr	r1, [pc, #96]	; (800104c <print_char+0x154>)
 8000fea:	88ba      	ldrh	r2, [r7, #4]
 8000fec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000ff0:	e00b      	b.n	800100a <print_char+0x112>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	015b      	lsls	r3, r3, #5
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	4413      	add	r3, r2
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <print_char+0x154>)
 8001004:	2100      	movs	r1, #0
 8001006:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 800100a:	7efb      	ldrb	r3, [r7, #27]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	76fb      	strb	r3, [r7, #27]
			yiter++;
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	3301      	adds	r3, #1
 8001014:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < 8; i++){
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2b07      	cmp	r3, #7
 8001020:	d9d3      	bls.n	8000fca <print_char+0xd2>
		}
		xiter++;
 8001022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001024:	3301      	adds	r3, #1
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	3301      	adds	r3, #1
 800102c:	623b      	str	r3, [r7, #32]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3318      	adds	r3, #24
 8001032:	6a3a      	ldr	r2, [r7, #32]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3c0      	bcc.n	8000fba <print_char+0xc2>
	}

}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	373c      	adds	r7, #60	; 0x3c
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000004 	.word	0x20000004
 800104c:	20001aa4 	.word	0x20001aa4

08001050 <print_char_scaled>:


void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint16_t color, uint32_t scale){
 8001050:	b480      	push	{r7}
 8001052:	b097      	sub	sp, #92	; 0x5c
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4611      	mov	r1, r2
 800105c:	461a      	mov	r2, r3
 800105e:	460b      	mov	r3, r1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	4613      	mov	r3, r2
 8001064:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8001066:	79fa      	ldrb	r2, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	461a      	mov	r2, r3
 8001072:	4b80      	ldr	r3, [pc, #512]	; (8001274 <print_char_scaled+0x224>)
 8001074:	4413      	add	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	653b      	str	r3, [r7, #80]	; 0x50
 8001080:	e06e      	b.n	8001160 <print_char_scaled+0x110>
		uint32_t yiter = y;
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint8_t mask = 0b00000001;
 8001086:	2301      	movs	r3, #1
 8001088:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		for(uint32_t i = 0; i < 8; i++){
 800108c:	2300      	movs	r3, #0
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
 8001090:	e05c      	b.n	800114c <print_char_scaled+0xfc>
			if(*fptr & mask){
 8001092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800109a:	4013      	ands	r3, r2
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d024      	beq.n	80010ec <print_char_scaled+0x9c>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80010a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
 80010a6:	e01a      	b.n	80010de <print_char_scaled+0x8e>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80010a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010ac:	e00e      	b.n	80010cc <print_char_scaled+0x7c>
						framebuf[iy * SCRWIDTH + ix] = color;	
 80010ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010b0:	4613      	mov	r3, r2
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	015b      	lsls	r3, r3, #5
 80010b8:	461a      	mov	r2, r3
 80010ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010bc:	4413      	add	r3, r2
 80010be:	496e      	ldr	r1, [pc, #440]	; (8001278 <print_char_scaled+0x228>)
 80010c0:	88ba      	ldrh	r2, [r7, #4]
 80010c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80010c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010c8:	3301      	adds	r3, #1
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010d0:	4413      	add	r3, r2
 80010d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3ea      	bcc.n	80010ae <print_char_scaled+0x5e>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80010d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010da:	3301      	adds	r3, #1
 80010dc:	643b      	str	r3, [r7, #64]	; 0x40
 80010de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010e2:	4413      	add	r3, r2
 80010e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3de      	bcc.n	80010a8 <print_char_scaled+0x58>
 80010ea:	e023      	b.n	8001134 <print_char_scaled+0xe4>
					}
				}
				
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80010ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80010f0:	e01a      	b.n	8001128 <print_char_scaled+0xd8>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80010f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
 80010f6:	e00e      	b.n	8001116 <print_char_scaled+0xc6>
						framebuf[iy * SCRWIDTH + ix] = 0;
 80010f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010fa:	4613      	mov	r3, r2
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	015b      	lsls	r3, r3, #5
 8001102:	461a      	mov	r2, r3
 8001104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001106:	4413      	add	r3, r2
 8001108:	4a5b      	ldr	r2, [pc, #364]	; (8001278 <print_char_scaled+0x228>)
 800110a:	2100      	movs	r1, #0
 800110c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001112:	3301      	adds	r3, #1
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
 8001116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800111a:	4413      	add	r3, r2
 800111c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800111e:	429a      	cmp	r2, r3
 8001120:	d3ea      	bcc.n	80010f8 <print_char_scaled+0xa8>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001124:	3301      	adds	r3, #1
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
 8001128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800112a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800112c:	4413      	add	r3, r2
 800112e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001130:	429a      	cmp	r2, r3
 8001132:	d3de      	bcc.n	80010f2 <print_char_scaled+0xa2>
					}
				}
			}
			mask = mask << 1;
 8001134:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			yiter+=scale;
 800113e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001142:	4413      	add	r3, r2
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
		for(uint32_t i = 0; i < 8; i++){
 8001146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001148:	3301      	adds	r3, #1
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
 800114c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800114e:	2b07      	cmp	r3, #7
 8001150:	d99f      	bls.n	8001092 <print_char_scaled+0x42>
		}
		xiter+=scale;
 8001152:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001156:	4413      	add	r3, r2
 8001158:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 800115a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800115c:	3301      	adds	r3, #1
 800115e:	653b      	str	r3, [r7, #80]	; 0x50
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	330c      	adds	r3, #12
 8001164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001166:	429a      	cmp	r2, r3
 8001168:	d38b      	bcc.n	8001082 <print_char_scaled+0x32>
	}
	xiter = x;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	330c      	adds	r3, #12
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
 8001174:	e071      	b.n	800125a <print_char_scaled+0x20a>
		uint32_t yiter = y+8*scale;
 8001176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	4413      	add	r3, r2
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t mask = 0b00000001;
 8001180:	2301      	movs	r3, #1
 8001182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(uint32_t i = 0; i < 8; i++){
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	e05c      	b.n	8001246 <print_char_scaled+0x1f6>
			if(*fptr & mask){
 800118c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001194:	4013      	ands	r3, r2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d024      	beq.n	80011e6 <print_char_scaled+0x196>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119e:	623b      	str	r3, [r7, #32]
 80011a0:	e01a      	b.n	80011d8 <print_char_scaled+0x188>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80011a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e00e      	b.n	80011c6 <print_char_scaled+0x176>
						framebuf[iy * SCRWIDTH + ix] = color;	
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	4613      	mov	r3, r2
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	015b      	lsls	r3, r3, #5
 80011b2:	461a      	mov	r2, r3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	4413      	add	r3, r2
 80011b8:	492f      	ldr	r1, [pc, #188]	; (8001278 <print_char_scaled+0x228>)
 80011ba:	88ba      	ldrh	r2, [r7, #4]
 80011bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3301      	adds	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011ca:	4413      	add	r3, r2
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d3ea      	bcc.n	80011a8 <print_char_scaled+0x158>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	3301      	adds	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011dc:	4413      	add	r3, r2
 80011de:	6a3a      	ldr	r2, [r7, #32]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d3de      	bcc.n	80011a2 <print_char_scaled+0x152>
 80011e4:	e023      	b.n	800122e <print_char_scaled+0x1de>
					}
				}
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	e01a      	b.n	8001222 <print_char_scaled+0x1d2>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80011ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e00e      	b.n	8001210 <print_char_scaled+0x1c0>
						framebuf[iy * SCRWIDTH + ix] = 0;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4613      	mov	r3, r2
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	015b      	lsls	r3, r3, #5
 80011fc:	461a      	mov	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	4413      	add	r3, r2
 8001202:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <print_char_scaled+0x228>)
 8001204:	2100      	movs	r1, #0
 8001206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001214:	4413      	add	r3, r2
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3ea      	bcc.n	80011f2 <print_char_scaled+0x1a2>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	3301      	adds	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001226:	4413      	add	r3, r2
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3de      	bcc.n	80011ec <print_char_scaled+0x19c>
					}
				}
			}
			mask = mask << 1;
 800122e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			yiter+=scale;
 8001238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800123a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800123c:	4413      	add	r3, r2
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i = 0; i < 8; i++){
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	3301      	adds	r3, #1
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	2b07      	cmp	r3, #7
 800124a:	d99f      	bls.n	800118c <print_char_scaled+0x13c>
		}
		xiter+=scale;
 800124c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800124e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001250:	4413      	add	r3, r2
 8001252:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001256:	3301      	adds	r3, #1
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	3318      	adds	r3, #24
 800125e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001260:	429a      	cmp	r2, r3
 8001262:	d388      	bcc.n	8001176 <print_char_scaled+0x126>
	}
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	375c      	adds	r7, #92	; 0x5c
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000004 	.word	0x20000004
 8001278:	20001aa4 	.word	0x20001aa4

0800127c <print_char_scaled_y>:


void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint16_t color, uint32_t scale){
 800127c:	b480      	push	{r7}
 800127e:	b093      	sub	sp, #76	; 0x4c
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	460b      	mov	r3, r1
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	4613      	mov	r3, r2
 8001290:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	461a      	mov	r2, r3
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <print_char_scaled_y+0x1c0>)
 80012a0:	4413      	add	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	643b      	str	r3, [r7, #64]	; 0x40
 80012ac:	e055      	b.n	800135a <print_char_scaled_y+0xde>
		uint32_t yiter = y;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t mask = 0b00000001;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		for(uint32_t i = 0; i < 8; i++){
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
 80012bc:	e044      	b.n	8001348 <print_char_scaled_y+0xcc>
			if(*fptr & mask){
 80012be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012c6:	4013      	ands	r3, r2
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d018      	beq.n	8001300 <print_char_scaled_y+0x84>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80012ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
 80012d2:	e00e      	b.n	80012f2 <print_char_scaled_y+0x76>
					framebuf[iy * SCRWIDTH + xiter] = color;	
 80012d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012d6:	4613      	mov	r3, r2
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	015b      	lsls	r3, r3, #5
 80012de:	461a      	mov	r2, r3
 80012e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012e2:	4413      	add	r3, r2
 80012e4:	4956      	ldr	r1, [pc, #344]	; (8001440 <print_char_scaled_y+0x1c4>)
 80012e6:	88ba      	ldrh	r2, [r7, #4]
 80012e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80012ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ee:	3301      	adds	r3, #1
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
 80012f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012f6:	4413      	add	r3, r2
 80012f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3ea      	bcc.n	80012d4 <print_char_scaled_y+0x58>
 80012fe:	e017      	b.n	8001330 <print_char_scaled_y+0xb4>
				}
				
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001304:	e00e      	b.n	8001324 <print_char_scaled_y+0xa8>
					framebuf[iy * SCRWIDTH + xiter] = 0;
 8001306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001308:	4613      	mov	r3, r2
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	461a      	mov	r2, r3
 8001312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001314:	4413      	add	r3, r2
 8001316:	4a4a      	ldr	r2, [pc, #296]	; (8001440 <print_char_scaled_y+0x1c4>)
 8001318:	2100      	movs	r1, #0
 800131a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	3301      	adds	r3, #1
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001328:	4413      	add	r3, r2
 800132a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132c:	429a      	cmp	r2, r3
 800132e:	d3ea      	bcc.n	8001306 <print_char_scaled_y+0x8a>
				}
			}
			mask = mask << 1;
 8001330:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			yiter+=scale;
 800133a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800133c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800133e:	4413      	add	r3, r2
 8001340:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(uint32_t i = 0; i < 8; i++){
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	3301      	adds	r3, #1
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	2b07      	cmp	r3, #7
 800134c:	d9b7      	bls.n	80012be <print_char_scaled_y+0x42>
		}
		xiter++;
 800134e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001350:	3301      	adds	r3, #1
 8001352:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001356:	3301      	adds	r3, #1
 8001358:	643b      	str	r3, [r7, #64]	; 0x40
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	330c      	adds	r3, #12
 800135e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001360:	429a      	cmp	r2, r3
 8001362:	d3a4      	bcc.n	80012ae <print_char_scaled_y+0x32>
	}
	xiter = x;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	330c      	adds	r3, #12
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
 800136e:	e058      	b.n	8001422 <print_char_scaled_y+0x1a6>
		uint32_t yiter = y+8*scale;
 8001370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	4413      	add	r3, r2
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
		uint8_t mask = 0b00000001;
 800137a:	2301      	movs	r3, #1
 800137c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for(uint32_t i = 0; i < 8; i++){
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	e044      	b.n	8001410 <print_char_scaled_y+0x194>
			if(*fptr & mask){
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800138e:	4013      	ands	r3, r2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d018      	beq.n	80013c8 <print_char_scaled_y+0x14c>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	e00e      	b.n	80013ba <print_char_scaled_y+0x13e>
					framebuf[iy * SCRWIDTH + xiter] = color;	
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4613      	mov	r3, r2
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	1a9b      	subs	r3, r3, r2
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	461a      	mov	r2, r3
 80013a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013aa:	4413      	add	r3, r2
 80013ac:	4924      	ldr	r1, [pc, #144]	; (8001440 <print_char_scaled_y+0x1c4>)
 80013ae:	88ba      	ldrh	r2, [r7, #4]
 80013b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	3301      	adds	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013be:	4413      	add	r3, r2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3ea      	bcc.n	800139c <print_char_scaled_y+0x120>
 80013c6:	e017      	b.n	80013f8 <print_char_scaled_y+0x17c>
				}
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e00e      	b.n	80013ec <print_char_scaled_y+0x170>
					framebuf[iy * SCRWIDTH + xiter] = 0;
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4613      	mov	r3, r2
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	015b      	lsls	r3, r3, #5
 80013d8:	461a      	mov	r2, r3
 80013da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013dc:	4413      	add	r3, r2
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <print_char_scaled_y+0x1c4>)
 80013e0:	2100      	movs	r1, #0
 80013e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f0:	4413      	add	r3, r2
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3ea      	bcc.n	80013ce <print_char_scaled_y+0x152>
				}
			}
			mask = mask << 1;
 80013f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			yiter+=scale;
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001406:	4413      	add	r3, r2
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t i = 0; i < 8; i++){
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b07      	cmp	r3, #7
 8001414:	d9b7      	bls.n	8001386 <print_char_scaled_y+0x10a>
		}
		xiter++;
 8001416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001418:	3301      	adds	r3, #1
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	3301      	adds	r3, #1
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	3318      	adds	r3, #24
 8001426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001428:	429a      	cmp	r2, r3
 800142a:	d3a1      	bcc.n	8001370 <print_char_scaled_y+0xf4>
	}
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	374c      	adds	r7, #76	; 0x4c
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000004 	.word	0x20000004
 8001440:	20001aa4 	.word	0x20001aa4

08001444 <print_string>:

void print_string(uint32_t x, uint32_t y, char* string, uint16_t color){
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7fe fed8 	bl	8000208 <strlen>
 8001458:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e00c      	b.n	800147a <print_string+0x36>
		print_char(x, y, *i, color);
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff fd45 	bl	8000ef8 <print_char>
		x += 12;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	330c      	adds	r3, #12
 8001472:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4413      	add	r3, r2
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	429a      	cmp	r2, r3
 8001484:	d3ec      	bcc.n	8001460 <print_string+0x1c>
		//y += 16;
	}
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <print_string_scaled>:

void print_string_scaled(uint32_t x, uint32_t y, char* string, uint16_t color, uint32_t scale){
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af02      	add	r7, sp, #8
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7fe feb2 	bl	8000208 <strlen>
 80014a4:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e015      	b.n	80014d8 <print_string_scaled+0x48>
		print_char_scaled(x, y, *i, color, scale);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	8879      	ldrh	r1, [r7, #2]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	460b      	mov	r3, r1
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7ff fdc8 	bl	8001050 <print_char_scaled>
		x += 12*scale;
 80014c0:	6a3a      	ldr	r2, [r7, #32]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4413      	add	r3, r2
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3e3      	bcc.n	80014ac <print_string_scaled+0x1c>
		//y += 16*scale;
	}
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <print_string_scaled_y>:

void print_string_scaled_y(uint32_t x, uint32_t y, char* string, uint16_t color, uint32_t scale){
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b088      	sub	sp, #32
 80014f2:	af02      	add	r7, sp, #8
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7fe fe83 	bl	8000208 <strlen>
 8001502:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00f      	b.n	800152a <print_string_scaled_y+0x3c>
		print_char_scaled_y(x, y, *i, color, scale);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	8879      	ldrh	r1, [r7, #2]
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	460b      	mov	r3, r1
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff feaf 	bl	800127c <print_char_scaled_y>
		x += 12;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	330c      	adds	r3, #12
 8001522:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4413      	add	r3, r2
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	429a      	cmp	r2, r3
 8001534:	d3e9      	bcc.n	800150a <print_string_scaled_y+0x1c>
		//y += 16*scale;
	}
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <fill_screen>:

void fill_screen(uint16_t color){for(uint16_t* i = framebuf; i < framebuf+SCRWIDTH*SCRHEIGHT; i++){*i = color;}}
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <fill_screen+0x34>)
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	e005      	b.n	800155c <fill_screen+0x1c>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	88fa      	ldrh	r2, [r7, #6]
 8001554:	801a      	strh	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3302      	adds	r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <fill_screen+0x38>)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4293      	cmp	r3, r2
 8001562:	d3f5      	bcc.n	8001550 <fill_screen+0x10>
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20001aa4 	.word	0x20001aa4
 8001578:	20040f24 	.word	0x20040f24

0800157c <print_number>:


void print_number(uint32_t x, uint32_t y, uint32_t number, uint16_t color, uint32_t scale){
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af02      	add	r7, sp, #8
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	807b      	strh	r3, [r7, #2]
	if(!number){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11b      	bne.n	80015c8 <print_number+0x4c>
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 8001590:	6a3a      	ldr	r2, [r7, #32]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	18d0      	adds	r0, r2, r3
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <print_number+0xe0>)
 80015a4:	fba3 2301 	umull	r2, r3, r3, r1
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	1aca      	subs	r2, r1, r3
 80015b4:	b2d3      	uxtb	r3, r2
 80015b6:	3330      	adds	r3, #48	; 0x30
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	8879      	ldrh	r1, [r7, #2]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	460b      	mov	r3, r1
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	f7ff fd44 	bl	8001050 <print_char_scaled>
	}

	uint32_t numlen = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
	uint32_t num_cp = number;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	613b      	str	r3, [r7, #16]
	while(num_cp){
 80015d0:	e008      	b.n	80015e4 <print_number+0x68>
		numlen++;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
		num_cp /= 10;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4a20      	ldr	r2, [pc, #128]	; (800165c <print_number+0xe0>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	613b      	str	r3, [r7, #16]
	while(num_cp){
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f3      	bne.n	80015d2 <print_number+0x56>
	}

	x += numlen * scale * 12;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	fb03 f202 	mul.w	r2, r3, r2
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
	while(number){
 8001602:	e023      	b.n	800164c <print_number+0xd0>
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <print_number+0xe0>)
 8001608:	fba3 2301 	umull	r2, r3, r3, r1
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	1aca      	subs	r2, r1, r3
 8001618:	b2d3      	uxtb	r3, r2
 800161a:	3330      	adds	r3, #48	; 0x30
 800161c:	b2da      	uxtb	r2, r3
 800161e:	8879      	ldrh	r1, [r7, #2]
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	460b      	mov	r3, r1
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fd11 	bl	8001050 <print_char_scaled>
		x -= scale * 12;
 800162e:	6a3a      	ldr	r2, [r7, #32]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
		number /= 10;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <print_number+0xe0>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	607b      	str	r3, [r7, #4]
	while(number){
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1d8      	bne.n	8001604 <print_number+0x88>
	}
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	cccccccd 	.word	0xcccccccd

08001660 <print_fat_rectangle>:

uint32_t state_progress = 0;
uint32_t mem_sp_st = 0; // memorized spinner position for diff
uint32_t system_angle = 180;

void print_fat_rectangle(){
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af02      	add	r7, sp, #8
	uint32_t x = 80;
 8001666:	2350      	movs	r3, #80	; 0x50
 8001668:	617b      	str	r3, [r7, #20]
	uint32_t y = 80;
 800166a:	2350      	movs	r3, #80	; 0x50
 800166c:	613b      	str	r3, [r7, #16]
	uint32_t width = 320;
 800166e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001672:	60fb      	str	r3, [r7, #12]
	uint32_t height = 100;
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 6; i++){
 8001678:	2300      	movs	r3, #0
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	e017      	b.n	80016ae <print_fat_rectangle+0x4e>
		print_rectangle_empty(x, y, width, height, 0x797);
 800167e:	f240 7397 	movw	r3, #1943	; 0x797
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff fbd8 	bl	8000e40 <print_rectangle_empty>
		x++;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
		y++;
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	3301      	adds	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
		width -= 2;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3b02      	subs	r3, #2
 80016a0:	60fb      	str	r3, [r7, #12]
		height -= 2;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3b02      	subs	r3, #2
 80016a6:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 6; i++){
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	3301      	adds	r3, #1
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d9e4      	bls.n	800167e <print_fat_rectangle+0x1e>
	}
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <state_machine>:





void state_machine(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
	uint32_t kbd_st = keyboard_state;
 80016c6:	4ba5      	ldr	r3, [pc, #660]	; (800195c <state_machine+0x29c>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]
	uint32_t sw_st = switch_state;
 80016cc:	4ba4      	ldr	r3, [pc, #656]	; (8001960 <state_machine+0x2a0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60bb      	str	r3, [r7, #8]
	uint32_t spb_st = spinner_button_state;
 80016d2:	4ba4      	ldr	r3, [pc, #656]	; (8001964 <state_machine+0x2a4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	607b      	str	r3, [r7, #4]
	uint32_t sp_st = spinner_position;
 80016d8:	4ba3      	ldr	r3, [pc, #652]	; (8001968 <state_machine+0x2a8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	603b      	str	r3, [r7, #0]


	static uint32_t state_time = 0;

	switch(system_state){
 80016de:	4ba3      	ldr	r3, [pc, #652]	; (800196c <state_machine+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b11      	cmp	r3, #17
 80016e4:	f201 8356 	bhi.w	8002d94 <state_machine+0x16d4>
 80016e8:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <state_machine+0x30>)
 80016ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ee:	bf00      	nop
 80016f0:	08001739 	.word	0x08001739
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	0800182d 	.word	0x0800182d
 80016fc:	080018e7 	.word	0x080018e7
 8001700:	080019e1 	.word	0x080019e1
 8001704:	08001b0f 	.word	0x08001b0f
 8001708:	08001bc7 	.word	0x08001bc7
 800170c:	08001d29 	.word	0x08001d29
 8001710:	08001ee1 	.word	0x08001ee1
 8001714:	0800200f 	.word	0x0800200f
 8001718:	08002195 	.word	0x08002195
 800171c:	080022f3 	.word	0x080022f3
 8001720:	0800247f 	.word	0x0800247f
 8001724:	080025ff 	.word	0x080025ff
 8001728:	08002791 	.word	0x08002791
 800172c:	08002911 	.word	0x08002911
 8001730:	08002a6d 	.word	0x08002a6d
 8001734:	08002bf5 	.word	0x08002bf5
		case 0:{
			if(need_out){
 8001738:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <state_machine+0x2b0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <state_machine+0x8c>
				fill_screen(0);
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fefd 	bl	8001540 <fill_screen>
				need_out = 0;
 8001746:	4b8a      	ldr	r3, [pc, #552]	; (8001970 <state_machine+0x2b0>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
			}


			if(sw_st){
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f001 82fd 	beq.w	8002d4e <state_machine+0x168e>
				system_state = 1;
 8001754:	4b85      	ldr	r3, [pc, #532]	; (800196c <state_machine+0x2ac>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
				need_out = 1;
 800175a:	4b85      	ldr	r3, [pc, #532]	; (8001970 <state_machine+0x2b0>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]

				state_time = HAL_GetTick();
 8001760:	f002 fa88 	bl	8003c74 <HAL_GetTick>
 8001764:	4603      	mov	r3, r0
 8001766:	4a83      	ldr	r2, [pc, #524]	; (8001974 <state_machine+0x2b4>)
 8001768:	6013      	str	r3, [r2, #0]
			}
			break;
 800176a:	f001 baf0 	b.w	8002d4e <state_machine+0x168e>
		}
		case 1:{
			if(need_out){
 800176e:	4b80      	ldr	r3, [pc, #512]	; (8001970 <state_machine+0x2b0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d010      	beq.n	8001798 <state_machine+0xd8>
				fill_screen(0);
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fee2 	bl	8001540 <fill_screen>
				print_fat_rectangle();
 800177c:	f7ff ff70 	bl	8001660 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state1_string, 0x797, 2);
 8001780:	2302      	movs	r3, #2
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	f240 7397 	movw	r3, #1943	; 0x797
 8001788:	4a7b      	ldr	r2, [pc, #492]	; (8001978 <state_machine+0x2b8>)
 800178a:	2178      	movs	r1, #120	; 0x78
 800178c:	2073      	movs	r0, #115	; 0x73
 800178e:	f7ff feae 	bl	80014ee <print_string_scaled_y>
				need_out = 0;
 8001792:	4b77      	ldr	r3, [pc, #476]	; (8001970 <state_machine+0x2b0>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
			}

			if(HAL_GetTick() - state_time >= 1000){
 8001798:	f002 fa6c 	bl	8003c74 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	4b75      	ldr	r3, [pc, #468]	; (8001974 <state_machine+0x2b4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017a8:	d30a      	bcc.n	80017c0 <state_machine+0x100>
				system_state = 2;
 80017aa:	4b70      	ldr	r3, [pc, #448]	; (800196c <state_machine+0x2ac>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
				need_out = 1;
 80017b0:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <state_machine+0x2b0>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
				state_time = HAL_GetTick();
 80017b6:	f002 fa5d 	bl	8003c74 <HAL_GetTick>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a6d      	ldr	r2, [pc, #436]	; (8001974 <state_machine+0x2b4>)
 80017be:	6013      	str	r3, [r2, #0]
			}

			check_brightness();
 80017c0:	4b6e      	ldr	r3, [pc, #440]	; (800197c <state_machine+0x2bc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d11f      	bne.n	8001808 <state_machine+0x148>
 80017c8:	4b6c      	ldr	r3, [pc, #432]	; (800197c <state_machine+0x2bc>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01a      	beq.n	800180e <state_machine+0x14e>
 80017d8:	4b69      	ldr	r3, [pc, #420]	; (8001980 <state_machine+0x2c0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d103      	bne.n	80017e8 <state_machine+0x128>
 80017e0:	4b67      	ldr	r3, [pc, #412]	; (8001980 <state_machine+0x2c0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e004      	b.n	80017f2 <state_machine+0x132>
 80017e8:	4b65      	ldr	r3, [pc, #404]	; (8001980 <state_machine+0x2c0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a64      	ldr	r2, [pc, #400]	; (8001980 <state_machine+0x2c0>)
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b63      	ldr	r3, [pc, #396]	; (8001980 <state_machine+0x2c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a63      	ldr	r2, [pc, #396]	; (8001984 <state_machine+0x2c4>)
 80017f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fc:	2200      	movs	r2, #0
 80017fe:	4619      	mov	r1, r3
 8001800:	4861      	ldr	r0, [pc, #388]	; (8001988 <state_machine+0x2c8>)
 8001802:	f002 ff27 	bl	8004654 <HAL_LTDC_SetAlpha>
 8001806:	e002      	b.n	800180e <state_machine+0x14e>
 8001808:	4b5c      	ldr	r3, [pc, #368]	; (800197c <state_machine+0x2bc>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
			check_switch();
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f041 829e 	bne.w	8002d52 <state_machine+0x1692>
 8001816:	4b55      	ldr	r3, [pc, #340]	; (800196c <state_machine+0x2ac>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	4b5b      	ldr	r3, [pc, #364]	; (800198c <state_machine+0x2cc>)
 800181e:	22b4      	movs	r2, #180	; 0xb4
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	4b53      	ldr	r3, [pc, #332]	; (8001970 <state_machine+0x2b0>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
			break;
 8001828:	f001 ba93 	b.w	8002d52 <state_machine+0x1692>
		}
		case 2:{
			if(need_out){
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <state_machine+0x2b0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d010      	beq.n	8001856 <state_machine+0x196>
				fill_screen(0);
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fe83 	bl	8001540 <fill_screen>
				print_fat_rectangle();
 800183a:	f7ff ff11 	bl	8001660 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state2_string, 0x797, 2);
 800183e:	2302      	movs	r3, #2
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	f240 7397 	movw	r3, #1943	; 0x797
 8001846:	4a52      	ldr	r2, [pc, #328]	; (8001990 <state_machine+0x2d0>)
 8001848:	2178      	movs	r1, #120	; 0x78
 800184a:	2073      	movs	r0, #115	; 0x73
 800184c:	f7ff fe4f 	bl	80014ee <print_string_scaled_y>
				need_out = 0;
 8001850:	4b47      	ldr	r3, [pc, #284]	; (8001970 <state_machine+0x2b0>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
			}


			if(HAL_GetTick() - state_time >= 1000){
 8001856:	f002 fa0d 	bl	8003c74 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	4b45      	ldr	r3, [pc, #276]	; (8001974 <state_machine+0x2b4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001866:	d308      	bcc.n	800187a <state_machine+0x1ba>
				system_state = 3;
 8001868:	4b40      	ldr	r3, [pc, #256]	; (800196c <state_machine+0x2ac>)
 800186a:	2203      	movs	r2, #3
 800186c:	601a      	str	r2, [r3, #0]
				need_out = 1;
 800186e:	4b40      	ldr	r3, [pc, #256]	; (8001970 <state_machine+0x2b0>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]

				state_time = 0;
 8001874:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <state_machine+0x2b4>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 800187a:	4b40      	ldr	r3, [pc, #256]	; (800197c <state_machine+0x2bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11f      	bne.n	80018c2 <state_machine+0x202>
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <state_machine+0x2bc>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d01a      	beq.n	80018c8 <state_machine+0x208>
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <state_machine+0x2c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d103      	bne.n	80018a2 <state_machine+0x1e2>
 800189a:	4b39      	ldr	r3, [pc, #228]	; (8001980 <state_machine+0x2c0>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e004      	b.n	80018ac <state_machine+0x1ec>
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <state_machine+0x2c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	4a35      	ldr	r2, [pc, #212]	; (8001980 <state_machine+0x2c0>)
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b34      	ldr	r3, [pc, #208]	; (8001980 <state_machine+0x2c0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a34      	ldr	r2, [pc, #208]	; (8001984 <state_machine+0x2c4>)
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	4833      	ldr	r0, [pc, #204]	; (8001988 <state_machine+0x2c8>)
 80018bc:	f002 feca 	bl	8004654 <HAL_LTDC_SetAlpha>
 80018c0:	e002      	b.n	80018c8 <state_machine+0x208>
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <state_machine+0x2bc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
			check_switch();
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f041 8243 	bne.w	8002d56 <state_machine+0x1696>
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <state_machine+0x2ac>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <state_machine+0x2cc>)
 80018d8:	22b4      	movs	r2, #180	; 0xb4
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <state_machine+0x2b0>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
			break;
 80018e2:	f001 ba38 	b.w	8002d56 <state_machine+0x1696>
		}
		case 3:{
			if(need_out){
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <state_machine+0x2b0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d010      	beq.n	8001910 <state_machine+0x250>
				fill_screen(0);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fe26 	bl	8001540 <fill_screen>
				print_fat_rectangle();
 80018f4:	f7ff feb4 	bl	8001660 <print_fat_rectangle>
				print_string_scaled_y(90, 120, state3_string, 0x797, 2);
 80018f8:	2302      	movs	r3, #2
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f240 7397 	movw	r3, #1943	; 0x797
 8001900:	4a24      	ldr	r2, [pc, #144]	; (8001994 <state_machine+0x2d4>)
 8001902:	2178      	movs	r1, #120	; 0x78
 8001904:	205a      	movs	r0, #90	; 0x5a
 8001906:	f7ff fdf2 	bl	80014ee <print_string_scaled_y>
				need_out = 0;
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <state_machine+0x2b0>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
			}

			if(kbd_st & BUTTON_TEST){
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <state_machine+0x272>
				state_progress = 0;
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <state_machine+0x2d8>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <state_machine+0x2b4>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
				system_state = 4;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <state_machine+0x2ac>)
 8001928:	2204      	movs	r2, #4
 800192a:	601a      	str	r2, [r3, #0]
				need_out = 1;
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <state_machine+0x2b0>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <state_machine+0x2bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d140      	bne.n	80019bc <state_machine+0x2fc>
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <state_machine+0x2bc>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d03b      	beq.n	80019c2 <state_machine+0x302>
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <state_machine+0x2c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d124      	bne.n	800199c <state_machine+0x2dc>
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <state_machine+0x2c0>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e025      	b.n	80019a6 <state_machine+0x2e6>
 800195a:	bf00      	nop
 800195c:	20001a88 	.word	0x20001a88
 8001960:	20001aa0 	.word	0x20001aa0
 8001964:	20001a8c 	.word	0x20001a8c
 8001968:	20000000 	.word	0x20000000
 800196c:	20040f28 	.word	0x20040f28
 8001970:	20001a24 	.word	0x20001a24
 8001974:	20040fdc 	.word	0x20040fdc
 8001978:	20001814 	.word	0x20001814
 800197c:	20040f24 	.word	0x20040f24
 8001980:	20001804 	.word	0x20001804
 8001984:	20001808 	.word	0x20001808
 8001988:	20040f34 	.word	0x20040f34
 800198c:	20001a28 	.word	0x20001a28
 8001990:	20001828 	.word	0x20001828
 8001994:	20001840 	.word	0x20001840
 8001998:	20040f2c 	.word	0x20040f2c
 800199c:	4b9e      	ldr	r3, [pc, #632]	; (8001c18 <state_machine+0x558>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a9d      	ldr	r2, [pc, #628]	; (8001c18 <state_machine+0x558>)
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b9c      	ldr	r3, [pc, #624]	; (8001c18 <state_machine+0x558>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a9c      	ldr	r2, [pc, #624]	; (8001c1c <state_machine+0x55c>)
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	2200      	movs	r2, #0
 80019b2:	4619      	mov	r1, r3
 80019b4:	489a      	ldr	r0, [pc, #616]	; (8001c20 <state_machine+0x560>)
 80019b6:	f002 fe4d 	bl	8004654 <HAL_LTDC_SetAlpha>
 80019ba:	e002      	b.n	80019c2 <state_machine+0x302>
 80019bc:	4b99      	ldr	r3, [pc, #612]	; (8001c24 <state_machine+0x564>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
			check_switch();
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f041 81c8 	bne.w	8002d5a <state_machine+0x169a>
 80019ca:	4b97      	ldr	r3, [pc, #604]	; (8001c28 <state_machine+0x568>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	4b96      	ldr	r3, [pc, #600]	; (8001c2c <state_machine+0x56c>)
 80019d2:	22b4      	movs	r2, #180	; 0xb4
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	4b96      	ldr	r3, [pc, #600]	; (8001c30 <state_machine+0x570>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
			break;
 80019dc:	f001 b9bd 	b.w	8002d5a <state_machine+0x169a>
		}
		case 4:{
			if(need_out){
 80019e0:	4b93      	ldr	r3, [pc, #588]	; (8001c30 <state_machine+0x570>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01a      	beq.n	8001a1e <state_machine+0x35e>
				fill_screen(0);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fda9 	bl	8001540 <fill_screen>
				print_fat_rectangle();
 80019ee:	f7ff fe37 	bl	8001660 <print_fat_rectangle>
				print_string_scaled(185, 105, state4_string, 0x797, 2);
 80019f2:	2302      	movs	r3, #2
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	f240 7397 	movw	r3, #1943	; 0x797
 80019fa:	4a8e      	ldr	r2, [pc, #568]	; (8001c34 <state_machine+0x574>)
 80019fc:	2169      	movs	r1, #105	; 0x69
 80019fe:	20b9      	movs	r0, #185	; 0xb9
 8001a00:	f7ff fd46 	bl	8001490 <print_string_scaled>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001a04:	f240 7397 	movw	r3, #1943	; 0x797
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001a10:	2196      	movs	r1, #150	; 0x96
 8001a12:	2064      	movs	r0, #100	; 0x64
 8001a14:	f7ff fa14 	bl	8000e40 <print_rectangle_empty>
				need_out = 0;
 8001a18:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <state_machine+0x570>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
			}
			if(!state_time){state_time = HAL_GetTick();}else{
 8001a1e:	4b86      	ldr	r3, [pc, #536]	; (8001c38 <state_machine+0x578>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <state_machine+0x372>
 8001a26:	f002 f925 	bl	8003c74 <HAL_GetTick>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a82      	ldr	r2, [pc, #520]	; (8001c38 <state_machine+0x578>)
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e010      	b.n	8001a54 <state_machine+0x394>
				if(HAL_GetTick() - state_time >= 300){
 8001a32:	f002 f91f 	bl	8003c74 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b7f      	ldr	r3, [pc, #508]	; (8001c38 <state_machine+0x578>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a42:	d307      	bcc.n	8001a54 <state_machine+0x394>
					state_time = 0;
 8001a44:	4b7c      	ldr	r3, [pc, #496]	; (8001c38 <state_machine+0x578>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001a4a:	4b7c      	ldr	r3, [pc, #496]	; (8001c3c <state_machine+0x57c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	330a      	adds	r3, #10
 8001a50:	4a7a      	ldr	r2, [pc, #488]	; (8001c3c <state_machine+0x57c>)
 8001a52:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8001a54:	4b79      	ldr	r3, [pc, #484]	; (8001c3c <state_machine+0x57c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d012      	beq.n	8001a82 <state_machine+0x3c2>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 8001a5c:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <state_machine+0x57c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a77      	ldr	r2, [pc, #476]	; (8001c40 <state_machine+0x580>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	461a      	mov	r2, r3
 8001a72:	f240 7397 	movw	r3, #1943	; 0x797
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	230a      	movs	r3, #10
 8001a7a:	2196      	movs	r1, #150	; 0x96
 8001a7c:	2064      	movs	r0, #100	; 0x64
 8001a7e:	f7ff f9ab 	bl	8000dd8 <print_rectangle>
			}

			if(state_progress == 100){
 8001a82:	4b6e      	ldr	r3, [pc, #440]	; (8001c3c <state_machine+0x57c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d10b      	bne.n	8001aa2 <state_machine+0x3e2>
				state_progress = 0;
 8001a8a:	4b6c      	ldr	r3, [pc, #432]	; (8001c3c <state_machine+0x57c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001a90:	4b69      	ldr	r3, [pc, #420]	; (8001c38 <state_machine+0x578>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001a96:	4b66      	ldr	r3, [pc, #408]	; (8001c30 <state_machine+0x570>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
				system_state = 5;
 8001a9c:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <state_machine+0x568>)
 8001a9e:	2205      	movs	r2, #5
 8001aa0:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001aa2:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <state_machine+0x564>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d11f      	bne.n	8001aea <state_machine+0x42a>
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <state_machine+0x564>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01a      	beq.n	8001af0 <state_machine+0x430>
 8001aba:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <state_machine+0x558>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d103      	bne.n	8001aca <state_machine+0x40a>
 8001ac2:	4b55      	ldr	r3, [pc, #340]	; (8001c18 <state_machine+0x558>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e004      	b.n	8001ad4 <state_machine+0x414>
 8001aca:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <state_machine+0x558>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a51      	ldr	r2, [pc, #324]	; (8001c18 <state_machine+0x558>)
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <state_machine+0x558>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a50      	ldr	r2, [pc, #320]	; (8001c1c <state_machine+0x55c>)
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	484f      	ldr	r0, [pc, #316]	; (8001c20 <state_machine+0x560>)
 8001ae4:	f002 fdb6 	bl	8004654 <HAL_LTDC_SetAlpha>
 8001ae8:	e002      	b.n	8001af0 <state_machine+0x430>
 8001aea:	4b4e      	ldr	r3, [pc, #312]	; (8001c24 <state_machine+0x564>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
			check_switch();
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f041 8133 	bne.w	8002d5e <state_machine+0x169e>
 8001af8:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <state_machine+0x568>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <state_machine+0x56c>)
 8001b00:	22b4      	movs	r2, #180	; 0xb4
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <state_machine+0x570>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
			break;
 8001b0a:	f001 b928 	b.w	8002d5e <state_machine+0x169e>
		}
		case 5:{
			if(need_out){
 8001b0e:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <state_machine+0x570>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d010      	beq.n	8001b38 <state_machine+0x478>
				fill_screen(0);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fd12 	bl	8001540 <fill_screen>
				print_fat_rectangle();
 8001b1c:	f7ff fda0 	bl	8001660 <print_fat_rectangle>
				print_string_scaled_y(120, 120, state5_string, 0x797, 2);
 8001b20:	2302      	movs	r3, #2
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f240 7397 	movw	r3, #1943	; 0x797
 8001b28:	4a46      	ldr	r2, [pc, #280]	; (8001c44 <state_machine+0x584>)
 8001b2a:	2178      	movs	r1, #120	; 0x78
 8001b2c:	2078      	movs	r0, #120	; 0x78
 8001b2e:	f7ff fcde 	bl	80014ee <print_string_scaled_y>
				need_out = 0;
 8001b32:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <state_machine+0x570>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
			}

			if(kbd_st & BUTTON_CALIBRATION){
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <state_machine+0x49a>
				system_state = 6;
 8001b42:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <state_machine+0x568>)
 8001b44:	2206      	movs	r2, #6
 8001b46:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <state_machine+0x570>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <state_machine+0x578>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
				state_progress = 0;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <state_machine+0x57c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <state_machine+0x564>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d11f      	bne.n	8001ba2 <state_machine+0x4e2>
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <state_machine+0x564>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01a      	beq.n	8001ba8 <state_machine+0x4e8>
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <state_machine+0x558>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d103      	bne.n	8001b82 <state_machine+0x4c2>
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <state_machine+0x558>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e004      	b.n	8001b8c <state_machine+0x4cc>
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <state_machine+0x558>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <state_machine+0x558>)
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <state_machine+0x558>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <state_machine+0x55c>)
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	2200      	movs	r2, #0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4821      	ldr	r0, [pc, #132]	; (8001c20 <state_machine+0x560>)
 8001b9c:	f002 fd5a 	bl	8004654 <HAL_LTDC_SetAlpha>
 8001ba0:	e002      	b.n	8001ba8 <state_machine+0x4e8>
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <state_machine+0x564>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
			check_switch();
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f041 80d9 	bne.w	8002d62 <state_machine+0x16a2>
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <state_machine+0x568>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <state_machine+0x56c>)
 8001bb8:	22b4      	movs	r2, #180	; 0xb4
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <state_machine+0x570>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
			break;
 8001bc2:	f001 b8ce 	b.w	8002d62 <state_machine+0x16a2>
		}
		case 6:{
			if(need_out){
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <state_machine+0x570>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01a      	beq.n	8001c04 <state_machine+0x544>
				fill_screen(0);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff fcb6 	bl	8001540 <fill_screen>
				print_fat_rectangle();
 8001bd4:	f7ff fd44 	bl	8001660 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state6_string, 0x797, 2);
 8001bd8:	2302      	movs	r3, #2
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	f240 7397 	movw	r3, #1943	; 0x797
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <state_machine+0x588>)
 8001be2:	2164      	movs	r1, #100	; 0x64
 8001be4:	20b4      	movs	r0, #180	; 0xb4
 8001be6:	f7ff fc82 	bl	80014ee <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001bea:	f240 7397 	movw	r3, #1943	; 0x797
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001bf6:	2196      	movs	r1, #150	; 0x96
 8001bf8:	2064      	movs	r0, #100	; 0x64
 8001bfa:	f7ff f921 	bl	8000e40 <print_rectangle_empty>
				need_out = 0;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <state_machine+0x570>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

			}

			if(!state_time){state_time = HAL_GetTick();}else{
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <state_machine+0x578>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d11f      	bne.n	8001c4c <state_machine+0x58c>
 8001c0c:	f002 f832 	bl	8003c74 <HAL_GetTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <state_machine+0x578>)
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e02a      	b.n	8001c6e <state_machine+0x5ae>
 8001c18:	20001804 	.word	0x20001804
 8001c1c:	20001808 	.word	0x20001808
 8001c20:	20040f34 	.word	0x20040f34
 8001c24:	20040f24 	.word	0x20040f24
 8001c28:	20040f28 	.word	0x20040f28
 8001c2c:	20001a28 	.word	0x20001a28
 8001c30:	20001a24 	.word	0x20001a24
 8001c34:	2000185c 	.word	0x2000185c
 8001c38:	20040fdc 	.word	0x20040fdc
 8001c3c:	20040f2c 	.word	0x20040f2c
 8001c40:	cccccccd 	.word	0xcccccccd
 8001c44:	20001864 	.word	0x20001864
 8001c48:	2000187c 	.word	0x2000187c
				if(HAL_GetTick() - state_time >= 300){
 8001c4c:	f002 f812 	bl	8003c74 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b97      	ldr	r3, [pc, #604]	; (8001eb0 <state_machine+0x7f0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c5c:	d307      	bcc.n	8001c6e <state_machine+0x5ae>
					state_time = 0;
 8001c5e:	4b94      	ldr	r3, [pc, #592]	; (8001eb0 <state_machine+0x7f0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001c64:	4b93      	ldr	r3, [pc, #588]	; (8001eb4 <state_machine+0x7f4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	330a      	adds	r3, #10
 8001c6a:	4a92      	ldr	r2, [pc, #584]	; (8001eb4 <state_machine+0x7f4>)
 8001c6c:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8001c6e:	4b91      	ldr	r3, [pc, #580]	; (8001eb4 <state_machine+0x7f4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <state_machine+0x5dc>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 8001c76:	4b8f      	ldr	r3, [pc, #572]	; (8001eb4 <state_machine+0x7f4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a8f      	ldr	r2, [pc, #572]	; (8001eb8 <state_machine+0x7f8>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f240 7397 	movw	r3, #1943	; 0x797
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	230a      	movs	r3, #10
 8001c94:	2196      	movs	r1, #150	; 0x96
 8001c96:	2064      	movs	r0, #100	; 0x64
 8001c98:	f7ff f89e 	bl	8000dd8 <print_rectangle>
			}

			if(state_progress == 100){
 8001c9c:	4b85      	ldr	r3, [pc, #532]	; (8001eb4 <state_machine+0x7f4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b64      	cmp	r3, #100	; 0x64
 8001ca2:	d10b      	bne.n	8001cbc <state_machine+0x5fc>
				state_progress = 0;
 8001ca4:	4b83      	ldr	r3, [pc, #524]	; (8001eb4 <state_machine+0x7f4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001caa:	4b81      	ldr	r3, [pc, #516]	; (8001eb0 <state_machine+0x7f0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001cb0:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <state_machine+0x7fc>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
				system_state = 7;
 8001cb6:	4b82      	ldr	r3, [pc, #520]	; (8001ec0 <state_machine+0x800>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
			}			

			check_brightness();
 8001cbc:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <state_machine+0x804>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11f      	bne.n	8001d04 <state_machine+0x644>
 8001cc4:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <state_machine+0x804>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01a      	beq.n	8001d0a <state_machine+0x64a>
 8001cd4:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <state_machine+0x808>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d103      	bne.n	8001ce4 <state_machine+0x624>
 8001cdc:	4b7a      	ldr	r3, [pc, #488]	; (8001ec8 <state_machine+0x808>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e004      	b.n	8001cee <state_machine+0x62e>
 8001ce4:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <state_machine+0x808>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	4a77      	ldr	r2, [pc, #476]	; (8001ec8 <state_machine+0x808>)
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <state_machine+0x808>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a76      	ldr	r2, [pc, #472]	; (8001ecc <state_machine+0x80c>)
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4874      	ldr	r0, [pc, #464]	; (8001ed0 <state_machine+0x810>)
 8001cfe:	f002 fca9 	bl	8004654 <HAL_LTDC_SetAlpha>
 8001d02:	e002      	b.n	8001d0a <state_machine+0x64a>
 8001d04:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <state_machine+0x804>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
			check_switch();
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f041 802a 	bne.w	8002d66 <state_machine+0x16a6>
 8001d12:	4b6b      	ldr	r3, [pc, #428]	; (8001ec0 <state_machine+0x800>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4b6e      	ldr	r3, [pc, #440]	; (8001ed4 <state_machine+0x814>)
 8001d1a:	22b4      	movs	r2, #180	; 0xb4
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	4b67      	ldr	r3, [pc, #412]	; (8001ebc <state_machine+0x7fc>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
			break;
 8001d24:	f001 b81f 	b.w	8002d66 <state_machine+0x16a6>
		}
		case 7:{
			if(need_out){
 8001d28:	4b64      	ldr	r3, [pc, #400]	; (8001ebc <state_machine+0x7fc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01a      	beq.n	8001d66 <state_machine+0x6a6>
				fill_screen(0);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff fc05 	bl	8001540 <fill_screen>
				print_fat_rectangle();
 8001d36:	f7ff fc93 	bl	8001660 <print_fat_rectangle>
				print_string_scaled_y(110, 90, state7_string, 0x797, 2);	
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	f240 7397 	movw	r3, #1943	; 0x797
 8001d42:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <state_machine+0x818>)
 8001d44:	215a      	movs	r1, #90	; 0x5a
 8001d46:	206e      	movs	r0, #110	; 0x6e
 8001d48:	f7ff fbd1 	bl	80014ee <print_string_scaled_y>
				print_number(180, 130, system_angle, 0x797, 2);
 8001d4c:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <state_machine+0x814>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f240 7397 	movw	r3, #1943	; 0x797
 8001d58:	2182      	movs	r1, #130	; 0x82
 8001d5a:	20b4      	movs	r0, #180	; 0xb4
 8001d5c:	f7ff fc0e 	bl	800157c <print_number>
				need_out = 0;
 8001d60:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <state_machine+0x7fc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
			}


			if(!mem_sp_st){
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <state_machine+0x81c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <state_machine+0x6b6>
				mem_sp_st = sp_st;
 8001d6e:	4a5b      	ldr	r2, [pc, #364]	; (8001edc <state_machine+0x81c>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e059      	b.n	8001e2a <state_machine+0x76a>
			}else{
				if(mem_sp_st > sp_st){
 8001d76:	4b59      	ldr	r3, [pc, #356]	; (8001edc <state_machine+0x81c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d227      	bcs.n	8001dd0 <state_machine+0x710>
					if(((int32_t)(system_angle - (mem_sp_st - sp_st))) >= 0){
 8001d80:	4b56      	ldr	r3, [pc, #344]	; (8001edc <state_machine+0x81c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	1ad2      	subs	r2, r2, r3
 8001d88:	4b52      	ldr	r3, [pc, #328]	; (8001ed4 <state_machine+0x814>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db08      	blt.n	8001da4 <state_machine+0x6e4>
						system_angle -= mem_sp_st - sp_st;
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <state_machine+0x81c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	1ad2      	subs	r2, r2, r3
 8001d9a:	4b4e      	ldr	r3, [pc, #312]	; (8001ed4 <state_machine+0x814>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a4c      	ldr	r2, [pc, #304]	; (8001ed4 <state_machine+0x814>)
 8001da2:	6013      	str	r3, [r2, #0]
					}
					print_rectangle(180, 130, 100, 40, 0);
 8001da4:	2300      	movs	r3, #0
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2328      	movs	r3, #40	; 0x28
 8001daa:	2264      	movs	r2, #100	; 0x64
 8001dac:	2182      	movs	r1, #130	; 0x82
 8001dae:	20b4      	movs	r0, #180	; 0xb4
 8001db0:	f7ff f812 	bl	8000dd8 <print_rectangle>
					print_number(180, 130, system_angle, 0x797, 2);
 8001db4:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <state_machine+0x814>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2302      	movs	r3, #2
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f240 7397 	movw	r3, #1943	; 0x797
 8001dc0:	2182      	movs	r1, #130	; 0x82
 8001dc2:	20b4      	movs	r0, #180	; 0xb4
 8001dc4:	f7ff fbda 	bl	800157c <print_number>
					mem_sp_st = 0;
 8001dc8:	4b44      	ldr	r3, [pc, #272]	; (8001edc <state_machine+0x81c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e02c      	b.n	8001e2a <state_machine+0x76a>
				}else if(mem_sp_st < sp_st){
 8001dd0:	4b42      	ldr	r3, [pc, #264]	; (8001edc <state_machine+0x81c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d927      	bls.n	8001e2a <state_machine+0x76a>
					if(system_angle + sp_st - mem_sp_st <= 360){
 8001dda:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <state_machine+0x814>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	441a      	add	r2, r3
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <state_machine+0x81c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001dec:	d808      	bhi.n	8001e00 <state_machine+0x740>
						system_angle += sp_st - mem_sp_st;
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <state_machine+0x81c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	1ad2      	subs	r2, r2, r3
 8001df6:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <state_machine+0x814>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a35      	ldr	r2, [pc, #212]	; (8001ed4 <state_machine+0x814>)
 8001dfe:	6013      	str	r3, [r2, #0]
					}
					print_rectangle(180, 130, 20, 20, 0);
 8001e00:	2300      	movs	r3, #0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2314      	movs	r3, #20
 8001e06:	2214      	movs	r2, #20
 8001e08:	2182      	movs	r1, #130	; 0x82
 8001e0a:	20b4      	movs	r0, #180	; 0xb4
 8001e0c:	f7fe ffe4 	bl	8000dd8 <print_rectangle>
					print_number(180, 130, system_angle, 0x797, 2);
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <state_machine+0x814>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2302      	movs	r3, #2
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	f240 7397 	movw	r3, #1943	; 0x797
 8001e1c:	2182      	movs	r1, #130	; 0x82
 8001e1e:	20b4      	movs	r0, #180	; 0xb4
 8001e20:	f7ff fbac 	bl	800157c <print_number>
					mem_sp_st = 0;
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <state_machine+0x81c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
				}	
			}

			if(spb_st){
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <state_machine+0x782>
				mem_sp_st = 0;
 8001e30:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <state_machine+0x81c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <state_machine+0x7fc>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
				system_state = 8;
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <state_machine+0x800>)
 8001e3e:	2208      	movs	r2, #8
 8001e40:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <state_machine+0x804>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11f      	bne.n	8001e8a <state_machine+0x7ca>
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <state_machine+0x804>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01a      	beq.n	8001e90 <state_machine+0x7d0>
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <state_machine+0x808>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d103      	bne.n	8001e6a <state_machine+0x7aa>
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <state_machine+0x808>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e004      	b.n	8001e74 <state_machine+0x7b4>
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <state_machine+0x808>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <state_machine+0x808>)
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <state_machine+0x808>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <state_machine+0x80c>)
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <state_machine+0x810>)
 8001e84:	f002 fbe6 	bl	8004654 <HAL_LTDC_SetAlpha>
 8001e88:	e002      	b.n	8001e90 <state_machine+0x7d0>
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <state_machine+0x804>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
			check_switch();
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 8769 	bne.w	8002d6a <state_machine+0x16aa>
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <state_machine+0x800>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <state_machine+0x814>)
 8001ea0:	22b4      	movs	r2, #180	; 0xb4
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <state_machine+0x7fc>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
			break;
 8001eaa:	f000 bf5e 	b.w	8002d6a <state_machine+0x16aa>
 8001eae:	bf00      	nop
 8001eb0:	20040fdc 	.word	0x20040fdc
 8001eb4:	20040f2c 	.word	0x20040f2c
 8001eb8:	cccccccd 	.word	0xcccccccd
 8001ebc:	20001a24 	.word	0x20001a24
 8001ec0:	20040f28 	.word	0x20040f28
 8001ec4:	20040f24 	.word	0x20040f24
 8001ec8:	20001804 	.word	0x20001804
 8001ecc:	20001808 	.word	0x20001808
 8001ed0:	20040f34 	.word	0x20040f34
 8001ed4:	20001a28 	.word	0x20001a28
 8001ed8:	20001888 	.word	0x20001888
 8001edc:	20040f30 	.word	0x20040f30
		}
		case 8:{
			if(need_out){
 8001ee0:	4ba0      	ldr	r3, [pc, #640]	; (8002164 <state_machine+0xaa4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01a      	beq.n	8001f1e <state_machine+0x85e>
				fill_screen(0);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fb29 	bl	8001540 <fill_screen>
				print_fat_rectangle();
 8001eee:	f7ff fbb7 	bl	8001660 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state8_string, 0x797, 2);
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	f240 7397 	movw	r3, #1943	; 0x797
 8001efa:	4a9b      	ldr	r2, [pc, #620]	; (8002168 <state_machine+0xaa8>)
 8001efc:	2164      	movs	r1, #100	; 0x64
 8001efe:	20b4      	movs	r0, #180	; 0xb4
 8001f00:	f7ff faf5 	bl	80014ee <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001f04:	f240 7397 	movw	r3, #1943	; 0x797
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001f10:	2196      	movs	r1, #150	; 0x96
 8001f12:	2064      	movs	r0, #100	; 0x64
 8001f14:	f7fe ff94 	bl	8000e40 <print_rectangle_empty>
				need_out = 0;
 8001f18:	4b92      	ldr	r3, [pc, #584]	; (8002164 <state_machine+0xaa4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

			}

			if(!state_time){state_time = HAL_GetTick();}else{
 8001f1e:	4b93      	ldr	r3, [pc, #588]	; (800216c <state_machine+0xaac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <state_machine+0x872>
 8001f26:	f001 fea5 	bl	8003c74 <HAL_GetTick>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a8f      	ldr	r2, [pc, #572]	; (800216c <state_machine+0xaac>)
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e010      	b.n	8001f54 <state_machine+0x894>
				if(HAL_GetTick() - state_time >= 300){
 8001f32:	f001 fe9f 	bl	8003c74 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4b8c      	ldr	r3, [pc, #560]	; (800216c <state_machine+0xaac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f42:	d307      	bcc.n	8001f54 <state_machine+0x894>
					state_time = 0;
 8001f44:	4b89      	ldr	r3, [pc, #548]	; (800216c <state_machine+0xaac>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001f4a:	4b89      	ldr	r3, [pc, #548]	; (8002170 <state_machine+0xab0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	330a      	adds	r3, #10
 8001f50:	4a87      	ldr	r2, [pc, #540]	; (8002170 <state_machine+0xab0>)
 8001f52:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8001f54:	4b86      	ldr	r3, [pc, #536]	; (8002170 <state_machine+0xab0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d012      	beq.n	8001f82 <state_machine+0x8c2>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 8001f5c:	4b84      	ldr	r3, [pc, #528]	; (8002170 <state_machine+0xab0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a84      	ldr	r2, [pc, #528]	; (8002174 <state_machine+0xab4>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	461a      	mov	r2, r3
 8001f72:	f240 7397 	movw	r3, #1943	; 0x797
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	230a      	movs	r3, #10
 8001f7a:	2196      	movs	r1, #150	; 0x96
 8001f7c:	2064      	movs	r0, #100	; 0x64
 8001f7e:	f7fe ff2b 	bl	8000dd8 <print_rectangle>
			}

			if(state_progress == 100){
 8001f82:	4b7b      	ldr	r3, [pc, #492]	; (8002170 <state_machine+0xab0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d10b      	bne.n	8001fa2 <state_machine+0x8e2>
				state_progress = 0;
 8001f8a:	4b79      	ldr	r3, [pc, #484]	; (8002170 <state_machine+0xab0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001f90:	4b76      	ldr	r3, [pc, #472]	; (800216c <state_machine+0xaac>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001f96:	4b73      	ldr	r3, [pc, #460]	; (8002164 <state_machine+0xaa4>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
				system_state = 9;
 8001f9c:	4b76      	ldr	r3, [pc, #472]	; (8002178 <state_machine+0xab8>)
 8001f9e:	2209      	movs	r2, #9
 8001fa0:	601a      	str	r2, [r3, #0]
			}			

			check_brightness();
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <state_machine+0xabc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d11f      	bne.n	8001fea <state_machine+0x92a>
 8001faa:	4b74      	ldr	r3, [pc, #464]	; (800217c <state_machine+0xabc>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d01a      	beq.n	8001ff0 <state_machine+0x930>
 8001fba:	4b71      	ldr	r3, [pc, #452]	; (8002180 <state_machine+0xac0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d103      	bne.n	8001fca <state_machine+0x90a>
 8001fc2:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <state_machine+0xac0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e004      	b.n	8001fd4 <state_machine+0x914>
 8001fca:	4b6d      	ldr	r3, [pc, #436]	; (8002180 <state_machine+0xac0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <state_machine+0xac0>)
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b6a      	ldr	r3, [pc, #424]	; (8002180 <state_machine+0xac0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <state_machine+0xac4>)
 8001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4869      	ldr	r0, [pc, #420]	; (8002188 <state_machine+0xac8>)
 8001fe4:	f002 fb36 	bl	8004654 <HAL_LTDC_SetAlpha>
 8001fe8:	e002      	b.n	8001ff0 <state_machine+0x930>
 8001fea:	4b64      	ldr	r3, [pc, #400]	; (800217c <state_machine+0xabc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
			check_switch();
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 86bb 	bne.w	8002d6e <state_machine+0x16ae>
 8001ff8:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <state_machine+0xab8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <state_machine+0xacc>)
 8002000:	22b4      	movs	r2, #180	; 0xb4
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	4b57      	ldr	r3, [pc, #348]	; (8002164 <state_machine+0xaa4>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
			break;
 800200a:	f000 beb0 	b.w	8002d6e <state_machine+0x16ae>
		}
		case 9:{
			if(need_out){
 800200e:	4b55      	ldr	r3, [pc, #340]	; (8002164 <state_machine+0xaa4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d010      	beq.n	8002038 <state_machine+0x978>
				fill_screen(0);
 8002016:	2000      	movs	r0, #0
 8002018:	f7ff fa92 	bl	8001540 <fill_screen>
				print_fat_rectangle();
 800201c:	f7ff fb20 	bl	8001660 <print_fat_rectangle>
				print_string_scaled_y(165, 105, state9_string, 0x797, 2);
 8002020:	2302      	movs	r3, #2
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f240 7397 	movw	r3, #1943	; 0x797
 8002028:	4a59      	ldr	r2, [pc, #356]	; (8002190 <state_machine+0xad0>)
 800202a:	2169      	movs	r1, #105	; 0x69
 800202c:	20a5      	movs	r0, #165	; 0xa5
 800202e:	f7ff fa5e 	bl	80014ee <print_string_scaled_y>
				need_out = 0;
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <state_machine+0xaa4>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <state_machine+0x990>
 8002042:	4b48      	ldr	r3, [pc, #288]	; (8002164 <state_machine+0xaa4>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <state_machine+0xab8>)
 800204a:	220a      	movs	r2, #10
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e052      	b.n	80020f6 <state_machine+0xa36>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d006      	beq.n	8002068 <state_machine+0x9a8>
 800205a:	4b42      	ldr	r3, [pc, #264]	; (8002164 <state_machine+0xaa4>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	4b45      	ldr	r3, [pc, #276]	; (8002178 <state_machine+0xab8>)
 8002062:	220b      	movs	r2, #11
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e046      	b.n	80020f6 <state_machine+0xa36>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <state_machine+0x9c0>
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <state_machine+0xaa4>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <state_machine+0xab8>)
 800207a:	220c      	movs	r2, #12
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e03a      	b.n	80020f6 <state_machine+0xa36>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <state_machine+0x9d8>
 800208a:	4b36      	ldr	r3, [pc, #216]	; (8002164 <state_machine+0xaa4>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <state_machine+0xab8>)
 8002092:	220d      	movs	r2, #13
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e02e      	b.n	80020f6 <state_machine+0xa36>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <state_machine+0x9f0>
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <state_machine+0xaa4>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	4b33      	ldr	r3, [pc, #204]	; (8002178 <state_machine+0xab8>)
 80020aa:	220e      	movs	r2, #14
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e022      	b.n	80020f6 <state_machine+0xa36>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <state_machine+0xa08>
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <state_machine+0xaa4>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <state_machine+0xab8>)
 80020c2:	220f      	movs	r2, #15
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e016      	b.n	80020f6 <state_machine+0xa36>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <state_machine+0xa20>
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <state_machine+0xaa4>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <state_machine+0xab8>)
 80020da:	2210      	movs	r2, #16
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e00a      	b.n	80020f6 <state_machine+0xa36>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <state_machine+0xa36>
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <state_machine+0xaa4>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <state_machine+0xab8>)
 80020f2:	2211      	movs	r2, #17
 80020f4:	601a      	str	r2, [r3, #0]

			check_brightness();
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <state_machine+0xabc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d11f      	bne.n	800213e <state_machine+0xa7e>
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <state_machine+0xabc>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01a      	beq.n	8002144 <state_machine+0xa84>
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <state_machine+0xac0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d103      	bne.n	800211e <state_machine+0xa5e>
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <state_machine+0xac0>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e004      	b.n	8002128 <state_machine+0xa68>
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <state_machine+0xac0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a16      	ldr	r2, [pc, #88]	; (8002180 <state_machine+0xac0>)
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b15      	ldr	r3, [pc, #84]	; (8002180 <state_machine+0xac0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a15      	ldr	r2, [pc, #84]	; (8002184 <state_machine+0xac4>)
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	4814      	ldr	r0, [pc, #80]	; (8002188 <state_machine+0xac8>)
 8002138:	f002 fa8c 	bl	8004654 <HAL_LTDC_SetAlpha>
 800213c:	e002      	b.n	8002144 <state_machine+0xa84>
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <state_machine+0xabc>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
			check_switch();
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 8613 	bne.w	8002d72 <state_machine+0x16b2>
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <state_machine+0xab8>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <state_machine+0xacc>)
 8002154:	22b4      	movs	r2, #180	; 0xb4
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <state_machine+0xaa4>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]
			break;
 800215e:	f000 be08 	b.w	8002d72 <state_machine+0x16b2>
 8002162:	bf00      	nop
 8002164:	20001a24 	.word	0x20001a24
 8002168:	200018a0 	.word	0x200018a0
 800216c:	20040fdc 	.word	0x20040fdc
 8002170:	20040f2c 	.word	0x20040f2c
 8002174:	cccccccd 	.word	0xcccccccd
 8002178:	20040f28 	.word	0x20040f28
 800217c:	20040f24 	.word	0x20040f24
 8002180:	20001804 	.word	0x20001804
 8002184:	20001808 	.word	0x20001808
 8002188:	20040f34 	.word	0x20040f34
 800218c:	20001a28 	.word	0x20001a28
 8002190:	200018ac 	.word	0x200018ac
		}
		case 10:{
			if(need_out){
 8002194:	4b8e      	ldr	r3, [pc, #568]	; (80023d0 <state_machine+0xd10>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <state_machine+0xb08>
				fill_screen(0);
 800219c:	2000      	movs	r0, #0
 800219e:	f7ff f9cf 	bl	8001540 <fill_screen>
				print_string(10, 40, state10_string, 0x797);
 80021a2:	f240 7397 	movw	r3, #1943	; 0x797
 80021a6:	4a8b      	ldr	r2, [pc, #556]	; (80023d4 <state_machine+0xd14>)
 80021a8:	2128      	movs	r1, #40	; 0x28
 80021aa:	200a      	movs	r0, #10
 80021ac:	f7ff f94a 	bl	8001444 <print_string>
				print_string_scaled(10, 100, state10_string_2, 0x797, 3);
 80021b0:	2303      	movs	r3, #3
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	f240 7397 	movw	r3, #1943	; 0x797
 80021b8:	4a87      	ldr	r2, [pc, #540]	; (80023d8 <state_machine+0xd18>)
 80021ba:	2164      	movs	r1, #100	; 0x64
 80021bc:	200a      	movs	r0, #10
 80021be:	f7ff f967 	bl	8001490 <print_string_scaled>
				need_out = 0;
 80021c2:	4b83      	ldr	r3, [pc, #524]	; (80023d0 <state_machine+0xd10>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <state_machine+0xb20>
 80021d2:	4b7f      	ldr	r3, [pc, #508]	; (80023d0 <state_machine+0xd10>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	4b80      	ldr	r3, [pc, #512]	; (80023dc <state_machine+0xd1c>)
 80021da:	220a      	movs	r2, #10
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e052      	b.n	8002286 <state_machine+0xbc6>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <state_machine+0xb38>
 80021ea:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <state_machine+0xd10>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	4b7a      	ldr	r3, [pc, #488]	; (80023dc <state_machine+0xd1c>)
 80021f2:	220b      	movs	r2, #11
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e046      	b.n	8002286 <state_machine+0xbc6>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <state_machine+0xb50>
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <state_machine+0xd10>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	4b74      	ldr	r3, [pc, #464]	; (80023dc <state_machine+0xd1c>)
 800220a:	220c      	movs	r2, #12
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e03a      	b.n	8002286 <state_machine+0xbc6>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <state_machine+0xb68>
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <state_machine+0xd10>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <state_machine+0xd1c>)
 8002222:	220d      	movs	r2, #13
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e02e      	b.n	8002286 <state_machine+0xbc6>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <state_machine+0xb80>
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <state_machine+0xd10>)
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	4b68      	ldr	r3, [pc, #416]	; (80023dc <state_machine+0xd1c>)
 800223a:	220e      	movs	r2, #14
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e022      	b.n	8002286 <state_machine+0xbc6>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <state_machine+0xb98>
 800224a:	4b61      	ldr	r3, [pc, #388]	; (80023d0 <state_machine+0xd10>)
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	4b62      	ldr	r3, [pc, #392]	; (80023dc <state_machine+0xd1c>)
 8002252:	220f      	movs	r2, #15
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e016      	b.n	8002286 <state_machine+0xbc6>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <state_machine+0xbb0>
 8002262:	4b5b      	ldr	r3, [pc, #364]	; (80023d0 <state_machine+0xd10>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	4b5c      	ldr	r3, [pc, #368]	; (80023dc <state_machine+0xd1c>)
 800226a:	2210      	movs	r2, #16
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e00a      	b.n	8002286 <state_machine+0xbc6>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <state_machine+0xbc6>
 800227a:	4b55      	ldr	r3, [pc, #340]	; (80023d0 <state_machine+0xd10>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	4b56      	ldr	r3, [pc, #344]	; (80023dc <state_machine+0xd1c>)
 8002282:	2211      	movs	r2, #17
 8002284:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002286:	4b56      	ldr	r3, [pc, #344]	; (80023e0 <state_machine+0xd20>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d11f      	bne.n	80022ce <state_machine+0xc0e>
 800228e:	4b54      	ldr	r3, [pc, #336]	; (80023e0 <state_machine+0xd20>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01a      	beq.n	80022d4 <state_machine+0xc14>
 800229e:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <state_machine+0xd24>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d103      	bne.n	80022ae <state_machine+0xbee>
 80022a6:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <state_machine+0xd24>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e004      	b.n	80022b8 <state_machine+0xbf8>
 80022ae:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <state_machine+0xd24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	4a4b      	ldr	r2, [pc, #300]	; (80023e4 <state_machine+0xd24>)
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <state_machine+0xd24>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a4a      	ldr	r2, [pc, #296]	; (80023e8 <state_machine+0xd28>)
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	2200      	movs	r2, #0
 80022c4:	4619      	mov	r1, r3
 80022c6:	4849      	ldr	r0, [pc, #292]	; (80023ec <state_machine+0xd2c>)
 80022c8:	f002 f9c4 	bl	8004654 <HAL_LTDC_SetAlpha>
 80022cc:	e002      	b.n	80022d4 <state_machine+0xc14>
 80022ce:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <state_machine+0xd20>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
			check_switch();
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 854d 	bne.w	8002d76 <state_machine+0x16b6>
 80022dc:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <state_machine+0xd1c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <state_machine+0xd30>)
 80022e4:	22b4      	movs	r2, #180	; 0xb4
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <state_machine+0xd10>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
			break;			
 80022ee:	f000 bd42 	b.w	8002d76 <state_machine+0x16b6>
		}
		case 11:{
			if(need_out){
 80022f2:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <state_machine+0xd10>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d015      	beq.n	8002326 <state_machine+0xc66>
				fill_screen(0);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7ff f920 	bl	8001540 <fill_screen>
				print_string(10, 40, state11_string, 0x797);
 8002300:	f240 7397 	movw	r3, #1943	; 0x797
 8002304:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <state_machine+0xd34>)
 8002306:	2128      	movs	r1, #40	; 0x28
 8002308:	200a      	movs	r0, #10
 800230a:	f7ff f89b 	bl	8001444 <print_string>
				print_string_scaled(10, 100, state11_string_2, 0x797, 3);
 800230e:	2303      	movs	r3, #3
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f240 7397 	movw	r3, #1943	; 0x797
 8002316:	4a38      	ldr	r2, [pc, #224]	; (80023f8 <state_machine+0xd38>)
 8002318:	2164      	movs	r1, #100	; 0x64
 800231a:	200a      	movs	r0, #10
 800231c:	f7ff f8b8 	bl	8001490 <print_string_scaled>
				need_out = 0;
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <state_machine+0xd10>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
			}			

			check_data();
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <state_machine+0xc7e>
 8002330:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <state_machine+0xd10>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	4b29      	ldr	r3, [pc, #164]	; (80023dc <state_machine+0xd1c>)
 8002338:	220a      	movs	r2, #10
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e069      	b.n	8002412 <state_machine+0xd52>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <state_machine+0xc96>
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <state_machine+0xd10>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <state_machine+0xd1c>)
 8002350:	220b      	movs	r2, #11
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e05d      	b.n	8002412 <state_machine+0xd52>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <state_machine+0xcae>
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <state_machine+0xd10>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <state_machine+0xd1c>)
 8002368:	220c      	movs	r2, #12
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e051      	b.n	8002412 <state_machine+0xd52>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <state_machine+0xcc6>
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <state_machine+0xd10>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <state_machine+0xd1c>)
 8002380:	220d      	movs	r2, #13
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e045      	b.n	8002412 <state_machine+0xd52>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <state_machine+0xcde>
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <state_machine+0xd10>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <state_machine+0xd1c>)
 8002398:	220e      	movs	r2, #14
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e039      	b.n	8002412 <state_machine+0xd52>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <state_machine+0xcf6>
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <state_machine+0xd10>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <state_machine+0xd1c>)
 80023b0:	220f      	movs	r2, #15
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e02d      	b.n	8002412 <state_machine+0xd52>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01d      	beq.n	80023fc <state_machine+0xd3c>
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <state_machine+0xd10>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <state_machine+0xd1c>)
 80023c8:	2210      	movs	r2, #16
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e021      	b.n	8002412 <state_machine+0xd52>
 80023ce:	bf00      	nop
 80023d0:	20001a24 	.word	0x20001a24
 80023d4:	200018bc 	.word	0x200018bc
 80023d8:	20001998 	.word	0x20001998
 80023dc:	20040f28 	.word	0x20040f28
 80023e0:	20040f24 	.word	0x20040f24
 80023e4:	20001804 	.word	0x20001804
 80023e8:	20001808 	.word	0x20001808
 80023ec:	20040f34 	.word	0x20040f34
 80023f0:	20001a28 	.word	0x20001a28
 80023f4:	200018d0 	.word	0x200018d0
 80023f8:	200019a4 	.word	0x200019a4
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <state_machine+0xd52>
 8002406:	4b9d      	ldr	r3, [pc, #628]	; (800267c <state_machine+0xfbc>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	4b9c      	ldr	r3, [pc, #624]	; (8002680 <state_machine+0xfc0>)
 800240e:	2211      	movs	r2, #17
 8002410:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002412:	4b9c      	ldr	r3, [pc, #624]	; (8002684 <state_machine+0xfc4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11f      	bne.n	800245a <state_machine+0xd9a>
 800241a:	4b9a      	ldr	r3, [pc, #616]	; (8002684 <state_machine+0xfc4>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d01a      	beq.n	8002460 <state_machine+0xda0>
 800242a:	4b97      	ldr	r3, [pc, #604]	; (8002688 <state_machine+0xfc8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d103      	bne.n	800243a <state_machine+0xd7a>
 8002432:	4b95      	ldr	r3, [pc, #596]	; (8002688 <state_machine+0xfc8>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e004      	b.n	8002444 <state_machine+0xd84>
 800243a:	4b93      	ldr	r3, [pc, #588]	; (8002688 <state_machine+0xfc8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	4a91      	ldr	r2, [pc, #580]	; (8002688 <state_machine+0xfc8>)
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b90      	ldr	r3, [pc, #576]	; (8002688 <state_machine+0xfc8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a90      	ldr	r2, [pc, #576]	; (800268c <state_machine+0xfcc>)
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	2200      	movs	r2, #0
 8002450:	4619      	mov	r1, r3
 8002452:	488f      	ldr	r0, [pc, #572]	; (8002690 <state_machine+0xfd0>)
 8002454:	f002 f8fe 	bl	8004654 <HAL_LTDC_SetAlpha>
 8002458:	e002      	b.n	8002460 <state_machine+0xda0>
 800245a:	4b8a      	ldr	r3, [pc, #552]	; (8002684 <state_machine+0xfc4>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
			check_switch();
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8489 	bne.w	8002d7a <state_machine+0x16ba>
 8002468:	4b85      	ldr	r3, [pc, #532]	; (8002680 <state_machine+0xfc0>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	4b89      	ldr	r3, [pc, #548]	; (8002694 <state_machine+0xfd4>)
 8002470:	22b4      	movs	r2, #180	; 0xb4
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	4b81      	ldr	r3, [pc, #516]	; (800267c <state_machine+0xfbc>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]
			break;			
 800247a:	f000 bc7e 	b.w	8002d7a <state_machine+0x16ba>
		}
		case 12:{
			if(need_out){
 800247e:	4b7f      	ldr	r3, [pc, #508]	; (800267c <state_machine+0xfbc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d027      	beq.n	80024d6 <state_machine+0xe16>
				fill_screen(0);
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff f85a 	bl	8001540 <fill_screen>
				print_string(10, 40, state12_string, 0x797);
 800248c:	f240 7397 	movw	r3, #1943	; 0x797
 8002490:	4a81      	ldr	r2, [pc, #516]	; (8002698 <state_machine+0xfd8>)
 8002492:	2128      	movs	r1, #40	; 0x28
 8002494:	200a      	movs	r0, #10
 8002496:	f7fe ffd5 	bl	8001444 <print_string>
				print_string_scaled(10, 100, state12_string_2, 0x797, 3);
 800249a:	2303      	movs	r3, #3
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	f240 7397 	movw	r3, #1943	; 0x797
 80024a2:	4a7e      	ldr	r2, [pc, #504]	; (800269c <state_machine+0xfdc>)
 80024a4:	2164      	movs	r1, #100	; 0x64
 80024a6:	200a      	movs	r0, #10
 80024a8:	f7fe fff2 	bl	8001490 <print_string_scaled>
				print_string_scaled_y(10, 145, state12_string_3, 0x797, 2);
 80024ac:	2302      	movs	r3, #2
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f240 7397 	movw	r3, #1943	; 0x797
 80024b4:	4a7a      	ldr	r2, [pc, #488]	; (80026a0 <state_machine+0xfe0>)
 80024b6:	2191      	movs	r1, #145	; 0x91
 80024b8:	200a      	movs	r0, #10
 80024ba:	f7ff f818 	bl	80014ee <print_string_scaled_y>
				print_string_scaled_y(50, 180, state12_string_4, 0x797, 2);
 80024be:	2302      	movs	r3, #2
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	f240 7397 	movw	r3, #1943	; 0x797
 80024c6:	4a77      	ldr	r2, [pc, #476]	; (80026a4 <state_machine+0xfe4>)
 80024c8:	21b4      	movs	r1, #180	; 0xb4
 80024ca:	2032      	movs	r0, #50	; 0x32
 80024cc:	f7ff f80f 	bl	80014ee <print_string_scaled_y>

				need_out = 0;
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <state_machine+0xfbc>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d006      	beq.n	80024ee <state_machine+0xe2e>
 80024e0:	4b66      	ldr	r3, [pc, #408]	; (800267c <state_machine+0xfbc>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	4b66      	ldr	r3, [pc, #408]	; (8002680 <state_machine+0xfc0>)
 80024e8:	220a      	movs	r2, #10
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e052      	b.n	8002594 <state_machine+0xed4>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <state_machine+0xe46>
 80024f8:	4b60      	ldr	r3, [pc, #384]	; (800267c <state_machine+0xfbc>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	4b60      	ldr	r3, [pc, #384]	; (8002680 <state_machine+0xfc0>)
 8002500:	220b      	movs	r2, #11
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e046      	b.n	8002594 <state_machine+0xed4>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <state_machine+0xe5e>
 8002510:	4b5a      	ldr	r3, [pc, #360]	; (800267c <state_machine+0xfbc>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <state_machine+0xfc0>)
 8002518:	220c      	movs	r2, #12
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e03a      	b.n	8002594 <state_machine+0xed4>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <state_machine+0xe76>
 8002528:	4b54      	ldr	r3, [pc, #336]	; (800267c <state_machine+0xfbc>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	4b54      	ldr	r3, [pc, #336]	; (8002680 <state_machine+0xfc0>)
 8002530:	220d      	movs	r2, #13
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e02e      	b.n	8002594 <state_machine+0xed4>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <state_machine+0xe8e>
 8002540:	4b4e      	ldr	r3, [pc, #312]	; (800267c <state_machine+0xfbc>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <state_machine+0xfc0>)
 8002548:	220e      	movs	r2, #14
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e022      	b.n	8002594 <state_machine+0xed4>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <state_machine+0xea6>
 8002558:	4b48      	ldr	r3, [pc, #288]	; (800267c <state_machine+0xfbc>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	4b48      	ldr	r3, [pc, #288]	; (8002680 <state_machine+0xfc0>)
 8002560:	220f      	movs	r2, #15
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e016      	b.n	8002594 <state_machine+0xed4>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <state_machine+0xebe>
 8002570:	4b42      	ldr	r3, [pc, #264]	; (800267c <state_machine+0xfbc>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	4b42      	ldr	r3, [pc, #264]	; (8002680 <state_machine+0xfc0>)
 8002578:	2210      	movs	r2, #16
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e00a      	b.n	8002594 <state_machine+0xed4>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <state_machine+0xed4>
 8002588:	4b3c      	ldr	r3, [pc, #240]	; (800267c <state_machine+0xfbc>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <state_machine+0xfc0>)
 8002590:	2211      	movs	r2, #17
 8002592:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002594:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <state_machine+0xfc4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11f      	bne.n	80025dc <state_machine+0xf1c>
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <state_machine+0xfc4>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01a      	beq.n	80025e2 <state_machine+0xf22>
 80025ac:	4b36      	ldr	r3, [pc, #216]	; (8002688 <state_machine+0xfc8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d103      	bne.n	80025bc <state_machine+0xefc>
 80025b4:	4b34      	ldr	r3, [pc, #208]	; (8002688 <state_machine+0xfc8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e004      	b.n	80025c6 <state_machine+0xf06>
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <state_machine+0xfc8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	4a31      	ldr	r2, [pc, #196]	; (8002688 <state_machine+0xfc8>)
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <state_machine+0xfc8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a30      	ldr	r2, [pc, #192]	; (800268c <state_machine+0xfcc>)
 80025cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d0:	2200      	movs	r2, #0
 80025d2:	4619      	mov	r1, r3
 80025d4:	482e      	ldr	r0, [pc, #184]	; (8002690 <state_machine+0xfd0>)
 80025d6:	f002 f83d 	bl	8004654 <HAL_LTDC_SetAlpha>
 80025da:	e002      	b.n	80025e2 <state_machine+0xf22>
 80025dc:	4b29      	ldr	r3, [pc, #164]	; (8002684 <state_machine+0xfc4>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
			check_switch();
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 83ca 	bne.w	8002d7e <state_machine+0x16be>
 80025ea:	4b25      	ldr	r3, [pc, #148]	; (8002680 <state_machine+0xfc0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <state_machine+0xfd4>)
 80025f2:	22b4      	movs	r2, #180	; 0xb4
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <state_machine+0xfbc>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
			break;			
 80025fc:	e3bf      	b.n	8002d7e <state_machine+0x16be>
		}
		case 13:{
			if(need_out){
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <state_machine+0xfbc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d015      	beq.n	8002632 <state_machine+0xf72>
				fill_screen(0);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe ff9a 	bl	8001540 <fill_screen>
				print_string(10, 40, state13_string, 0x797);
 800260c:	f240 7397 	movw	r3, #1943	; 0x797
 8002610:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <state_machine+0xfe8>)
 8002612:	2128      	movs	r1, #40	; 0x28
 8002614:	200a      	movs	r0, #10
 8002616:	f7fe ff15 	bl	8001444 <print_string>
				print_string_scaled(10, 100, state13_string_2, 0x797, 3);
 800261a:	2303      	movs	r3, #3
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	f240 7397 	movw	r3, #1943	; 0x797
 8002622:	4a22      	ldr	r2, [pc, #136]	; (80026ac <state_machine+0xfec>)
 8002624:	2164      	movs	r1, #100	; 0x64
 8002626:	200a      	movs	r0, #10
 8002628:	f7fe ff32 	bl	8001490 <print_string_scaled>
				need_out = 0;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <state_machine+0xfbc>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d006      	beq.n	800264a <state_machine+0xf8a>
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <state_machine+0xfbc>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <state_machine+0xfc0>)
 8002644:	220a      	movs	r2, #10
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e06d      	b.n	8002726 <state_machine+0x1066>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <state_machine+0xfa2>
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <state_machine+0xfbc>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <state_machine+0xfc0>)
 800265c:	220b      	movs	r2, #11
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e061      	b.n	8002726 <state_machine+0x1066>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b00      	cmp	r3, #0
 800266a:	d021      	beq.n	80026b0 <state_machine+0xff0>
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <state_machine+0xfbc>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	4b03      	ldr	r3, [pc, #12]	; (8002680 <state_machine+0xfc0>)
 8002674:	220c      	movs	r2, #12
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e055      	b.n	8002726 <state_machine+0x1066>
 800267a:	bf00      	nop
 800267c:	20001a24 	.word	0x20001a24
 8002680:	20040f28 	.word	0x20040f28
 8002684:	20040f24 	.word	0x20040f24
 8002688:	20001804 	.word	0x20001804
 800268c:	20001808 	.word	0x20001808
 8002690:	20040f34 	.word	0x20040f34
 8002694:	20001a28 	.word	0x20001a28
 8002698:	200018f0 	.word	0x200018f0
 800269c:	200019b0 	.word	0x200019b0
 80026a0:	200019c0 	.word	0x200019c0
 80026a4:	200019d8 	.word	0x200019d8
 80026a8:	20001914 	.word	0x20001914
 80026ac:	200019f0 	.word	0x200019f0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <state_machine+0x1008>
 80026ba:	4b8c      	ldr	r3, [pc, #560]	; (80028ec <state_machine+0x122c>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	4b8b      	ldr	r3, [pc, #556]	; (80028f0 <state_machine+0x1230>)
 80026c2:	220d      	movs	r2, #13
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e02e      	b.n	8002726 <state_machine+0x1066>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <state_machine+0x1020>
 80026d2:	4b86      	ldr	r3, [pc, #536]	; (80028ec <state_machine+0x122c>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <state_machine+0x1230>)
 80026da:	220e      	movs	r2, #14
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e022      	b.n	8002726 <state_machine+0x1066>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <state_machine+0x1038>
 80026ea:	4b80      	ldr	r3, [pc, #512]	; (80028ec <state_machine+0x122c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b7f      	ldr	r3, [pc, #508]	; (80028f0 <state_machine+0x1230>)
 80026f2:	220f      	movs	r2, #15
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e016      	b.n	8002726 <state_machine+0x1066>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d006      	beq.n	8002710 <state_machine+0x1050>
 8002702:	4b7a      	ldr	r3, [pc, #488]	; (80028ec <state_machine+0x122c>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	4b79      	ldr	r3, [pc, #484]	; (80028f0 <state_machine+0x1230>)
 800270a:	2210      	movs	r2, #16
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e00a      	b.n	8002726 <state_machine+0x1066>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <state_machine+0x1066>
 800271a:	4b74      	ldr	r3, [pc, #464]	; (80028ec <state_machine+0x122c>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	4b73      	ldr	r3, [pc, #460]	; (80028f0 <state_machine+0x1230>)
 8002722:	2211      	movs	r2, #17
 8002724:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002726:	4b73      	ldr	r3, [pc, #460]	; (80028f4 <state_machine+0x1234>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d11f      	bne.n	800276e <state_machine+0x10ae>
 800272e:	4b71      	ldr	r3, [pc, #452]	; (80028f4 <state_machine+0x1234>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01a      	beq.n	8002774 <state_machine+0x10b4>
 800273e:	4b6e      	ldr	r3, [pc, #440]	; (80028f8 <state_machine+0x1238>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d103      	bne.n	800274e <state_machine+0x108e>
 8002746:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <state_machine+0x1238>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e004      	b.n	8002758 <state_machine+0x1098>
 800274e:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <state_machine+0x1238>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	4a68      	ldr	r2, [pc, #416]	; (80028f8 <state_machine+0x1238>)
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <state_machine+0x1238>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a67      	ldr	r2, [pc, #412]	; (80028fc <state_machine+0x123c>)
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	2200      	movs	r2, #0
 8002764:	4619      	mov	r1, r3
 8002766:	4866      	ldr	r0, [pc, #408]	; (8002900 <state_machine+0x1240>)
 8002768:	f001 ff74 	bl	8004654 <HAL_LTDC_SetAlpha>
 800276c:	e002      	b.n	8002774 <state_machine+0x10b4>
 800276e:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <state_machine+0x1234>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
			check_switch();
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 8303 	bne.w	8002d82 <state_machine+0x16c2>
 800277c:	4b5c      	ldr	r3, [pc, #368]	; (80028f0 <state_machine+0x1230>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	4b60      	ldr	r3, [pc, #384]	; (8002904 <state_machine+0x1244>)
 8002784:	22b4      	movs	r2, #180	; 0xb4
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	4b58      	ldr	r3, [pc, #352]	; (80028ec <state_machine+0x122c>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]
			break;			
 800278e:	e2f8      	b.n	8002d82 <state_machine+0x16c2>
		}
		case 14:{
			if(need_out){
 8002790:	4b56      	ldr	r3, [pc, #344]	; (80028ec <state_machine+0x122c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <state_machine+0x1104>
				fill_screen(0);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe fed1 	bl	8001540 <fill_screen>
				print_string(10, 40, state14_string, 0x797);
 800279e:	f240 7397 	movw	r3, #1943	; 0x797
 80027a2:	4a59      	ldr	r2, [pc, #356]	; (8002908 <state_machine+0x1248>)
 80027a4:	2128      	movs	r1, #40	; 0x28
 80027a6:	200a      	movs	r0, #10
 80027a8:	f7fe fe4c 	bl	8001444 <print_string>
				print_string_scaled(10, 100, state14_string_2, 0x797, 3);
 80027ac:	2303      	movs	r3, #3
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f240 7397 	movw	r3, #1943	; 0x797
 80027b4:	4a55      	ldr	r2, [pc, #340]	; (800290c <state_machine+0x124c>)
 80027b6:	2164      	movs	r1, #100	; 0x64
 80027b8:	200a      	movs	r0, #10
 80027ba:	f7fe fe69 	bl	8001490 <print_string_scaled>
				need_out = 0;
 80027be:	4b4b      	ldr	r3, [pc, #300]	; (80028ec <state_machine+0x122c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <state_machine+0x111c>
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <state_machine+0x122c>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <state_machine+0x1230>)
 80027d6:	220a      	movs	r2, #10
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e052      	b.n	8002882 <state_machine+0x11c2>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <state_machine+0x1134>
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <state_machine+0x122c>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	4b40      	ldr	r3, [pc, #256]	; (80028f0 <state_machine+0x1230>)
 80027ee:	220b      	movs	r2, #11
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e046      	b.n	8002882 <state_machine+0x11c2>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <state_machine+0x114c>
 80027fe:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <state_machine+0x122c>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <state_machine+0x1230>)
 8002806:	220c      	movs	r2, #12
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e03a      	b.n	8002882 <state_machine+0x11c2>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <state_machine+0x1164>
 8002816:	4b35      	ldr	r3, [pc, #212]	; (80028ec <state_machine+0x122c>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <state_machine+0x1230>)
 800281e:	220d      	movs	r2, #13
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e02e      	b.n	8002882 <state_machine+0x11c2>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <state_machine+0x117c>
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <state_machine+0x122c>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <state_machine+0x1230>)
 8002836:	220e      	movs	r2, #14
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e022      	b.n	8002882 <state_machine+0x11c2>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <state_machine+0x1194>
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <state_machine+0x122c>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <state_machine+0x1230>)
 800284e:	220f      	movs	r2, #15
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e016      	b.n	8002882 <state_machine+0x11c2>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d006      	beq.n	800286c <state_machine+0x11ac>
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <state_machine+0x122c>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <state_machine+0x1230>)
 8002866:	2210      	movs	r2, #16
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e00a      	b.n	8002882 <state_machine+0x11c2>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <state_machine+0x11c2>
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <state_machine+0x122c>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <state_machine+0x1230>)
 800287e:	2211      	movs	r2, #17
 8002880:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <state_machine+0x1234>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11f      	bne.n	80028ca <state_machine+0x120a>
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <state_machine+0x1234>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01a      	beq.n	80028d0 <state_machine+0x1210>
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <state_machine+0x1238>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d103      	bne.n	80028aa <state_machine+0x11ea>
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <state_machine+0x1238>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e004      	b.n	80028b4 <state_machine+0x11f4>
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <state_machine+0x1238>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <state_machine+0x1238>)
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <state_machine+0x1238>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a10      	ldr	r2, [pc, #64]	; (80028fc <state_machine+0x123c>)
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	2200      	movs	r2, #0
 80028c0:	4619      	mov	r1, r3
 80028c2:	480f      	ldr	r0, [pc, #60]	; (8002900 <state_machine+0x1240>)
 80028c4:	f001 fec6 	bl	8004654 <HAL_LTDC_SetAlpha>
 80028c8:	e002      	b.n	80028d0 <state_machine+0x1210>
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <state_machine+0x1234>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
			check_switch();
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8257 	bne.w	8002d86 <state_machine+0x16c6>
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <state_machine+0x1230>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <state_machine+0x1244>)
 80028e0:	22b4      	movs	r2, #180	; 0xb4
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	4b01      	ldr	r3, [pc, #4]	; (80028ec <state_machine+0x122c>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
			break;			
 80028ea:	e24c      	b.n	8002d86 <state_machine+0x16c6>
 80028ec:	20001a24 	.word	0x20001a24
 80028f0:	20040f28 	.word	0x20040f28
 80028f4:	20040f24 	.word	0x20040f24
 80028f8:	20001804 	.word	0x20001804
 80028fc:	20001808 	.word	0x20001808
 8002900:	20040f34 	.word	0x20040f34
 8002904:	20001a28 	.word	0x20001a28
 8002908:	20001934 	.word	0x20001934
 800290c:	200019fc 	.word	0x200019fc
		}
		case 15:{
			if(need_out){
 8002910:	4b8d      	ldr	r3, [pc, #564]	; (8002b48 <state_machine+0x1488>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <state_machine+0x1284>
				fill_screen(0);
 8002918:	2000      	movs	r0, #0
 800291a:	f7fe fe11 	bl	8001540 <fill_screen>
				print_string(10, 40, state15_string, 0x797);
 800291e:	f240 7397 	movw	r3, #1943	; 0x797
 8002922:	4a8a      	ldr	r2, [pc, #552]	; (8002b4c <state_machine+0x148c>)
 8002924:	2128      	movs	r1, #40	; 0x28
 8002926:	200a      	movs	r0, #10
 8002928:	f7fe fd8c 	bl	8001444 <print_string>
				print_string_scaled(10, 100, state15_string_2, 0x797, 2);
 800292c:	2302      	movs	r3, #2
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f240 7397 	movw	r3, #1943	; 0x797
 8002934:	4a86      	ldr	r2, [pc, #536]	; (8002b50 <state_machine+0x1490>)
 8002936:	2164      	movs	r1, #100	; 0x64
 8002938:	200a      	movs	r0, #10
 800293a:	f7fe fda9 	bl	8001490 <print_string_scaled>
				need_out = 0;
 800293e:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <state_machine+0x1488>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <state_machine+0x129c>
 800294e:	4b7e      	ldr	r3, [pc, #504]	; (8002b48 <state_machine+0x1488>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <state_machine+0x1494>)
 8002956:	220a      	movs	r2, #10
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e052      	b.n	8002a02 <state_machine+0x1342>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <state_machine+0x12b4>
 8002966:	4b78      	ldr	r3, [pc, #480]	; (8002b48 <state_machine+0x1488>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	4b79      	ldr	r3, [pc, #484]	; (8002b54 <state_machine+0x1494>)
 800296e:	220b      	movs	r2, #11
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e046      	b.n	8002a02 <state_machine+0x1342>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <state_machine+0x12cc>
 800297e:	4b72      	ldr	r3, [pc, #456]	; (8002b48 <state_machine+0x1488>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <state_machine+0x1494>)
 8002986:	220c      	movs	r2, #12
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e03a      	b.n	8002a02 <state_machine+0x1342>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d006      	beq.n	80029a4 <state_machine+0x12e4>
 8002996:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <state_machine+0x1488>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	4b6d      	ldr	r3, [pc, #436]	; (8002b54 <state_machine+0x1494>)
 800299e:	220d      	movs	r2, #13
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e02e      	b.n	8002a02 <state_machine+0x1342>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <state_machine+0x12fc>
 80029ae:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <state_machine+0x1488>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <state_machine+0x1494>)
 80029b6:	220e      	movs	r2, #14
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e022      	b.n	8002a02 <state_machine+0x1342>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <state_machine+0x1314>
 80029c6:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <state_machine+0x1488>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	4b61      	ldr	r3, [pc, #388]	; (8002b54 <state_machine+0x1494>)
 80029ce:	220f      	movs	r2, #15
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e016      	b.n	8002a02 <state_machine+0x1342>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <state_machine+0x132c>
 80029de:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <state_machine+0x1488>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	4b5b      	ldr	r3, [pc, #364]	; (8002b54 <state_machine+0x1494>)
 80029e6:	2210      	movs	r2, #16
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e00a      	b.n	8002a02 <state_machine+0x1342>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <state_machine+0x1342>
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <state_machine+0x1488>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	4b55      	ldr	r3, [pc, #340]	; (8002b54 <state_machine+0x1494>)
 80029fe:	2211      	movs	r2, #17
 8002a00:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002a02:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <state_machine+0x1498>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11f      	bne.n	8002a4a <state_machine+0x138a>
 8002a0a:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <state_machine+0x1498>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01a      	beq.n	8002a50 <state_machine+0x1390>
 8002a1a:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <state_machine+0x149c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d103      	bne.n	8002a2a <state_machine+0x136a>
 8002a22:	4b4e      	ldr	r3, [pc, #312]	; (8002b5c <state_machine+0x149c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e004      	b.n	8002a34 <state_machine+0x1374>
 8002a2a:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <state_machine+0x149c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	4a4a      	ldr	r2, [pc, #296]	; (8002b5c <state_machine+0x149c>)
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b49      	ldr	r3, [pc, #292]	; (8002b5c <state_machine+0x149c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a49      	ldr	r2, [pc, #292]	; (8002b60 <state_machine+0x14a0>)
 8002a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4619      	mov	r1, r3
 8002a42:	4848      	ldr	r0, [pc, #288]	; (8002b64 <state_machine+0x14a4>)
 8002a44:	f001 fe06 	bl	8004654 <HAL_LTDC_SetAlpha>
 8002a48:	e002      	b.n	8002a50 <state_machine+0x1390>
 8002a4a:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <state_machine+0x1498>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
			check_switch();
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 8199 	bne.w	8002d8a <state_machine+0x16ca>
 8002a58:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <state_machine+0x1494>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <state_machine+0x14a8>)
 8002a60:	22b4      	movs	r2, #180	; 0xb4
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <state_machine+0x1488>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
			break;			
 8002a6a:	e18e      	b.n	8002d8a <state_machine+0x16ca>
		}
		case 16:{
			if(need_out){
 8002a6c:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <state_machine+0x1488>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <state_machine+0x13e0>
				fill_screen(0);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fe fd63 	bl	8001540 <fill_screen>
				print_string(10, 40, state16_string, 0x797);
 8002a7a:	f240 7397 	movw	r3, #1943	; 0x797
 8002a7e:	4a3b      	ldr	r2, [pc, #236]	; (8002b6c <state_machine+0x14ac>)
 8002a80:	2128      	movs	r1, #40	; 0x28
 8002a82:	200a      	movs	r0, #10
 8002a84:	f7fe fcde 	bl	8001444 <print_string>
				print_string_scaled(10, 100, state16_string_2, 0x797, 3);
 8002a88:	2303      	movs	r3, #3
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	f240 7397 	movw	r3, #1943	; 0x797
 8002a90:	4a37      	ldr	r2, [pc, #220]	; (8002b70 <state_machine+0x14b0>)
 8002a92:	2164      	movs	r1, #100	; 0x64
 8002a94:	200a      	movs	r0, #10
 8002a96:	f7fe fcfb 	bl	8001490 <print_string_scaled>
				need_out = 0;
 8002a9a:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <state_machine+0x1488>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <state_machine+0x13f8>
 8002aaa:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <state_machine+0x1488>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <state_machine+0x1494>)
 8002ab2:	220a      	movs	r2, #10
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e068      	b.n	8002b8a <state_machine+0x14ca>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <state_machine+0x1410>
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <state_machine+0x1488>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <state_machine+0x1494>)
 8002aca:	220b      	movs	r2, #11
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e05c      	b.n	8002b8a <state_machine+0x14ca>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <state_machine+0x1428>
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <state_machine+0x1488>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <state_machine+0x1494>)
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e050      	b.n	8002b8a <state_machine+0x14ca>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <state_machine+0x1440>
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <state_machine+0x1488>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <state_machine+0x1494>)
 8002afa:	220d      	movs	r2, #13
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e044      	b.n	8002b8a <state_machine+0x14ca>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <state_machine+0x1458>
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <state_machine+0x1488>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <state_machine+0x1494>)
 8002b12:	220e      	movs	r2, #14
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e038      	b.n	8002b8a <state_machine+0x14ca>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <state_machine+0x1470>
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <state_machine+0x1488>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <state_machine+0x1494>)
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e02c      	b.n	8002b8a <state_machine+0x14ca>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01c      	beq.n	8002b74 <state_machine+0x14b4>
 8002b3a:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <state_machine+0x1488>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <state_machine+0x1494>)
 8002b42:	2210      	movs	r2, #16
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	e020      	b.n	8002b8a <state_machine+0x14ca>
 8002b48:	20001a24 	.word	0x20001a24
 8002b4c:	20001948 	.word	0x20001948
 8002b50:	20001a04 	.word	0x20001a04
 8002b54:	20040f28 	.word	0x20040f28
 8002b58:	20040f24 	.word	0x20040f24
 8002b5c:	20001804 	.word	0x20001804
 8002b60:	20001808 	.word	0x20001808
 8002b64:	20040f34 	.word	0x20040f34
 8002b68:	20001a28 	.word	0x20001a28
 8002b6c:	20001960 	.word	0x20001960
 8002b70:	20001a14 	.word	0x20001a14
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <state_machine+0x14ca>
 8002b7e:	4b87      	ldr	r3, [pc, #540]	; (8002d9c <state_machine+0x16dc>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	4b86      	ldr	r3, [pc, #536]	; (8002da0 <state_machine+0x16e0>)
 8002b86:	2211      	movs	r2, #17
 8002b88:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002b8a:	4b86      	ldr	r3, [pc, #536]	; (8002da4 <state_machine+0x16e4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11f      	bne.n	8002bd2 <state_machine+0x1512>
 8002b92:	4b84      	ldr	r3, [pc, #528]	; (8002da4 <state_machine+0x16e4>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01a      	beq.n	8002bd8 <state_machine+0x1518>
 8002ba2:	4b81      	ldr	r3, [pc, #516]	; (8002da8 <state_machine+0x16e8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d103      	bne.n	8002bb2 <state_machine+0x14f2>
 8002baa:	4b7f      	ldr	r3, [pc, #508]	; (8002da8 <state_machine+0x16e8>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e004      	b.n	8002bbc <state_machine+0x14fc>
 8002bb2:	4b7d      	ldr	r3, [pc, #500]	; (8002da8 <state_machine+0x16e8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	4a7b      	ldr	r2, [pc, #492]	; (8002da8 <state_machine+0x16e8>)
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b7a      	ldr	r3, [pc, #488]	; (8002da8 <state_machine+0x16e8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a7a      	ldr	r2, [pc, #488]	; (8002dac <state_machine+0x16ec>)
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4879      	ldr	r0, [pc, #484]	; (8002db0 <state_machine+0x16f0>)
 8002bcc:	f001 fd42 	bl	8004654 <HAL_LTDC_SetAlpha>
 8002bd0:	e002      	b.n	8002bd8 <state_machine+0x1518>
 8002bd2:	4b74      	ldr	r3, [pc, #464]	; (8002da4 <state_machine+0x16e4>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
			check_switch();
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f040 80d7 	bne.w	8002d8e <state_machine+0x16ce>
 8002be0:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <state_machine+0x16e0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	4b73      	ldr	r3, [pc, #460]	; (8002db4 <state_machine+0x16f4>)
 8002be8:	22b4      	movs	r2, #180	; 0xb4
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	4b6b      	ldr	r3, [pc, #428]	; (8002d9c <state_machine+0x16dc>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
			break;			
 8002bf2:	e0cc      	b.n	8002d8e <state_machine+0x16ce>
		}
		case 17:{
			if(need_out){
 8002bf4:	4b69      	ldr	r3, [pc, #420]	; (8002d9c <state_machine+0x16dc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <state_machine+0x1568>
				fill_screen(0);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fe fc9f 	bl	8001540 <fill_screen>
				print_string(10, 40, state17_string, 0x797);
 8002c02:	f240 7397 	movw	r3, #1943	; 0x797
 8002c06:	4a6c      	ldr	r2, [pc, #432]	; (8002db8 <state_machine+0x16f8>)
 8002c08:	2128      	movs	r1, #40	; 0x28
 8002c0a:	200a      	movs	r0, #10
 8002c0c:	f7fe fc1a 	bl	8001444 <print_string>
				print_string_scaled(10, 100, state17_string_2, 0x797, 3);
 8002c10:	2303      	movs	r3, #3
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	f240 7397 	movw	r3, #1943	; 0x797
 8002c18:	4a68      	ldr	r2, [pc, #416]	; (8002dbc <state_machine+0x16fc>)
 8002c1a:	2164      	movs	r1, #100	; 0x64
 8002c1c:	200a      	movs	r0, #10
 8002c1e:	f7fe fc37 	bl	8001490 <print_string_scaled>
				need_out = 0;
 8002c22:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <state_machine+0x16dc>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <state_machine+0x1580>
 8002c32:	4b5a      	ldr	r3, [pc, #360]	; (8002d9c <state_machine+0x16dc>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <state_machine+0x16e0>)
 8002c3a:	220a      	movs	r2, #10
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e052      	b.n	8002ce6 <state_machine+0x1626>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d006      	beq.n	8002c58 <state_machine+0x1598>
 8002c4a:	4b54      	ldr	r3, [pc, #336]	; (8002d9c <state_machine+0x16dc>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <state_machine+0x16e0>)
 8002c52:	220b      	movs	r2, #11
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e046      	b.n	8002ce6 <state_machine+0x1626>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <state_machine+0x15b0>
 8002c62:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <state_machine+0x16dc>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	4b4d      	ldr	r3, [pc, #308]	; (8002da0 <state_machine+0x16e0>)
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e03a      	b.n	8002ce6 <state_machine+0x1626>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <state_machine+0x15c8>
 8002c7a:	4b48      	ldr	r3, [pc, #288]	; (8002d9c <state_machine+0x16dc>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <state_machine+0x16e0>)
 8002c82:	220d      	movs	r2, #13
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e02e      	b.n	8002ce6 <state_machine+0x1626>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <state_machine+0x15e0>
 8002c92:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <state_machine+0x16dc>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <state_machine+0x16e0>)
 8002c9a:	220e      	movs	r2, #14
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e022      	b.n	8002ce6 <state_machine+0x1626>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d006      	beq.n	8002cb8 <state_machine+0x15f8>
 8002caa:	4b3c      	ldr	r3, [pc, #240]	; (8002d9c <state_machine+0x16dc>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <state_machine+0x16e0>)
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e016      	b.n	8002ce6 <state_machine+0x1626>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <state_machine+0x1610>
 8002cc2:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <state_machine+0x16dc>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <state_machine+0x16e0>)
 8002cca:	2210      	movs	r2, #16
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e00a      	b.n	8002ce6 <state_machine+0x1626>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <state_machine+0x1626>
 8002cda:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <state_machine+0x16dc>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <state_machine+0x16e0>)
 8002ce2:	2211      	movs	r2, #17
 8002ce4:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002ce6:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <state_machine+0x16e4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11f      	bne.n	8002d2e <state_machine+0x166e>
 8002cee:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <state_machine+0x16e4>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01a      	beq.n	8002d34 <state_machine+0x1674>
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <state_machine+0x16e8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d103      	bne.n	8002d0e <state_machine+0x164e>
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <state_machine+0x16e8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e004      	b.n	8002d18 <state_machine+0x1658>
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <state_machine+0x16e8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	4a24      	ldr	r2, [pc, #144]	; (8002da8 <state_machine+0x16e8>)
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <state_machine+0x16e8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a23      	ldr	r2, [pc, #140]	; (8002dac <state_machine+0x16ec>)
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	2200      	movs	r2, #0
 8002d24:	4619      	mov	r1, r3
 8002d26:	4822      	ldr	r0, [pc, #136]	; (8002db0 <state_machine+0x16f0>)
 8002d28:	f001 fc94 	bl	8004654 <HAL_LTDC_SetAlpha>
 8002d2c:	e002      	b.n	8002d34 <state_machine+0x1674>
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <state_machine+0x16e4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
			check_switch();
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d12b      	bne.n	8002d92 <state_machine+0x16d2>
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <state_machine+0x16e0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <state_machine+0x16f4>)
 8002d42:	22b4      	movs	r2, #180	; 0xb4
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <state_machine+0x16dc>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
			break;			
 8002d4c:	e021      	b.n	8002d92 <state_machine+0x16d2>
			break;
 8002d4e:	bf00      	nop
 8002d50:	e020      	b.n	8002d94 <state_machine+0x16d4>
			break;
 8002d52:	bf00      	nop
 8002d54:	e01e      	b.n	8002d94 <state_machine+0x16d4>
			break;
 8002d56:	bf00      	nop
 8002d58:	e01c      	b.n	8002d94 <state_machine+0x16d4>
			break;
 8002d5a:	bf00      	nop
 8002d5c:	e01a      	b.n	8002d94 <state_machine+0x16d4>
			break;
 8002d5e:	bf00      	nop
 8002d60:	e018      	b.n	8002d94 <state_machine+0x16d4>
			break;
 8002d62:	bf00      	nop
 8002d64:	e016      	b.n	8002d94 <state_machine+0x16d4>
			break;
 8002d66:	bf00      	nop
 8002d68:	e014      	b.n	8002d94 <state_machine+0x16d4>
			break;
 8002d6a:	bf00      	nop
 8002d6c:	e012      	b.n	8002d94 <state_machine+0x16d4>
			break;
 8002d6e:	bf00      	nop
 8002d70:	e010      	b.n	8002d94 <state_machine+0x16d4>
			break;
 8002d72:	bf00      	nop
 8002d74:	e00e      	b.n	8002d94 <state_machine+0x16d4>
			break;			
 8002d76:	bf00      	nop
 8002d78:	e00c      	b.n	8002d94 <state_machine+0x16d4>
			break;			
 8002d7a:	bf00      	nop
 8002d7c:	e00a      	b.n	8002d94 <state_machine+0x16d4>
			break;			
 8002d7e:	bf00      	nop
 8002d80:	e008      	b.n	8002d94 <state_machine+0x16d4>
			break;			
 8002d82:	bf00      	nop
 8002d84:	e006      	b.n	8002d94 <state_machine+0x16d4>
			break;			
 8002d86:	bf00      	nop
 8002d88:	e004      	b.n	8002d94 <state_machine+0x16d4>
			break;			
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <state_machine+0x16d4>
			break;			
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <state_machine+0x16d4>
			break;			
 8002d92:	bf00      	nop
		}																				
	}

}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20001a24 	.word	0x20001a24
 8002da0:	20040f28 	.word	0x20040f28
 8002da4:	20040f24 	.word	0x20040f24
 8002da8:	20001804 	.word	0x20001804
 8002dac:	20001808 	.word	0x20001808
 8002db0:	20040f34 	.word	0x20040f34
 8002db4:	20001a28 	.word	0x20001a28
 8002db8:	20001974 	.word	0x20001974
 8002dbc:	20001a1c 	.word	0x20001a1c

08002dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dc4:	f000 ff05 	bl	8003bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dc8:	f000 f814 	bl	8002df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dcc:	f000 f900 	bl	8002fd0 <MX_GPIO_Init>
  MX_LTDC_Init();
 8002dd0:	f000 f87c 	bl	8002ecc <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuf, LTDC_LAYER_1);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <main+0x2c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4805      	ldr	r0, [pc, #20]	; (8002df0 <main+0x30>)
 8002ddc:	f001 fc70 	bl	80046c0 <HAL_LTDC_SetAddress>
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		//print_char(50, 50, 0xde, 0xFFFF);
		state_machine();
 8002de0:	f7fe fc6e 	bl	80016c0 <state_machine>


		HAL_Delay(50);
 8002de4:	2032      	movs	r0, #50	; 0x32
 8002de6:	f000 ff51 	bl	8003c8c <HAL_Delay>
		state_machine();
 8002dea:	e7f9      	b.n	8002de0 <main+0x20>
 8002dec:	20001aa4 	.word	0x20001aa4
 8002df0:	20040f34 	.word	0x20040f34

08002df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b094      	sub	sp, #80	; 0x50
 8002df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dfa:	f107 0320 	add.w	r3, r7, #32
 8002dfe:	2230      	movs	r2, #48	; 0x30
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fee6 	bl	8005bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e08:	f107 030c 	add.w	r3, r7, #12
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <SystemClock_Config+0xd0>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <SystemClock_Config+0xd0>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e22:	6413      	str	r3, [r2, #64]	; 0x40
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <SystemClock_Config+0xd0>)
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <SystemClock_Config+0xd4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <SystemClock_Config+0xd4>)
 8002e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <SystemClock_Config+0xd4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e50:	2310      	movs	r3, #16
 8002e52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e54:	2302      	movs	r3, #2
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002e60:	23d8      	movs	r3, #216	; 0xd8
 8002e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e64:	2302      	movs	r3, #2
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e6c:	f107 0320 	add.w	r3, r7, #32
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 fe45 	bl	8004b00 <HAL_RCC_OscConfig>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002e7c:	f000 fcf6 	bl	800386c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002e80:	f001 fdee 	bl	8004a60 <HAL_PWREx_EnableOverDrive>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002e8a:	f000 fcef 	bl	800386c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e8e:	230f      	movs	r3, #15
 8002e90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e92:	2302      	movs	r3, #2
 8002e94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	2107      	movs	r1, #7
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 f8cb 	bl	8005048 <HAL_RCC_ClockConfig>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002eb8:	f000 fcd8 	bl	800386c <Error_Handler>
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3750      	adds	r7, #80	; 0x50
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40007000 	.word	0x40007000

08002ecc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	; 0x38
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	2234      	movs	r2, #52	; 0x34
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fe7b 	bl	8005bd4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002ee0:	4a3a      	ldr	r2, [pc, #232]	; (8002fcc <MX_LTDC_Init+0x100>)
 8002ee2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002ee4:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002eea:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ef0:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 50;
 8002efc:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002efe:	2232      	movs	r2, #50	; 0x32
 8002f00:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 15;
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f04:	220f      	movs	r2, #15
 8002f06:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 93;
 8002f08:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f0a:	225d      	movs	r2, #93	; 0x5d
 8002f0c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 27;
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f10:	221b      	movs	r2, #27
 8002f12:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 573;
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f16:	f240 223d 	movw	r2, #573	; 0x23d
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 299;
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f1e:	f240 122b 	movw	r2, #299	; 0x12b
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 581;
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f26:	f240 2245 	movw	r2, #581	; 0x245
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 303;
 8002f2c:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f2e:	f240 122f 	movw	r2, #303	; 0x12f
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002f34:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002f3c:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002f4c:	481e      	ldr	r0, [pc, #120]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002f4e:	f001 f9b1 	bl	80042b4 <HAL_LTDC_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002f58:	f000 fc88 	bl	800386c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002f60:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f64:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 270;
 8002f6a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002f6e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002f70:	2302      	movs	r3, #2
 8002f72:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002f74:	23ff      	movs	r3, #255	; 0xff
 8002f76:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f80:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002f82:	2305      	movs	r3, #5
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002f8a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 270;
 8002f90:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	2200      	movs	r2, #0
 8002fac:	4619      	mov	r1, r3
 8002fae:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <MX_LTDC_Init+0xfc>)
 8002fb0:	f001 fb12 	bl	80045d8 <HAL_LTDC_ConfigLayer>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8002fba:	f000 fc57 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002fbe:	bf00      	nop
 8002fc0:	3738      	adds	r7, #56	; 0x38
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20040f34 	.word	0x20040f34
 8002fcc:	40016800 	.word	0x40016800

08002fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b090      	sub	sp, #64	; 0x40
 8002fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fe6:	4bae      	ldr	r3, [pc, #696]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4aad      	ldr	r2, [pc, #692]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8002fec:	f043 0310 	orr.w	r3, r3, #16
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4bab      	ldr	r3, [pc, #684]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ffe:	4ba8      	ldr	r3, [pc, #672]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4aa7      	ldr	r2, [pc, #668]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4ba5      	ldr	r3, [pc, #660]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	4ba2      	ldr	r3, [pc, #648]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4aa1      	ldr	r2, [pc, #644]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b9f      	ldr	r3, [pc, #636]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800302e:	4b9c      	ldr	r3, [pc, #624]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a9b      	ldr	r2, [pc, #620]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003034:	f043 0308 	orr.w	r3, r3, #8
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b99      	ldr	r3, [pc, #612]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003046:	4b96      	ldr	r3, [pc, #600]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a95      	ldr	r2, [pc, #596]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b93      	ldr	r3, [pc, #588]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800305e:	4b90      	ldr	r3, [pc, #576]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a8f      	ldr	r2, [pc, #572]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b8d      	ldr	r3, [pc, #564]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003076:	4b8a      	ldr	r3, [pc, #552]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a89      	ldr	r2, [pc, #548]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 800307c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b87      	ldr	r3, [pc, #540]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800308e:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80030a6:	4b7e      	ldr	r3, [pc, #504]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a7d      	ldr	r2, [pc, #500]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 80030ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b7b      	ldr	r3, [pc, #492]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030be:	4b78      	ldr	r3, [pc, #480]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	4a77      	ldr	r2, [pc, #476]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 80030c4:	f043 0320 	orr.w	r3, r3, #32
 80030c8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ca:	4b75      	ldr	r3, [pc, #468]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030d6:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a71      	ldr	r2, [pc, #452]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 80030dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b6f      	ldr	r3, [pc, #444]	; (80032a0 <MX_GPIO_Init+0x2d0>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80030ee:	2201      	movs	r2, #1
 80030f0:	2120      	movs	r1, #32
 80030f2:	486c      	ldr	r0, [pc, #432]	; (80032a4 <MX_GPIO_Init+0x2d4>)
 80030f4:	f001 f8c4 	bl	8004280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80030f8:	2200      	movs	r2, #0
 80030fa:	210c      	movs	r1, #12
 80030fc:	486a      	ldr	r0, [pc, #424]	; (80032a8 <MX_GPIO_Init+0x2d8>)
 80030fe:	f001 f8bf 	bl	8004280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003102:	2201      	movs	r2, #1
 8003104:	2108      	movs	r1, #8
 8003106:	4869      	ldr	r0, [pc, #420]	; (80032ac <MX_GPIO_Init+0x2dc>)
 8003108:	f001 f8ba 	bl	8004280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800310c:	2201      	movs	r2, #1
 800310e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003112:	4865      	ldr	r0, [pc, #404]	; (80032a8 <MX_GPIO_Init+0x2d8>)
 8003114:	f001 f8b4 	bl	8004280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800311e:	4864      	ldr	r0, [pc, #400]	; (80032b0 <MX_GPIO_Init+0x2e0>)
 8003120:	f001 f8ae 	bl	8004280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003124:	2200      	movs	r2, #0
 8003126:	21c8      	movs	r1, #200	; 0xc8
 8003128:	4862      	ldr	r0, [pc, #392]	; (80032b4 <MX_GPIO_Init+0x2e4>)
 800312a:	f001 f8a9 	bl	8004280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800312e:	2308      	movs	r3, #8
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003132:	2300      	movs	r3, #0
 8003134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800313a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800313e:	4619      	mov	r1, r3
 8003140:	485d      	ldr	r0, [pc, #372]	; (80032b8 <MX_GPIO_Init+0x2e8>)
 8003142:	f000 fed9 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003146:	2304      	movs	r3, #4
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003152:	2303      	movs	r3, #3
 8003154:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003156:	2309      	movs	r3, #9
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800315a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800315e:	4619      	mov	r1, r3
 8003160:	4855      	ldr	r0, [pc, #340]	; (80032b8 <MX_GPIO_Init+0x2e8>)
 8003162:	f000 fec9 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003166:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003178:	230b      	movs	r3, #11
 800317a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800317c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003180:	4619      	mov	r1, r3
 8003182:	484c      	ldr	r0, [pc, #304]	; (80032b4 <MX_GPIO_Init+0x2e4>)
 8003184:	f000 feb8 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003188:	f64f 7383 	movw	r3, #65411	; 0xff83
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003196:	2303      	movs	r3, #3
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800319a:	230c      	movs	r3, #12
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800319e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a2:	4619      	mov	r1, r3
 80031a4:	4844      	ldr	r0, [pc, #272]	; (80032b8 <MX_GPIO_Init+0x2e8>)
 80031a6:	f000 fea7 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80031aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b0:	2312      	movs	r3, #18
 80031b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2300      	movs	r3, #0
 80031ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031bc:	2304      	movs	r3, #4
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c4:	4619      	mov	r1, r3
 80031c6:	483d      	ldr	r0, [pc, #244]	; (80032bc <MX_GPIO_Init+0x2ec>)
 80031c8:	f000 fe96 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80031cc:	f643 4323 	movw	r3, #15395	; 0x3c23
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d2:	2302      	movs	r3, #2
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031da:	2303      	movs	r3, #3
 80031dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031de:	230a      	movs	r3, #10
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e6:	4619      	mov	r1, r3
 80031e8:	4834      	ldr	r0, [pc, #208]	; (80032bc <MX_GPIO_Init+0x2ec>)
 80031ea:	f000 fe85 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80031ee:	2310      	movs	r3, #16
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031fe:	2302      	movs	r3, #2
 8003200:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003206:	4619      	mov	r1, r3
 8003208:	482c      	ldr	r0, [pc, #176]	; (80032bc <MX_GPIO_Init+0x2ec>)
 800320a:	f000 fe75 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800321e:	2308      	movs	r3, #8
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003226:	4619      	mov	r1, r3
 8003228:	481e      	ldr	r0, [pc, #120]	; (80032a4 <MX_GPIO_Init+0x2d4>)
 800322a:	f000 fe65 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800322e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003240:	230c      	movs	r3, #12
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003248:	4619      	mov	r1, r3
 800324a:	481d      	ldr	r0, [pc, #116]	; (80032c0 <MX_GPIO_Init+0x2f0>)
 800324c:	f000 fe54 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003256:	2302      	movs	r3, #2
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	2300      	movs	r3, #0
 8003260:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003262:	2301      	movs	r3, #1
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800326a:	4619      	mov	r1, r3
 800326c:	4815      	ldr	r0, [pc, #84]	; (80032c4 <MX_GPIO_Init+0x2f4>)
 800326e:	f000 fe43 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003272:	2360      	movs	r3, #96	; 0x60
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327e:	2300      	movs	r3, #0
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003282:	230d      	movs	r3, #13
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800328a:	4619      	mov	r1, r3
 800328c:	480a      	ldr	r0, [pc, #40]	; (80032b8 <MX_GPIO_Init+0x2e8>)
 800328e:	f000 fe33 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	e014      	b.n	80032c8 <MX_GPIO_Init+0x2f8>
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40022800 	.word	0x40022800
 80032b0:	40021c00 	.word	0x40021c00
 80032b4:	40021800 	.word	0x40021800
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020000 	.word	0x40020000
 80032c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2300      	movs	r3, #0
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032ce:	2307      	movs	r3, #7
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80032d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d6:	4619      	mov	r1, r3
 80032d8:	48bc      	ldr	r0, [pc, #752]	; (80035cc <MX_GPIO_Init+0x5fc>)
 80032da:	f000 fe0d 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ea:	2303      	movs	r3, #3
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032ee:	230a      	movs	r3, #10
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80032f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032f6:	4619      	mov	r1, r3
 80032f8:	48b4      	ldr	r0, [pc, #720]	; (80035cc <MX_GPIO_Init+0x5fc>)
 80032fa:	f000 fdfd 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80032fe:	f248 1333 	movw	r3, #33075	; 0x8133
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003304:	2302      	movs	r3, #2
 8003306:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330c:	2303      	movs	r3, #3
 800330e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003310:	230c      	movs	r3, #12
 8003312:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003318:	4619      	mov	r1, r3
 800331a:	48ad      	ldr	r0, [pc, #692]	; (80035d0 <MX_GPIO_Init+0x600>)
 800331c:	f000 fdec 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8003320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003326:	2300      	movs	r3, #0
 8003328:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800332e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003332:	4619      	mov	r1, r3
 8003334:	48a7      	ldr	r0, [pc, #668]	; (80035d4 <MX_GPIO_Init+0x604>)
 8003336:	f000 fddf 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800333a:	2340      	movs	r3, #64	; 0x40
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800333e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334c:	4619      	mov	r1, r3
 800334e:	48a2      	ldr	r0, [pc, #648]	; (80035d8 <MX_GPIO_Init+0x608>)
 8003350:	f000 fdd2 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003354:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003362:	2303      	movs	r3, #3
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003366:	230c      	movs	r3, #12
 8003368:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800336a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800336e:	4619      	mov	r1, r3
 8003370:	4899      	ldr	r0, [pc, #612]	; (80035d8 <MX_GPIO_Init+0x608>)
 8003372:	f000 fdc1 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8003376:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003388:	230a      	movs	r3, #10
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003390:	4619      	mov	r1, r3
 8003392:	4892      	ldr	r0, [pc, #584]	; (80035dc <MX_GPIO_Init+0x60c>)
 8003394:	f000 fdb0 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003398:	23f0      	movs	r3, #240	; 0xf0
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	2300      	movs	r3, #0
 80033a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80033a8:	230a      	movs	r3, #10
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b0:	4619      	mov	r1, r3
 80033b2:	488b      	ldr	r0, [pc, #556]	; (80035e0 <MX_GPIO_Init+0x610>)
 80033b4:	f000 fda0 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80033b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c6:	2300      	movs	r3, #0
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80033ca:	230a      	movs	r3, #10
 80033cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80033ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033d2:	4619      	mov	r1, r3
 80033d4:	487e      	ldr	r0, [pc, #504]	; (80035d0 <MX_GPIO_Init+0x600>)
 80033d6:	f000 fd8f 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80033da:	2320      	movs	r3, #32
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033de:	2301      	movs	r3, #1
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80033ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ee:	4619      	mov	r1, r3
 80033f0:	4879      	ldr	r0, [pc, #484]	; (80035d8 <MX_GPIO_Init+0x608>)
 80033f2:	f000 fd81 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80033f6:	2308      	movs	r3, #8
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003406:	230d      	movs	r3, #13
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800340a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800340e:	4619      	mov	r1, r3
 8003410:	4871      	ldr	r0, [pc, #452]	; (80035d8 <MX_GPIO_Init+0x608>)
 8003412:	f000 fd71 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8003416:	f241 030c 	movw	r3, #4108	; 0x100c
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341c:	2301      	movs	r3, #1
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800342c:	4619      	mov	r1, r3
 800342e:	486c      	ldr	r0, [pc, #432]	; (80035e0 <MX_GPIO_Init+0x610>)
 8003430:	f000 fd62 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343a:	2300      	movs	r3, #0
 800343c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003446:	4619      	mov	r1, r3
 8003448:	4866      	ldr	r0, [pc, #408]	; (80035e4 <MX_GPIO_Init+0x614>)
 800344a:	f000 fd55 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800344e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003460:	230c      	movs	r3, #12
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003468:	4619      	mov	r1, r3
 800346a:	485f      	ldr	r0, [pc, #380]	; (80035e8 <MX_GPIO_Init+0x618>)
 800346c:	f000 fd44 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003470:	2308      	movs	r3, #8
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003474:	2301      	movs	r3, #1
 8003476:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	2300      	movs	r3, #0
 800347e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003484:	4619      	mov	r1, r3
 8003486:	4859      	ldr	r0, [pc, #356]	; (80035ec <MX_GPIO_Init+0x61c>)
 8003488:	f000 fd36 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800348c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800349e:	230d      	movs	r3, #13
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80034a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034a6:	4619      	mov	r1, r3
 80034a8:	4849      	ldr	r0, [pc, #292]	; (80035d0 <MX_GPIO_Init+0x600>)
 80034aa:	f000 fd25 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80034ae:	2310      	movs	r3, #16
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b2:	2300      	movs	r3, #0
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80034ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034be:	4619      	mov	r1, r3
 80034c0:	4845      	ldr	r0, [pc, #276]	; (80035d8 <MX_GPIO_Init+0x608>)
 80034c2:	f000 fd19 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80034c6:	2304      	movs	r3, #4
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80034d6:	230c      	movs	r3, #12
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80034da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034de:	4619      	mov	r1, r3
 80034e0:	483d      	ldr	r0, [pc, #244]	; (80035d8 <MX_GPIO_Init+0x608>)
 80034e2:	f000 fd09 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80034e6:	f248 0304 	movw	r3, #32772	; 0x8004
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ec:	2300      	movs	r3, #0
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80034f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f8:	4619      	mov	r1, r3
 80034fa:	483d      	ldr	r0, [pc, #244]	; (80035f0 <MX_GPIO_Init+0x620>)
 80034fc:	f000 fcfc 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003500:	2302      	movs	r3, #2
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	2300      	movs	r3, #0
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003510:	2305      	movs	r3, #5
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003518:	4619      	mov	r1, r3
 800351a:	4831      	ldr	r0, [pc, #196]	; (80035e0 <MX_GPIO_Init+0x610>)
 800351c:	f000 fcec 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8003520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003526:	2301      	movs	r3, #1
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2300      	movs	r3, #0
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003536:	4619      	mov	r1, r3
 8003538:	482d      	ldr	r0, [pc, #180]	; (80035f0 <MX_GPIO_Init+0x620>)
 800353a:	f000 fcdd 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800353e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2300      	movs	r3, #0
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003550:	230d      	movs	r3, #13
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003558:	4619      	mov	r1, r3
 800355a:	4825      	ldr	r0, [pc, #148]	; (80035f0 <MX_GPIO_Init+0x620>)
 800355c:	f000 fccc 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003560:	2301      	movs	r3, #1
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	2300      	movs	r3, #0
 800356e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003570:	2302      	movs	r3, #2
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003578:	4619      	mov	r1, r3
 800357a:	4819      	ldr	r0, [pc, #100]	; (80035e0 <MX_GPIO_Init+0x610>)
 800357c:	f000 fcbc 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003586:	2302      	movs	r3, #2
 8003588:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358e:	2300      	movs	r3, #0
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003592:	2307      	movs	r3, #7
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800359a:	4619      	mov	r1, r3
 800359c:	480f      	ldr	r0, [pc, #60]	; (80035dc <MX_GPIO_Init+0x60c>)
 800359e:	f000 fcab 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80035a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2302      	movs	r3, #2
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80035b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035bc:	4619      	mov	r1, r3
 80035be:	4807      	ldr	r0, [pc, #28]	; (80035dc <MX_GPIO_Init+0x60c>)
 80035c0:	f000 fc9a 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80035c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035c8:	e014      	b.n	80035f4 <MX_GPIO_Init+0x624>
 80035ca:	bf00      	nop
 80035cc:	40020400 	.word	0x40020400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40022400 	.word	0x40022400
 80035d8:	40020c00 	.word	0x40020c00
 80035dc:	40020000 	.word	0x40020000
 80035e0:	40022000 	.word	0x40022000
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40021400 	.word	0x40021400
 80035ec:	40022800 	.word	0x40022800
 80035f0:	40021c00 	.word	0x40021c00
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003604:	4619      	mov	r1, r3
 8003606:	4891      	ldr	r0, [pc, #580]	; (800384c <MX_GPIO_Init+0x87c>)
 8003608:	f000 fc76 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800360c:	23c0      	movs	r3, #192	; 0xc0
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800361c:	2308      	movs	r3, #8
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003624:	4619      	mov	r1, r3
 8003626:	488a      	ldr	r0, [pc, #552]	; (8003850 <MX_GPIO_Init+0x880>)
 8003628:	f000 fc66 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800362c:	2310      	movs	r3, #16
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003630:	2302      	movs	r3, #2
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003638:	2303      	movs	r3, #3
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800363c:	230a      	movs	r3, #10
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003644:	4619      	mov	r1, r3
 8003646:	4883      	ldr	r0, [pc, #524]	; (8003854 <MX_GPIO_Init+0x884>)
 8003648:	f000 fc56 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800364c:	2328      	movs	r3, #40	; 0x28
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800365c:	230c      	movs	r3, #12
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003664:	4619      	mov	r1, r3
 8003666:	487b      	ldr	r0, [pc, #492]	; (8003854 <MX_GPIO_Init+0x884>)
 8003668:	f000 fc46 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800366c:	23c8      	movs	r3, #200	; 0xc8
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003670:	2301      	movs	r3, #1
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800367c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003680:	4619      	mov	r1, r3
 8003682:	4875      	ldr	r0, [pc, #468]	; (8003858 <MX_GPIO_Init+0x888>)
 8003684:	f000 fc38 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003688:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368e:	2303      	movs	r3, #3
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800369a:	4619      	mov	r1, r3
 800369c:	486f      	ldr	r0, [pc, #444]	; (800385c <MX_GPIO_Init+0x88c>)
 800369e:	f000 fc2b 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80036a2:	2308      	movs	r3, #8
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036b2:	230c      	movs	r3, #12
 80036b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80036b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ba:	4619      	mov	r1, r3
 80036bc:	4864      	ldr	r0, [pc, #400]	; (8003850 <MX_GPIO_Init+0x880>)
 80036be:	f000 fc1b 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80036c2:	2305      	movs	r3, #5
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80036d2:	230a      	movs	r3, #10
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036da:	4619      	mov	r1, r3
 80036dc:	485c      	ldr	r0, [pc, #368]	; (8003850 <MX_GPIO_Init+0x880>)
 80036de:	f000 fc0b 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80036e2:	2332      	movs	r3, #50	; 0x32
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036f2:	230b      	movs	r3, #11
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036fa:	4619      	mov	r1, r3
 80036fc:	4854      	ldr	r0, [pc, #336]	; (8003850 <MX_GPIO_Init+0x880>)
 80036fe:	f000 fbfb 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003702:	2304      	movs	r3, #4
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003712:	2309      	movs	r3, #9
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800371a:	4619      	mov	r1, r3
 800371c:	4850      	ldr	r0, [pc, #320]	; (8003860 <MX_GPIO_Init+0x890>)
 800371e:	f000 fbeb 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003722:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	2302      	movs	r3, #2
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003730:	2303      	movs	r3, #3
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003734:	2309      	movs	r3, #9
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800373c:	4619      	mov	r1, r3
 800373e:	4849      	ldr	r0, [pc, #292]	; (8003864 <MX_GPIO_Init+0x894>)
 8003740:	f000 fbda 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003744:	2304      	movs	r3, #4
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003748:	2300      	movs	r3, #0
 800374a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003754:	4619      	mov	r1, r3
 8003756:	4840      	ldr	r0, [pc, #256]	; (8003858 <MX_GPIO_Init+0x888>)
 8003758:	f000 fbce 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800375c:	2386      	movs	r3, #134	; 0x86
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800376c:	230b      	movs	r3, #11
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003774:	4619      	mov	r1, r3
 8003776:	483c      	ldr	r0, [pc, #240]	; (8003868 <MX_GPIO_Init+0x898>)
 8003778:	f000 fbbe 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800377c:	2301      	movs	r3, #1
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003780:	2303      	movs	r3, #3
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800378c:	4619      	mov	r1, r3
 800378e:	4836      	ldr	r0, [pc, #216]	; (8003868 <MX_GPIO_Init+0x898>)
 8003790:	f000 fbb2 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003794:	2350      	movs	r3, #80	; 0x50
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a0:	2300      	movs	r3, #0
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80037a4:	230d      	movs	r3, #13
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ac:	4619      	mov	r1, r3
 80037ae:	482e      	ldr	r0, [pc, #184]	; (8003868 <MX_GPIO_Init+0x898>)
 80037b0:	f000 fba2 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80037b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037ba:	2312      	movs	r3, #18
 80037bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c2:	2303      	movs	r3, #3
 80037c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037c6:	2304      	movs	r3, #4
 80037c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ce:	4619      	mov	r1, r3
 80037d0:	4820      	ldr	r0, [pc, #128]	; (8003854 <MX_GPIO_Init+0x884>)
 80037d2:	f000 fb91 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80037d6:	2328      	movs	r3, #40	; 0x28
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e2:	2303      	movs	r3, #3
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80037e6:	230a      	movs	r3, #10
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ee:	4619      	mov	r1, r3
 80037f0:	481d      	ldr	r0, [pc, #116]	; (8003868 <MX_GPIO_Init+0x898>)
 80037f2:	f000 fb81 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80037f6:	2340      	movs	r3, #64	; 0x40
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003802:	2300      	movs	r3, #0
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003806:	2309      	movs	r3, #9
 8003808:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800380a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800380e:	4619      	mov	r1, r3
 8003810:	4810      	ldr	r0, [pc, #64]	; (8003854 <MX_GPIO_Init+0x884>)
 8003812:	f000 fb71 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003816:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003824:	2300      	movs	r3, #0
 8003826:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003828:	2305      	movs	r3, #5
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003830:	4619      	mov	r1, r3
 8003832:	480b      	ldr	r0, [pc, #44]	; (8003860 <MX_GPIO_Init+0x890>)
 8003834:	f000 fb60 	bl	8003ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	keyboard_GPIO_init();
 8003838:	f7fc fe70 	bl	800051c <keyboard_GPIO_init>
	switch_GPIO_init();
 800383c:	f7fd fa94 	bl	8000d68 <switch_GPIO_init>
	spinner_GPIO_init();
 8003840:	f7fd f986 	bl	8000b50 <spinner_GPIO_init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8003844:	bf00      	nop
 8003846:	3740      	adds	r7, #64	; 0x40
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40022000 	.word	0x40022000
 8003850:	40020800 	.word	0x40020800
 8003854:	40021c00 	.word	0x40021c00
 8003858:	40021800 	.word	0x40021800
 800385c:	40021400 	.word	0x40021400
 8003860:	40020400 	.word	0x40020400
 8003864:	40020c00 	.word	0x40020c00
 8003868:	40020000 	.word	0x40020000

0800386c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003870:	b672      	cpsid	i
}
 8003872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003874:	e7fe      	b.n	8003874 <Error_Handler+0x8>
	...

08003878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <HAL_MspInit+0x44>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <HAL_MspInit+0x44>)
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <HAL_MspInit+0x44>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_MspInit+0x44>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	4a08      	ldr	r2, [pc, #32]	; (80038bc <HAL_MspInit+0x44>)
 800389c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a0:	6453      	str	r3, [r2, #68]	; 0x44
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_MspInit+0x44>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0ae      	sub	sp, #184	; 0xb8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038d8:	f107 0320 	add.w	r3, r7, #32
 80038dc:	2284      	movs	r2, #132	; 0x84
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 f977 	bl	8005bd4 <memset>
  if(hltdc->Instance==LTDC)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a72      	ldr	r2, [pc, #456]	; (8003ab4 <HAL_LTDC_MspInit+0x1f4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f040 80dc 	bne.w	8003aaa <HAL_LTDC_MspInit+0x1ea>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80038f2:	2308      	movs	r3, #8
 80038f4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80038f6:	2332      	movs	r3, #50	; 0x32
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80038fa:	2302      	movs	r3, #2
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80038fe:	2302      	movs	r3, #2
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8003902:	2300      	movs	r3, #0
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003906:	2301      	movs	r3, #1
 8003908:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800390a:	2300      	movs	r3, #0
 800390c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800390e:	f107 0320 	add.w	r3, r7, #32
 8003912:	4618      	mov	r0, r3
 8003914:	f001 fd4a 	bl	80053ac <HAL_RCCEx_PeriphCLKConfig>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800391e:	f7ff ffa5 	bl	800386c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003922:	4b65      	ldr	r3, [pc, #404]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	4a64      	ldr	r2, [pc, #400]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	4b62      	ldr	r3, [pc, #392]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800393a:	4b5f      	ldr	r3, [pc, #380]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a5e      	ldr	r2, [pc, #376]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003940:	f043 0310 	orr.w	r3, r3, #16
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003952:	4b59      	ldr	r3, [pc, #356]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a58      	ldr	r2, [pc, #352]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800396a:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a52      	ldr	r2, [pc, #328]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b50      	ldr	r3, [pc, #320]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003982:	4b4d      	ldr	r3, [pc, #308]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a4c      	ldr	r2, [pc, #304]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800399a:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a46      	ldr	r2, [pc, #280]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b44      	ldr	r3, [pc, #272]	; (8003ab8 <HAL_LTDC_MspInit+0x1f8>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80039b2:	2310      	movs	r3, #16
 80039b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039ca:	230e      	movs	r3, #14
 80039cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80039d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4839      	ldr	r0, [pc, #228]	; (8003abc <HAL_LTDC_MspInit+0x1fc>)
 80039d8:	f000 fa8e 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80039dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80039e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039f6:	230e      	movs	r3, #14
 80039f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80039fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a00:	4619      	mov	r1, r3
 8003a02:	482f      	ldr	r0, [pc, #188]	; (8003ac0 <HAL_LTDC_MspInit+0x200>)
 8003a04:	f000 fa78 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003a08:	23f7      	movs	r3, #247	; 0xf7
 8003a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a20:	230e      	movs	r3, #14
 8003a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4825      	ldr	r0, [pc, #148]	; (8003ac4 <HAL_LTDC_MspInit+0x204>)
 8003a2e:	f000 fa63 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a4c:	2309      	movs	r3, #9
 8003a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003a52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a56:	4619      	mov	r1, r3
 8003a58:	481b      	ldr	r0, [pc, #108]	; (8003ac8 <HAL_LTDC_MspInit+0x208>)
 8003a5a:	f000 fa4d 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003a5e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a78:	230e      	movs	r3, #14
 8003a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4811      	ldr	r0, [pc, #68]	; (8003acc <HAL_LTDC_MspInit+0x20c>)
 8003a86:	f000 fa37 	bl	8003ef8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	2058      	movs	r0, #88	; 0x58
 8003a90:	f000 f9fb 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003a94:	2058      	movs	r0, #88	; 0x58
 8003a96:	f000 fa14 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	2059      	movs	r0, #89	; 0x59
 8003aa0:	f000 f9f3 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8003aa4:	2059      	movs	r0, #89	; 0x59
 8003aa6:	f000 fa0c 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003aaa:	bf00      	nop
 8003aac:	37b8      	adds	r7, #184	; 0xb8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40016800 	.word	0x40016800
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40022400 	.word	0x40022400
 8003ac4:	40022800 	.word	0x40022800
 8003ac8:	40021800 	.word	0x40021800
 8003acc:	40022000 	.word	0x40022000

08003ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <NMI_Handler+0x4>

08003ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ada:	e7fe      	b.n	8003ada <HardFault_Handler+0x4>

08003adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <MemManage_Handler+0x4>

08003ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ae6:	e7fe      	b.n	8003ae6 <BusFault_Handler+0x4>

08003ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aec:	e7fe      	b.n	8003aec <UsageFault_Handler+0x4>

08003aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  get_current_keyboard_state();
 8003b1c:	f7fc fd60 	bl	80005e0 <get_current_keyboard_state>
  get_current_spinner_button_state();
 8003b20:	f7fd f84a 	bl	8000bb8 <get_current_spinner_button_state>
  get_spinner_position_change();
 8003b24:	f7fd f87e 	bl	8000c24 <get_spinner_position_change>
  get_current_switch_state();
 8003b28:	f7fd f93a 	bl	8000da0 <get_current_switch_state>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b2c:	f000 f88e 	bl	8003c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <LTDC_IRQHandler+0x10>)
 8003b3a:	f000 fc8b 	bl	8004454 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20040f34 	.word	0x20040f34

08003b48 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <LTDC_ER_IRQHandler+0x10>)
 8003b4e:	f000 fc81 	bl	8004454 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20040f34 	.word	0x20040f34

08003b5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <SystemInit+0x20>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <SystemInit+0x20>)
 8003b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b84:	f7ff ffea 	bl	8003b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b88:	480c      	ldr	r0, [pc, #48]	; (8003bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b8a:	490d      	ldr	r1, [pc, #52]	; (8003bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	; (8003bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b90:	e002      	b.n	8003b98 <LoopCopyDataInit>

08003b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b96:	3304      	adds	r3, #4

08003b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b9c:	d3f9      	bcc.n	8003b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ba0:	4c0a      	ldr	r4, [pc, #40]	; (8003bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba4:	e001      	b.n	8003baa <LoopFillZerobss>

08003ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba8:	3204      	adds	r2, #4

08003baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bac:	d3fb      	bcc.n	8003ba6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003bae:	f001 ffed 	bl	8005b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bb2:	f7ff f905 	bl	8002dc0 <main>
  bx  lr    
 8003bb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bb8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bc0:	20001a38 	.word	0x20001a38
  ldr r2, =_sidata
 8003bc4:	08005c1c 	.word	0x08005c1c
  ldr r2, =_sbss
 8003bc8:	20001a38 	.word	0x20001a38
  ldr r4, =_ebss
 8003bcc:	20040fe4 	.word	0x20040fe4

08003bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd0:	e7fe      	b.n	8003bd0 <ADC_IRQHandler>

08003bd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd6:	2003      	movs	r0, #3
 8003bd8:	f000 f94c 	bl	8003e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f000 f805 	bl	8003bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003be2:	f7ff fe49 	bl	8003878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_InitTick+0x54>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_InitTick+0x58>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f967 	bl	8003ede <HAL_SYSTICK_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e00e      	b.n	8003c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b0f      	cmp	r3, #15
 8003c1e:	d80a      	bhi.n	8003c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c20:	2200      	movs	r2, #0
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c28:	f000 f92f 	bl	8003e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c2c:	4a06      	ldr	r2, [pc, #24]	; (8003c48 <HAL_InitTick+0x5c>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20001a2c 	.word	0x20001a2c
 8003c44:	20001a34 	.word	0x20001a34
 8003c48:	20001a30 	.word	0x20001a30

08003c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_IncTick+0x20>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_IncTick+0x24>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <HAL_IncTick+0x24>)
 8003c5e:	6013      	str	r3, [r2, #0]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20001a34 	.word	0x20001a34
 8003c70:	20040fe0 	.word	0x20040fe0

08003c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return uwTick;
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_GetTick+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20040fe0 	.word	0x20040fe0

08003c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c94:	f7ff ffee 	bl	8003c74 <HAL_GetTick>
 8003c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca4:	d005      	beq.n	8003cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_Delay+0x44>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cb2:	bf00      	nop
 8003cb4:	f7ff ffde 	bl	8003c74 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d8f7      	bhi.n	8003cb4 <HAL_Delay+0x28>
  {
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20001a34 	.word	0x20001a34

08003cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <__NVIC_SetPriorityGrouping+0x40>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d02:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <__NVIC_SetPriorityGrouping+0x40>)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	60d3      	str	r3, [r2, #12]
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00
 8003d18:	05fa0000 	.word	0x05fa0000

08003d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <__NVIC_GetPriorityGrouping+0x18>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 0307 	and.w	r3, r3, #7
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db0b      	blt.n	8003d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	4907      	ldr	r1, [pc, #28]	; (8003d70 <__NVIC_EnableIRQ+0x38>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2001      	movs	r0, #1
 8003d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000e100 	.word	0xe000e100

08003d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	6039      	str	r1, [r7, #0]
 8003d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	db0a      	blt.n	8003d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	490c      	ldr	r1, [pc, #48]	; (8003dc0 <__NVIC_SetPriority+0x4c>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	0112      	lsls	r2, r2, #4
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	440b      	add	r3, r1
 8003d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d9c:	e00a      	b.n	8003db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	4908      	ldr	r1, [pc, #32]	; (8003dc4 <__NVIC_SetPriority+0x50>)
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	3b04      	subs	r3, #4
 8003dac:	0112      	lsls	r2, r2, #4
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	440b      	add	r3, r1
 8003db2:	761a      	strb	r2, [r3, #24]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000e100 	.word	0xe000e100
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f1c3 0307 	rsb	r3, r3, #7
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	bf28      	it	cs
 8003de6:	2304      	movcs	r3, #4
 8003de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3304      	adds	r3, #4
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d902      	bls.n	8003df8 <NVIC_EncodePriority+0x30>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3b03      	subs	r3, #3
 8003df6:	e000      	b.n	8003dfa <NVIC_EncodePriority+0x32>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43da      	mvns	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	43d9      	mvns	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e20:	4313      	orrs	r3, r2
         );
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3724      	adds	r7, #36	; 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e40:	d301      	bcc.n	8003e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00f      	b.n	8003e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <SysTick_Config+0x40>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e4e:	210f      	movs	r1, #15
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e54:	f7ff ff8e 	bl	8003d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <SysTick_Config+0x40>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e5e:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <SysTick_Config+0x40>)
 8003e60:	2207      	movs	r2, #7
 8003e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	e000e010 	.word	0xe000e010

08003e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff29 	bl	8003cd4 <__NVIC_SetPriorityGrouping>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e9c:	f7ff ff3e 	bl	8003d1c <__NVIC_GetPriorityGrouping>
 8003ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f7ff ff8e 	bl	8003dc8 <NVIC_EncodePriority>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff5d 	bl	8003d74 <__NVIC_SetPriority>
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff31 	bl	8003d38 <__NVIC_EnableIRQ>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff ffa2 	bl	8003e30 <SysTick_Config>
 8003eec:	4603      	mov	r3, r0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b089      	sub	sp, #36	; 0x24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e175      	b.n	8004204 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003f18:	2201      	movs	r2, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	f040 8164 	bne.w	80041fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d005      	beq.n	8003f4e <HAL_GPIO_Init+0x56>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d130      	bne.n	8003fb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2203      	movs	r2, #3
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f84:	2201      	movs	r2, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 0201 	and.w	r2, r3, #1
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d017      	beq.n	8003fec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d123      	bne.n	8004040 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	08da      	lsrs	r2, r3, #3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3208      	adds	r2, #8
 8004000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	220f      	movs	r2, #15
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	08da      	lsrs	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3208      	adds	r2, #8
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	2203      	movs	r2, #3
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0203 	and.w	r2, r3, #3
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80be 	beq.w	80041fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004082:	4b66      	ldr	r3, [pc, #408]	; (800421c <HAL_GPIO_Init+0x324>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	4a65      	ldr	r2, [pc, #404]	; (800421c <HAL_GPIO_Init+0x324>)
 8004088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800408c:	6453      	str	r3, [r2, #68]	; 0x44
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_GPIO_Init+0x324>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800409a:	4a61      	ldr	r2, [pc, #388]	; (8004220 <HAL_GPIO_Init+0x328>)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	3302      	adds	r3, #2
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	220f      	movs	r2, #15
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a58      	ldr	r2, [pc, #352]	; (8004224 <HAL_GPIO_Init+0x32c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d037      	beq.n	8004136 <HAL_GPIO_Init+0x23e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a57      	ldr	r2, [pc, #348]	; (8004228 <HAL_GPIO_Init+0x330>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d031      	beq.n	8004132 <HAL_GPIO_Init+0x23a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a56      	ldr	r2, [pc, #344]	; (800422c <HAL_GPIO_Init+0x334>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d02b      	beq.n	800412e <HAL_GPIO_Init+0x236>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a55      	ldr	r2, [pc, #340]	; (8004230 <HAL_GPIO_Init+0x338>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d025      	beq.n	800412a <HAL_GPIO_Init+0x232>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a54      	ldr	r2, [pc, #336]	; (8004234 <HAL_GPIO_Init+0x33c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01f      	beq.n	8004126 <HAL_GPIO_Init+0x22e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a53      	ldr	r2, [pc, #332]	; (8004238 <HAL_GPIO_Init+0x340>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d019      	beq.n	8004122 <HAL_GPIO_Init+0x22a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_GPIO_Init+0x344>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <HAL_GPIO_Init+0x226>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a51      	ldr	r2, [pc, #324]	; (8004240 <HAL_GPIO_Init+0x348>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00d      	beq.n	800411a <HAL_GPIO_Init+0x222>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a50      	ldr	r2, [pc, #320]	; (8004244 <HAL_GPIO_Init+0x34c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <HAL_GPIO_Init+0x21e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4f      	ldr	r2, [pc, #316]	; (8004248 <HAL_GPIO_Init+0x350>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_GPIO_Init+0x21a>
 800410e:	2309      	movs	r3, #9
 8004110:	e012      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004112:	230a      	movs	r3, #10
 8004114:	e010      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004116:	2308      	movs	r3, #8
 8004118:	e00e      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800411a:	2307      	movs	r3, #7
 800411c:	e00c      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800411e:	2306      	movs	r3, #6
 8004120:	e00a      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004122:	2305      	movs	r3, #5
 8004124:	e008      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004126:	2304      	movs	r3, #4
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800412a:	2303      	movs	r3, #3
 800412c:	e004      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800412e:	2302      	movs	r3, #2
 8004130:	e002      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004136:	2300      	movs	r3, #0
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	f002 0203 	and.w	r2, r2, #3
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	4093      	lsls	r3, r2
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004148:	4935      	ldr	r1, [pc, #212]	; (8004220 <HAL_GPIO_Init+0x328>)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	3302      	adds	r3, #2
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004156:	4b3d      	ldr	r3, [pc, #244]	; (800424c <HAL_GPIO_Init+0x354>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800417a:	4a34      	ldr	r2, [pc, #208]	; (800424c <HAL_GPIO_Init+0x354>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004180:	4b32      	ldr	r3, [pc, #200]	; (800424c <HAL_GPIO_Init+0x354>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041a4:	4a29      	ldr	r2, [pc, #164]	; (800424c <HAL_GPIO_Init+0x354>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041aa:	4b28      	ldr	r3, [pc, #160]	; (800424c <HAL_GPIO_Init+0x354>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ce:	4a1f      	ldr	r2, [pc, #124]	; (800424c <HAL_GPIO_Init+0x354>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d4:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_GPIO_Init+0x354>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <HAL_GPIO_Init+0x354>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3301      	adds	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	f67f ae86 	bls.w	8003f18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	40013800 	.word	0x40013800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020400 	.word	0x40020400
 800422c:	40020800 	.word	0x40020800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40021400 	.word	0x40021400
 800423c:	40021800 	.word	0x40021800
 8004240:	40021c00 	.word	0x40021c00
 8004244:	40022000 	.word	0x40022000
 8004248:	40022400 	.word	0x40022400
 800424c:	40013c00 	.word	0x40013c00

08004250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	e001      	b.n	8004272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
 800428c:	4613      	mov	r3, r2
 800428e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004290:	787b      	ldrb	r3, [r7, #1]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800429c:	e003      	b.n	80042a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800429e:	887b      	ldrh	r3, [r7, #2]
 80042a0:	041a      	lsls	r2, r3, #16
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	619a      	str	r2, [r3, #24]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e0bf      	b.n	8004446 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff faf0 	bl	80038c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80042f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800430c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6899      	ldr	r1, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b4a      	ldr	r3, [pc, #296]	; (8004450 <HAL_LTDC_Init+0x19c>)
 8004328:	400b      	ands	r3, r1
 800432a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68d9      	ldr	r1, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b3e      	ldr	r3, [pc, #248]	; (8004450 <HAL_LTDC_Init+0x19c>)
 8004356:	400b      	ands	r3, r1
 8004358:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68d9      	ldr	r1, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b33      	ldr	r3, [pc, #204]	; (8004450 <HAL_LTDC_Init+0x19c>)
 8004384:	400b      	ands	r3, r1
 8004386:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6919      	ldr	r1, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6959      	ldr	r1, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_LTDC_Init+0x19c>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	041b      	lsls	r3, r3, #16
 80043bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6959      	ldr	r1, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0206 	orr.w	r2, r2, #6
 8004422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	f000f800 	.word	0xf000f800

08004454 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d023      	beq.n	80044be <HAL_LTDC_IRQHandler+0x6a>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01e      	beq.n	80044be <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2204      	movs	r2, #4
 8004496:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800449e:	f043 0201 	orr.w	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2204      	movs	r2, #4
 80044ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f86f 	bl	800459c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d023      	beq.n	8004510 <HAL_LTDC_IRQHandler+0xbc>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01e      	beq.n	8004510 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0202 	bic.w	r2, r2, #2
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2202      	movs	r2, #2
 80044e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044f0:	f043 0202 	orr.w	r2, r3, #2
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f846 	bl	800459c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01b      	beq.n	8004552 <HAL_LTDC_IRQHandler+0xfe>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d016      	beq.n	8004552 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f82f 	bl	80045b0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01b      	beq.n	8004594 <HAL_LTDC_IRQHandler+0x140>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0208 	bic.w	r2, r2, #8
 8004574:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2208      	movs	r2, #8
 800457c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f818 	bl	80045c4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80045d8:	b5b0      	push	{r4, r5, r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_LTDC_ConfigLayer+0x1a>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e02c      	b.n	800464c <HAL_LTDC_ConfigLayer+0x74>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2134      	movs	r1, #52	; 0x34
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4614      	mov	r4, r2
 8004616:	461d      	mov	r5, r3
 8004618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800461a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800461c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800461e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f87d 	bl	800472c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2201      	movs	r2, #1
 8004638:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bdb0      	pop	{r4, r5, r7, pc}

08004654 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_LTDC_SetAlpha+0x1a>
 800466a:	2302      	movs	r3, #2
 800466c:	e024      	b.n	80046b8 <HAL_LTDC_SetAlpha+0x64>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2234      	movs	r2, #52	; 0x34
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	3338      	adds	r3, #56	; 0x38
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f847 	bl	800472c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_LTDC_SetAddress+0x1a>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e024      	b.n	8004724 <HAL_LTDC_SetAddress+0x64>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2234      	movs	r2, #52	; 0x34
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	3338      	adds	r3, #56	; 0x38
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6979      	ldr	r1, [r7, #20]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f811 	bl	800472c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2201      	movs	r2, #1
 8004710:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004748:	4413      	add	r3, r2
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	01db      	lsls	r3, r3, #7
 8004758:	4413      	add	r3, r2
 800475a:	3384      	adds	r3, #132	; 0x84
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	4611      	mov	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	01d2      	lsls	r2, r2, #7
 8004768:	440a      	add	r2, r1
 800476a:	3284      	adds	r2, #132	; 0x84
 800476c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004770:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004782:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004784:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4619      	mov	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	440b      	add	r3, r1
 8004792:	3384      	adds	r3, #132	; 0x84
 8004794:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800479a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047aa:	4413      	add	r3, r2
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	01db      	lsls	r3, r3, #7
 80047ba:	4413      	add	r3, r2
 80047bc:	3384      	adds	r3, #132	; 0x84
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	4611      	mov	r1, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	01d2      	lsls	r2, r2, #7
 80047ca:	440a      	add	r2, r1
 80047cc:	3284      	adds	r2, #132	; 0x84
 80047ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80047d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047e2:	4413      	add	r3, r2
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4619      	mov	r1, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	01db      	lsls	r3, r3, #7
 80047f0:	440b      	add	r3, r1
 80047f2:	3384      	adds	r3, #132	; 0x84
 80047f4:	4619      	mov	r1, r3
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	01db      	lsls	r3, r3, #7
 8004806:	4413      	add	r3, r2
 8004808:	3384      	adds	r3, #132	; 0x84
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	4611      	mov	r1, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	01d2      	lsls	r2, r2, #7
 8004816:	440a      	add	r2, r1
 8004818:	3284      	adds	r2, #132	; 0x84
 800481a:	f023 0307 	bic.w	r3, r3, #7
 800481e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	01db      	lsls	r3, r3, #7
 800482a:	4413      	add	r3, r2
 800482c:	3384      	adds	r3, #132	; 0x84
 800482e:	461a      	mov	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	01db      	lsls	r3, r3, #7
 800485c:	4413      	add	r3, r2
 800485e:	3384      	adds	r3, #132	; 0x84
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	01db      	lsls	r3, r3, #7
 800486c:	4413      	add	r3, r2
 800486e:	3384      	adds	r3, #132	; 0x84
 8004870:	461a      	mov	r2, r3
 8004872:	2300      	movs	r3, #0
 8004874:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800487c:	461a      	mov	r2, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	431a      	orrs	r2, r3
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	431a      	orrs	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4619      	mov	r1, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	01db      	lsls	r3, r3, #7
 8004890:	440b      	add	r3, r1
 8004892:	3384      	adds	r3, #132	; 0x84
 8004894:	4619      	mov	r1, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	01db      	lsls	r3, r3, #7
 80048a6:	4413      	add	r3, r2
 80048a8:	3384      	adds	r3, #132	; 0x84
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	4611      	mov	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	01d2      	lsls	r2, r2, #7
 80048b6:	440a      	add	r2, r1
 80048b8:	3284      	adds	r2, #132	; 0x84
 80048ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	01db      	lsls	r3, r3, #7
 80048ca:	4413      	add	r3, r2
 80048cc:	3384      	adds	r3, #132	; 0x84
 80048ce:	461a      	mov	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	01db      	lsls	r3, r3, #7
 80048e0:	4413      	add	r3, r2
 80048e2:	3384      	adds	r3, #132	; 0x84
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	01db      	lsls	r3, r3, #7
 80048f0:	440b      	add	r3, r1
 80048f2:	3384      	adds	r3, #132	; 0x84
 80048f4:	4619      	mov	r1, r3
 80048f6:	4b58      	ldr	r3, [pc, #352]	; (8004a58 <LTDC_SetConfig+0x32c>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	6809      	ldr	r1, [r1, #0]
 8004908:	4608      	mov	r0, r1
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	01c9      	lsls	r1, r1, #7
 800490e:	4401      	add	r1, r0
 8004910:	3184      	adds	r1, #132	; 0x84
 8004912:	4313      	orrs	r3, r2
 8004914:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	01db      	lsls	r3, r3, #7
 8004920:	4413      	add	r3, r2
 8004922:	3384      	adds	r3, #132	; 0x84
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	01db      	lsls	r3, r3, #7
 8004930:	4413      	add	r3, r2
 8004932:	3384      	adds	r3, #132	; 0x84
 8004934:	461a      	mov	r2, r3
 8004936:	2300      	movs	r3, #0
 8004938:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	01db      	lsls	r3, r3, #7
 8004944:	4413      	add	r3, r2
 8004946:	3384      	adds	r3, #132	; 0x84
 8004948:	461a      	mov	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004958:	2304      	movs	r3, #4
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e01b      	b.n	8004996 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004966:	2303      	movs	r3, #3
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	e014      	b.n	8004996 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b04      	cmp	r3, #4
 8004972:	d00b      	beq.n	800498c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004978:	2b02      	cmp	r3, #2
 800497a:	d007      	beq.n	800498c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004980:	2b03      	cmp	r3, #3
 8004982:	d003      	beq.n	800498c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004988:	2b07      	cmp	r3, #7
 800498a:	d102      	bne.n	8004992 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800498c:	2302      	movs	r3, #2
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	e001      	b.n	8004996 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004992:	2301      	movs	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	01db      	lsls	r3, r3, #7
 80049a0:	4413      	add	r3, r2
 80049a2:	3384      	adds	r3, #132	; 0x84
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	4611      	mov	r1, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	01d2      	lsls	r2, r2, #7
 80049b0:	440a      	add	r2, r1
 80049b2:	3284      	adds	r2, #132	; 0x84
 80049b4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80049b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6859      	ldr	r1, [r3, #4]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	1acb      	subs	r3, r1, r3
 80049d0:	69f9      	ldr	r1, [r7, #28]
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049d8:	68f9      	ldr	r1, [r7, #12]
 80049da:	6809      	ldr	r1, [r1, #0]
 80049dc:	4608      	mov	r0, r1
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	01c9      	lsls	r1, r1, #7
 80049e2:	4401      	add	r1, r0
 80049e4:	3184      	adds	r1, #132	; 0x84
 80049e6:	4313      	orrs	r3, r2
 80049e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	4413      	add	r3, r2
 80049f6:	3384      	adds	r3, #132	; 0x84
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	01db      	lsls	r3, r3, #7
 8004a04:	440b      	add	r3, r1
 8004a06:	3384      	adds	r3, #132	; 0x84
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <LTDC_SetConfig+0x330>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	01db      	lsls	r3, r3, #7
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3384      	adds	r3, #132	; 0x84
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	01db      	lsls	r3, r3, #7
 8004a30:	4413      	add	r3, r2
 8004a32:	3384      	adds	r3, #132	; 0x84
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	01d2      	lsls	r2, r2, #7
 8004a40:	440a      	add	r2, r1
 8004a42:	3284      	adds	r2, #132	; 0x84
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	6013      	str	r3, [r2, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	3724      	adds	r7, #36	; 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	fffff8f8 	.word	0xfffff8f8
 8004a5c:	fffff800 	.word	0xfffff800

08004a60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
 8004a76:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a82:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1d      	ldr	r2, [pc, #116]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a8e:	f7ff f8f1 	bl	8003c74 <HAL_GetTick>
 8004a92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a94:	e009      	b.n	8004aaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a96:	f7ff f8ed 	bl	8003c74 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa4:	d901      	bls.n	8004aaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e022      	b.n	8004af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab6:	d1ee      	bne.n	8004a96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ab8:	4b10      	ldr	r3, [pc, #64]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0f      	ldr	r2, [pc, #60]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac4:	f7ff f8d6 	bl	8003c74 <HAL_GetTick>
 8004ac8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004aca:	e009      	b.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004acc:	f7ff f8d2 	bl	8003c74 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ada:	d901      	bls.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e007      	b.n	8004af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aec:	d1ee      	bne.n	8004acc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40007000 	.word	0x40007000

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e291      	b.n	800503a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8087 	beq.w	8004c32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b24:	4b96      	ldr	r3, [pc, #600]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d00c      	beq.n	8004b4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b30:	4b93      	ldr	r3, [pc, #588]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d112      	bne.n	8004b62 <HAL_RCC_OscConfig+0x62>
 8004b3c:	4b90      	ldr	r3, [pc, #576]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b48:	d10b      	bne.n	8004b62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4a:	4b8d      	ldr	r3, [pc, #564]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d06c      	beq.n	8004c30 <HAL_RCC_OscConfig+0x130>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d168      	bne.n	8004c30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e26b      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCC_OscConfig+0x7a>
 8004b6c:	4b84      	ldr	r3, [pc, #528]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a83      	ldr	r2, [pc, #524]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	e02e      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x9c>
 8004b82:	4b7f      	ldr	r3, [pc, #508]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7e      	ldr	r2, [pc, #504]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b7c      	ldr	r3, [pc, #496]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7b      	ldr	r2, [pc, #492]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e01d      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0xc0>
 8004ba6:	4b76      	ldr	r3, [pc, #472]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a75      	ldr	r2, [pc, #468]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4b73      	ldr	r3, [pc, #460]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a72      	ldr	r2, [pc, #456]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd8>
 8004bc0:	4b6f      	ldr	r3, [pc, #444]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a6e      	ldr	r2, [pc, #440]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b6c      	ldr	r3, [pc, #432]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6b      	ldr	r2, [pc, #428]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7ff f848 	bl	8003c74 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7ff f844 	bl	8003c74 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e21f      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b61      	ldr	r3, [pc, #388]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0xe8>
 8004c06:	e014      	b.n	8004c32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7ff f834 	bl	8003c74 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c10:	f7ff f830 	bl	8003c74 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e20b      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c22:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x110>
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d069      	beq.n	8004d12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c3e:	4b50      	ldr	r3, [pc, #320]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4a:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d11c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x190>
 8004c56:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d116      	bne.n	8004c90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c62:	4b47      	ldr	r3, [pc, #284]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_RCC_OscConfig+0x17a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e1df      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7a:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	493d      	ldr	r1, [pc, #244]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8e:	e040      	b.n	8004d12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d023      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c98:	4b39      	ldr	r3, [pc, #228]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a38      	ldr	r2, [pc, #224]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fe ffe6 	bl	8003c74 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cac:	f7fe ffe2 	bl	8003c74 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e1bd      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbe:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cca:	4b2d      	ldr	r3, [pc, #180]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4929      	ldr	r1, [pc, #164]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]
 8004cde:	e018      	b.n	8004d12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce0:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fe ffc2 	bl	8003c74 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf4:	f7fe ffbe 	bl	8003c74 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e199      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d06:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d038      	beq.n	8004d90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d019      	beq.n	8004d5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d26:	4b16      	ldr	r3, [pc, #88]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2a:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d32:	f7fe ff9f 	bl	8003c74 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3a:	f7fe ff9b 	bl	8003c74 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e176      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x23a>
 8004d58:	e01a      	b.n	8004d90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5a:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5e:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <HAL_RCC_OscConfig+0x280>)
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d66:	f7fe ff85 	bl	8003c74 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6e:	f7fe ff81 	bl	8003c74 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d903      	bls.n	8004d84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e15c      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
 8004d80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d84:	4b91      	ldr	r3, [pc, #580]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ee      	bne.n	8004d6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80a4 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9e:	4b8b      	ldr	r3, [pc, #556]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10d      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004daa:	4b88      	ldr	r3, [pc, #544]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	4a87      	ldr	r2, [pc, #540]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6413      	str	r3, [r2, #64]	; 0x40
 8004db6:	4b85      	ldr	r3, [pc, #532]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc6:	4b82      	ldr	r3, [pc, #520]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d118      	bne.n	8004e04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004dd2:	4b7f      	ldr	r3, [pc, #508]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a7e      	ldr	r2, [pc, #504]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dde:	f7fe ff49 	bl	8003c74 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7fe ff45 	bl	8003c74 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b64      	cmp	r3, #100	; 0x64
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e120      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	4b75      	ldr	r3, [pc, #468]	; (8004fd0 <HAL_RCC_OscConfig+0x4d0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCC_OscConfig+0x31a>
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	4a6e      	ldr	r2, [pc, #440]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	; 0x70
 8004e18:	e02d      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x33c>
 8004e22:	4b6a      	ldr	r3, [pc, #424]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a69      	ldr	r2, [pc, #420]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2e:	4b67      	ldr	r3, [pc, #412]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	4a66      	ldr	r2, [pc, #408]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3a:	e01c      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b05      	cmp	r3, #5
 8004e42:	d10c      	bne.n	8004e5e <HAL_RCC_OscConfig+0x35e>
 8004e44:	4b61      	ldr	r3, [pc, #388]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e48:	4a60      	ldr	r2, [pc, #384]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e4a:	f043 0304 	orr.w	r3, r3, #4
 8004e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e50:	4b5e      	ldr	r3, [pc, #376]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	4a5d      	ldr	r2, [pc, #372]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5c:	e00b      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
 8004e5e:	4b5b      	ldr	r3, [pc, #364]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	4a5a      	ldr	r2, [pc, #360]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6a:	4b58      	ldr	r3, [pc, #352]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	4a57      	ldr	r2, [pc, #348]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d015      	beq.n	8004eaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7e:	f7fe fef9 	bl	8003c74 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fe fef5 	bl	8003c74 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0ce      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9c:	4b4b      	ldr	r3, [pc, #300]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0ee      	beq.n	8004e86 <HAL_RCC_OscConfig+0x386>
 8004ea8:	e014      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eaa:	f7fe fee3 	bl	8003c74 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fe fedf 	bl	8003c74 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e0b8      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec8:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ee      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d105      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eda:	4b3c      	ldr	r3, [pc, #240]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	4a3b      	ldr	r2, [pc, #236]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80a4 	beq.w	8005038 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef0:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d06b      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d149      	bne.n	8004f98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fe feb0 	bl	8003c74 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fe feac 	bl	8003c74 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e087      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	4b28      	ldr	r3, [pc, #160]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	019b      	lsls	r3, r3, #6
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	041b      	lsls	r3, r3, #16
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fe fe80 	bl	8003c74 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f78:	f7fe fe7c 	bl	8003c74 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e057      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f0      	beq.n	8004f78 <HAL_RCC_OscConfig+0x478>
 8004f96:	e04f      	b.n	8005038 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a0b      	ldr	r2, [pc, #44]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fe fe66 	bl	8003c74 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fac:	f7fe fe62 	bl	8003c74 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e03d      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbe:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <HAL_RCC_OscConfig+0x4cc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x4ac>
 8004fca:	e035      	b.n	8005038 <HAL_RCC_OscConfig+0x538>
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_RCC_OscConfig+0x544>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d028      	beq.n	8005034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d121      	bne.n	8005034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d11a      	bne.n	8005034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005004:	4013      	ands	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800500a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800500c:	4293      	cmp	r3, r2
 800500e:	d111      	bne.n	8005034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	3b01      	subs	r3, #1
 800501e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d107      	bne.n	8005034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800

08005048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0d0      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005060:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d910      	bls.n	8005090 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b67      	ldr	r3, [pc, #412]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 020f 	bic.w	r2, r3, #15
 8005076:	4965      	ldr	r1, [pc, #404]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	4313      	orrs	r3, r2
 800507c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b63      	ldr	r3, [pc, #396]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0b8      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a8:	4b59      	ldr	r3, [pc, #356]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4a58      	ldr	r2, [pc, #352]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80050ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050c0:	4b53      	ldr	r3, [pc, #332]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4a52      	ldr	r2, [pc, #328]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80050c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050cc:	4b50      	ldr	r3, [pc, #320]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	494d      	ldr	r1, [pc, #308]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d040      	beq.n	800516c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f2:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d115      	bne.n	800512a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e07f      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510a:	4b41      	ldr	r3, [pc, #260]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e073      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511a:	4b3d      	ldr	r3, [pc, #244]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e06b      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800512a:	4b39      	ldr	r3, [pc, #228]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f023 0203 	bic.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4936      	ldr	r1, [pc, #216]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 8005138:	4313      	orrs	r3, r2
 800513a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513c:	f7fe fd9a 	bl	8003c74 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	e00a      	b.n	800515a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005144:	f7fe fd96 	bl	8003c74 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e053      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	4b2d      	ldr	r3, [pc, #180]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 020c 	and.w	r2, r3, #12
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	429a      	cmp	r2, r3
 800516a:	d1eb      	bne.n	8005144 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800516c:	4b27      	ldr	r3, [pc, #156]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d210      	bcs.n	800519c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 020f 	bic.w	r2, r3, #15
 8005182:	4922      	ldr	r1, [pc, #136]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e032      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4916      	ldr	r1, [pc, #88]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	490e      	ldr	r1, [pc, #56]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051da:	f000 f821 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80051de:	4602      	mov	r2, r0
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	490a      	ldr	r1, [pc, #40]	; (8005214 <HAL_RCC_ClockConfig+0x1cc>)
 80051ec:	5ccb      	ldrb	r3, [r1, r3]
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x1d0>)
 80051f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_RCC_ClockConfig+0x1d4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fcf6 	bl	8003bec <HAL_InitTick>

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40023c00 	.word	0x40023c00
 8005210:	40023800 	.word	0x40023800
 8005214:	08005bfc 	.word	0x08005bfc
 8005218:	20001a2c 	.word	0x20001a2c
 800521c:	20001a30 	.word	0x20001a30

08005220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005224:	b090      	sub	sp, #64	; 0x40
 8005226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	637b      	str	r3, [r7, #52]	; 0x34
 800522c:	2300      	movs	r3, #0
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005230:	2300      	movs	r3, #0
 8005232:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005238:	4b59      	ldr	r3, [pc, #356]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b08      	cmp	r3, #8
 8005242:	d00d      	beq.n	8005260 <HAL_RCC_GetSysClockFreq+0x40>
 8005244:	2b08      	cmp	r3, #8
 8005246:	f200 80a1 	bhi.w	800538c <HAL_RCC_GetSysClockFreq+0x16c>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x34>
 800524e:	2b04      	cmp	r3, #4
 8005250:	d003      	beq.n	800525a <HAL_RCC_GetSysClockFreq+0x3a>
 8005252:	e09b      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005254:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005258:	e09b      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800525a:	4b53      	ldr	r3, [pc, #332]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800525c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800525e:	e098      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005260:	4b4f      	ldr	r3, [pc, #316]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005268:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800526a:	4b4d      	ldr	r3, [pc, #308]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d028      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b4a      	ldr	r3, [pc, #296]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	2200      	movs	r2, #0
 800527e:	623b      	str	r3, [r7, #32]
 8005280:	627a      	str	r2, [r7, #36]	; 0x24
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005288:	2100      	movs	r1, #0
 800528a:	4b47      	ldr	r3, [pc, #284]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800528c:	fb03 f201 	mul.w	r2, r3, r1
 8005290:	2300      	movs	r3, #0
 8005292:	fb00 f303 	mul.w	r3, r0, r3
 8005296:	4413      	add	r3, r2
 8005298:	4a43      	ldr	r2, [pc, #268]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800529a:	fba0 1202 	umull	r1, r2, r0, r2
 800529e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052a0:	460a      	mov	r2, r1
 80052a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80052a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a6:	4413      	add	r3, r2
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	2200      	movs	r2, #0
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	61fa      	str	r2, [r7, #28]
 80052b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052ba:	f7fa ffad 	bl	8000218 <__aeabi_uldivmod>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4613      	mov	r3, r2
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c6:	e053      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c8:	4b35      	ldr	r3, [pc, #212]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	099b      	lsrs	r3, r3, #6
 80052ce:	2200      	movs	r2, #0
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	617a      	str	r2, [r7, #20]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052da:	f04f 0b00 	mov.w	fp, #0
 80052de:	4652      	mov	r2, sl
 80052e0:	465b      	mov	r3, fp
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	0159      	lsls	r1, r3, #5
 80052ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052f0:	0150      	lsls	r0, r2, #5
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	ebb2 080a 	subs.w	r8, r2, sl
 80052fa:	eb63 090b 	sbc.w	r9, r3, fp
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800530a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800530e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005312:	ebb2 0408 	subs.w	r4, r2, r8
 8005316:	eb63 0509 	sbc.w	r5, r3, r9
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	00eb      	lsls	r3, r5, #3
 8005324:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005328:	00e2      	lsls	r2, r4, #3
 800532a:	4614      	mov	r4, r2
 800532c:	461d      	mov	r5, r3
 800532e:	eb14 030a 	adds.w	r3, r4, sl
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	eb45 030b 	adc.w	r3, r5, fp
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005346:	4629      	mov	r1, r5
 8005348:	028b      	lsls	r3, r1, #10
 800534a:	4621      	mov	r1, r4
 800534c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005350:	4621      	mov	r1, r4
 8005352:	028a      	lsls	r2, r1, #10
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535a:	2200      	movs	r2, #0
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	60fa      	str	r2, [r7, #12]
 8005360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005364:	f7fa ff58 	bl	8000218 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4613      	mov	r3, r2
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	3301      	adds	r3, #1
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800538a:	e002      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800538e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005394:	4618      	mov	r0, r3
 8005396:	3740      	adds	r7, #64	; 0x40
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	017d7840 	.word	0x017d7840

080053ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053d4:	4b69      	ldr	r3, [pc, #420]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a68      	ldr	r2, [pc, #416]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053de:	6093      	str	r3, [r2, #8]
 80053e0:	4b66      	ldr	r3, [pc, #408]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e8:	4964      	ldr	r1, [pc, #400]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80053f6:	2301      	movs	r3, #1
 80053f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d017      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005406:	4b5d      	ldr	r3, [pc, #372]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800540c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	4959      	ldr	r1, [pc, #356]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005424:	d101      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005426:	2301      	movs	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005432:	2301      	movs	r3, #1
 8005434:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d017      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005442:	4b4e      	ldr	r3, [pc, #312]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005448:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	494a      	ldr	r1, [pc, #296]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005460:	d101      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005462:	2301      	movs	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800546e:	2301      	movs	r3, #1
 8005470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 808b 	beq.w	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005490:	4b3a      	ldr	r3, [pc, #232]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	4a39      	ldr	r2, [pc, #228]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549a:	6413      	str	r3, [r2, #64]	; 0x40
 800549c:	4b37      	ldr	r3, [pc, #220]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054a8:	4b35      	ldr	r3, [pc, #212]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a34      	ldr	r2, [pc, #208]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b4:	f7fe fbde 	bl	8003c74 <HAL_GetTick>
 80054b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054bc:	f7fe fbda 	bl	8003c74 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	; 0x64
 80054c8:	d901      	bls.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e357      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054ce:	4b2c      	ldr	r3, [pc, #176]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054da:	4b28      	ldr	r3, [pc, #160]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d035      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d02e      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f8:	4b20      	ldr	r3, [pc, #128]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005500:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a1d      	ldr	r2, [pc, #116]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800550e:	4b1b      	ldr	r3, [pc, #108]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	4a1a      	ldr	r2, [pc, #104]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005518:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800551a:	4a18      	ldr	r2, [pc, #96]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005520:	4b16      	ldr	r3, [pc, #88]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b01      	cmp	r3, #1
 800552a:	d114      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fe fba2 	bl	8003c74 <HAL_GetTick>
 8005530:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005532:	e00a      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005534:	f7fe fb9e 	bl	8003c74 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005542:	4293      	cmp	r3, r2
 8005544:	d901      	bls.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e319      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0ee      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005562:	d111      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005570:	4b04      	ldr	r3, [pc, #16]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005572:	400b      	ands	r3, r1
 8005574:	4901      	ldr	r1, [pc, #4]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
 800557a:	e00b      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800557c:	40023800 	.word	0x40023800
 8005580:	40007000 	.word	0x40007000
 8005584:	0ffffcff 	.word	0x0ffffcff
 8005588:	4baa      	ldr	r3, [pc, #680]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4aa9      	ldr	r2, [pc, #676]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800558e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005592:	6093      	str	r3, [r2, #8]
 8005594:	4ba7      	ldr	r3, [pc, #668]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005596:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a0:	49a4      	ldr	r1, [pc, #656]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d010      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055b2:	4ba0      	ldr	r3, [pc, #640]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b8:	4a9e      	ldr	r2, [pc, #632]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055c2:	4b9c      	ldr	r3, [pc, #624]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	4999      	ldr	r1, [pc, #612]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055e0:	4b94      	ldr	r3, [pc, #592]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ee:	4991      	ldr	r1, [pc, #580]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005602:	4b8c      	ldr	r3, [pc, #560]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005610:	4988      	ldr	r1, [pc, #544]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005624:	4b83      	ldr	r3, [pc, #524]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005632:	4980      	ldr	r1, [pc, #512]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005646:	4b7b      	ldr	r3, [pc, #492]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4977      	ldr	r1, [pc, #476]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005668:	4b72      	ldr	r3, [pc, #456]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	f023 0203 	bic.w	r2, r3, #3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	496f      	ldr	r1, [pc, #444]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800568a:	4b6a      	ldr	r3, [pc, #424]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005690:	f023 020c 	bic.w	r2, r3, #12
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005698:	4966      	ldr	r1, [pc, #408]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056ac:	4b61      	ldr	r3, [pc, #388]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ba:	495e      	ldr	r1, [pc, #376]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056ce:	4b59      	ldr	r3, [pc, #356]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	4955      	ldr	r1, [pc, #340]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056f0:	4b50      	ldr	r3, [pc, #320]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	494d      	ldr	r1, [pc, #308]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005712:	4b48      	ldr	r3, [pc, #288]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005718:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	4944      	ldr	r1, [pc, #272]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005734:	4b3f      	ldr	r3, [pc, #252]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005742:	493c      	ldr	r1, [pc, #240]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005756:	4b37      	ldr	r3, [pc, #220]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005764:	4933      	ldr	r1, [pc, #204]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005778:	4b2e      	ldr	r3, [pc, #184]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005786:	492b      	ldr	r1, [pc, #172]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d011      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800579a:	4b26      	ldr	r3, [pc, #152]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a8:	4922      	ldr	r1, [pc, #136]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b8:	d101      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057ba:	2301      	movs	r3, #1
 80057bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057ca:	2301      	movs	r3, #1
 80057cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e8:	4912      	ldr	r1, [pc, #72]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00b      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057fc:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800580c:	4909      	ldr	r1, [pc, #36]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d006      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 80d9 	beq.w	80059da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005828:	4b02      	ldr	r3, [pc, #8]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a01      	ldr	r2, [pc, #4]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005832:	e001      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005834:	40023800 	.word	0x40023800
 8005838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583a:	f7fe fa1b 	bl	8003c74 <HAL_GetTick>
 800583e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005840:	e008      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005842:	f7fe fa17 	bl	8003c74 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b64      	cmp	r3, #100	; 0x64
 800584e:	d901      	bls.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e194      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005854:	4b6c      	ldr	r3, [pc, #432]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f0      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d021      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d11d      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005874:	4b64      	ldr	r3, [pc, #400]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005882:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005888:	0e1b      	lsrs	r3, r3, #24
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	019a      	lsls	r2, r3, #6
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	431a      	orrs	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	061b      	lsls	r3, r3, #24
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	071b      	lsls	r3, r3, #28
 80058a8:	4957      	ldr	r1, [pc, #348]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d02e      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058da:	d129      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058dc:	4b4a      	ldr	r3, [pc, #296]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058ea:	4b47      	ldr	r3, [pc, #284]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f0:	0f1b      	lsrs	r3, r3, #28
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	019a      	lsls	r2, r3, #6
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	061b      	lsls	r3, r3, #24
 800590a:	431a      	orrs	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	071b      	lsls	r3, r3, #28
 8005910:	493d      	ldr	r1, [pc, #244]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005918:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800591a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800591e:	f023 021f 	bic.w	r2, r3, #31
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	3b01      	subs	r3, #1
 8005928:	4937      	ldr	r1, [pc, #220]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01d      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800593c:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800593e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005942:	0e1b      	lsrs	r3, r3, #24
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800594a:	4b2f      	ldr	r3, [pc, #188]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800594c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005950:	0f1b      	lsrs	r3, r3, #28
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	019a      	lsls	r2, r3, #6
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	431a      	orrs	r2, r3
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	061b      	lsls	r3, r3, #24
 800596a:	431a      	orrs	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	071b      	lsls	r3, r3, #28
 8005970:	4925      	ldr	r1, [pc, #148]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d011      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	019a      	lsls	r2, r3, #6
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	061b      	lsls	r3, r3, #24
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	071b      	lsls	r3, r3, #28
 80059a0:	4919      	ldr	r1, [pc, #100]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059a8:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a16      	ldr	r2, [pc, #88]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b4:	f7fe f95e 	bl	8003c74 <HAL_GetTick>
 80059b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059bc:	f7fe f95a 	bl	8003c74 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0d7      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ce:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	f040 80cd 	bne.w	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a08      	ldr	r2, [pc, #32]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ee:	f7fe f941 	bl	8003c74 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059f4:	e00a      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059f6:	f7fe f93d 	bl	8003c74 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b64      	cmp	r3, #100	; 0x64
 8005a02:	d903      	bls.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e0ba      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a0c:	4b5e      	ldr	r3, [pc, #376]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a18:	d0ed      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d02e      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d12a      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a42:	4b51      	ldr	r3, [pc, #324]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a50:	4b4d      	ldr	r3, [pc, #308]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a56:	0f1b      	lsrs	r3, r3, #28
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	019a      	lsls	r2, r3, #6
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	4944      	ldr	r1, [pc, #272]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a7e:	4b42      	ldr	r3, [pc, #264]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	493d      	ldr	r1, [pc, #244]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d022      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aac:	d11d      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	0e1b      	lsrs	r3, r3, #24
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005abc:	4b32      	ldr	r3, [pc, #200]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	0f1b      	lsrs	r3, r3, #28
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	019a      	lsls	r2, r3, #6
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	041b      	lsls	r3, r3, #16
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	071b      	lsls	r3, r3, #28
 8005ae2:	4929      	ldr	r1, [pc, #164]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d028      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005af6:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afc:	0e1b      	lsrs	r3, r3, #24
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b04:	4b20      	ldr	r3, [pc, #128]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	0c1b      	lsrs	r3, r3, #16
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	019a      	lsls	r2, r3, #6
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	071b      	lsls	r3, r3, #28
 8005b2a:	4917      	ldr	r1, [pc, #92]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4911      	ldr	r1, [pc, #68]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b48:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a0e      	ldr	r2, [pc, #56]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b54:	f7fe f88e 	bl	8003c74 <HAL_GetTick>
 8005b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b5c:	f7fe f88a 	bl	8003c74 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	; 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e007      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b7a:	d1ef      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800

08005b8c <__libc_init_array>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	4d0d      	ldr	r5, [pc, #52]	; (8005bc4 <__libc_init_array+0x38>)
 8005b90:	4c0d      	ldr	r4, [pc, #52]	; (8005bc8 <__libc_init_array+0x3c>)
 8005b92:	1b64      	subs	r4, r4, r5
 8005b94:	10a4      	asrs	r4, r4, #2
 8005b96:	2600      	movs	r6, #0
 8005b98:	42a6      	cmp	r6, r4
 8005b9a:	d109      	bne.n	8005bb0 <__libc_init_array+0x24>
 8005b9c:	4d0b      	ldr	r5, [pc, #44]	; (8005bcc <__libc_init_array+0x40>)
 8005b9e:	4c0c      	ldr	r4, [pc, #48]	; (8005bd0 <__libc_init_array+0x44>)
 8005ba0:	f000 f820 	bl	8005be4 <_init>
 8005ba4:	1b64      	subs	r4, r4, r5
 8005ba6:	10a4      	asrs	r4, r4, #2
 8005ba8:	2600      	movs	r6, #0
 8005baa:	42a6      	cmp	r6, r4
 8005bac:	d105      	bne.n	8005bba <__libc_init_array+0x2e>
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb4:	4798      	blx	r3
 8005bb6:	3601      	adds	r6, #1
 8005bb8:	e7ee      	b.n	8005b98 <__libc_init_array+0xc>
 8005bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bbe:	4798      	blx	r3
 8005bc0:	3601      	adds	r6, #1
 8005bc2:	e7f2      	b.n	8005baa <__libc_init_array+0x1e>
 8005bc4:	08005c14 	.word	0x08005c14
 8005bc8:	08005c14 	.word	0x08005c14
 8005bcc:	08005c14 	.word	0x08005c14
 8005bd0:	08005c18 	.word	0x08005c18

08005bd4 <memset>:
 8005bd4:	4402      	add	r2, r0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d100      	bne.n	8005bde <memset+0xa>
 8005bdc:	4770      	bx	lr
 8005bde:	f803 1b01 	strb.w	r1, [r3], #1
 8005be2:	e7f9      	b.n	8005bd8 <memset+0x4>

08005be4 <_init>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr

08005bf0 <_fini>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	bf00      	nop
 8005bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf6:	bc08      	pop	{r3}
 8005bf8:	469e      	mov	lr, r3
 8005bfa:	4770      	bx	lr
