
imitator-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a12c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036e0  0801a2fc  0801a2fc  0002a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d9dc  0801d9dc  00031c00  2**0
                  CONTENTS
  4 .ARM          00000008  0801d9dc  0801d9dc  0002d9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d9e4  0801d9e4  00031c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d9e4  0801d9e4  0002d9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d9e8  0801d9e8  0002d9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ac0  20000000  0801d9ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20001ac0  0801f4ac  00031ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20001b60  0801f54c  00031b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0004d534  20001c00  0801f5ec  00031c00  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2004f134  0801f5ec  0003f134  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00031c00  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034896  00000000  00000000  00031c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007968  00000000  00000000  000664c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024d8  00000000  00000000  0006de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002370  00000000  00000000  00070308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000125dd  00000000  00000000  00072678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003933a  00000000  00000000  00084c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00115a41  00000000  00000000  000bdf8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d39d0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a1b0  00000000  00000000  001d3a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001c00 	.word	0x20001c00
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a2e4 	.word	0x0801a2e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001c04 	.word	0x20001c04
 800020c:	0801a2e4 	.word	0x0801a2e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <keyboard_GPIO_init>:
uint32_t key_count[4][3] = {0};
uint32_t stage = 0;
uint16_t keyboard_state = 0;


void keyboard_GPIO_init(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2110      	movs	r1, #16
 80005dc:	4826      	ldr	r0, [pc, #152]	; (8000678 <keyboard_GPIO_init+0xb4>)
 80005de:	f005 fb93 	bl	8005d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2101      	movs	r1, #1
 80005e6:	4825      	ldr	r0, [pc, #148]	; (800067c <keyboard_GPIO_init+0xb8>)
 80005e8:	f005 fb8e 	bl	8005d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	21c0      	movs	r1, #192	; 0xc0
 80005f0:	4823      	ldr	r0, [pc, #140]	; (8000680 <keyboard_GPIO_init+0xbc>)
 80005f2:	f005 fb89 	bl	8005d08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005f6:	2310      	movs	r3, #16
 80005f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	481b      	ldr	r0, [pc, #108]	; (8000678 <keyboard_GPIO_init+0xb4>)
 800060c:	f005 f9b8 	bl	8005980 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI2 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000610:	230c      	movs	r3, #12
 8000612:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000618:	2302      	movs	r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <keyboard_GPIO_init+0xb8>)
 8000622:	f005 f9ad 	bl	8005980 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000626:	2301      	movs	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800062e:	2302      	movs	r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <keyboard_GPIO_init+0xb8>)
 800063c:	f005 f9a0 	bl	8005980 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG7 PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000640:	23c0      	movs	r3, #192	; 0xc0
 8000642:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000648:	2302      	movs	r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <keyboard_GPIO_init+0xbc>)
 8000656:	f005 f993 	bl	8005980 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <keyboard_GPIO_init+0xc0>)
 800066c:	f005 f988 	bl	8005980 <HAL_GPIO_Init>
}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40020400 	.word	0x40020400
 800067c:	40022000 	.word	0x40022000
 8000680:	40021800 	.word	0x40021800
 8000684:	40021c00 	.word	0x40021c00

08000688 <get_current_keyboard_state>:

void get_current_keyboard_state(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	stage = (stage+1)%8;
 800068c:	4b95      	ldr	r3, [pc, #596]	; (80008e4 <get_current_keyboard_state+0x25c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	4a93      	ldr	r2, [pc, #588]	; (80008e4 <get_current_keyboard_state+0x25c>)
 8000698:	6013      	str	r3, [r2, #0]
	switch(stage){
 800069a:	4b92      	ldr	r3, [pc, #584]	; (80008e4 <get_current_keyboard_state+0x25c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	f200 82a3 	bhi.w	8000bea <get_current_keyboard_state+0x562>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <get_current_keyboard_state+0x24>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006cd 	.word	0x080006cd
 80006b0:	080006f7 	.word	0x080006f7
 80006b4:	08000807 	.word	0x08000807
 80006b8:	08000831 	.word	0x08000831
 80006bc:	0800095d 	.word	0x0800095d
 80006c0:	08000987 	.word	0x08000987
 80006c4:	08000a97 	.word	0x08000a97
 80006c8:	08000ac1 	.word	0x08000ac1
		case 0:{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4885      	ldr	r0, [pc, #532]	; (80008e8 <get_current_keyboard_state+0x260>)
 80006d2:	f005 fb19 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);			
 80006d6:	2200      	movs	r2, #0
 80006d8:	2110      	movs	r1, #16
 80006da:	4884      	ldr	r0, [pc, #528]	; (80008ec <get_current_keyboard_state+0x264>)
 80006dc:	f005 fb14 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	4882      	ldr	r0, [pc, #520]	; (80008f0 <get_current_keyboard_state+0x268>)
 80006e6:	f005 fb0f 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	487e      	ldr	r0, [pc, #504]	; (80008e8 <get_current_keyboard_state+0x260>)
 80006f0:	f005 fb0a 	bl	8005d08 <HAL_GPIO_WritePin>
			break;
 80006f4:	e279      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[0][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][0]++;}}else{if(key_count[0][0]){key_count[0][0]--;}}
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	487e      	ldr	r0, [pc, #504]	; (80008f4 <get_current_keyboard_state+0x26c>)
 80006fa:	f005 faed 	bl	8005cd8 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d109      	bne.n	8000718 <get_current_keyboard_state+0x90>
 8000704:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b15      	cmp	r3, #21
 800070a:	d80e      	bhi.n	800072a <get_current_keyboard_state+0xa2>
 800070c:	4b7a      	ldr	r3, [pc, #488]	; (80008f8 <get_current_keyboard_state+0x270>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a79      	ldr	r2, [pc, #484]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	e008      	b.n	800072a <get_current_keyboard_state+0xa2>
 8000718:	4b77      	ldr	r3, [pc, #476]	; (80008f8 <get_current_keyboard_state+0x270>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <get_current_keyboard_state+0xa2>
 8000720:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3b01      	subs	r3, #1
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000728:	6013      	str	r3, [r2, #0]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[0][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][1]++;}}else{if(key_count[0][1]){key_count[0][1]--;}}
 800072a:	2108      	movs	r1, #8
 800072c:	4870      	ldr	r0, [pc, #448]	; (80008f0 <get_current_keyboard_state+0x268>)
 800072e:	f005 fad3 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	d109      	bne.n	800074c <get_current_keyboard_state+0xc4>
 8000738:	4b6f      	ldr	r3, [pc, #444]	; (80008f8 <get_current_keyboard_state+0x270>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2b15      	cmp	r3, #21
 800073e:	d80e      	bhi.n	800075e <get_current_keyboard_state+0xd6>
 8000740:	4b6d      	ldr	r3, [pc, #436]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000748:	6053      	str	r3, [r2, #4]
 800074a:	e008      	b.n	800075e <get_current_keyboard_state+0xd6>
 800074c:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <get_current_keyboard_state+0x270>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d004      	beq.n	800075e <get_current_keyboard_state+0xd6>
 8000754:	4b68      	ldr	r3, [pc, #416]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	3b01      	subs	r3, #1
 800075a:	4a67      	ldr	r2, [pc, #412]	; (80008f8 <get_current_keyboard_state+0x270>)
 800075c:	6053      	str	r3, [r2, #4]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[0][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][2]++;}}else{if(key_count[0][2]){key_count[0][2]--;}}
 800075e:	2104      	movs	r1, #4
 8000760:	4863      	ldr	r0, [pc, #396]	; (80008f0 <get_current_keyboard_state+0x268>)
 8000762:	f005 fab9 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d109      	bne.n	8000780 <get_current_keyboard_state+0xf8>
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <get_current_keyboard_state+0x270>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	2b15      	cmp	r3, #21
 8000772:	d80e      	bhi.n	8000792 <get_current_keyboard_state+0x10a>
 8000774:	4b60      	ldr	r3, [pc, #384]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	3301      	adds	r3, #1
 800077a:	4a5f      	ldr	r2, [pc, #380]	; (80008f8 <get_current_keyboard_state+0x270>)
 800077c:	6093      	str	r3, [r2, #8]
 800077e:	e008      	b.n	8000792 <get_current_keyboard_state+0x10a>
 8000780:	4b5d      	ldr	r3, [pc, #372]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d004      	beq.n	8000792 <get_current_keyboard_state+0x10a>
 8000788:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <get_current_keyboard_state+0x270>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a5a      	ldr	r2, [pc, #360]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000790:	6093      	str	r3, [r2, #8]

			if(key_count[0][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_TEST;}else{keyboard_state&=~BUTTON_TEST;}
 8000792:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b0e      	cmp	r3, #14
 8000798:	d907      	bls.n	80007aa <get_current_keyboard_state+0x122>
 800079a:	4b58      	ldr	r3, [pc, #352]	; (80008fc <get_current_keyboard_state+0x274>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b55      	ldr	r3, [pc, #340]	; (80008fc <get_current_keyboard_state+0x274>)
 80007a6:	801a      	strh	r2, [r3, #0]
 80007a8:	e006      	b.n	80007b8 <get_current_keyboard_state+0x130>
 80007aa:	4b54      	ldr	r3, [pc, #336]	; (80008fc <get_current_keyboard_state+0x274>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <get_current_keyboard_state+0x274>)
 80007b6:	801a      	strh	r2, [r3, #0]
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 80007b8:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <get_current_keyboard_state+0x270>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b0e      	cmp	r3, #14
 80007be:	d907      	bls.n	80007d0 <get_current_keyboard_state+0x148>
 80007c0:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <get_current_keyboard_state+0x274>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <get_current_keyboard_state+0x274>)
 80007cc:	801a      	strh	r2, [r3, #0]
 80007ce:	e006      	b.n	80007de <get_current_keyboard_state+0x156>
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <get_current_keyboard_state+0x274>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	f023 0302 	bic.w	r3, r3, #2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b48      	ldr	r3, [pc, #288]	; (80008fc <get_current_keyboard_state+0x274>)
 80007dc:	801a      	strh	r2, [r3, #0]
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80007de:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <get_current_keyboard_state+0x270>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b0e      	cmp	r3, #14
 80007e4:	d907      	bls.n	80007f6 <get_current_keyboard_state+0x16e>
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <get_current_keyboard_state+0x274>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	4b42      	ldr	r3, [pc, #264]	; (80008fc <get_current_keyboard_state+0x274>)
 80007f2:	801a      	strh	r2, [r3, #0]
			break;
 80007f4:	e1f9      	b.n	8000bea <get_current_keyboard_state+0x562>
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <get_current_keyboard_state+0x274>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f023 0304 	bic.w	r3, r3, #4
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <get_current_keyboard_state+0x274>)
 8000802:	801a      	strh	r2, [r3, #0]
			break;
 8000804:	e1f1      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 2:{	
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4837      	ldr	r0, [pc, #220]	; (80008e8 <get_current_keyboard_state+0x260>)
 800080c:	f005 fa7c 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	4834      	ldr	r0, [pc, #208]	; (80008e8 <get_current_keyboard_state+0x260>)
 8000816:	f005 fa77 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);	
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	4834      	ldr	r0, [pc, #208]	; (80008f0 <get_current_keyboard_state+0x268>)
 8000820:	f005 fa72 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);			
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	4830      	ldr	r0, [pc, #192]	; (80008ec <get_current_keyboard_state+0x264>)
 800082a:	f005 fa6d 	bl	8005d08 <HAL_GPIO_WritePin>
			break;
 800082e:	e1dc      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[1][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][0]++;}}else{if(key_count[1][0]){key_count[1][0]--;}}
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	4830      	ldr	r0, [pc, #192]	; (80008f4 <get_current_keyboard_state+0x26c>)
 8000834:	f005 fa50 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d109      	bne.n	8000852 <get_current_keyboard_state+0x1ca>
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	2b15      	cmp	r3, #21
 8000844:	d80e      	bhi.n	8000864 <get_current_keyboard_state+0x1dc>
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <get_current_keyboard_state+0x270>)
 800084e:	60d3      	str	r3, [r2, #12]
 8000850:	e008      	b.n	8000864 <get_current_keyboard_state+0x1dc>
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <get_current_keyboard_state+0x1dc>
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <get_current_keyboard_state+0x270>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	3b01      	subs	r3, #1
 8000860:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000862:	60d3      	str	r3, [r2, #12]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[1][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][1]++;}}else{if(key_count[1][1]){key_count[1][1]--;}}
 8000864:	2108      	movs	r1, #8
 8000866:	4822      	ldr	r0, [pc, #136]	; (80008f0 <get_current_keyboard_state+0x268>)
 8000868:	f005 fa36 	bl	8005cd8 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d109      	bne.n	8000886 <get_current_keyboard_state+0x1fe>
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	2b15      	cmp	r3, #21
 8000878:	d80e      	bhi.n	8000898 <get_current_keyboard_state+0x210>
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <get_current_keyboard_state+0x270>)
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	3301      	adds	r3, #1
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000882:	6113      	str	r3, [r2, #16]
 8000884:	e008      	b.n	8000898 <get_current_keyboard_state+0x210>
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d004      	beq.n	8000898 <get_current_keyboard_state+0x210>
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000896:	6113      	str	r3, [r2, #16]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[1][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][2]++;}}else{if(key_count[1][2]){key_count[1][2]--;}}
 8000898:	2104      	movs	r1, #4
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <get_current_keyboard_state+0x268>)
 800089c:	f005 fa1c 	bl	8005cd8 <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d109      	bne.n	80008ba <get_current_keyboard_state+0x232>
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	2b15      	cmp	r3, #21
 80008ac:	d80e      	bhi.n	80008cc <get_current_keyboard_state+0x244>
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008b6:	6153      	str	r3, [r2, #20]
 80008b8:	e008      	b.n	80008cc <get_current_keyboard_state+0x244>
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d004      	beq.n	80008cc <get_current_keyboard_state+0x244>
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008ca:	6153      	str	r3, [r2, #20]
	
			if(key_count[1][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_CALIBRATION;}else{keyboard_state&=~BUTTON_CALIBRATION;}
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	2b0e      	cmp	r3, #14
 80008d2:	d915      	bls.n	8000900 <get_current_keyboard_state+0x278>
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <get_current_keyboard_state+0x274>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <get_current_keyboard_state+0x274>)
 80008e0:	801a      	strh	r2, [r3, #0]
 80008e2:	e014      	b.n	800090e <get_current_keyboard_state+0x286>
 80008e4:	20001c4c 	.word	0x20001c4c
 80008e8:	40021800 	.word	0x40021800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40022000 	.word	0x40022000
 80008f4:	40021c00 	.word	0x40021c00
 80008f8:	20001c1c 	.word	0x20001c1c
 80008fc:	20001c50 	.word	0x20001c50
 8000900:	4b92      	ldr	r3, [pc, #584]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	f023 0308 	bic.w	r3, r3, #8
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b90      	ldr	r3, [pc, #576]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 800090c:	801a      	strh	r2, [r3, #0]
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 800090e:	4b90      	ldr	r3, [pc, #576]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	2b0e      	cmp	r3, #14
 8000914:	d907      	bls.n	8000926 <get_current_keyboard_state+0x29e>
 8000916:	4b8d      	ldr	r3, [pc, #564]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b8a      	ldr	r3, [pc, #552]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000922:	801a      	strh	r2, [r3, #0]
 8000924:	e006      	b.n	8000934 <get_current_keyboard_state+0x2ac>
 8000926:	4b89      	ldr	r3, [pc, #548]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	f023 0310 	bic.w	r3, r3, #16
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b86      	ldr	r3, [pc, #536]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000932:	801a      	strh	r2, [r3, #0]
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 8000934:	4b86      	ldr	r3, [pc, #536]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	2b0e      	cmp	r3, #14
 800093a:	d907      	bls.n	800094c <get_current_keyboard_state+0x2c4>
 800093c:	4b83      	ldr	r3, [pc, #524]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b81      	ldr	r3, [pc, #516]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000948:	801a      	strh	r2, [r3, #0]
			break;
 800094a:	e14e      	b.n	8000bea <get_current_keyboard_state+0x562>
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 800094c:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	f023 0320 	bic.w	r3, r3, #32
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b7d      	ldr	r3, [pc, #500]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000958:	801a      	strh	r2, [r3, #0]
			break;
 800095a:	e146      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 4:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2110      	movs	r1, #16
 8000960:	487c      	ldr	r0, [pc, #496]	; (8000b54 <get_current_keyboard_state+0x4cc>)
 8000962:	f005 f9d1 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	487b      	ldr	r0, [pc, #492]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 800096c:	f005 f9cc 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2101      	movs	r1, #1
 8000974:	4879      	ldr	r0, [pc, #484]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000976:	f005 f9c7 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);			
 800097a:	2201      	movs	r2, #1
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	4876      	ldr	r0, [pc, #472]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 8000980:	f005 f9c2 	bl	8005d08 <HAL_GPIO_WritePin>
			break;
 8000984:	e131      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[2][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][0]++;}}else{if(key_count[2][0]){key_count[2][0]--;}}
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	4875      	ldr	r0, [pc, #468]	; (8000b60 <get_current_keyboard_state+0x4d8>)
 800098a:	f005 f9a5 	bl	8005cd8 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d109      	bne.n	80009a8 <get_current_keyboard_state+0x320>
 8000994:	4b6e      	ldr	r3, [pc, #440]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	2b15      	cmp	r3, #21
 800099a:	d80e      	bhi.n	80009ba <get_current_keyboard_state+0x332>
 800099c:	4b6c      	ldr	r3, [pc, #432]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a6b      	ldr	r2, [pc, #428]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	e008      	b.n	80009ba <get_current_keyboard_state+0x332>
 80009a8:	4b69      	ldr	r3, [pc, #420]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d004      	beq.n	80009ba <get_current_keyboard_state+0x332>
 80009b0:	4b67      	ldr	r3, [pc, #412]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	4a66      	ldr	r2, [pc, #408]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009b8:	6193      	str	r3, [r2, #24]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[2][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][1]++;}}else{if(key_count[2][1]){key_count[2][1]--;}}
 80009ba:	2108      	movs	r1, #8
 80009bc:	4867      	ldr	r0, [pc, #412]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 80009be:	f005 f98b 	bl	8005cd8 <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d109      	bne.n	80009dc <get_current_keyboard_state+0x354>
 80009c8:	4b61      	ldr	r3, [pc, #388]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	2b15      	cmp	r3, #21
 80009ce:	d80e      	bhi.n	80009ee <get_current_keyboard_state+0x366>
 80009d0:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a5e      	ldr	r2, [pc, #376]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	e008      	b.n	80009ee <get_current_keyboard_state+0x366>
 80009dc:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <get_current_keyboard_state+0x366>
 80009e4:	4b5a      	ldr	r3, [pc, #360]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a59      	ldr	r2, [pc, #356]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009ec:	61d3      	str	r3, [r2, #28]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[2][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][2]++;}}else{if(key_count[2][2]){key_count[2][2]--;}}
 80009ee:	2104      	movs	r1, #4
 80009f0:	485a      	ldr	r0, [pc, #360]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 80009f2:	f005 f971 	bl	8005cd8 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d109      	bne.n	8000a10 <get_current_keyboard_state+0x388>
 80009fc:	4b54      	ldr	r3, [pc, #336]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009fe:	6a1b      	ldr	r3, [r3, #32]
 8000a00:	2b15      	cmp	r3, #21
 8000a02:	d80e      	bhi.n	8000a22 <get_current_keyboard_state+0x39a>
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a51      	ldr	r2, [pc, #324]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a0c:	6213      	str	r3, [r2, #32]
 8000a0e:	e008      	b.n	8000a22 <get_current_keyboard_state+0x39a>
 8000a10:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a12:	6a1b      	ldr	r3, [r3, #32]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d004      	beq.n	8000a22 <get_current_keyboard_state+0x39a>
 8000a18:	4b4d      	ldr	r3, [pc, #308]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a1a:	6a1b      	ldr	r3, [r3, #32]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a20:	6213      	str	r3, [r2, #32]

			if(key_count[2][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_BRIGHTNESS;}else{keyboard_state&=~BUTTON_BRIGHTNESS;}
 8000a22:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	2b0e      	cmp	r3, #14
 8000a28:	d907      	bls.n	8000a3a <get_current_keyboard_state+0x3b2>
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a36:	801a      	strh	r2, [r3, #0]
 8000a38:	e006      	b.n	8000a48 <get_current_keyboard_state+0x3c0>
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a46:	801a      	strh	r2, [r3, #0]
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8000a48:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	2b0e      	cmp	r3, #14
 8000a4e:	d907      	bls.n	8000a60 <get_current_keyboard_state+0x3d8>
 8000a50:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a5c:	801a      	strh	r2, [r3, #0]
 8000a5e:	e006      	b.n	8000a6e <get_current_keyboard_state+0x3e6>
 8000a60:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a6c:	801a      	strh	r2, [r3, #0]
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8000a6e:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	2b0e      	cmp	r3, #14
 8000a74:	d907      	bls.n	8000a86 <get_current_keyboard_state+0x3fe>
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a82:	801a      	strh	r2, [r3, #0]
			break;
 8000a84:	e0b1      	b.n	8000bea <get_current_keyboard_state+0x562>
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a92:	801a      	strh	r2, [r3, #0]
			break;
 8000a94:	e0a9      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 6:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2110      	movs	r1, #16
 8000a9a:	482e      	ldr	r0, [pc, #184]	; (8000b54 <get_current_keyboard_state+0x4cc>)
 8000a9c:	f005 f934 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	482c      	ldr	r0, [pc, #176]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 8000aa6:	f005 f92f 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	482a      	ldr	r0, [pc, #168]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 8000ab0:	f005 f92a 	bl	8005d08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);			
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4828      	ldr	r0, [pc, #160]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000aba:	f005 f925 	bl	8005d08 <HAL_GPIO_WritePin>
			break;
 8000abe:	e094      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 7:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[3][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][0]++;}}else{if(key_count[3][0]){key_count[3][0]--;}}
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	4827      	ldr	r0, [pc, #156]	; (8000b60 <get_current_keyboard_state+0x4d8>)
 8000ac4:	f005 f908 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d109      	bne.n	8000ae2 <get_current_keyboard_state+0x45a>
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	2b15      	cmp	r3, #21
 8000ad4:	d80e      	bhi.n	8000af4 <get_current_keyboard_state+0x46c>
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ade:	6253      	str	r3, [r2, #36]	; 0x24
 8000ae0:	e008      	b.n	8000af4 <get_current_keyboard_state+0x46c>
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d004      	beq.n	8000af4 <get_current_keyboard_state+0x46c>
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	3b01      	subs	r3, #1
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000af2:	6253      	str	r3, [r2, #36]	; 0x24
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
 8000af4:	2108      	movs	r1, #8
 8000af6:	4819      	ldr	r0, [pc, #100]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000af8:	f005 f8ee 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d109      	bne.n	8000b16 <get_current_keyboard_state+0x48e>
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b06:	2b15      	cmp	r3, #21
 8000b08:	d80e      	bhi.n	8000b28 <get_current_keyboard_state+0x4a0>
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b12:	6293      	str	r3, [r2, #40]	; 0x28
 8000b14:	e008      	b.n	8000b28 <get_current_keyboard_state+0x4a0>
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d004      	beq.n	8000b28 <get_current_keyboard_state+0x4a0>
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b22:	3b01      	subs	r3, #1
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b26:	6293      	str	r3, [r2, #40]	; 0x28
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}
 8000b28:	2104      	movs	r1, #4
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000b2c:	f005 f8d4 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d116      	bne.n	8000b64 <get_current_keyboard_state+0x4dc>
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	2b15      	cmp	r3, #21
 8000b3c:	d81b      	bhi.n	8000b76 <get_current_keyboard_state+0x4ee>
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a02      	ldr	r2, [pc, #8]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b48:	e015      	b.n	8000b76 <get_current_keyboard_state+0x4ee>
 8000b4a:	bf00      	nop
 8000b4c:	20001c50 	.word	0x20001c50
 8000b50:	20001c1c 	.word	0x20001c1c
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40022000 	.word	0x40022000
 8000b60:	40021c00 	.word	0x40021c00
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d004      	beq.n	8000b76 <get_current_keyboard_state+0x4ee>
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b74:	62d3      	str	r3, [r2, #44]	; 0x2c

			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	2b0e      	cmp	r3, #14
 8000b7c:	d907      	bls.n	8000b8e <get_current_keyboard_state+0x506>
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b8a:	801a      	strh	r2, [r3, #0]
 8000b8c:	e006      	b.n	8000b9c <get_current_keyboard_state+0x514>
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b9a:	801a      	strh	r2, [r3, #0]
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba0:	2b0e      	cmp	r3, #14
 8000ba2:	d907      	bls.n	8000bb4 <get_current_keyboard_state+0x52c>
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e006      	b.n	8000bc2 <get_current_keyboard_state+0x53a>
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bc0:	801a      	strh	r2, [r3, #0]
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc6:	2b0e      	cmp	r3, #14
 8000bc8:	d907      	bls.n	8000bda <get_current_keyboard_state+0x552>
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bd6:	801a      	strh	r2, [r3, #0]
			break;
 8000bd8:	e006      	b.n	8000be8 <get_current_keyboard_state+0x560>
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000be6:	801a      	strh	r2, [r3, #0]
			break;
 8000be8:	bf00      	nop
		}

	}
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20001c1c 	.word	0x20001c1c
 8000bf4:	20001c50 	.word	0x20001c50

08000bf8 <spinner_GPIO_init>:

uint32_t pluscnt = 0;
uint32_t minuscnt = 0;


void spinner_GPIO_init(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pins : PF8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <spinner_GPIO_init+0x60>)
 8000c20:	f004 feae 	bl	8005980 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <spinner_GPIO_init+0x64>)
 8000c36:	f004 fea3 	bl	8005980 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <spinner_GPIO_init+0x64>)
 8000c4c:	f004 fe98 	bl	8005980 <HAL_GPIO_Init>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021400 	.word	0x40021400
 8000c5c:	40020800 	.word	0x40020800

08000c60 <get_current_spinner_button_state>:

void get_current_spinner_button_state(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <get_current_spinner_button_state+0x60>)
 8000c6c:	f005 f834 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_RESET){
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d109      	bne.n	8000c8e <get_current_spinner_button_state+0x2e>
		if(spinner_button_count < SPINNER_COUNT_BOUNDRY+SPINNER_COUNT_BOUNDRY/2){
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b3b      	cmp	r3, #59	; 0x3b
 8000c80:	d80e      	bhi.n	8000ca0 <get_current_spinner_button_state+0x40>
				spinner_button_count++;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e008      	b.n	8000ca0 <get_current_spinner_button_state+0x40>
		}
	}else{
		if(spinner_button_count >= 3){
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d904      	bls.n	8000ca0 <get_current_spinner_button_state+0x40>
			spinner_button_count-=3;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3b03      	subs	r3, #3
 8000c9c:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c9e:	6013      	str	r3, [r2, #0]
		}
	}
	if(spinner_button_count >= SPINNER_COUNT_BOUNDRY){
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b27      	cmp	r3, #39	; 0x27
 8000ca6:	d903      	bls.n	8000cb0 <get_current_spinner_button_state+0x50>
		spinner_button_state=1;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <get_current_spinner_button_state+0x68>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
	}else{
		spinner_button_state=0;
	}
}
 8000cae:	e002      	b.n	8000cb6 <get_current_spinner_button_state+0x56>
		spinner_button_state=0;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <get_current_spinner_button_state+0x68>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40021400 	.word	0x40021400
 8000cc4:	20001c58 	.word	0x20001c58
 8000cc8:	20001c54 	.word	0x20001c54

08000ccc <get_spinner_position_change>:


void get_spinner_position_change(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	switch(spinner_stage){
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <get_spinner_position_change+0x130>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	f200 808f 	bhi.w	8000df8 <get_spinner_position_change+0x12c>
 8000cda:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <get_spinner_position_change+0x14>)
 8000cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce0:	08000cf9 	.word	0x08000cf9
 8000ce4:	08000d25 	.word	0x08000d25
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d79 	.word	0x08000d79
 8000cf0:	08000db7 	.word	0x08000db7
 8000cf4:	08000dcd 	.word	0x08000dcd
		case 0:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4841      	ldr	r0, [pc, #260]	; (8000e00 <get_spinner_position_change+0x134>)
 8000cfc:	f004 ffec 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d16d      	bne.n	8000de2 <get_spinner_position_change+0x116>
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	483d      	ldr	r0, [pc, #244]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d0a:	f004 ffe5 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <get_spinner_position_change+0x50>
					spinner_stage = 1;
 8000d14:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
				}else{
					spinner_stage = 3;
				}
			}
			break;
 8000d1a:	e062      	b.n	8000de2 <get_spinner_position_change+0x116>
					spinner_stage = 3;
 8000d1c:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d1e:	2203      	movs	r2, #3
 8000d20:	601a      	str	r2, [r3, #0]
			break;
 8000d22:	e05e      	b.n	8000de2 <get_spinner_position_change+0x116>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	4836      	ldr	r0, [pc, #216]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d28:	f004 ffd6 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d159      	bne.n	8000de6 <get_spinner_position_change+0x11a>
				//if(spinner_position){
					//spinner_position--;
				minuscnt++;
 8000d32:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d3a:	6013      	str	r3, [r2, #0]
				pluscnt=0;
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
				if(minuscnt >= 4){
 8000d42:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d907      	bls.n	8000d5a <get_spinner_position_change+0x8e>
					spinner_position--;
 8000d4a:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <get_spinner_position_change+0x140>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a2e      	ldr	r2, [pc, #184]	; (8000e0c <get_spinner_position_change+0x140>)
 8000d52:	6013      	str	r3, [r2, #0]
					minuscnt=0;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
				}
				//}
				spinner_stage = 2;
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000d60:	e041      	b.n	8000de6 <get_spinner_position_change+0x11a>
		}
		case 2:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	4826      	ldr	r0, [pc, #152]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d66:	f004 ffb7 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d13c      	bne.n	8000dea <get_spinner_position_change+0x11e>
				spinner_stage = 0;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000d76:	e038      	b.n	8000dea <get_spinner_position_change+0x11e>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d7c:	f004 ffac 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d133      	bne.n	8000dee <get_spinner_position_change+0x122>
				//if(spinner_position < 1000){
					//spinner_position++;
				pluscnt++;
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d8e:	6013      	str	r3, [r2, #0]
				minuscnt=0;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
				if(pluscnt>=2){
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d907      	bls.n	8000dae <get_spinner_position_change+0xe2>
					spinner_position++;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <get_spinner_position_change+0x140>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <get_spinner_position_change+0x140>)
 8000da6:	6013      	str	r3, [r2, #0]
					pluscnt=0;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
				}
				//}				
				spinner_stage = 4;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <get_spinner_position_change+0x130>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000db4:	e01b      	b.n	8000dee <get_spinner_position_change+0x122>
		}
		case 4:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <get_spinner_position_change+0x134>)
 8000dba:	f004 ff8d 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d116      	bne.n	8000df2 <get_spinner_position_change+0x126>
				spinner_stage = 5;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <get_spinner_position_change+0x130>)
 8000dc6:	2205      	movs	r2, #5
 8000dc8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000dca:	e012      	b.n	8000df2 <get_spinner_position_change+0x126>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <get_spinner_position_change+0x134>)
 8000dd0:	f004 ff82 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10d      	bne.n	8000df6 <get_spinner_position_change+0x12a>
				spinner_stage = 0;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <get_spinner_position_change+0x130>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
			}
			break;
 8000de0:	e009      	b.n	8000df6 <get_spinner_position_change+0x12a>
			break;
 8000de2:	bf00      	nop
 8000de4:	e008      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;			
 8000de6:	bf00      	nop
 8000de8:	e006      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;			
 8000dea:	bf00      	nop
 8000dec:	e004      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;			
 8000dee:	bf00      	nop
 8000df0:	e002      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;
 8000df2:	bf00      	nop
 8000df4:	e000      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;
 8000df6:	bf00      	nop
		}
	}
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20001c5c 	.word	0x20001c5c
 8000e00:	40020800 	.word	0x40020800
 8000e04:	20001c64 	.word	0x20001c64
 8000e08:	20001c60 	.word	0x20001c60
 8000e0c:	20000000 	.word	0x20000000

08000e10 <switch_GPIO_init>:
// SWITCH PORTS:
// IN: F10 (PULLUP)

uint32_t switch_state = 0;

void switch_GPIO_init(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e28:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <switch_GPIO_init+0x34>)
 8000e38:	f004 fda2 	bl	8005980 <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021400 	.word	0x40021400

08000e48 <get_current_switch_state>:

void get_current_switch_state(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <get_current_switch_state+0x30>)
 8000e54:	f004 ff40 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_SET){
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d103      	bne.n	8000e6a <get_current_switch_state+0x22>
		switch_state = 0;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <get_current_switch_state+0x34>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
	}else{
		switch_state = 1;
	}
}
 8000e68:	e002      	b.n	8000e70 <get_current_switch_state+0x28>
		switch_state = 1;
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <get_current_switch_state+0x34>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021400 	.word	0x40021400
 8000e7c:	20001c68 	.word	0x20001c68

08000e80 <print_rectangle>:
			framebuf[i * SCRWIDTH + j] = color;
		}
	}
}

void print_rectangle(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t color){
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
	for(uint32_t i = y; i < y+h; i++){
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e01a      	b.n	8000eca <print_rectangle+0x4a>
		for(uint32_t j = x; j < x+w; j++){
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e00e      	b.n	8000eb8 <print_rectangle+0x38>
			framebuf[i*SCRWIDTH+j] = color;
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	015b      	lsls	r3, r3, #5
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <print_rectangle+0x64>)
 8000eac:	8c3a      	ldrh	r2, [r7, #32]
 8000eae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t j = x; j < x+w; j++){
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3ea      	bcc.n	8000e9a <print_rectangle+0x1a>
	for(uint32_t i = y; i < y+h; i++){
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3de      	bcc.n	8000e94 <print_rectangle+0x14>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20001c6c 	.word	0x20001c6c

08000ee8 <print_rectangle_empty>:

void print_rectangle_empty(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t color){
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
	for(uint32_t i = y; i < y+h; i++){
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e041      	b.n	8000f80 <print_rectangle_empty+0x98>
		for(uint32_t j = x; j < x+w; j++){
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e035      	b.n	8000f6e <print_rectangle_empty+0x86>
			if(i != y && i != y+h-1){
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d022      	beq.n	8000f50 <print_rectangle_empty+0x68>
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	3b01      	subs	r3, #1
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d01b      	beq.n	8000f50 <print_rectangle_empty+0x68>
				framebuf[i*SCRWIDTH+x] = color;
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	015b      	lsls	r3, r3, #5
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	491c      	ldr	r1, [pc, #112]	; (8000f9c <print_rectangle_empty+0xb4>)
 8000f2a:	8c3a      	ldrh	r2, [r7, #32]
 8000f2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				framebuf[i*SCRWIDTH+x+w-1] = color;
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	4613      	mov	r3, r2
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	1a9b      	subs	r3, r3, r2
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	441a      	add	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	3b01      	subs	r3, #1
 8000f46:	4915      	ldr	r1, [pc, #84]	; (8000f9c <print_rectangle_empty+0xb4>)
 8000f48:	8c3a      	ldrh	r2, [r7, #32]
 8000f4a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				break;
 8000f4e:	e014      	b.n	8000f7a <print_rectangle_empty+0x92>
			}
			framebuf[i*SCRWIDTH+j] = color;
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	4613      	mov	r3, r2
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4413      	add	r3, r2
 8000f60:	490e      	ldr	r1, [pc, #56]	; (8000f9c <print_rectangle_empty+0xb4>)
 8000f62:	8c3a      	ldrh	r2, [r7, #32]
 8000f64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t j = x; j < x+w; j++){
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d3c3      	bcc.n	8000f02 <print_rectangle_empty+0x1a>
	for(uint32_t i = y; i < y+h; i++){
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3b7      	bcc.n	8000efc <print_rectangle_empty+0x14>
		}
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20001c6c 	.word	0x20001c6c

08000fa0 <print_char>:


void print_char(uint32_t x, uint32_t y, uint8_t index, uint16_t color){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b08f      	sub	sp, #60	; 0x3c
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	4611      	mov	r1, r2
 8000fac:	461a      	mov	r2, r3
 8000fae:	460b      	mov	r3, r1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <print_char+0x150>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
 8000fd0:	e03c      	b.n	800104c <print_char+0xac>
		uint32_t yiter = y;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t mask = 0b00000001;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(uint32_t i = 0; i < 8; i++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe0:	e02b      	b.n	800103a <print_char+0x9a>
			if(*fptr & mask){
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fea:	4013      	ands	r3, r2
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00c      	beq.n	800100c <print_char+0x6c>
				framebuf[yiter * SCRWIDTH + xiter] = color;
 8000ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	015b      	lsls	r3, r3, #5
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	4413      	add	r3, r2
 8001002:	493c      	ldr	r1, [pc, #240]	; (80010f4 <print_char+0x154>)
 8001004:	88ba      	ldrh	r2, [r7, #4]
 8001006:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800100a:	e00b      	b.n	8001024 <print_char+0x84>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 800100c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800100e:	4613      	mov	r3, r2
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	015b      	lsls	r3, r3, #5
 8001016:	461a      	mov	r2, r3
 8001018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101a:	4413      	add	r3, r2
 800101c:	4a35      	ldr	r2, [pc, #212]	; (80010f4 <print_char+0x154>)
 800101e:	2100      	movs	r1, #0
 8001020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 8001024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			yiter++;
 800102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001030:	3301      	adds	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i = 0; i < 8; i++){
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	3301      	adds	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	2b07      	cmp	r3, #7
 800103e:	d9d0      	bls.n	8000fe2 <print_char+0x42>
		}
		xiter++;
 8001040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001042:	3301      	adds	r3, #1
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001048:	3301      	adds	r3, #1
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	330c      	adds	r3, #12
 8001050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001052:	429a      	cmp	r2, r3
 8001054:	d3bd      	bcc.n	8000fd2 <print_char+0x32>
	}
	xiter = x;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	330c      	adds	r3, #12
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	e039      	b.n	80010d6 <print_char+0x136>
		uint32_t yiter = y+8;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3308      	adds	r3, #8
 8001066:	61fb      	str	r3, [r7, #28]
		uint8_t mask = 0b00000001;
 8001068:	2301      	movs	r3, #1
 800106a:	76fb      	strb	r3, [r7, #27]
		for(uint32_t i = 0; i < 8; i++){
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e028      	b.n	80010c4 <print_char+0x124>
			if(*fptr & mask){
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	7efb      	ldrb	r3, [r7, #27]
 8001078:	4013      	ands	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <print_char+0xfa>
				framebuf[yiter * 480 + xiter] = color;
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	4613      	mov	r3, r2
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	015b      	lsls	r3, r3, #5
 800108a:	461a      	mov	r2, r3
 800108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108e:	4413      	add	r3, r2
 8001090:	4918      	ldr	r1, [pc, #96]	; (80010f4 <print_char+0x154>)
 8001092:	88ba      	ldrh	r2, [r7, #4]
 8001094:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001098:	e00b      	b.n	80010b2 <print_char+0x112>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4613      	mov	r3, r2
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	015b      	lsls	r3, r3, #5
 80010a4:	461a      	mov	r2, r3
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	4413      	add	r3, r2
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <print_char+0x154>)
 80010ac:	2100      	movs	r1, #0
 80010ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 80010b2:	7efb      	ldrb	r3, [r7, #27]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	76fb      	strb	r3, [r7, #27]
			yiter++;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	3301      	adds	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < 8; i++){
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d9d3      	bls.n	8001072 <print_char+0xd2>
		}
		xiter++;
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	3301      	adds	r3, #1
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	3301      	adds	r3, #1
 80010d4:	623b      	str	r3, [r7, #32]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	3318      	adds	r3, #24
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3c0      	bcc.n	8001062 <print_char+0xc2>
	}

}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	373c      	adds	r7, #60	; 0x3c
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000004 	.word	0x20000004
 80010f4:	20001c6c 	.word	0x20001c6c

080010f8 <print_char_scaled>:


void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint16_t color, uint32_t scale){
 80010f8:	b480      	push	{r7}
 80010fa:	b097      	sub	sp, #92	; 0x5c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	4613      	mov	r3, r2
 800110c:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	461a      	mov	r2, r3
 800111a:	4b80      	ldr	r3, [pc, #512]	; (800131c <print_char_scaled+0x224>)
 800111c:	4413      	add	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	653b      	str	r3, [r7, #80]	; 0x50
 8001128:	e06e      	b.n	8001208 <print_char_scaled+0x110>
		uint32_t yiter = y;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint8_t mask = 0b00000001;
 800112e:	2301      	movs	r3, #1
 8001130:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		for(uint32_t i = 0; i < 8; i++){
 8001134:	2300      	movs	r3, #0
 8001136:	647b      	str	r3, [r7, #68]	; 0x44
 8001138:	e05c      	b.n	80011f4 <print_char_scaled+0xfc>
			if(*fptr & mask){
 800113a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001142:	4013      	ands	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d024      	beq.n	8001194 <print_char_scaled+0x9c>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800114a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800114c:	643b      	str	r3, [r7, #64]	; 0x40
 800114e:	e01a      	b.n	8001186 <print_char_scaled+0x8e>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001154:	e00e      	b.n	8001174 <print_char_scaled+0x7c>
						framebuf[iy * SCRWIDTH + ix] = color;	
 8001156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001158:	4613      	mov	r3, r2
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	1a9b      	subs	r3, r3, r2
 800115e:	015b      	lsls	r3, r3, #5
 8001160:	461a      	mov	r2, r3
 8001162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001164:	4413      	add	r3, r2
 8001166:	496e      	ldr	r1, [pc, #440]	; (8001320 <print_char_scaled+0x228>)
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800116e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001170:	3301      	adds	r3, #1
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001178:	4413      	add	r3, r2
 800117a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800117c:	429a      	cmp	r2, r3
 800117e:	d3ea      	bcc.n	8001156 <print_char_scaled+0x5e>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001182:	3301      	adds	r3, #1
 8001184:	643b      	str	r3, [r7, #64]	; 0x40
 8001186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800118a:	4413      	add	r3, r2
 800118c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800118e:	429a      	cmp	r2, r3
 8001190:	d3de      	bcc.n	8001150 <print_char_scaled+0x58>
 8001192:	e023      	b.n	80011dc <print_char_scaled+0xe4>
					}
				}
				
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
 8001198:	e01a      	b.n	80011d0 <print_char_scaled+0xd8>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800119a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
 800119e:	e00e      	b.n	80011be <print_char_scaled+0xc6>
						framebuf[iy * SCRWIDTH + ix] = 0;
 80011a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011a2:	4613      	mov	r3, r2
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	015b      	lsls	r3, r3, #5
 80011aa:	461a      	mov	r2, r3
 80011ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ae:	4413      	add	r3, r2
 80011b0:	4a5b      	ldr	r2, [pc, #364]	; (8001320 <print_char_scaled+0x228>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80011b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ba:	3301      	adds	r3, #1
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
 80011be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011c2:	4413      	add	r3, r2
 80011c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d3ea      	bcc.n	80011a0 <print_char_scaled+0xa8>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80011ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011cc:	3301      	adds	r3, #1
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80011d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011d4:	4413      	add	r3, r2
 80011d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011d8:	429a      	cmp	r2, r3
 80011da:	d3de      	bcc.n	800119a <print_char_scaled+0xa2>
					}
				}
			}
			mask = mask << 1;
 80011dc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			yiter+=scale;
 80011e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011ea:	4413      	add	r3, r2
 80011ec:	64fb      	str	r3, [r7, #76]	; 0x4c
		for(uint32_t i = 0; i < 8; i++){
 80011ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f0:	3301      	adds	r3, #1
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
 80011f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	d99f      	bls.n	800113a <print_char_scaled+0x42>
		}
		xiter+=scale;
 80011fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011fe:	4413      	add	r3, r2
 8001200:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001204:	3301      	adds	r3, #1
 8001206:	653b      	str	r3, [r7, #80]	; 0x50
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	330c      	adds	r3, #12
 800120c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800120e:	429a      	cmp	r2, r3
 8001210:	d38b      	bcc.n	800112a <print_char_scaled+0x32>
	}
	xiter = x;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	330c      	adds	r3, #12
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
 800121c:	e071      	b.n	8001302 <print_char_scaled+0x20a>
		uint32_t yiter = y+8*scale;
 800121e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t mask = 0b00000001;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(uint32_t i = 0; i < 8; i++){
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
 8001232:	e05c      	b.n	80012ee <print_char_scaled+0x1f6>
			if(*fptr & mask){
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800123c:	4013      	ands	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d024      	beq.n	800128e <print_char_scaled+0x196>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	e01a      	b.n	8001280 <print_char_scaled+0x188>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800124a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e00e      	b.n	800126e <print_char_scaled+0x176>
						framebuf[iy * SCRWIDTH + ix] = color;	
 8001250:	6a3a      	ldr	r2, [r7, #32]
 8001252:	4613      	mov	r3, r2
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	015b      	lsls	r3, r3, #5
 800125a:	461a      	mov	r2, r3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	4413      	add	r3, r2
 8001260:	492f      	ldr	r1, [pc, #188]	; (8001320 <print_char_scaled+0x228>)
 8001262:	88ba      	ldrh	r2, [r7, #4]
 8001264:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	3301      	adds	r3, #1
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001270:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001272:	4413      	add	r3, r2
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3ea      	bcc.n	8001250 <print_char_scaled+0x158>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	3301      	adds	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001284:	4413      	add	r3, r2
 8001286:	6a3a      	ldr	r2, [r7, #32]
 8001288:	429a      	cmp	r2, r3
 800128a:	d3de      	bcc.n	800124a <print_char_scaled+0x152>
 800128c:	e023      	b.n	80012d6 <print_char_scaled+0x1de>
					}
				}
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	e01a      	b.n	80012ca <print_char_scaled+0x1d2>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00e      	b.n	80012b8 <print_char_scaled+0x1c0>
						framebuf[iy * SCRWIDTH + ix] = 0;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4613      	mov	r3, r2
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	015b      	lsls	r3, r3, #5
 80012a4:	461a      	mov	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <print_char_scaled+0x228>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012bc:	4413      	add	r3, r2
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3ea      	bcc.n	800129a <print_char_scaled+0x1a2>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	3301      	adds	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012ce:	4413      	add	r3, r2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3de      	bcc.n	8001294 <print_char_scaled+0x19c>
					}
				}
			}
			mask = mask << 1;
 80012d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			yiter+=scale;
 80012e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012e4:	4413      	add	r3, r2
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i = 0; i < 8; i++){
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	3301      	adds	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d99f      	bls.n	8001234 <print_char_scaled+0x13c>
		}
		xiter+=scale;
 80012f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012f8:	4413      	add	r3, r2
 80012fa:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	3301      	adds	r3, #1
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	3318      	adds	r3, #24
 8001306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001308:	429a      	cmp	r2, r3
 800130a:	d388      	bcc.n	800121e <print_char_scaled+0x126>
	}
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	375c      	adds	r7, #92	; 0x5c
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000004 	.word	0x20000004
 8001320:	20001c6c 	.word	0x20001c6c

08001324 <print_char_scaled_y>:


void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint16_t color, uint32_t scale){
 8001324:	b480      	push	{r7}
 8001326:	b093      	sub	sp, #76	; 0x4c
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	460b      	mov	r3, r1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	4613      	mov	r3, r2
 8001338:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	461a      	mov	r2, r3
 8001346:	4b67      	ldr	r3, [pc, #412]	; (80014e4 <print_char_scaled_y+0x1c0>)
 8001348:	4413      	add	r3, r2
 800134a:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
 8001354:	e055      	b.n	8001402 <print_char_scaled_y+0xde>
		uint32_t yiter = y;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t mask = 0b00000001;
 800135a:	2301      	movs	r3, #1
 800135c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		for(uint32_t i = 0; i < 8; i++){
 8001360:	2300      	movs	r3, #0
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
 8001364:	e044      	b.n	80013f0 <print_char_scaled_y+0xcc>
			if(*fptr & mask){
 8001366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800136e:	4013      	ands	r3, r2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d018      	beq.n	80013a8 <print_char_scaled_y+0x84>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
 800137a:	e00e      	b.n	800139a <print_char_scaled_y+0x76>
					framebuf[iy * SCRWIDTH + xiter] = color;	
 800137c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800137e:	4613      	mov	r3, r2
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	461a      	mov	r2, r3
 8001388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800138a:	4413      	add	r3, r2
 800138c:	4956      	ldr	r1, [pc, #344]	; (80014e8 <print_char_scaled_y+0x1c4>)
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	3301      	adds	r3, #1
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
 800139a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800139c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800139e:	4413      	add	r3, r2
 80013a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d3ea      	bcc.n	800137c <print_char_scaled_y+0x58>
 80013a6:	e017      	b.n	80013d8 <print_char_scaled_y+0xb4>
				}
				
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80013a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ac:	e00e      	b.n	80013cc <print_char_scaled_y+0xa8>
					framebuf[iy * SCRWIDTH + xiter] = 0;
 80013ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b0:	4613      	mov	r3, r2
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	015b      	lsls	r3, r3, #5
 80013b8:	461a      	mov	r2, r3
 80013ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013bc:	4413      	add	r3, r2
 80013be:	4a4a      	ldr	r2, [pc, #296]	; (80014e8 <print_char_scaled_y+0x1c4>)
 80013c0:	2100      	movs	r1, #0
 80013c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	3301      	adds	r3, #1
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013d0:	4413      	add	r3, r2
 80013d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d3ea      	bcc.n	80013ae <print_char_scaled_y+0x8a>
				}
			}
			mask = mask << 1;
 80013d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			yiter+=scale;
 80013e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e6:	4413      	add	r3, r2
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(uint32_t i = 0; i < 8; i++){
 80013ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ec:	3301      	adds	r3, #1
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
 80013f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f2:	2b07      	cmp	r3, #7
 80013f4:	d9b7      	bls.n	8001366 <print_char_scaled_y+0x42>
		}
		xiter++;
 80013f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f8:	3301      	adds	r3, #1
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 80013fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013fe:	3301      	adds	r3, #1
 8001400:	643b      	str	r3, [r7, #64]	; 0x40
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	330c      	adds	r3, #12
 8001406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001408:	429a      	cmp	r2, r3
 800140a:	d3a4      	bcc.n	8001356 <print_char_scaled_y+0x32>
	}
	xiter = x;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	330c      	adds	r3, #12
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
 8001416:	e058      	b.n	80014ca <print_char_scaled_y+0x1a6>
		uint32_t yiter = y+8*scale;
 8001418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	4413      	add	r3, r2
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
		uint8_t mask = 0b00000001;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for(uint32_t i = 0; i < 8; i++){
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	e044      	b.n	80014b8 <print_char_scaled_y+0x194>
			if(*fptr & mask){
 800142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001436:	4013      	ands	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d018      	beq.n	8001470 <print_char_scaled_y+0x14c>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	e00e      	b.n	8001462 <print_char_scaled_y+0x13e>
					framebuf[iy * SCRWIDTH + xiter] = color;	
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4613      	mov	r3, r2
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	015b      	lsls	r3, r3, #5
 800144e:	461a      	mov	r2, r3
 8001450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001452:	4413      	add	r3, r2
 8001454:	4924      	ldr	r1, [pc, #144]	; (80014e8 <print_char_scaled_y+0x1c4>)
 8001456:	88ba      	ldrh	r2, [r7, #4]
 8001458:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	3301      	adds	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001466:	4413      	add	r3, r2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ea      	bcc.n	8001444 <print_char_scaled_y+0x120>
 800146e:	e017      	b.n	80014a0 <print_char_scaled_y+0x17c>
				}
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00e      	b.n	8001494 <print_char_scaled_y+0x170>
					framebuf[iy * SCRWIDTH + xiter] = 0;
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4613      	mov	r3, r2
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	015b      	lsls	r3, r3, #5
 8001480:	461a      	mov	r2, r3
 8001482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001484:	4413      	add	r3, r2
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <print_char_scaled_y+0x1c4>)
 8001488:	2100      	movs	r1, #0
 800148a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001498:	4413      	add	r3, r2
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	429a      	cmp	r2, r3
 800149e:	d3ea      	bcc.n	8001476 <print_char_scaled_y+0x152>
				}
			}
			mask = mask << 1;
 80014a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			yiter+=scale;
 80014aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ae:	4413      	add	r3, r2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t i = 0; i < 8; i++){
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b07      	cmp	r3, #7
 80014bc:	d9b7      	bls.n	800142e <print_char_scaled_y+0x10a>
		}
		xiter++;
 80014be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c0:	3301      	adds	r3, #1
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	3301      	adds	r3, #1
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	3318      	adds	r3, #24
 80014ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3a1      	bcc.n	8001418 <print_char_scaled_y+0xf4>
	}
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	374c      	adds	r7, #76	; 0x4c
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000004 	.word	0x20000004
 80014e8:	20001c6c 	.word	0x20001c6c

080014ec <print_string>:

void print_string(uint32_t x, uint32_t y, char* string, uint16_t color){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7fe fe88 	bl	8000210 <strlen>
 8001500:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e00c      	b.n	8001522 <print_string+0x36>
		print_char(x, y, *i, color);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff fd45 	bl	8000fa0 <print_char>
		x += 12;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	330c      	adds	r3, #12
 800151a:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	429a      	cmp	r2, r3
 800152c:	d3ec      	bcc.n	8001508 <print_string+0x1c>
		//y += 16;
	}
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <print_string_scaled>:

void print_string_scaled(uint32_t x, uint32_t y, char* string, uint16_t color, uint32_t scale){
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7fe fe62 	bl	8000210 <strlen>
 800154c:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e015      	b.n	8001580 <print_string_scaled+0x48>
		print_char_scaled(x, y, *i, color, scale);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	8879      	ldrh	r1, [r7, #2]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	460b      	mov	r3, r1
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fdc8 	bl	80010f8 <print_char_scaled>
		x += 12*scale;
 8001568:	6a3a      	ldr	r2, [r7, #32]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4413      	add	r3, r2
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3e3      	bcc.n	8001554 <print_string_scaled+0x1c>
		//y += 16*scale;
	}
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <print_string_scaled_y>:

void print_string_scaled_y(uint32_t x, uint32_t y, char* string, uint16_t color, uint32_t scale){
 8001596:	b580      	push	{r7, lr}
 8001598:	b088      	sub	sp, #32
 800159a:	af02      	add	r7, sp, #8
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7fe fe33 	bl	8000210 <strlen>
 80015aa:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00f      	b.n	80015d2 <print_string_scaled_y+0x3c>
		print_char_scaled_y(x, y, *i, color, scale);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	8879      	ldrh	r1, [r7, #2]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	460b      	mov	r3, r1
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff feaf 	bl	8001324 <print_char_scaled_y>
		x += 12;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	330c      	adds	r3, #12
 80015ca:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4413      	add	r3, r2
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3e9      	bcc.n	80015b2 <print_string_scaled_y+0x1c>
		//y += 16*scale;
	}
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <fill_screen>:
// 16
// 12
// 272
// 4

void fill_screen(uint16_t color){for(uint16_t* i = framebuf; i < framebuf+SCRWIDTH*SCRHEIGHT; i++){*i = color;}}
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <fill_screen+0x34>)
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e005      	b.n	8001604 <fill_screen+0x1c>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	88fa      	ldrh	r2, [r7, #6]
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3302      	adds	r3, #2
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <fill_screen+0x38>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4293      	cmp	r3, r2
 800160a:	d3f5      	bcc.n	80015f8 <fill_screen+0x10>
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20001c6c 	.word	0x20001c6c
 8001620:	2004186c 	.word	0x2004186c

08001624 <print_number>:


void print_number(uint32_t x, uint32_t y, uint32_t number, uint16_t color, uint32_t scale){
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	807b      	strh	r3, [r7, #2]
	if(!number){
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d11b      	bne.n	8001670 <print_number+0x4c>
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	18d0      	adds	r0, r2, r3
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <print_number+0xe0>)
 800164c:	fba3 2301 	umull	r2, r3, r3, r1
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	1aca      	subs	r2, r1, r3
 800165c:	b2d3      	uxtb	r3, r2
 800165e:	3330      	adds	r3, #48	; 0x30
 8001660:	b2da      	uxtb	r2, r3
 8001662:	8879      	ldrh	r1, [r7, #2]
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	460b      	mov	r3, r1
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	f7ff fd44 	bl	80010f8 <print_char_scaled>
	}

	uint32_t numlen = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
	uint32_t num_cp = number;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	613b      	str	r3, [r7, #16]
	while(num_cp){
 8001678:	e008      	b.n	800168c <print_number+0x68>
		numlen++;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
		num_cp /= 10;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4a20      	ldr	r2, [pc, #128]	; (8001704 <print_number+0xe0>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	613b      	str	r3, [r7, #16]
	while(num_cp){
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f3      	bne.n	800167a <print_number+0x56>
	}

	x += numlen * scale * 12;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
	while(number){
 80016aa:	e023      	b.n	80016f4 <print_number+0xd0>
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <print_number+0xe0>)
 80016b0:	fba3 2301 	umull	r2, r3, r3, r1
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	1aca      	subs	r2, r1, r3
 80016c0:	b2d3      	uxtb	r3, r2
 80016c2:	3330      	adds	r3, #48	; 0x30
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	8879      	ldrh	r1, [r7, #2]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	460b      	mov	r3, r1
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff fd11 	bl	80010f8 <print_char_scaled>
		x -= scale * 12;
 80016d6:	6a3a      	ldr	r2, [r7, #32]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
		number /= 10;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <print_number+0xe0>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	607b      	str	r3, [r7, #4]
	while(number){
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1d8      	bne.n	80016ac <print_number+0x88>
	}
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	cccccccd 	.word	0xcccccccd

08001708 <print_fat_rectangle>:

uint32_t state_progress = 0;
uint32_t mem_sp_st = 0; // memorized spinner position for diff
uint32_t system_angle = 180;

void print_fat_rectangle(){
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
	uint32_t x = 80;
 800170e:	2350      	movs	r3, #80	; 0x50
 8001710:	617b      	str	r3, [r7, #20]
	uint32_t y = 80;
 8001712:	2350      	movs	r3, #80	; 0x50
 8001714:	613b      	str	r3, [r7, #16]
	uint32_t width = 320;
 8001716:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800171a:	60fb      	str	r3, [r7, #12]
	uint32_t height = 100;
 800171c:	2364      	movs	r3, #100	; 0x64
 800171e:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 6; i++){
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	e017      	b.n	8001756 <print_fat_rectangle+0x4e>
		print_rectangle_empty(x, y, width, height, 0x797);
 8001726:	f240 7397 	movw	r3, #1943	; 0x797
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	6939      	ldr	r1, [r7, #16]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff fbd8 	bl	8000ee8 <print_rectangle_empty>
		x++;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
		y++;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	3301      	adds	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
		width -= 2;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3b02      	subs	r3, #2
 8001748:	60fb      	str	r3, [r7, #12]
		height -= 2;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3b02      	subs	r3, #2
 800174e:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 6; i++){
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3301      	adds	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b05      	cmp	r3, #5
 800175a:	d9e4      	bls.n	8001726 <print_fat_rectangle+0x1e>
	}
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <state_machine>:





void state_machine(){
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af02      	add	r7, sp, #8
	uint32_t kbd_st = keyboard_state;
 800176e:	4ba5      	ldr	r3, [pc, #660]	; (8001a04 <state_machine+0x29c>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]
	uint32_t sw_st = switch_state;
 8001774:	4ba4      	ldr	r3, [pc, #656]	; (8001a08 <state_machine+0x2a0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60bb      	str	r3, [r7, #8]
	uint32_t spb_st = spinner_button_state;
 800177a:	4ba4      	ldr	r3, [pc, #656]	; (8001a0c <state_machine+0x2a4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	607b      	str	r3, [r7, #4]
	uint32_t sp_st = spinner_position;
 8001780:	4ba3      	ldr	r3, [pc, #652]	; (8001a10 <state_machine+0x2a8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	603b      	str	r3, [r7, #0]


	static uint32_t state_time = 0;

	switch(system_state){
 8001786:	4ba3      	ldr	r3, [pc, #652]	; (8001a14 <state_machine+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b11      	cmp	r3, #17
 800178c:	f201 835a 	bhi.w	8002e44 <state_machine+0x16dc>
 8001790:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <state_machine+0x30>)
 8001792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001796:	bf00      	nop
 8001798:	080017e1 	.word	0x080017e1
 800179c:	08001817 	.word	0x08001817
 80017a0:	080018d5 	.word	0x080018d5
 80017a4:	0800198f 	.word	0x0800198f
 80017a8:	08001a89 	.word	0x08001a89
 80017ac:	08001bb7 	.word	0x08001bb7
 80017b0:	08001c6f 	.word	0x08001c6f
 80017b4:	08001dd1 	.word	0x08001dd1
 80017b8:	08001f91 	.word	0x08001f91
 80017bc:	080020bf 	.word	0x080020bf
 80017c0:	08002245 	.word	0x08002245
 80017c4:	080023a3 	.word	0x080023a3
 80017c8:	0800252f 	.word	0x0800252f
 80017cc:	080026af 	.word	0x080026af
 80017d0:	08002841 	.word	0x08002841
 80017d4:	080029c1 	.word	0x080029c1
 80017d8:	08002b1d 	.word	0x08002b1d
 80017dc:	08002ca5 	.word	0x08002ca5
		case 0:{
			if(need_out){
 80017e0:	4b8d      	ldr	r3, [pc, #564]	; (8001a18 <state_machine+0x2b0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <state_machine+0x8c>
				fill_screen(0);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fefd 	bl	80015e8 <fill_screen>
				need_out = 0;
 80017ee:	4b8a      	ldr	r3, [pc, #552]	; (8001a18 <state_machine+0x2b0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
			}


			if(sw_st){
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f001 8301 	beq.w	8002dfe <state_machine+0x1696>
				system_state = 1;
 80017fc:	4b85      	ldr	r3, [pc, #532]	; (8001a14 <state_machine+0x2ac>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001802:	4b85      	ldr	r3, [pc, #532]	; (8001a18 <state_machine+0x2b0>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]

				state_time = tick_fun();
 8001808:	f009 fb60 	bl	800aecc <xTaskGetTickCount>
 800180c:	4603      	mov	r3, r0
 800180e:	4a83      	ldr	r2, [pc, #524]	; (8001a1c <state_machine+0x2b4>)
 8001810:	6013      	str	r3, [r2, #0]
			}
			break;
 8001812:	f001 baf4 	b.w	8002dfe <state_machine+0x1696>
		}
		case 1:{
			if(need_out){
 8001816:	4b80      	ldr	r3, [pc, #512]	; (8001a18 <state_machine+0x2b0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d010      	beq.n	8001840 <state_machine+0xd8>
				fill_screen(0);
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fee2 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001824:	f7ff ff70 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state1_string, 0x797, 2);
 8001828:	2302      	movs	r3, #2
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	f240 7397 	movw	r3, #1943	; 0x797
 8001830:	4a7b      	ldr	r2, [pc, #492]	; (8001a20 <state_machine+0x2b8>)
 8001832:	2178      	movs	r1, #120	; 0x78
 8001834:	2073      	movs	r0, #115	; 0x73
 8001836:	f7ff feae 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 800183a:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <state_machine+0x2b0>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
			}

			if(tick_fun() - state_time >= 1000){
 8001840:	f009 fb44 	bl	800aecc <xTaskGetTickCount>
 8001844:	4602      	mov	r2, r0
 8001846:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <state_machine+0x2b4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001850:	d30a      	bcc.n	8001868 <state_machine+0x100>
				system_state = 2;
 8001852:	4b70      	ldr	r3, [pc, #448]	; (8001a14 <state_machine+0x2ac>)
 8001854:	2202      	movs	r2, #2
 8001856:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <state_machine+0x2b0>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
				state_time = tick_fun();
 800185e:	f009 fb35 	bl	800aecc <xTaskGetTickCount>
 8001862:	4603      	mov	r3, r0
 8001864:	4a6d      	ldr	r2, [pc, #436]	; (8001a1c <state_machine+0x2b4>)
 8001866:	6013      	str	r3, [r2, #0]
			}

			check_brightness();
 8001868:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <state_machine+0x2bc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d11f      	bne.n	80018b0 <state_machine+0x148>
 8001870:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <state_machine+0x2bc>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01a      	beq.n	80018b6 <state_machine+0x14e>
 8001880:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <state_machine+0x2c0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d103      	bne.n	8001890 <state_machine+0x128>
 8001888:	4b67      	ldr	r3, [pc, #412]	; (8001a28 <state_machine+0x2c0>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e004      	b.n	800189a <state_machine+0x132>
 8001890:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <state_machine+0x2c0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a64      	ldr	r2, [pc, #400]	; (8001a28 <state_machine+0x2c0>)
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <state_machine+0x2c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a63      	ldr	r2, [pc, #396]	; (8001a2c <state_machine+0x2c4>)
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4861      	ldr	r0, [pc, #388]	; (8001a30 <state_machine+0x2c8>)
 80018aa:	f004 fc17 	bl	80060dc <HAL_LTDC_SetAlpha>
 80018ae:	e002      	b.n	80018b6 <state_machine+0x14e>
 80018b0:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <state_machine+0x2bc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
			check_switch();
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f041 82a2 	bne.w	8002e02 <state_machine+0x169a>
 80018be:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <state_machine+0x2ac>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <state_machine+0x2cc>)
 80018c6:	22b4      	movs	r2, #180	; 0xb4
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <state_machine+0x2b0>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
			break;
 80018d0:	f001 ba97 	b.w	8002e02 <state_machine+0x169a>
		}
		case 2:{
			if(need_out){
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <state_machine+0x2b0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <state_machine+0x196>
				fill_screen(0);
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fe83 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 80018e2:	f7ff ff11 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state2_string, 0x797, 2);
 80018e6:	2302      	movs	r3, #2
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	f240 7397 	movw	r3, #1943	; 0x797
 80018ee:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <state_machine+0x2d0>)
 80018f0:	2178      	movs	r1, #120	; 0x78
 80018f2:	2073      	movs	r0, #115	; 0x73
 80018f4:	f7ff fe4f 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <state_machine+0x2b0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
			}


			if(tick_fun() - state_time >= 1000){
 80018fe:	f009 fae5 	bl	800aecc <xTaskGetTickCount>
 8001902:	4602      	mov	r2, r0
 8001904:	4b45      	ldr	r3, [pc, #276]	; (8001a1c <state_machine+0x2b4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800190e:	d308      	bcc.n	8001922 <state_machine+0x1ba>
				system_state = 3;
 8001910:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <state_machine+0x2ac>)
 8001912:	2203      	movs	r2, #3
 8001914:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001916:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <state_machine+0x2b0>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

				state_time = 0;
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <state_machine+0x2b4>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001922:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <state_machine+0x2bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d11f      	bne.n	800196a <state_machine+0x202>
 800192a:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <state_machine+0x2bc>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d01a      	beq.n	8001970 <state_machine+0x208>
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <state_machine+0x2c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d103      	bne.n	800194a <state_machine+0x1e2>
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <state_machine+0x2c0>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e004      	b.n	8001954 <state_machine+0x1ec>
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <state_machine+0x2c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	4a35      	ldr	r2, [pc, #212]	; (8001a28 <state_machine+0x2c0>)
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <state_machine+0x2c0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a34      	ldr	r2, [pc, #208]	; (8001a2c <state_machine+0x2c4>)
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	4833      	ldr	r0, [pc, #204]	; (8001a30 <state_machine+0x2c8>)
 8001964:	f004 fbba 	bl	80060dc <HAL_LTDC_SetAlpha>
 8001968:	e002      	b.n	8001970 <state_machine+0x208>
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <state_machine+0x2bc>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
			check_switch();
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f041 8247 	bne.w	8002e06 <state_machine+0x169e>
 8001978:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <state_machine+0x2ac>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <state_machine+0x2cc>)
 8001980:	22b4      	movs	r2, #180	; 0xb4
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <state_machine+0x2b0>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
			break;
 800198a:	f001 ba3c 	b.w	8002e06 <state_machine+0x169e>
		}
		case 3:{
			if(need_out){
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <state_machine+0x2b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d010      	beq.n	80019b8 <state_machine+0x250>
				fill_screen(0);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fe26 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 800199c:	f7ff feb4 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(90, 120, state3_string, 0x797, 2);
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f240 7397 	movw	r3, #1943	; 0x797
 80019a8:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <state_machine+0x2d4>)
 80019aa:	2178      	movs	r1, #120	; 0x78
 80019ac:	205a      	movs	r0, #90	; 0x5a
 80019ae:	f7ff fdf2 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <state_machine+0x2b0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
			}

			if(kbd_st & BUTTON_TEST){
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <state_machine+0x272>
				state_progress = 0;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <state_machine+0x2d8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
				state_time = 0;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <state_machine+0x2b4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
				system_state = 4;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <state_machine+0x2ac>)
 80019d0:	2204      	movs	r2, #4
 80019d2:	601a      	str	r2, [r3, #0]
				need_out = 1;
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <state_machine+0x2b0>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <state_machine+0x2bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d140      	bne.n	8001a64 <state_machine+0x2fc>
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <state_machine+0x2bc>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d03b      	beq.n	8001a6a <state_machine+0x302>
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <state_machine+0x2c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d124      	bne.n	8001a44 <state_machine+0x2dc>
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <state_machine+0x2c0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e025      	b.n	8001a4e <state_machine+0x2e6>
 8001a02:	bf00      	nop
 8001a04:	20001c50 	.word	0x20001c50
 8001a08:	20001c68 	.word	0x20001c68
 8001a0c:	20001c54 	.word	0x20001c54
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20041870 	.word	0x20041870
 8001a18:	20001a24 	.word	0x20001a24
 8001a1c:	20041934 	.word	0x20041934
 8001a20:	20001814 	.word	0x20001814
 8001a24:	2004186c 	.word	0x2004186c
 8001a28:	20001804 	.word	0x20001804
 8001a2c:	20001808 	.word	0x20001808
 8001a30:	20041884 	.word	0x20041884
 8001a34:	20001a28 	.word	0x20001a28
 8001a38:	20001828 	.word	0x20001828
 8001a3c:	20001840 	.word	0x20001840
 8001a40:	20041874 	.word	0x20041874
 8001a44:	4b9e      	ldr	r3, [pc, #632]	; (8001cc0 <state_machine+0x558>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a9d      	ldr	r2, [pc, #628]	; (8001cc0 <state_machine+0x558>)
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b9c      	ldr	r3, [pc, #624]	; (8001cc0 <state_machine+0x558>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a9c      	ldr	r2, [pc, #624]	; (8001cc4 <state_machine+0x55c>)
 8001a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	489a      	ldr	r0, [pc, #616]	; (8001cc8 <state_machine+0x560>)
 8001a5e:	f004 fb3d 	bl	80060dc <HAL_LTDC_SetAlpha>
 8001a62:	e002      	b.n	8001a6a <state_machine+0x302>
 8001a64:	4b99      	ldr	r3, [pc, #612]	; (8001ccc <state_machine+0x564>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
			check_switch();
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f041 81cc 	bne.w	8002e0a <state_machine+0x16a2>
 8001a72:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <state_machine+0x568>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	4b96      	ldr	r3, [pc, #600]	; (8001cd4 <state_machine+0x56c>)
 8001a7a:	22b4      	movs	r2, #180	; 0xb4
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <state_machine+0x570>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
			break;
 8001a84:	f001 b9c1 	b.w	8002e0a <state_machine+0x16a2>
		}
		case 4:{
			if(need_out){
 8001a88:	4b93      	ldr	r3, [pc, #588]	; (8001cd8 <state_machine+0x570>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01a      	beq.n	8001ac6 <state_machine+0x35e>
				fill_screen(0);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fda9 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001a96:	f7ff fe37 	bl	8001708 <print_fat_rectangle>
				print_string_scaled(185, 105, state4_string, 0x797, 2);
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f240 7397 	movw	r3, #1943	; 0x797
 8001aa2:	4a8e      	ldr	r2, [pc, #568]	; (8001cdc <state_machine+0x574>)
 8001aa4:	2169      	movs	r1, #105	; 0x69
 8001aa6:	20b9      	movs	r0, #185	; 0xb9
 8001aa8:	f7ff fd46 	bl	8001538 <print_string_scaled>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001aac:	f240 7397 	movw	r3, #1943	; 0x797
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001ab8:	2196      	movs	r1, #150	; 0x96
 8001aba:	2064      	movs	r0, #100	; 0x64
 8001abc:	f7ff fa14 	bl	8000ee8 <print_rectangle_empty>
				need_out = 0;
 8001ac0:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <state_machine+0x570>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
			}
			if(!state_time){state_time = tick_fun();}else{
 8001ac6:	4b86      	ldr	r3, [pc, #536]	; (8001ce0 <state_machine+0x578>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d105      	bne.n	8001ada <state_machine+0x372>
 8001ace:	f009 f9fd 	bl	800aecc <xTaskGetTickCount>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a82      	ldr	r2, [pc, #520]	; (8001ce0 <state_machine+0x578>)
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e010      	b.n	8001afc <state_machine+0x394>
				if(tick_fun() - state_time >= 300){
 8001ada:	f009 f9f7 	bl	800aecc <xTaskGetTickCount>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <state_machine+0x578>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001aea:	d307      	bcc.n	8001afc <state_machine+0x394>
					state_time = 0;
 8001aec:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <state_machine+0x578>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001af2:	4b7c      	ldr	r3, [pc, #496]	; (8001ce4 <state_machine+0x57c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	330a      	adds	r3, #10
 8001af8:	4a7a      	ldr	r2, [pc, #488]	; (8001ce4 <state_machine+0x57c>)
 8001afa:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8001afc:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <state_machine+0x57c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d012      	beq.n	8001b2a <state_machine+0x3c2>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 8001b04:	4b77      	ldr	r3, [pc, #476]	; (8001ce4 <state_machine+0x57c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a77      	ldr	r2, [pc, #476]	; (8001ce8 <state_machine+0x580>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f240 7397 	movw	r3, #1943	; 0x797
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	230a      	movs	r3, #10
 8001b22:	2196      	movs	r1, #150	; 0x96
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	f7ff f9ab 	bl	8000e80 <print_rectangle>
			}

			if(state_progress == 100){
 8001b2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ce4 <state_machine+0x57c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d10b      	bne.n	8001b4a <state_machine+0x3e2>
				state_progress = 0;
 8001b32:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <state_machine+0x57c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001b38:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <state_machine+0x578>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001b3e:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <state_machine+0x570>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
				system_state = 5;
 8001b44:	4b62      	ldr	r3, [pc, #392]	; (8001cd0 <state_machine+0x568>)
 8001b46:	2205      	movs	r2, #5
 8001b48:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001b4a:	4b60      	ldr	r3, [pc, #384]	; (8001ccc <state_machine+0x564>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d11f      	bne.n	8001b92 <state_machine+0x42a>
 8001b52:	4b5e      	ldr	r3, [pc, #376]	; (8001ccc <state_machine+0x564>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01a      	beq.n	8001b98 <state_machine+0x430>
 8001b62:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <state_machine+0x558>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d103      	bne.n	8001b72 <state_machine+0x40a>
 8001b6a:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <state_machine+0x558>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e004      	b.n	8001b7c <state_machine+0x414>
 8001b72:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <state_machine+0x558>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <state_machine+0x558>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <state_machine+0x558>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <state_machine+0x55c>)
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	484f      	ldr	r0, [pc, #316]	; (8001cc8 <state_machine+0x560>)
 8001b8c:	f004 faa6 	bl	80060dc <HAL_LTDC_SetAlpha>
 8001b90:	e002      	b.n	8001b98 <state_machine+0x430>
 8001b92:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <state_machine+0x564>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
			check_switch();
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f041 8137 	bne.w	8002e0e <state_machine+0x16a6>
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <state_machine+0x568>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <state_machine+0x56c>)
 8001ba8:	22b4      	movs	r2, #180	; 0xb4
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <state_machine+0x570>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
			break;
 8001bb2:	f001 b92c 	b.w	8002e0e <state_machine+0x16a6>
		}
		case 5:{
			if(need_out){
 8001bb6:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <state_machine+0x570>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d010      	beq.n	8001be0 <state_machine+0x478>
				fill_screen(0);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fd12 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001bc4:	f7ff fda0 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(120, 120, state5_string, 0x797, 2);
 8001bc8:	2302      	movs	r3, #2
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f240 7397 	movw	r3, #1943	; 0x797
 8001bd0:	4a46      	ldr	r2, [pc, #280]	; (8001cec <state_machine+0x584>)
 8001bd2:	2178      	movs	r1, #120	; 0x78
 8001bd4:	2078      	movs	r0, #120	; 0x78
 8001bd6:	f7ff fcde 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 8001bda:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <state_machine+0x570>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
			}

			if(kbd_st & BUTTON_CALIBRATION){
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <state_machine+0x49a>
				system_state = 6;
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <state_machine+0x568>)
 8001bec:	2206      	movs	r2, #6
 8001bee:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <state_machine+0x570>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <state_machine+0x578>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
				state_progress = 0;
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <state_machine+0x57c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <state_machine+0x564>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d11f      	bne.n	8001c4a <state_machine+0x4e2>
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <state_machine+0x564>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01a      	beq.n	8001c50 <state_machine+0x4e8>
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <state_machine+0x558>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d103      	bne.n	8001c2a <state_machine+0x4c2>
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <state_machine+0x558>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e004      	b.n	8001c34 <state_machine+0x4cc>
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <state_machine+0x558>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <state_machine+0x558>)
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <state_machine+0x558>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <state_machine+0x55c>)
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4619      	mov	r1, r3
 8001c42:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <state_machine+0x560>)
 8001c44:	f004 fa4a 	bl	80060dc <HAL_LTDC_SetAlpha>
 8001c48:	e002      	b.n	8001c50 <state_machine+0x4e8>
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <state_machine+0x564>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
			check_switch();
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f041 80dd 	bne.w	8002e12 <state_machine+0x16aa>
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <state_machine+0x568>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <state_machine+0x56c>)
 8001c60:	22b4      	movs	r2, #180	; 0xb4
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <state_machine+0x570>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
			break;
 8001c6a:	f001 b8d2 	b.w	8002e12 <state_machine+0x16aa>
		}
		case 6:{
			if(need_out){
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <state_machine+0x570>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01a      	beq.n	8001cac <state_machine+0x544>
				fill_screen(0);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fcb6 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001c7c:	f7ff fd44 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state6_string, 0x797, 2);
 8001c80:	2302      	movs	r3, #2
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f240 7397 	movw	r3, #1943	; 0x797
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <state_machine+0x588>)
 8001c8a:	2164      	movs	r1, #100	; 0x64
 8001c8c:	20b4      	movs	r0, #180	; 0xb4
 8001c8e:	f7ff fc82 	bl	8001596 <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001c92:	f240 7397 	movw	r3, #1943	; 0x797
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	230a      	movs	r3, #10
 8001c9a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001c9e:	2196      	movs	r1, #150	; 0x96
 8001ca0:	2064      	movs	r0, #100	; 0x64
 8001ca2:	f7ff f921 	bl	8000ee8 <print_rectangle_empty>
				need_out = 0;
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <state_machine+0x570>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

			}

			if(!state_time){state_time = tick_fun();}else{
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <state_machine+0x578>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d11f      	bne.n	8001cf4 <state_machine+0x58c>
 8001cb4:	f009 f90a 	bl	800aecc <xTaskGetTickCount>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <state_machine+0x578>)
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e02a      	b.n	8001d16 <state_machine+0x5ae>
 8001cc0:	20001804 	.word	0x20001804
 8001cc4:	20001808 	.word	0x20001808
 8001cc8:	20041884 	.word	0x20041884
 8001ccc:	2004186c 	.word	0x2004186c
 8001cd0:	20041870 	.word	0x20041870
 8001cd4:	20001a28 	.word	0x20001a28
 8001cd8:	20001a24 	.word	0x20001a24
 8001cdc:	2000185c 	.word	0x2000185c
 8001ce0:	20041934 	.word	0x20041934
 8001ce4:	20041874 	.word	0x20041874
 8001ce8:	cccccccd 	.word	0xcccccccd
 8001cec:	20001864 	.word	0x20001864
 8001cf0:	2000187c 	.word	0x2000187c
				if(tick_fun() - state_time >= 300){
 8001cf4:	f009 f8ea 	bl	800aecc <xTaskGetTickCount>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b99      	ldr	r3, [pc, #612]	; (8001f60 <state_machine+0x7f8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d04:	d307      	bcc.n	8001d16 <state_machine+0x5ae>
					state_time = 0;
 8001d06:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <state_machine+0x7f8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001d0c:	4b95      	ldr	r3, [pc, #596]	; (8001f64 <state_machine+0x7fc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	330a      	adds	r3, #10
 8001d12:	4a94      	ldr	r2, [pc, #592]	; (8001f64 <state_machine+0x7fc>)
 8001d14:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8001d16:	4b93      	ldr	r3, [pc, #588]	; (8001f64 <state_machine+0x7fc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <state_machine+0x5dc>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <state_machine+0x7fc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a91      	ldr	r2, [pc, #580]	; (8001f68 <state_machine+0x800>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	461a      	mov	r2, r3
 8001d34:	f240 7397 	movw	r3, #1943	; 0x797
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	2196      	movs	r1, #150	; 0x96
 8001d3e:	2064      	movs	r0, #100	; 0x64
 8001d40:	f7ff f89e 	bl	8000e80 <print_rectangle>
			}

			if(state_progress == 100){
 8001d44:	4b87      	ldr	r3, [pc, #540]	; (8001f64 <state_machine+0x7fc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d10b      	bne.n	8001d64 <state_machine+0x5fc>
				state_progress = 0;
 8001d4c:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <state_machine+0x7fc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001d52:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <state_machine+0x7f8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001d58:	4b84      	ldr	r3, [pc, #528]	; (8001f6c <state_machine+0x804>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
				system_state = 7;
 8001d5e:	4b84      	ldr	r3, [pc, #528]	; (8001f70 <state_machine+0x808>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
			}			

			check_brightness();
 8001d64:	4b83      	ldr	r3, [pc, #524]	; (8001f74 <state_machine+0x80c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11f      	bne.n	8001dac <state_machine+0x644>
 8001d6c:	4b81      	ldr	r3, [pc, #516]	; (8001f74 <state_machine+0x80c>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01a      	beq.n	8001db2 <state_machine+0x64a>
 8001d7c:	4b7e      	ldr	r3, [pc, #504]	; (8001f78 <state_machine+0x810>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d103      	bne.n	8001d8c <state_machine+0x624>
 8001d84:	4b7c      	ldr	r3, [pc, #496]	; (8001f78 <state_machine+0x810>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e004      	b.n	8001d96 <state_machine+0x62e>
 8001d8c:	4b7a      	ldr	r3, [pc, #488]	; (8001f78 <state_machine+0x810>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a79      	ldr	r2, [pc, #484]	; (8001f78 <state_machine+0x810>)
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b78      	ldr	r3, [pc, #480]	; (8001f78 <state_machine+0x810>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a78      	ldr	r2, [pc, #480]	; (8001f7c <state_machine+0x814>)
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	2200      	movs	r2, #0
 8001da2:	4619      	mov	r1, r3
 8001da4:	4876      	ldr	r0, [pc, #472]	; (8001f80 <state_machine+0x818>)
 8001da6:	f004 f999 	bl	80060dc <HAL_LTDC_SetAlpha>
 8001daa:	e002      	b.n	8001db2 <state_machine+0x64a>
 8001dac:	4b71      	ldr	r3, [pc, #452]	; (8001f74 <state_machine+0x80c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
			check_switch();
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f041 802e 	bne.w	8002e16 <state_machine+0x16ae>
 8001dba:	4b6d      	ldr	r3, [pc, #436]	; (8001f70 <state_machine+0x808>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <state_machine+0x81c>)
 8001dc2:	22b4      	movs	r2, #180	; 0xb4
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	4b69      	ldr	r3, [pc, #420]	; (8001f6c <state_machine+0x804>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
			break;
 8001dcc:	f001 b823 	b.w	8002e16 <state_machine+0x16ae>
		}
		case 7:{
			if(need_out){
 8001dd0:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <state_machine+0x804>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01a      	beq.n	8001e0e <state_machine+0x6a6>
				fill_screen(0);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fc05 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001dde:	f7ff fc93 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(110, 90, state7_string, 0x797, 2);	
 8001de2:	2302      	movs	r3, #2
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	f240 7397 	movw	r3, #1943	; 0x797
 8001dea:	4a67      	ldr	r2, [pc, #412]	; (8001f88 <state_machine+0x820>)
 8001dec:	215a      	movs	r1, #90	; 0x5a
 8001dee:	206e      	movs	r0, #110	; 0x6e
 8001df0:	f7ff fbd1 	bl	8001596 <print_string_scaled_y>
				print_number(180, 130, system_angle, 0x797, 2);
 8001df4:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <state_machine+0x81c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f240 7397 	movw	r3, #1943	; 0x797
 8001e00:	2182      	movs	r1, #130	; 0x82
 8001e02:	20b4      	movs	r0, #180	; 0xb4
 8001e04:	f7ff fc0e 	bl	8001624 <print_number>
				need_out = 0;
 8001e08:	4b58      	ldr	r3, [pc, #352]	; (8001f6c <state_machine+0x804>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
			}


			if(!mem_sp_st){
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <state_machine+0x824>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <state_machine+0x6b6>
				mem_sp_st = sp_st;
 8001e16:	4a5d      	ldr	r2, [pc, #372]	; (8001f8c <state_machine+0x824>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	e05d      	b.n	8001eda <state_machine+0x772>
			}else{
				if(mem_sp_st > sp_st){
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <state_machine+0x824>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d229      	bcs.n	8001e7c <state_machine+0x714>
					if(((int32_t)(system_angle - (mem_sp_st - sp_st)*2)) >= 0){
 8001e28:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <state_machine+0x81c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <state_machine+0x824>)
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	1acb      	subs	r3, r1, r3
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db09      	blt.n	8001e50 <state_machine+0x6e8>
						system_angle -= (mem_sp_st - sp_st)*2;
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <state_machine+0x81c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <state_machine+0x824>)
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	1acb      	subs	r3, r1, r3
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4a4d      	ldr	r2, [pc, #308]	; (8001f84 <state_machine+0x81c>)
 8001e4e:	6013      	str	r3, [r2, #0]
					}
					print_rectangle(180, 130, 100, 40, 0);
 8001e50:	2300      	movs	r3, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2328      	movs	r3, #40	; 0x28
 8001e56:	2264      	movs	r2, #100	; 0x64
 8001e58:	2182      	movs	r1, #130	; 0x82
 8001e5a:	20b4      	movs	r0, #180	; 0xb4
 8001e5c:	f7ff f810 	bl	8000e80 <print_rectangle>
					print_number(180, 130, system_angle, 0x797, 2);
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <state_machine+0x81c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f240 7397 	movw	r3, #1943	; 0x797
 8001e6c:	2182      	movs	r1, #130	; 0x82
 8001e6e:	20b4      	movs	r0, #180	; 0xb4
 8001e70:	f7ff fbd8 	bl	8001624 <print_number>
					mem_sp_st = 0;
 8001e74:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <state_machine+0x824>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e02e      	b.n	8001eda <state_machine+0x772>
				}else if(mem_sp_st < sp_st){
 8001e7c:	4b43      	ldr	r3, [pc, #268]	; (8001f8c <state_machine+0x824>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d929      	bls.n	8001eda <state_machine+0x772>
					if(system_angle + (sp_st - mem_sp_st)*2 <= 360){
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <state_machine+0x824>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	005a      	lsls	r2, r3, #1
 8001e90:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <state_machine+0x81c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001e9a:	d809      	bhi.n	8001eb0 <state_machine+0x748>
						system_angle += (sp_st - mem_sp_st)*2;
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <state_machine+0x824>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	005a      	lsls	r2, r3, #1
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <state_machine+0x81c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a35      	ldr	r2, [pc, #212]	; (8001f84 <state_machine+0x81c>)
 8001eae:	6013      	str	r3, [r2, #0]
					}
					print_rectangle(180, 130, 20, 20, 0);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2314      	movs	r3, #20
 8001eb6:	2214      	movs	r2, #20
 8001eb8:	2182      	movs	r1, #130	; 0x82
 8001eba:	20b4      	movs	r0, #180	; 0xb4
 8001ebc:	f7fe ffe0 	bl	8000e80 <print_rectangle>
					print_number(180, 130, system_angle, 0x797, 2);
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <state_machine+0x81c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f240 7397 	movw	r3, #1943	; 0x797
 8001ecc:	2182      	movs	r1, #130	; 0x82
 8001ece:	20b4      	movs	r0, #180	; 0xb4
 8001ed0:	f7ff fba8 	bl	8001624 <print_number>
					mem_sp_st = 0;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <state_machine+0x824>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
				}	
			}

			if(spb_st){
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <state_machine+0x78a>
				mem_sp_st = 0;
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <state_machine+0x824>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <state_machine+0x804>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
				system_state = 8;
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <state_machine+0x808>)
 8001eee:	2208      	movs	r2, #8
 8001ef0:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <state_machine+0x80c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11f      	bne.n	8001f3a <state_machine+0x7d2>
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <state_machine+0x80c>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01a      	beq.n	8001f40 <state_machine+0x7d8>
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <state_machine+0x810>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d103      	bne.n	8001f1a <state_machine+0x7b2>
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <state_machine+0x810>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e004      	b.n	8001f24 <state_machine+0x7bc>
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <state_machine+0x810>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <state_machine+0x810>)
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <state_machine+0x810>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <state_machine+0x814>)
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4813      	ldr	r0, [pc, #76]	; (8001f80 <state_machine+0x818>)
 8001f34:	f004 f8d2 	bl	80060dc <HAL_LTDC_SetAlpha>
 8001f38:	e002      	b.n	8001f40 <state_machine+0x7d8>
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <state_machine+0x80c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
			check_switch();
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 8769 	bne.w	8002e1a <state_machine+0x16b2>
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <state_machine+0x808>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <state_machine+0x81c>)
 8001f50:	22b4      	movs	r2, #180	; 0xb4
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <state_machine+0x804>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
			break;
 8001f5a:	f000 bf5e 	b.w	8002e1a <state_machine+0x16b2>
 8001f5e:	bf00      	nop
 8001f60:	20041934 	.word	0x20041934
 8001f64:	20041874 	.word	0x20041874
 8001f68:	cccccccd 	.word	0xcccccccd
 8001f6c:	20001a24 	.word	0x20001a24
 8001f70:	20041870 	.word	0x20041870
 8001f74:	2004186c 	.word	0x2004186c
 8001f78:	20001804 	.word	0x20001804
 8001f7c:	20001808 	.word	0x20001808
 8001f80:	20041884 	.word	0x20041884
 8001f84:	20001a28 	.word	0x20001a28
 8001f88:	20001888 	.word	0x20001888
 8001f8c:	20041878 	.word	0x20041878
		}
		case 8:{
			if(need_out){
 8001f90:	4ba0      	ldr	r3, [pc, #640]	; (8002214 <state_machine+0xaac>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01a      	beq.n	8001fce <state_machine+0x866>
				fill_screen(0);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff fb25 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001f9e:	f7ff fbb3 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state8_string, 0x797, 2);
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	f240 7397 	movw	r3, #1943	; 0x797
 8001faa:	4a9b      	ldr	r2, [pc, #620]	; (8002218 <state_machine+0xab0>)
 8001fac:	2164      	movs	r1, #100	; 0x64
 8001fae:	20b4      	movs	r0, #180	; 0xb4
 8001fb0:	f7ff faf1 	bl	8001596 <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001fb4:	f240 7397 	movw	r3, #1943	; 0x797
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	230a      	movs	r3, #10
 8001fbc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001fc0:	2196      	movs	r1, #150	; 0x96
 8001fc2:	2064      	movs	r0, #100	; 0x64
 8001fc4:	f7fe ff90 	bl	8000ee8 <print_rectangle_empty>
				need_out = 0;
 8001fc8:	4b92      	ldr	r3, [pc, #584]	; (8002214 <state_machine+0xaac>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

			}

			if(!state_time){state_time = tick_fun();}else{
 8001fce:	4b93      	ldr	r3, [pc, #588]	; (800221c <state_machine+0xab4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <state_machine+0x87a>
 8001fd6:	f008 ff79 	bl	800aecc <xTaskGetTickCount>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a8f      	ldr	r2, [pc, #572]	; (800221c <state_machine+0xab4>)
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e010      	b.n	8002004 <state_machine+0x89c>
				if(tick_fun() - state_time >= 300){
 8001fe2:	f008 ff73 	bl	800aecc <xTaskGetTickCount>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b8c      	ldr	r3, [pc, #560]	; (800221c <state_machine+0xab4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ff2:	d307      	bcc.n	8002004 <state_machine+0x89c>
					state_time = 0;
 8001ff4:	4b89      	ldr	r3, [pc, #548]	; (800221c <state_machine+0xab4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001ffa:	4b89      	ldr	r3, [pc, #548]	; (8002220 <state_machine+0xab8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	330a      	adds	r3, #10
 8002000:	4a87      	ldr	r2, [pc, #540]	; (8002220 <state_machine+0xab8>)
 8002002:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8002004:	4b86      	ldr	r3, [pc, #536]	; (8002220 <state_machine+0xab8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d012      	beq.n	8002032 <state_machine+0x8ca>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 800200c:	4b84      	ldr	r3, [pc, #528]	; (8002220 <state_machine+0xab8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a84      	ldr	r2, [pc, #528]	; (8002224 <state_machine+0xabc>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	461a      	mov	r2, r3
 8002022:	f240 7397 	movw	r3, #1943	; 0x797
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	230a      	movs	r3, #10
 800202a:	2196      	movs	r1, #150	; 0x96
 800202c:	2064      	movs	r0, #100	; 0x64
 800202e:	f7fe ff27 	bl	8000e80 <print_rectangle>
			}

			if(state_progress == 100){
 8002032:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <state_machine+0xab8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d10b      	bne.n	8002052 <state_machine+0x8ea>
				state_progress = 0;
 800203a:	4b79      	ldr	r3, [pc, #484]	; (8002220 <state_machine+0xab8>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8002040:	4b76      	ldr	r3, [pc, #472]	; (800221c <state_machine+0xab4>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <state_machine+0xaac>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
				system_state = 9;
 800204c:	4b76      	ldr	r3, [pc, #472]	; (8002228 <state_machine+0xac0>)
 800204e:	2209      	movs	r2, #9
 8002050:	601a      	str	r2, [r3, #0]
			}			

			check_brightness();
 8002052:	4b76      	ldr	r3, [pc, #472]	; (800222c <state_machine+0xac4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11f      	bne.n	800209a <state_machine+0x932>
 800205a:	4b74      	ldr	r3, [pc, #464]	; (800222c <state_machine+0xac4>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01a      	beq.n	80020a0 <state_machine+0x938>
 800206a:	4b71      	ldr	r3, [pc, #452]	; (8002230 <state_machine+0xac8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d103      	bne.n	800207a <state_machine+0x912>
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <state_machine+0xac8>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e004      	b.n	8002084 <state_machine+0x91c>
 800207a:	4b6d      	ldr	r3, [pc, #436]	; (8002230 <state_machine+0xac8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a6b      	ldr	r2, [pc, #428]	; (8002230 <state_machine+0xac8>)
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <state_machine+0xac8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6a      	ldr	r2, [pc, #424]	; (8002234 <state_machine+0xacc>)
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	2200      	movs	r2, #0
 8002090:	4619      	mov	r1, r3
 8002092:	4869      	ldr	r0, [pc, #420]	; (8002238 <state_machine+0xad0>)
 8002094:	f004 f822 	bl	80060dc <HAL_LTDC_SetAlpha>
 8002098:	e002      	b.n	80020a0 <state_machine+0x938>
 800209a:	4b64      	ldr	r3, [pc, #400]	; (800222c <state_machine+0xac4>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
			check_switch();
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 86bb 	bne.w	8002e1e <state_machine+0x16b6>
 80020a8:	4b5f      	ldr	r3, [pc, #380]	; (8002228 <state_machine+0xac0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <state_machine+0xad4>)
 80020b0:	22b4      	movs	r2, #180	; 0xb4
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	4b57      	ldr	r3, [pc, #348]	; (8002214 <state_machine+0xaac>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
			break;
 80020ba:	f000 beb0 	b.w	8002e1e <state_machine+0x16b6>
		}
		case 9:{
			if(need_out){
 80020be:	4b55      	ldr	r3, [pc, #340]	; (8002214 <state_machine+0xaac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <state_machine+0x980>
				fill_screen(0);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff fa8e 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 80020cc:	f7ff fb1c 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(165, 105, state9_string, 0x797, 2);
 80020d0:	2302      	movs	r3, #2
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f240 7397 	movw	r3, #1943	; 0x797
 80020d8:	4a59      	ldr	r2, [pc, #356]	; (8002240 <state_machine+0xad8>)
 80020da:	2169      	movs	r1, #105	; 0x69
 80020dc:	20a5      	movs	r0, #165	; 0xa5
 80020de:	f7ff fa5a 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 80020e2:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <state_machine+0xaac>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <state_machine+0x998>
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <state_machine+0xaac>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <state_machine+0xac0>)
 80020fa:	220a      	movs	r2, #10
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e052      	b.n	80021a6 <state_machine+0xa3e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <state_machine+0x9b0>
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <state_machine+0xaac>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	4b45      	ldr	r3, [pc, #276]	; (8002228 <state_machine+0xac0>)
 8002112:	220b      	movs	r2, #11
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e046      	b.n	80021a6 <state_machine+0xa3e>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <state_machine+0x9c8>
 8002122:	4b3c      	ldr	r3, [pc, #240]	; (8002214 <state_machine+0xaac>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <state_machine+0xac0>)
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e03a      	b.n	80021a6 <state_machine+0xa3e>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <state_machine+0x9e0>
 800213a:	4b36      	ldr	r3, [pc, #216]	; (8002214 <state_machine+0xaac>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <state_machine+0xac0>)
 8002142:	220d      	movs	r2, #13
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e02e      	b.n	80021a6 <state_machine+0xa3e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <state_machine+0x9f8>
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <state_machine+0xaac>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <state_machine+0xac0>)
 800215a:	220e      	movs	r2, #14
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e022      	b.n	80021a6 <state_machine+0xa3e>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <state_machine+0xa10>
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <state_machine+0xaac>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <state_machine+0xac0>)
 8002172:	220f      	movs	r2, #15
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e016      	b.n	80021a6 <state_machine+0xa3e>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <state_machine+0xa28>
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <state_machine+0xaac>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <state_machine+0xac0>)
 800218a:	2210      	movs	r2, #16
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e00a      	b.n	80021a6 <state_machine+0xa3e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <state_machine+0xa3e>
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <state_machine+0xaac>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <state_machine+0xac0>)
 80021a2:	2211      	movs	r2, #17
 80021a4:	601a      	str	r2, [r3, #0]

			check_brightness();
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <state_machine+0xac4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11f      	bne.n	80021ee <state_machine+0xa86>
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <state_machine+0xac4>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01a      	beq.n	80021f4 <state_machine+0xa8c>
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <state_machine+0xac8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d103      	bne.n	80021ce <state_machine+0xa66>
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <state_machine+0xac8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e004      	b.n	80021d8 <state_machine+0xa70>
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <state_machine+0xac8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	4a16      	ldr	r2, [pc, #88]	; (8002230 <state_machine+0xac8>)
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <state_machine+0xac8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <state_machine+0xacc>)
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	2200      	movs	r2, #0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4814      	ldr	r0, [pc, #80]	; (8002238 <state_machine+0xad0>)
 80021e8:	f003 ff78 	bl	80060dc <HAL_LTDC_SetAlpha>
 80021ec:	e002      	b.n	80021f4 <state_machine+0xa8c>
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <state_machine+0xac4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
			check_switch();
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 8613 	bne.w	8002e22 <state_machine+0x16ba>
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <state_machine+0xac0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <state_machine+0xad4>)
 8002204:	22b4      	movs	r2, #180	; 0xb4
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <state_machine+0xaac>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]
			break;
 800220e:	f000 be08 	b.w	8002e22 <state_machine+0x16ba>
 8002212:	bf00      	nop
 8002214:	20001a24 	.word	0x20001a24
 8002218:	200018a0 	.word	0x200018a0
 800221c:	20041934 	.word	0x20041934
 8002220:	20041874 	.word	0x20041874
 8002224:	cccccccd 	.word	0xcccccccd
 8002228:	20041870 	.word	0x20041870
 800222c:	2004186c 	.word	0x2004186c
 8002230:	20001804 	.word	0x20001804
 8002234:	20001808 	.word	0x20001808
 8002238:	20041884 	.word	0x20041884
 800223c:	20001a28 	.word	0x20001a28
 8002240:	200018ac 	.word	0x200018ac
		}
		case 10:{
			if(need_out){
 8002244:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <state_machine+0xd18>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <state_machine+0xb10>
				fill_screen(0);
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff f9cb 	bl	80015e8 <fill_screen>
				print_string(10, 40, state10_string, 0x797);
 8002252:	f240 7397 	movw	r3, #1943	; 0x797
 8002256:	4a8b      	ldr	r2, [pc, #556]	; (8002484 <state_machine+0xd1c>)
 8002258:	2128      	movs	r1, #40	; 0x28
 800225a:	200a      	movs	r0, #10
 800225c:	f7ff f946 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state10_string_2, 0x797, 3);
 8002260:	2303      	movs	r3, #3
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	f240 7397 	movw	r3, #1943	; 0x797
 8002268:	4a87      	ldr	r2, [pc, #540]	; (8002488 <state_machine+0xd20>)
 800226a:	2164      	movs	r1, #100	; 0x64
 800226c:	200a      	movs	r0, #10
 800226e:	f7ff f963 	bl	8001538 <print_string_scaled>
				need_out = 0;
 8002272:	4b83      	ldr	r3, [pc, #524]	; (8002480 <state_machine+0xd18>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <state_machine+0xb28>
 8002282:	4b7f      	ldr	r3, [pc, #508]	; (8002480 <state_machine+0xd18>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	4b80      	ldr	r3, [pc, #512]	; (800248c <state_machine+0xd24>)
 800228a:	220a      	movs	r2, #10
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e052      	b.n	8002336 <state_machine+0xbce>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <state_machine+0xb40>
 800229a:	4b79      	ldr	r3, [pc, #484]	; (8002480 <state_machine+0xd18>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b7a      	ldr	r3, [pc, #488]	; (800248c <state_machine+0xd24>)
 80022a2:	220b      	movs	r2, #11
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e046      	b.n	8002336 <state_machine+0xbce>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d006      	beq.n	80022c0 <state_machine+0xb58>
 80022b2:	4b73      	ldr	r3, [pc, #460]	; (8002480 <state_machine+0xd18>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	4b74      	ldr	r3, [pc, #464]	; (800248c <state_machine+0xd24>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e03a      	b.n	8002336 <state_machine+0xbce>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <state_machine+0xb70>
 80022ca:	4b6d      	ldr	r3, [pc, #436]	; (8002480 <state_machine+0xd18>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4b6e      	ldr	r3, [pc, #440]	; (800248c <state_machine+0xd24>)
 80022d2:	220d      	movs	r2, #13
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e02e      	b.n	8002336 <state_machine+0xbce>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <state_machine+0xb88>
 80022e2:	4b67      	ldr	r3, [pc, #412]	; (8002480 <state_machine+0xd18>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <state_machine+0xd24>)
 80022ea:	220e      	movs	r2, #14
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e022      	b.n	8002336 <state_machine+0xbce>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <state_machine+0xba0>
 80022fa:	4b61      	ldr	r3, [pc, #388]	; (8002480 <state_machine+0xd18>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	4b62      	ldr	r3, [pc, #392]	; (800248c <state_machine+0xd24>)
 8002302:	220f      	movs	r2, #15
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e016      	b.n	8002336 <state_machine+0xbce>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <state_machine+0xbb8>
 8002312:	4b5b      	ldr	r3, [pc, #364]	; (8002480 <state_machine+0xd18>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4b5c      	ldr	r3, [pc, #368]	; (800248c <state_machine+0xd24>)
 800231a:	2210      	movs	r2, #16
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e00a      	b.n	8002336 <state_machine+0xbce>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <state_machine+0xbce>
 800232a:	4b55      	ldr	r3, [pc, #340]	; (8002480 <state_machine+0xd18>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	4b56      	ldr	r3, [pc, #344]	; (800248c <state_machine+0xd24>)
 8002332:	2211      	movs	r2, #17
 8002334:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002336:	4b56      	ldr	r3, [pc, #344]	; (8002490 <state_machine+0xd28>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <state_machine+0xc16>
 800233e:	4b54      	ldr	r3, [pc, #336]	; (8002490 <state_machine+0xd28>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01a      	beq.n	8002384 <state_machine+0xc1c>
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <state_machine+0xd2c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d103      	bne.n	800235e <state_machine+0xbf6>
 8002356:	4b4f      	ldr	r3, [pc, #316]	; (8002494 <state_machine+0xd2c>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e004      	b.n	8002368 <state_machine+0xc00>
 800235e:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <state_machine+0xd2c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <state_machine+0xd2c>)
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <state_machine+0xd2c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <state_machine+0xd30>)
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	4849      	ldr	r0, [pc, #292]	; (800249c <state_machine+0xd34>)
 8002378:	f003 feb0 	bl	80060dc <HAL_LTDC_SetAlpha>
 800237c:	e002      	b.n	8002384 <state_machine+0xc1c>
 800237e:	4b44      	ldr	r3, [pc, #272]	; (8002490 <state_machine+0xd28>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
			check_switch();
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 854d 	bne.w	8002e26 <state_machine+0x16be>
 800238c:	4b3f      	ldr	r3, [pc, #252]	; (800248c <state_machine+0xd24>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <state_machine+0xd38>)
 8002394:	22b4      	movs	r2, #180	; 0xb4
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b39      	ldr	r3, [pc, #228]	; (8002480 <state_machine+0xd18>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]
			break;			
 800239e:	f000 bd42 	b.w	8002e26 <state_machine+0x16be>
		}
		case 11:{
			if(need_out){
 80023a2:	4b37      	ldr	r3, [pc, #220]	; (8002480 <state_machine+0xd18>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d015      	beq.n	80023d6 <state_machine+0xc6e>
				fill_screen(0);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff f91c 	bl	80015e8 <fill_screen>
				print_string(10, 40, state11_string, 0x797);
 80023b0:	f240 7397 	movw	r3, #1943	; 0x797
 80023b4:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <state_machine+0xd3c>)
 80023b6:	2128      	movs	r1, #40	; 0x28
 80023b8:	200a      	movs	r0, #10
 80023ba:	f7ff f897 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state11_string_2, 0x797, 3);
 80023be:	2303      	movs	r3, #3
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f240 7397 	movw	r3, #1943	; 0x797
 80023c6:	4a38      	ldr	r2, [pc, #224]	; (80024a8 <state_machine+0xd40>)
 80023c8:	2164      	movs	r1, #100	; 0x64
 80023ca:	200a      	movs	r0, #10
 80023cc:	f7ff f8b4 	bl	8001538 <print_string_scaled>
				need_out = 0;
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <state_machine+0xd18>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
			}			

			check_data();
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <state_machine+0xc86>
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <state_machine+0xd18>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <state_machine+0xd24>)
 80023e8:	220a      	movs	r2, #10
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e069      	b.n	80024c2 <state_machine+0xd5a>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <state_machine+0xc9e>
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <state_machine+0xd18>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <state_machine+0xd24>)
 8002400:	220b      	movs	r2, #11
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e05d      	b.n	80024c2 <state_machine+0xd5a>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <state_machine+0xcb6>
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <state_machine+0xd18>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <state_machine+0xd24>)
 8002418:	220c      	movs	r2, #12
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e051      	b.n	80024c2 <state_machine+0xd5a>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <state_machine+0xcce>
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <state_machine+0xd18>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <state_machine+0xd24>)
 8002430:	220d      	movs	r2, #13
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e045      	b.n	80024c2 <state_machine+0xd5a>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <state_machine+0xce6>
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <state_machine+0xd18>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <state_machine+0xd24>)
 8002448:	220e      	movs	r2, #14
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e039      	b.n	80024c2 <state_machine+0xd5a>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <state_machine+0xcfe>
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <state_machine+0xd18>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <state_machine+0xd24>)
 8002460:	220f      	movs	r2, #15
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e02d      	b.n	80024c2 <state_machine+0xd5a>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01d      	beq.n	80024ac <state_machine+0xd44>
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <state_machine+0xd18>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <state_machine+0xd24>)
 8002478:	2210      	movs	r2, #16
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e021      	b.n	80024c2 <state_machine+0xd5a>
 800247e:	bf00      	nop
 8002480:	20001a24 	.word	0x20001a24
 8002484:	200018bc 	.word	0x200018bc
 8002488:	20001998 	.word	0x20001998
 800248c:	20041870 	.word	0x20041870
 8002490:	2004186c 	.word	0x2004186c
 8002494:	20001804 	.word	0x20001804
 8002498:	20001808 	.word	0x20001808
 800249c:	20041884 	.word	0x20041884
 80024a0:	20001a28 	.word	0x20001a28
 80024a4:	200018d0 	.word	0x200018d0
 80024a8:	200019a4 	.word	0x200019a4
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <state_machine+0xd5a>
 80024b6:	4b9d      	ldr	r3, [pc, #628]	; (800272c <state_machine+0xfc4>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	4b9c      	ldr	r3, [pc, #624]	; (8002730 <state_machine+0xfc8>)
 80024be:	2211      	movs	r2, #17
 80024c0:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 80024c2:	4b9c      	ldr	r3, [pc, #624]	; (8002734 <state_machine+0xfcc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d11f      	bne.n	800250a <state_machine+0xda2>
 80024ca:	4b9a      	ldr	r3, [pc, #616]	; (8002734 <state_machine+0xfcc>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01a      	beq.n	8002510 <state_machine+0xda8>
 80024da:	4b97      	ldr	r3, [pc, #604]	; (8002738 <state_machine+0xfd0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d103      	bne.n	80024ea <state_machine+0xd82>
 80024e2:	4b95      	ldr	r3, [pc, #596]	; (8002738 <state_machine+0xfd0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e004      	b.n	80024f4 <state_machine+0xd8c>
 80024ea:	4b93      	ldr	r3, [pc, #588]	; (8002738 <state_machine+0xfd0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	4a91      	ldr	r2, [pc, #580]	; (8002738 <state_machine+0xfd0>)
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b90      	ldr	r3, [pc, #576]	; (8002738 <state_machine+0xfd0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a90      	ldr	r2, [pc, #576]	; (800273c <state_machine+0xfd4>)
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	2200      	movs	r2, #0
 8002500:	4619      	mov	r1, r3
 8002502:	488f      	ldr	r0, [pc, #572]	; (8002740 <state_machine+0xfd8>)
 8002504:	f003 fdea 	bl	80060dc <HAL_LTDC_SetAlpha>
 8002508:	e002      	b.n	8002510 <state_machine+0xda8>
 800250a:	4b8a      	ldr	r3, [pc, #552]	; (8002734 <state_machine+0xfcc>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
			check_switch();
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8489 	bne.w	8002e2a <state_machine+0x16c2>
 8002518:	4b85      	ldr	r3, [pc, #532]	; (8002730 <state_machine+0xfc8>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	4b89      	ldr	r3, [pc, #548]	; (8002744 <state_machine+0xfdc>)
 8002520:	22b4      	movs	r2, #180	; 0xb4
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	4b81      	ldr	r3, [pc, #516]	; (800272c <state_machine+0xfc4>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]
			break;			
 800252a:	f000 bc7e 	b.w	8002e2a <state_machine+0x16c2>
		}
		case 12:{
			if(need_out){
 800252e:	4b7f      	ldr	r3, [pc, #508]	; (800272c <state_machine+0xfc4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d027      	beq.n	8002586 <state_machine+0xe1e>
				fill_screen(0);
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff f856 	bl	80015e8 <fill_screen>
				print_string(10, 40, state12_string, 0x797);
 800253c:	f240 7397 	movw	r3, #1943	; 0x797
 8002540:	4a81      	ldr	r2, [pc, #516]	; (8002748 <state_machine+0xfe0>)
 8002542:	2128      	movs	r1, #40	; 0x28
 8002544:	200a      	movs	r0, #10
 8002546:	f7fe ffd1 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state12_string_2, 0x797, 3);
 800254a:	2303      	movs	r3, #3
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	f240 7397 	movw	r3, #1943	; 0x797
 8002552:	4a7e      	ldr	r2, [pc, #504]	; (800274c <state_machine+0xfe4>)
 8002554:	2164      	movs	r1, #100	; 0x64
 8002556:	200a      	movs	r0, #10
 8002558:	f7fe ffee 	bl	8001538 <print_string_scaled>
				print_string_scaled_y(10, 145, state12_string_3, 0x797, 2);
 800255c:	2302      	movs	r3, #2
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f240 7397 	movw	r3, #1943	; 0x797
 8002564:	4a7a      	ldr	r2, [pc, #488]	; (8002750 <state_machine+0xfe8>)
 8002566:	2191      	movs	r1, #145	; 0x91
 8002568:	200a      	movs	r0, #10
 800256a:	f7ff f814 	bl	8001596 <print_string_scaled_y>
				print_string_scaled_y(50, 180, state12_string_4, 0x797, 2);
 800256e:	2302      	movs	r3, #2
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	f240 7397 	movw	r3, #1943	; 0x797
 8002576:	4a77      	ldr	r2, [pc, #476]	; (8002754 <state_machine+0xfec>)
 8002578:	21b4      	movs	r1, #180	; 0xb4
 800257a:	2032      	movs	r0, #50	; 0x32
 800257c:	f7ff f80b 	bl	8001596 <print_string_scaled_y>

				need_out = 0;
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <state_machine+0xfc4>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <state_machine+0xe36>
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <state_machine+0xfc4>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	4b66      	ldr	r3, [pc, #408]	; (8002730 <state_machine+0xfc8>)
 8002598:	220a      	movs	r2, #10
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e052      	b.n	8002644 <state_machine+0xedc>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <state_machine+0xe4e>
 80025a8:	4b60      	ldr	r3, [pc, #384]	; (800272c <state_machine+0xfc4>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	4b60      	ldr	r3, [pc, #384]	; (8002730 <state_machine+0xfc8>)
 80025b0:	220b      	movs	r2, #11
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e046      	b.n	8002644 <state_machine+0xedc>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <state_machine+0xe66>
 80025c0:	4b5a      	ldr	r3, [pc, #360]	; (800272c <state_machine+0xfc4>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	4b5a      	ldr	r3, [pc, #360]	; (8002730 <state_machine+0xfc8>)
 80025c8:	220c      	movs	r2, #12
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e03a      	b.n	8002644 <state_machine+0xedc>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <state_machine+0xe7e>
 80025d8:	4b54      	ldr	r3, [pc, #336]	; (800272c <state_machine+0xfc4>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	4b54      	ldr	r3, [pc, #336]	; (8002730 <state_machine+0xfc8>)
 80025e0:	220d      	movs	r2, #13
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e02e      	b.n	8002644 <state_machine+0xedc>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d006      	beq.n	80025fe <state_machine+0xe96>
 80025f0:	4b4e      	ldr	r3, [pc, #312]	; (800272c <state_machine+0xfc4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	4b4e      	ldr	r3, [pc, #312]	; (8002730 <state_machine+0xfc8>)
 80025f8:	220e      	movs	r2, #14
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e022      	b.n	8002644 <state_machine+0xedc>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <state_machine+0xeae>
 8002608:	4b48      	ldr	r3, [pc, #288]	; (800272c <state_machine+0xfc4>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	4b48      	ldr	r3, [pc, #288]	; (8002730 <state_machine+0xfc8>)
 8002610:	220f      	movs	r2, #15
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e016      	b.n	8002644 <state_machine+0xedc>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <state_machine+0xec6>
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <state_machine+0xfc4>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <state_machine+0xfc8>)
 8002628:	2210      	movs	r2, #16
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e00a      	b.n	8002644 <state_machine+0xedc>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <state_machine+0xedc>
 8002638:	4b3c      	ldr	r3, [pc, #240]	; (800272c <state_machine+0xfc4>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <state_machine+0xfc8>)
 8002640:	2211      	movs	r2, #17
 8002642:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <state_machine+0xfcc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11f      	bne.n	800268c <state_machine+0xf24>
 800264c:	4b39      	ldr	r3, [pc, #228]	; (8002734 <state_machine+0xfcc>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01a      	beq.n	8002692 <state_machine+0xf2a>
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <state_machine+0xfd0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d103      	bne.n	800266c <state_machine+0xf04>
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <state_machine+0xfd0>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e004      	b.n	8002676 <state_machine+0xf0e>
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <state_machine+0xfd0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <state_machine+0xfd0>)
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <state_machine+0xfd0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a30      	ldr	r2, [pc, #192]	; (800273c <state_machine+0xfd4>)
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	2200      	movs	r2, #0
 8002682:	4619      	mov	r1, r3
 8002684:	482e      	ldr	r0, [pc, #184]	; (8002740 <state_machine+0xfd8>)
 8002686:	f003 fd29 	bl	80060dc <HAL_LTDC_SetAlpha>
 800268a:	e002      	b.n	8002692 <state_machine+0xf2a>
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <state_machine+0xfcc>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
			check_switch();
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 83ca 	bne.w	8002e2e <state_machine+0x16c6>
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <state_machine+0xfc8>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	4b28      	ldr	r3, [pc, #160]	; (8002744 <state_machine+0xfdc>)
 80026a2:	22b4      	movs	r2, #180	; 0xb4
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <state_machine+0xfc4>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
			break;			
 80026ac:	e3bf      	b.n	8002e2e <state_machine+0x16c6>
		}
		case 13:{
			if(need_out){
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <state_machine+0xfc4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d015      	beq.n	80026e2 <state_machine+0xf7a>
				fill_screen(0);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7fe ff96 	bl	80015e8 <fill_screen>
				print_string(10, 40, state13_string, 0x797);
 80026bc:	f240 7397 	movw	r3, #1943	; 0x797
 80026c0:	4a25      	ldr	r2, [pc, #148]	; (8002758 <state_machine+0xff0>)
 80026c2:	2128      	movs	r1, #40	; 0x28
 80026c4:	200a      	movs	r0, #10
 80026c6:	f7fe ff11 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state13_string_2, 0x797, 3);
 80026ca:	2303      	movs	r3, #3
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	f240 7397 	movw	r3, #1943	; 0x797
 80026d2:	4a22      	ldr	r2, [pc, #136]	; (800275c <state_machine+0xff4>)
 80026d4:	2164      	movs	r1, #100	; 0x64
 80026d6:	200a      	movs	r0, #10
 80026d8:	f7fe ff2e 	bl	8001538 <print_string_scaled>
				need_out = 0;
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <state_machine+0xfc4>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <state_machine+0xf92>
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <state_machine+0xfc4>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <state_machine+0xfc8>)
 80026f4:	220a      	movs	r2, #10
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e06d      	b.n	80027d6 <state_machine+0x106e>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d006      	beq.n	8002712 <state_machine+0xfaa>
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <state_machine+0xfc4>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <state_machine+0xfc8>)
 800270c:	220b      	movs	r2, #11
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e061      	b.n	80027d6 <state_machine+0x106e>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d021      	beq.n	8002760 <state_machine+0xff8>
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <state_machine+0xfc4>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <state_machine+0xfc8>)
 8002724:	220c      	movs	r2, #12
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e055      	b.n	80027d6 <state_machine+0x106e>
 800272a:	bf00      	nop
 800272c:	20001a24 	.word	0x20001a24
 8002730:	20041870 	.word	0x20041870
 8002734:	2004186c 	.word	0x2004186c
 8002738:	20001804 	.word	0x20001804
 800273c:	20001808 	.word	0x20001808
 8002740:	20041884 	.word	0x20041884
 8002744:	20001a28 	.word	0x20001a28
 8002748:	200018f0 	.word	0x200018f0
 800274c:	200019b0 	.word	0x200019b0
 8002750:	200019c0 	.word	0x200019c0
 8002754:	200019d8 	.word	0x200019d8
 8002758:	20001914 	.word	0x20001914
 800275c:	200019f0 	.word	0x200019f0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <state_machine+0x1010>
 800276a:	4b8c      	ldr	r3, [pc, #560]	; (800299c <state_machine+0x1234>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	4b8b      	ldr	r3, [pc, #556]	; (80029a0 <state_machine+0x1238>)
 8002772:	220d      	movs	r2, #13
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e02e      	b.n	80027d6 <state_machine+0x106e>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <state_machine+0x1028>
 8002782:	4b86      	ldr	r3, [pc, #536]	; (800299c <state_machine+0x1234>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	4b85      	ldr	r3, [pc, #532]	; (80029a0 <state_machine+0x1238>)
 800278a:	220e      	movs	r2, #14
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e022      	b.n	80027d6 <state_machine+0x106e>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <state_machine+0x1040>
 800279a:	4b80      	ldr	r3, [pc, #512]	; (800299c <state_machine+0x1234>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	4b7f      	ldr	r3, [pc, #508]	; (80029a0 <state_machine+0x1238>)
 80027a2:	220f      	movs	r2, #15
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e016      	b.n	80027d6 <state_machine+0x106e>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <state_machine+0x1058>
 80027b2:	4b7a      	ldr	r3, [pc, #488]	; (800299c <state_machine+0x1234>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	4b79      	ldr	r3, [pc, #484]	; (80029a0 <state_machine+0x1238>)
 80027ba:	2210      	movs	r2, #16
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e00a      	b.n	80027d6 <state_machine+0x106e>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <state_machine+0x106e>
 80027ca:	4b74      	ldr	r3, [pc, #464]	; (800299c <state_machine+0x1234>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <state_machine+0x1238>)
 80027d2:	2211      	movs	r2, #17
 80027d4:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 80027d6:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <state_machine+0x123c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11f      	bne.n	800281e <state_machine+0x10b6>
 80027de:	4b71      	ldr	r3, [pc, #452]	; (80029a4 <state_machine+0x123c>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01a      	beq.n	8002824 <state_machine+0x10bc>
 80027ee:	4b6e      	ldr	r3, [pc, #440]	; (80029a8 <state_machine+0x1240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d103      	bne.n	80027fe <state_machine+0x1096>
 80027f6:	4b6c      	ldr	r3, [pc, #432]	; (80029a8 <state_machine+0x1240>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e004      	b.n	8002808 <state_machine+0x10a0>
 80027fe:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <state_machine+0x1240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a68      	ldr	r2, [pc, #416]	; (80029a8 <state_machine+0x1240>)
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <state_machine+0x1240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a67      	ldr	r2, [pc, #412]	; (80029ac <state_machine+0x1244>)
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	2200      	movs	r2, #0
 8002814:	4619      	mov	r1, r3
 8002816:	4866      	ldr	r0, [pc, #408]	; (80029b0 <state_machine+0x1248>)
 8002818:	f003 fc60 	bl	80060dc <HAL_LTDC_SetAlpha>
 800281c:	e002      	b.n	8002824 <state_machine+0x10bc>
 800281e:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <state_machine+0x123c>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
			check_switch();
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8303 	bne.w	8002e32 <state_machine+0x16ca>
 800282c:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <state_machine+0x1238>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <state_machine+0x124c>)
 8002834:	22b4      	movs	r2, #180	; 0xb4
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	4b58      	ldr	r3, [pc, #352]	; (800299c <state_machine+0x1234>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]
			break;			
 800283e:	e2f8      	b.n	8002e32 <state_machine+0x16ca>
		}
		case 14:{
			if(need_out){
 8002840:	4b56      	ldr	r3, [pc, #344]	; (800299c <state_machine+0x1234>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <state_machine+0x110c>
				fill_screen(0);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fecd 	bl	80015e8 <fill_screen>
				print_string(10, 40, state14_string, 0x797);
 800284e:	f240 7397 	movw	r3, #1943	; 0x797
 8002852:	4a59      	ldr	r2, [pc, #356]	; (80029b8 <state_machine+0x1250>)
 8002854:	2128      	movs	r1, #40	; 0x28
 8002856:	200a      	movs	r0, #10
 8002858:	f7fe fe48 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state14_string_2, 0x797, 3);
 800285c:	2303      	movs	r3, #3
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	f240 7397 	movw	r3, #1943	; 0x797
 8002864:	4a55      	ldr	r2, [pc, #340]	; (80029bc <state_machine+0x1254>)
 8002866:	2164      	movs	r1, #100	; 0x64
 8002868:	200a      	movs	r0, #10
 800286a:	f7fe fe65 	bl	8001538 <print_string_scaled>
				need_out = 0;
 800286e:	4b4b      	ldr	r3, [pc, #300]	; (800299c <state_machine+0x1234>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <state_machine+0x1124>
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <state_machine+0x1234>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <state_machine+0x1238>)
 8002886:	220a      	movs	r2, #10
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e052      	b.n	8002932 <state_machine+0x11ca>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <state_machine+0x113c>
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <state_machine+0x1234>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <state_machine+0x1238>)
 800289e:	220b      	movs	r2, #11
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e046      	b.n	8002932 <state_machine+0x11ca>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <state_machine+0x1154>
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <state_machine+0x1234>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <state_machine+0x1238>)
 80028b6:	220c      	movs	r2, #12
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e03a      	b.n	8002932 <state_machine+0x11ca>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <state_machine+0x116c>
 80028c6:	4b35      	ldr	r3, [pc, #212]	; (800299c <state_machine+0x1234>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <state_machine+0x1238>)
 80028ce:	220d      	movs	r2, #13
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e02e      	b.n	8002932 <state_machine+0x11ca>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <state_machine+0x1184>
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <state_machine+0x1234>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <state_machine+0x1238>)
 80028e6:	220e      	movs	r2, #14
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e022      	b.n	8002932 <state_machine+0x11ca>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <state_machine+0x119c>
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <state_machine+0x1234>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <state_machine+0x1238>)
 80028fe:	220f      	movs	r2, #15
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e016      	b.n	8002932 <state_machine+0x11ca>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <state_machine+0x11b4>
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <state_machine+0x1234>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <state_machine+0x1238>)
 8002916:	2210      	movs	r2, #16
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e00a      	b.n	8002932 <state_machine+0x11ca>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <state_machine+0x11ca>
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <state_machine+0x1234>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <state_machine+0x1238>)
 800292e:	2211      	movs	r2, #17
 8002930:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <state_machine+0x123c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d11f      	bne.n	800297a <state_machine+0x1212>
 800293a:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <state_machine+0x123c>)
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01a      	beq.n	8002980 <state_machine+0x1218>
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <state_machine+0x1240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d103      	bne.n	800295a <state_machine+0x11f2>
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <state_machine+0x1240>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e004      	b.n	8002964 <state_machine+0x11fc>
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <state_machine+0x1240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <state_machine+0x1240>)
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <state_machine+0x1240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a10      	ldr	r2, [pc, #64]	; (80029ac <state_machine+0x1244>)
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	2200      	movs	r2, #0
 8002970:	4619      	mov	r1, r3
 8002972:	480f      	ldr	r0, [pc, #60]	; (80029b0 <state_machine+0x1248>)
 8002974:	f003 fbb2 	bl	80060dc <HAL_LTDC_SetAlpha>
 8002978:	e002      	b.n	8002980 <state_machine+0x1218>
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <state_machine+0x123c>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
			check_switch();
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 8257 	bne.w	8002e36 <state_machine+0x16ce>
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <state_machine+0x1238>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <state_machine+0x124c>)
 8002990:	22b4      	movs	r2, #180	; 0xb4
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	4b01      	ldr	r3, [pc, #4]	; (800299c <state_machine+0x1234>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
			break;			
 800299a:	e24c      	b.n	8002e36 <state_machine+0x16ce>
 800299c:	20001a24 	.word	0x20001a24
 80029a0:	20041870 	.word	0x20041870
 80029a4:	2004186c 	.word	0x2004186c
 80029a8:	20001804 	.word	0x20001804
 80029ac:	20001808 	.word	0x20001808
 80029b0:	20041884 	.word	0x20041884
 80029b4:	20001a28 	.word	0x20001a28
 80029b8:	20001934 	.word	0x20001934
 80029bc:	200019fc 	.word	0x200019fc
		}
		case 15:{
			if(need_out){
 80029c0:	4b8d      	ldr	r3, [pc, #564]	; (8002bf8 <state_machine+0x1490>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d015      	beq.n	80029f4 <state_machine+0x128c>
				fill_screen(0);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe fe0d 	bl	80015e8 <fill_screen>
				print_string(10, 40, state15_string, 0x797);
 80029ce:	f240 7397 	movw	r3, #1943	; 0x797
 80029d2:	4a8a      	ldr	r2, [pc, #552]	; (8002bfc <state_machine+0x1494>)
 80029d4:	2128      	movs	r1, #40	; 0x28
 80029d6:	200a      	movs	r0, #10
 80029d8:	f7fe fd88 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state15_string_2, 0x797, 2);
 80029dc:	2302      	movs	r3, #2
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f240 7397 	movw	r3, #1943	; 0x797
 80029e4:	4a86      	ldr	r2, [pc, #536]	; (8002c00 <state_machine+0x1498>)
 80029e6:	2164      	movs	r1, #100	; 0x64
 80029e8:	200a      	movs	r0, #10
 80029ea:	f7fe fda5 	bl	8001538 <print_string_scaled>
				need_out = 0;
 80029ee:	4b82      	ldr	r3, [pc, #520]	; (8002bf8 <state_machine+0x1490>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <state_machine+0x12a4>
 80029fe:	4b7e      	ldr	r3, [pc, #504]	; (8002bf8 <state_machine+0x1490>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	4b7f      	ldr	r3, [pc, #508]	; (8002c04 <state_machine+0x149c>)
 8002a06:	220a      	movs	r2, #10
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e052      	b.n	8002ab2 <state_machine+0x134a>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <state_machine+0x12bc>
 8002a16:	4b78      	ldr	r3, [pc, #480]	; (8002bf8 <state_machine+0x1490>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	4b79      	ldr	r3, [pc, #484]	; (8002c04 <state_machine+0x149c>)
 8002a1e:	220b      	movs	r2, #11
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e046      	b.n	8002ab2 <state_machine+0x134a>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <state_machine+0x12d4>
 8002a2e:	4b72      	ldr	r3, [pc, #456]	; (8002bf8 <state_machine+0x1490>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	4b73      	ldr	r3, [pc, #460]	; (8002c04 <state_machine+0x149c>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e03a      	b.n	8002ab2 <state_machine+0x134a>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d006      	beq.n	8002a54 <state_machine+0x12ec>
 8002a46:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <state_machine+0x1490>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <state_machine+0x149c>)
 8002a4e:	220d      	movs	r2, #13
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e02e      	b.n	8002ab2 <state_machine+0x134a>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <state_machine+0x1304>
 8002a5e:	4b66      	ldr	r3, [pc, #408]	; (8002bf8 <state_machine+0x1490>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <state_machine+0x149c>)
 8002a66:	220e      	movs	r2, #14
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e022      	b.n	8002ab2 <state_machine+0x134a>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <state_machine+0x131c>
 8002a76:	4b60      	ldr	r3, [pc, #384]	; (8002bf8 <state_machine+0x1490>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	4b61      	ldr	r3, [pc, #388]	; (8002c04 <state_machine+0x149c>)
 8002a7e:	220f      	movs	r2, #15
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e016      	b.n	8002ab2 <state_machine+0x134a>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <state_machine+0x1334>
 8002a8e:	4b5a      	ldr	r3, [pc, #360]	; (8002bf8 <state_machine+0x1490>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <state_machine+0x149c>)
 8002a96:	2210      	movs	r2, #16
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e00a      	b.n	8002ab2 <state_machine+0x134a>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <state_machine+0x134a>
 8002aa6:	4b54      	ldr	r3, [pc, #336]	; (8002bf8 <state_machine+0x1490>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	4b55      	ldr	r3, [pc, #340]	; (8002c04 <state_machine+0x149c>)
 8002aae:	2211      	movs	r2, #17
 8002ab0:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002ab2:	4b55      	ldr	r3, [pc, #340]	; (8002c08 <state_machine+0x14a0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d11f      	bne.n	8002afa <state_machine+0x1392>
 8002aba:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <state_machine+0x14a0>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01a      	beq.n	8002b00 <state_machine+0x1398>
 8002aca:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <state_machine+0x14a4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d103      	bne.n	8002ada <state_machine+0x1372>
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <state_machine+0x14a4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e004      	b.n	8002ae4 <state_machine+0x137c>
 8002ada:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <state_machine+0x14a4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <state_machine+0x14a4>)
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <state_machine+0x14a4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <state_machine+0x14a8>)
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	2200      	movs	r2, #0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4848      	ldr	r0, [pc, #288]	; (8002c14 <state_machine+0x14ac>)
 8002af4:	f003 faf2 	bl	80060dc <HAL_LTDC_SetAlpha>
 8002af8:	e002      	b.n	8002b00 <state_machine+0x1398>
 8002afa:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <state_machine+0x14a0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
			check_switch();
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 8199 	bne.w	8002e3a <state_machine+0x16d2>
 8002b08:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <state_machine+0x149c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	4b42      	ldr	r3, [pc, #264]	; (8002c18 <state_machine+0x14b0>)
 8002b10:	22b4      	movs	r2, #180	; 0xb4
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	4b38      	ldr	r3, [pc, #224]	; (8002bf8 <state_machine+0x1490>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
			break;			
 8002b1a:	e18e      	b.n	8002e3a <state_machine+0x16d2>
		}
		case 16:{
			if(need_out){
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <state_machine+0x1490>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <state_machine+0x13e8>
				fill_screen(0);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7fe fd5f 	bl	80015e8 <fill_screen>
				print_string(10, 40, state16_string, 0x797);
 8002b2a:	f240 7397 	movw	r3, #1943	; 0x797
 8002b2e:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <state_machine+0x14b4>)
 8002b30:	2128      	movs	r1, #40	; 0x28
 8002b32:	200a      	movs	r0, #10
 8002b34:	f7fe fcda 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state16_string_2, 0x797, 3);
 8002b38:	2303      	movs	r3, #3
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	f240 7397 	movw	r3, #1943	; 0x797
 8002b40:	4a37      	ldr	r2, [pc, #220]	; (8002c20 <state_machine+0x14b8>)
 8002b42:	2164      	movs	r1, #100	; 0x64
 8002b44:	200a      	movs	r0, #10
 8002b46:	f7fe fcf7 	bl	8001538 <print_string_scaled>
				need_out = 0;
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <state_machine+0x1490>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <state_machine+0x1400>
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <state_machine+0x1490>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <state_machine+0x149c>)
 8002b62:	220a      	movs	r2, #10
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e068      	b.n	8002c3a <state_machine+0x14d2>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <state_machine+0x1418>
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <state_machine+0x1490>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <state_machine+0x149c>)
 8002b7a:	220b      	movs	r2, #11
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e05c      	b.n	8002c3a <state_machine+0x14d2>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <state_machine+0x1430>
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <state_machine+0x1490>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <state_machine+0x149c>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e050      	b.n	8002c3a <state_machine+0x14d2>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <state_machine+0x1448>
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <state_machine+0x1490>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <state_machine+0x149c>)
 8002baa:	220d      	movs	r2, #13
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e044      	b.n	8002c3a <state_machine+0x14d2>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <state_machine+0x1460>
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <state_machine+0x1490>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <state_machine+0x149c>)
 8002bc2:	220e      	movs	r2, #14
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e038      	b.n	8002c3a <state_machine+0x14d2>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d006      	beq.n	8002be0 <state_machine+0x1478>
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <state_machine+0x1490>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <state_machine+0x149c>)
 8002bda:	220f      	movs	r2, #15
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e02c      	b.n	8002c3a <state_machine+0x14d2>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01c      	beq.n	8002c24 <state_machine+0x14bc>
 8002bea:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <state_machine+0x1490>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <state_machine+0x149c>)
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e020      	b.n	8002c3a <state_machine+0x14d2>
 8002bf8:	20001a24 	.word	0x20001a24
 8002bfc:	20001948 	.word	0x20001948
 8002c00:	20001a04 	.word	0x20001a04
 8002c04:	20041870 	.word	0x20041870
 8002c08:	2004186c 	.word	0x2004186c
 8002c0c:	20001804 	.word	0x20001804
 8002c10:	20001808 	.word	0x20001808
 8002c14:	20041884 	.word	0x20041884
 8002c18:	20001a28 	.word	0x20001a28
 8002c1c:	20001960 	.word	0x20001960
 8002c20:	20001a14 	.word	0x20001a14
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <state_machine+0x14d2>
 8002c2e:	4b87      	ldr	r3, [pc, #540]	; (8002e4c <state_machine+0x16e4>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	4b86      	ldr	r3, [pc, #536]	; (8002e50 <state_machine+0x16e8>)
 8002c36:	2211      	movs	r2, #17
 8002c38:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002c3a:	4b86      	ldr	r3, [pc, #536]	; (8002e54 <state_machine+0x16ec>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11f      	bne.n	8002c82 <state_machine+0x151a>
 8002c42:	4b84      	ldr	r3, [pc, #528]	; (8002e54 <state_machine+0x16ec>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01a      	beq.n	8002c88 <state_machine+0x1520>
 8002c52:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <state_machine+0x16f0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d103      	bne.n	8002c62 <state_machine+0x14fa>
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <state_machine+0x16f0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e004      	b.n	8002c6c <state_machine+0x1504>
 8002c62:	4b7d      	ldr	r3, [pc, #500]	; (8002e58 <state_machine+0x16f0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4a7b      	ldr	r2, [pc, #492]	; (8002e58 <state_machine+0x16f0>)
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b7a      	ldr	r3, [pc, #488]	; (8002e58 <state_machine+0x16f0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a7a      	ldr	r2, [pc, #488]	; (8002e5c <state_machine+0x16f4>)
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	2200      	movs	r2, #0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4879      	ldr	r0, [pc, #484]	; (8002e60 <state_machine+0x16f8>)
 8002c7c:	f003 fa2e 	bl	80060dc <HAL_LTDC_SetAlpha>
 8002c80:	e002      	b.n	8002c88 <state_machine+0x1520>
 8002c82:	4b74      	ldr	r3, [pc, #464]	; (8002e54 <state_machine+0x16ec>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
			check_switch();
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 80d7 	bne.w	8002e3e <state_machine+0x16d6>
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <state_machine+0x16e8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <state_machine+0x16fc>)
 8002c98:	22b4      	movs	r2, #180	; 0xb4
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <state_machine+0x16e4>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
			break;			
 8002ca2:	e0cc      	b.n	8002e3e <state_machine+0x16d6>
		}
		case 17:{
			if(need_out){
 8002ca4:	4b69      	ldr	r3, [pc, #420]	; (8002e4c <state_machine+0x16e4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d015      	beq.n	8002cd8 <state_machine+0x1570>
				fill_screen(0);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fe fc9b 	bl	80015e8 <fill_screen>
				print_string(10, 40, state17_string, 0x797);
 8002cb2:	f240 7397 	movw	r3, #1943	; 0x797
 8002cb6:	4a6c      	ldr	r2, [pc, #432]	; (8002e68 <state_machine+0x1700>)
 8002cb8:	2128      	movs	r1, #40	; 0x28
 8002cba:	200a      	movs	r0, #10
 8002cbc:	f7fe fc16 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state17_string_2, 0x797, 3);
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	f240 7397 	movw	r3, #1943	; 0x797
 8002cc8:	4a68      	ldr	r2, [pc, #416]	; (8002e6c <state_machine+0x1704>)
 8002cca:	2164      	movs	r1, #100	; 0x64
 8002ccc:	200a      	movs	r0, #10
 8002cce:	f7fe fc33 	bl	8001538 <print_string_scaled>
				need_out = 0;
 8002cd2:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <state_machine+0x16e4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <state_machine+0x1588>
 8002ce2:	4b5a      	ldr	r3, [pc, #360]	; (8002e4c <state_machine+0x16e4>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <state_machine+0x16e8>)
 8002cea:	220a      	movs	r2, #10
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e052      	b.n	8002d96 <state_machine+0x162e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <state_machine+0x15a0>
 8002cfa:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <state_machine+0x16e4>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <state_machine+0x16e8>)
 8002d02:	220b      	movs	r2, #11
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e046      	b.n	8002d96 <state_machine+0x162e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <state_machine+0x15b8>
 8002d12:	4b4e      	ldr	r3, [pc, #312]	; (8002e4c <state_machine+0x16e4>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	4b4d      	ldr	r3, [pc, #308]	; (8002e50 <state_machine+0x16e8>)
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e03a      	b.n	8002d96 <state_machine+0x162e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d006      	beq.n	8002d38 <state_machine+0x15d0>
 8002d2a:	4b48      	ldr	r3, [pc, #288]	; (8002e4c <state_machine+0x16e4>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <state_machine+0x16e8>)
 8002d32:	220d      	movs	r2, #13
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e02e      	b.n	8002d96 <state_machine+0x162e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <state_machine+0x15e8>
 8002d42:	4b42      	ldr	r3, [pc, #264]	; (8002e4c <state_machine+0x16e4>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <state_machine+0x16e8>)
 8002d4a:	220e      	movs	r2, #14
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e022      	b.n	8002d96 <state_machine+0x162e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <state_machine+0x1600>
 8002d5a:	4b3c      	ldr	r3, [pc, #240]	; (8002e4c <state_machine+0x16e4>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <state_machine+0x16e8>)
 8002d62:	220f      	movs	r2, #15
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e016      	b.n	8002d96 <state_machine+0x162e>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <state_machine+0x1618>
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <state_machine+0x16e4>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <state_machine+0x16e8>)
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e00a      	b.n	8002d96 <state_machine+0x162e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <state_machine+0x162e>
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <state_machine+0x16e4>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <state_machine+0x16e8>)
 8002d92:	2211      	movs	r2, #17
 8002d94:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <state_machine+0x16ec>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11f      	bne.n	8002dde <state_machine+0x1676>
 8002d9e:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <state_machine+0x16ec>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01a      	beq.n	8002de4 <state_machine+0x167c>
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <state_machine+0x16f0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d103      	bne.n	8002dbe <state_machine+0x1656>
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <state_machine+0x16f0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e004      	b.n	8002dc8 <state_machine+0x1660>
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <state_machine+0x16f0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <state_machine+0x16f0>)
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <state_machine+0x16f0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <state_machine+0x16f4>)
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4822      	ldr	r0, [pc, #136]	; (8002e60 <state_machine+0x16f8>)
 8002dd8:	f003 f980 	bl	80060dc <HAL_LTDC_SetAlpha>
 8002ddc:	e002      	b.n	8002de4 <state_machine+0x167c>
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <state_machine+0x16ec>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
			check_switch();
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d12b      	bne.n	8002e42 <state_machine+0x16da>
 8002dea:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <state_machine+0x16e8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <state_machine+0x16fc>)
 8002df2:	22b4      	movs	r2, #180	; 0xb4
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <state_machine+0x16e4>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
			break;			
 8002dfc:	e021      	b.n	8002e42 <state_machine+0x16da>
			break;
 8002dfe:	bf00      	nop
 8002e00:	e020      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e02:	bf00      	nop
 8002e04:	e01e      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e06:	bf00      	nop
 8002e08:	e01c      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e0a:	bf00      	nop
 8002e0c:	e01a      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e0e:	bf00      	nop
 8002e10:	e018      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e12:	bf00      	nop
 8002e14:	e016      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e16:	bf00      	nop
 8002e18:	e014      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e1a:	bf00      	nop
 8002e1c:	e012      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e1e:	bf00      	nop
 8002e20:	e010      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e22:	bf00      	nop
 8002e24:	e00e      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e26:	bf00      	nop
 8002e28:	e00c      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e2a:	bf00      	nop
 8002e2c:	e00a      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e2e:	bf00      	nop
 8002e30:	e008      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e32:	bf00      	nop
 8002e34:	e006      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e36:	bf00      	nop
 8002e38:	e004      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e3a:	bf00      	nop
 8002e3c:	e002      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e42:	bf00      	nop
		}																				
	}
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20001a24 	.word	0x20001a24
 8002e50:	20041870 	.word	0x20041870
 8002e54:	2004186c 	.word	0x2004186c
 8002e58:	20001804 	.word	0x20001804
 8002e5c:	20001808 	.word	0x20001808
 8002e60:	20041884 	.word	0x20041884
 8002e64:	20001a28 	.word	0x20001a28
 8002e68:	20001974 	.word	0x20001974
 8002e6c:	20001a1c 	.word	0x20001a1c

08002e70 <tcp_ether_init>:

static struct netbuf *netbuf;
char mb_req_buf[MB_ADU_MAXSIZE];
char mb_repl_buf[MB_ADU_MAXSIZE];

int tcp_ether_init(){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
	conn = netconn_new(NETCONN_TCP);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2010      	movs	r0, #16
 8002e7c:	f009 fd14 	bl	800c8a8 <netconn_new_with_proto_and_callback>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <tcp_ether_init+0x6c>)
 8002e84:	6013      	str	r3, [r2, #0]
	if(conn == NULL){return -1;}
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <tcp_ether_init+0x6c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d102      	bne.n	8002e94 <tcp_ether_init+0x24>
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e92:	e01f      	b.n	8002ed4 <tcp_ether_init+0x64>
	if(netconn_bind(conn, IP_ADDR_ANY, 502) == ERR_OK){
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <tcp_ether_init+0x6c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8002e9c:	4910      	ldr	r1, [pc, #64]	; (8002ee0 <tcp_ether_init+0x70>)
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f009 fd7c 	bl	800c99c <netconn_bind>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d112      	bne.n	8002ed0 <tcp_ether_init+0x60>
		netconn_listen(conn);
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <tcp_ether_init+0x6c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	21ff      	movs	r1, #255	; 0xff
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f009 fdab 	bl	800ca0c <netconn_listen_with_backlog>
		for(;;){
			int stt = 228;
 8002eb6:	23e4      	movs	r3, #228	; 0xe4
 8002eb8:	607b      	str	r3, [r7, #4]
			if(netconn_accept(conn, &newconn) == ERR_OK){
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <tcp_ether_init+0x6c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4909      	ldr	r1, [pc, #36]	; (8002ee4 <tcp_ether_init+0x74>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f009 fdcf 	bl	800ca64 <netconn_accept>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f4      	bne.n	8002eb6 <tcp_ether_init+0x46>
				return 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e001      	b.n	8002ed4 <tcp_ether_init+0x64>
			}
		}
	}else{
		return -2;
 8002ed0:	f06f 0301 	mvn.w	r3, #1
	}
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	2004187c 	.word	0x2004187c
 8002ee0:	0801d880 	.word	0x0801d880
 8002ee4:	20041880 	.word	0x20041880

08002ee8 <inf_loop>:
  .name = "myTask",
  .stack_size = 512 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* USER CODE BEGIN PV */
void inf_loop(){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	print_string(10, 40, "TEST!", 0x797);
 8002eec:	f240 7397 	movw	r3, #1943	; 0x797
 8002ef0:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <inf_loop+0x20>)
 8002ef2:	2128      	movs	r1, #40	; 0x28
 8002ef4:	200a      	movs	r0, #10
 8002ef6:	f7fe faf9 	bl	80014ec <print_string>

	for(;;){
		state_machine();
 8002efa:	f7fe fc35 	bl	8001768 <state_machine>
		//state_ether();
		osDelay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f005 fdba 	bl	8008a78 <osDelay>
		state_machine();
 8002f04:	e7f9      	b.n	8002efa <inf_loop+0x12>
 8002f06:	bf00      	nop
 8002f08:	0801a310 	.word	0x0801a310

08002f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f10:	f001 f99b 	bl	800424a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f14:	f000 f830 	bl	8002f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f18:	f000 f918 	bl	800314c <MX_GPIO_Init>
  MX_LTDC_Init();
 8002f1c:	f000 f894 	bl	8003048 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuf, LTDC_LAYER_1);
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <main+0x4c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	4619      	mov	r1, r3
 8002f26:	480d      	ldr	r0, [pc, #52]	; (8002f5c <main+0x50>)
 8002f28:	f003 f90e 	bl	8006148 <HAL_LTDC_SetAddress>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002f2c:	f005 fc6c 	bl	8008808 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002f30:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <main+0x54>)
 8002f32:	2100      	movs	r1, #0
 8002f34:	480b      	ldr	r0, [pc, #44]	; (8002f64 <main+0x58>)
 8002f36:	f005 fcf9 	bl	800892c <osThreadNew>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <main+0x5c>)
 8002f3e:	6013      	str	r3, [r2, #0]

  /* creation of myTask */
  myTaskHandle = osThreadNew(StartTaskEtherStates, NULL, &myTask_attributes);
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <main+0x60>)
 8002f42:	2100      	movs	r1, #0
 8002f44:	480a      	ldr	r0, [pc, #40]	; (8002f70 <main+0x64>)
 8002f46:	f005 fcf1 	bl	800892c <osThreadNew>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <main+0x68>)
 8002f4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002f50:	f005 fc8e 	bl	8008870 <osKernelStart>
  /* USER CODE BEGIN WHILE */




	while (1)
 8002f54:	e7fe      	b.n	8002f54 <main+0x48>
 8002f56:	bf00      	nop
 8002f58:	20001c6c 	.word	0x20001c6c
 8002f5c:	20041884 	.word	0x20041884
 8002f60:	0801d700 	.word	0x0801d700
 8002f64:	08003985 	.word	0x08003985
 8002f68:	2004192c 	.word	0x2004192c
 8002f6c:	0801d724 	.word	0x0801d724
 8002f70:	080039a1 	.word	0x080039a1
 8002f74:	20041930 	.word	0x20041930

08002f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b094      	sub	sp, #80	; 0x50
 8002f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f7e:	f107 0320 	add.w	r3, r7, #32
 8002f82:	2230      	movs	r2, #48	; 0x30
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f016 f9e3 	bl	8019352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <SystemClock_Config+0xc8>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a27      	ldr	r2, [pc, #156]	; (8003040 <SystemClock_Config+0xc8>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <SystemClock_Config+0xc8>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002fb4:	4b23      	ldr	r3, [pc, #140]	; (8003044 <SystemClock_Config+0xcc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fbc:	4a21      	ldr	r2, [pc, #132]	; (8003044 <SystemClock_Config+0xcc>)
 8002fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <SystemClock_Config+0xcc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fd8:	2310      	movs	r3, #16
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002fe4:	230f      	movs	r3, #15
 8002fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002fe8:	23d8      	movs	r3, #216	; 0xd8
 8002fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fec:	2302      	movs	r3, #2
 8002fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff4:	f107 0320 	add.w	r3, r7, #32
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 fa75 	bl	80064e8 <HAL_RCC_OscConfig>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003004:	f000 fd00 	bl	8003a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003008:	230f      	movs	r3, #15
 800300a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800300c:	2302      	movs	r3, #2
 800300e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003014:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800301a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	2103      	movs	r1, #3
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fd02 	bl	8006a30 <HAL_RCC_ClockConfig>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003032:	f000 fce9 	bl	8003a08 <Error_Handler>
  }
}
 8003036:	bf00      	nop
 8003038:	3750      	adds	r7, #80	; 0x50
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	40007000 	.word	0x40007000

08003048 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08e      	sub	sp, #56	; 0x38
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	2234      	movs	r2, #52	; 0x34
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f016 f97c 	bl	8019352 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800305a:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <MX_LTDC_Init+0xfc>)
 800305c:	4a3a      	ldr	r2, [pc, #232]	; (8003148 <MX_LTDC_Init+0x100>)
 800305e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003060:	4b38      	ldr	r3, [pc, #224]	; (8003144 <MX_LTDC_Init+0xfc>)
 8003062:	2200      	movs	r2, #0
 8003064:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003066:	4b37      	ldr	r3, [pc, #220]	; (8003144 <MX_LTDC_Init+0xfc>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800306c:	4b35      	ldr	r3, [pc, #212]	; (8003144 <MX_LTDC_Init+0xfc>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003072:	4b34      	ldr	r3, [pc, #208]	; (8003144 <MX_LTDC_Init+0xfc>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8003078:	4b32      	ldr	r3, [pc, #200]	; (8003144 <MX_LTDC_Init+0xfc>)
 800307a:	2200      	movs	r2, #0
 800307c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800307e:	4b31      	ldr	r3, [pc, #196]	; (8003144 <MX_LTDC_Init+0xfc>)
 8003080:	2209      	movs	r2, #9
 8003082:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8003084:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <MX_LTDC_Init+0xfc>)
 8003086:	222b      	movs	r2, #43	; 0x2b
 8003088:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 800308a:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <MX_LTDC_Init+0xfc>)
 800308c:	2215      	movs	r2, #21
 800308e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8003090:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <MX_LTDC_Init+0xfc>)
 8003092:	f240 220b 	movw	r2, #523	; 0x20b
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8003098:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <MX_LTDC_Init+0xfc>)
 800309a:	f240 1225 	movw	r2, #293	; 0x125
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <MX_LTDC_Init+0xfc>)
 80030a2:	f240 2213 	movw	r2, #531	; 0x213
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 80030a8:	4b26      	ldr	r3, [pc, #152]	; (8003144 <MX_LTDC_Init+0xfc>)
 80030aa:	f240 1229 	movw	r2, #297	; 0x129
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80030b0:	4b24      	ldr	r3, [pc, #144]	; (8003144 <MX_LTDC_Init+0xfc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80030b8:	4b22      	ldr	r3, [pc, #136]	; (8003144 <MX_LTDC_Init+0xfc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <MX_LTDC_Init+0xfc>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80030c8:	481e      	ldr	r0, [pc, #120]	; (8003144 <MX_LTDC_Init+0xfc>)
 80030ca:	f002 fe37 	bl	8005d3c <HAL_LTDC_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80030d4:	f000 fc98 	bl	8003a08 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80030dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80030e0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80030e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80030ea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80030ec:	2302      	movs	r3, #2
 80030ee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80030f0:	23ff      	movs	r3, #255	; 0xff
 80030f2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80030f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80030fe:	2305      	movs	r3, #5
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8003106:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800310c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	2200      	movs	r2, #0
 8003128:	4619      	mov	r1, r3
 800312a:	4806      	ldr	r0, [pc, #24]	; (8003144 <MX_LTDC_Init+0xfc>)
 800312c:	f002 ff98 	bl	8006060 <HAL_LTDC_ConfigLayer>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8003136:	f000 fc67 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800313a:	bf00      	nop
 800313c:	3738      	adds	r7, #56	; 0x38
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20041884 	.word	0x20041884
 8003148:	40016800 	.word	0x40016800

0800314c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b090      	sub	sp, #64	; 0x40
 8003150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	60da      	str	r2, [r3, #12]
 8003160:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003162:	4bae      	ldr	r3, [pc, #696]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4aad      	ldr	r2, [pc, #692]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4bab      	ldr	r3, [pc, #684]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800317a:	4ba8      	ldr	r3, [pc, #672]	; (800341c <MX_GPIO_Init+0x2d0>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4aa7      	ldr	r2, [pc, #668]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4ba5      	ldr	r3, [pc, #660]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003192:	4ba2      	ldr	r3, [pc, #648]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4aa1      	ldr	r2, [pc, #644]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b9f      	ldr	r3, [pc, #636]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031aa:	4b9c      	ldr	r3, [pc, #624]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a9b      	ldr	r2, [pc, #620]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b99      	ldr	r3, [pc, #612]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c2:	4b96      	ldr	r3, [pc, #600]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a95      	ldr	r2, [pc, #596]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b93      	ldr	r3, [pc, #588]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	4b90      	ldr	r3, [pc, #576]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a8f      	ldr	r2, [pc, #572]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b8d      	ldr	r3, [pc, #564]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80031f2:	4b8a      	ldr	r3, [pc, #552]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a89      	ldr	r2, [pc, #548]	; (800341c <MX_GPIO_Init+0x2d0>)
 80031f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b87      	ldr	r3, [pc, #540]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800320a:	4b84      	ldr	r3, [pc, #528]	; (800341c <MX_GPIO_Init+0x2d0>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a83      	ldr	r2, [pc, #524]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b81      	ldr	r3, [pc, #516]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003222:	4b7e      	ldr	r3, [pc, #504]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a7d      	ldr	r2, [pc, #500]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b7b      	ldr	r3, [pc, #492]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800323a:	4b78      	ldr	r3, [pc, #480]	; (800341c <MX_GPIO_Init+0x2d0>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a77      	ldr	r2, [pc, #476]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003240:	f043 0320 	orr.w	r3, r3, #32
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b75      	ldr	r3, [pc, #468]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003252:	4b72      	ldr	r3, [pc, #456]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a71      	ldr	r2, [pc, #452]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <MX_GPIO_Init+0x2d0>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800326a:	2201      	movs	r2, #1
 800326c:	2120      	movs	r1, #32
 800326e:	486c      	ldr	r0, [pc, #432]	; (8003420 <MX_GPIO_Init+0x2d4>)
 8003270:	f002 fd4a 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003274:	2200      	movs	r2, #0
 8003276:	210c      	movs	r1, #12
 8003278:	486a      	ldr	r0, [pc, #424]	; (8003424 <MX_GPIO_Init+0x2d8>)
 800327a:	f002 fd45 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800327e:	2201      	movs	r2, #1
 8003280:	2108      	movs	r1, #8
 8003282:	4869      	ldr	r0, [pc, #420]	; (8003428 <MX_GPIO_Init+0x2dc>)
 8003284:	f002 fd40 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8003288:	2201      	movs	r2, #1
 800328a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800328e:	4865      	ldr	r0, [pc, #404]	; (8003424 <MX_GPIO_Init+0x2d8>)
 8003290:	f002 fd3a 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800329a:	4864      	ldr	r0, [pc, #400]	; (800342c <MX_GPIO_Init+0x2e0>)
 800329c:	f002 fd34 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80032a0:	2200      	movs	r2, #0
 80032a2:	21c8      	movs	r1, #200	; 0xc8
 80032a4:	4862      	ldr	r0, [pc, #392]	; (8003430 <MX_GPIO_Init+0x2e4>)
 80032a6:	f002 fd2f 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80032aa:	2308      	movs	r3, #8
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ae:	2300      	movs	r3, #0
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80032b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ba:	4619      	mov	r1, r3
 80032bc:	485d      	ldr	r0, [pc, #372]	; (8003434 <MX_GPIO_Init+0x2e8>)
 80032be:	f002 fb5f 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80032c2:	2304      	movs	r3, #4
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80032d2:	2309      	movs	r3, #9
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80032d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032da:	4619      	mov	r1, r3
 80032dc:	4855      	ldr	r0, [pc, #340]	; (8003434 <MX_GPIO_Init+0x2e8>)
 80032de:	f002 fb4f 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80032e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e8:	2302      	movs	r3, #2
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f0:	2303      	movs	r3, #3
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032f4:	230c      	movs	r3, #12
 80032f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032fc:	4619      	mov	r1, r3
 80032fe:	484d      	ldr	r0, [pc, #308]	; (8003434 <MX_GPIO_Init+0x2e8>)
 8003300:	f002 fb3e 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003304:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800330a:	2312      	movs	r3, #18
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003312:	2300      	movs	r3, #0
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003316:	2304      	movs	r3, #4
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800331e:	4619      	mov	r1, r3
 8003320:	4845      	ldr	r0, [pc, #276]	; (8003438 <MX_GPIO_Init+0x2ec>)
 8003322:	f002 fb2d 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8003326:	f643 4323 	movw	r3, #15395	; 0x3c23
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003334:	2303      	movs	r3, #3
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003338:	230a      	movs	r3, #10
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003340:	4619      	mov	r1, r3
 8003342:	483d      	ldr	r0, [pc, #244]	; (8003438 <MX_GPIO_Init+0x2ec>)
 8003344:	f002 fb1c 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003348:	2310      	movs	r3, #16
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003358:	2302      	movs	r3, #2
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003360:	4619      	mov	r1, r3
 8003362:	4835      	ldr	r0, [pc, #212]	; (8003438 <MX_GPIO_Init+0x2ec>)
 8003364:	f002 fb0c 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003378:	2308      	movs	r3, #8
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800337c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003380:	4619      	mov	r1, r3
 8003382:	4827      	ldr	r0, [pc, #156]	; (8003420 <MX_GPIO_Init+0x2d4>)
 8003384:	f002 fafc 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003388:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003396:	2303      	movs	r3, #3
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800339a:	230c      	movs	r3, #12
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033a2:	4619      	mov	r1, r3
 80033a4:	4825      	ldr	r0, [pc, #148]	; (800343c <MX_GPIO_Init+0x2f0>)
 80033a6:	f002 faeb 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80033aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	2300      	movs	r3, #0
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033bc:	2301      	movs	r3, #1
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80033c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c4:	4619      	mov	r1, r3
 80033c6:	481e      	ldr	r0, [pc, #120]	; (8003440 <MX_GPIO_Init+0x2f4>)
 80033c8:	f002 fada 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80033cc:	2360      	movs	r3, #96	; 0x60
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d8:	2300      	movs	r3, #0
 80033da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80033dc:	230d      	movs	r3, #13
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e4:	4619      	mov	r1, r3
 80033e6:	4813      	ldr	r0, [pc, #76]	; (8003434 <MX_GPIO_Init+0x2e8>)
 80033e8:	f002 faca 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f8:	2300      	movs	r3, #0
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033fc:	2307      	movs	r3, #7
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003404:	4619      	mov	r1, r3
 8003406:	480c      	ldr	r0, [pc, #48]	; (8003438 <MX_GPIO_Init+0x2ec>)
 8003408:	f002 faba 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800340c:	2340      	movs	r3, #64	; 0x40
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
 8003418:	e014      	b.n	8003444 <MX_GPIO_Init+0x2f8>
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40022000 	.word	0x40022000
 8003428:	40022800 	.word	0x40022800
 800342c:	40021c00 	.word	0x40021c00
 8003430:	40021800 	.word	0x40021800
 8003434:	40021000 	.word	0x40021000
 8003438:	40020400 	.word	0x40020400
 800343c:	40020800 	.word	0x40020800
 8003440:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003448:	230a      	movs	r3, #10
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800344c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003450:	4619      	mov	r1, r3
 8003452:	48bd      	ldr	r0, [pc, #756]	; (8003748 <MX_GPIO_Init+0x5fc>)
 8003454:	f002 fa94 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003458:	f248 1333 	movw	r3, #33075	; 0x8133
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003466:	2303      	movs	r3, #3
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800346a:	230c      	movs	r3, #12
 800346c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800346e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003472:	4619      	mov	r1, r3
 8003474:	48b5      	ldr	r0, [pc, #724]	; (800374c <MX_GPIO_Init+0x600>)
 8003476:	f002 fa83 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800347a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003480:	2300      	movs	r3, #0
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800348c:	4619      	mov	r1, r3
 800348e:	48b0      	ldr	r0, [pc, #704]	; (8003750 <MX_GPIO_Init+0x604>)
 8003490:	f002 fa76 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8003494:	2340      	movs	r3, #64	; 0x40
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003498:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80034a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034a6:	4619      	mov	r1, r3
 80034a8:	48aa      	ldr	r0, [pc, #680]	; (8003754 <MX_GPIO_Init+0x608>)
 80034aa:	f002 fa69 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80034ae:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	2303      	movs	r3, #3
 80034be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034c0:	230c      	movs	r3, #12
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c8:	4619      	mov	r1, r3
 80034ca:	48a2      	ldr	r0, [pc, #648]	; (8003754 <MX_GPIO_Init+0x608>)
 80034cc:	f002 fa58 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80034d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d6:	2302      	movs	r3, #2
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034de:	2303      	movs	r3, #3
 80034e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80034e2:	230a      	movs	r3, #10
 80034e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ea:	4619      	mov	r1, r3
 80034ec:	489a      	ldr	r0, [pc, #616]	; (8003758 <MX_GPIO_Init+0x60c>)
 80034ee:	f002 fa47 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80034f2:	23f0      	movs	r3, #240	; 0xf0
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003502:	230a      	movs	r3, #10
 8003504:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800350a:	4619      	mov	r1, r3
 800350c:	4893      	ldr	r0, [pc, #588]	; (800375c <MX_GPIO_Init+0x610>)
 800350e:	f002 fa37 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003520:	2300      	movs	r3, #0
 8003522:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003524:	230a      	movs	r3, #10
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800352c:	4619      	mov	r1, r3
 800352e:	4887      	ldr	r0, [pc, #540]	; (800374c <MX_GPIO_Init+0x600>)
 8003530:	f002 fa26 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003534:	2320      	movs	r3, #32
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003538:	2301      	movs	r3, #1
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003540:	2300      	movs	r3, #0
 8003542:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003548:	4619      	mov	r1, r3
 800354a:	4882      	ldr	r0, [pc, #520]	; (8003754 <MX_GPIO_Init+0x608>)
 800354c:	f002 fa18 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003550:	2308      	movs	r3, #8
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2300      	movs	r3, #0
 800355e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003560:	230d      	movs	r3, #13
 8003562:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003568:	4619      	mov	r1, r3
 800356a:	487a      	ldr	r0, [pc, #488]	; (8003754 <MX_GPIO_Init+0x608>)
 800356c:	f002 fa08 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8003570:	f241 030c 	movw	r3, #4108	; 0x100c
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003576:	2301      	movs	r3, #1
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2300      	movs	r3, #0
 8003580:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003586:	4619      	mov	r1, r3
 8003588:	4874      	ldr	r0, [pc, #464]	; (800375c <MX_GPIO_Init+0x610>)
 800358a:	f002 f9f9 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800358e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003594:	2300      	movs	r3, #0
 8003596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800359c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035a0:	4619      	mov	r1, r3
 80035a2:	486f      	ldr	r0, [pc, #444]	; (8003760 <MX_GPIO_Init+0x614>)
 80035a4:	f002 f9ec 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80035a8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b6:	2303      	movs	r3, #3
 80035b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035ba:	230c      	movs	r3, #12
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035c2:	4619      	mov	r1, r3
 80035c4:	4867      	ldr	r0, [pc, #412]	; (8003764 <MX_GPIO_Init+0x618>)
 80035c6:	f002 f9db 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80035ca:	2308      	movs	r3, #8
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ce:	2301      	movs	r3, #1
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035de:	4619      	mov	r1, r3
 80035e0:	4861      	ldr	r0, [pc, #388]	; (8003768 <MX_GPIO_Init+0x61c>)
 80035e2:	f002 f9cd 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80035e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ec:	2302      	movs	r3, #2
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f4:	2300      	movs	r3, #0
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80035f8:	230d      	movs	r3, #13
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80035fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003600:	4619      	mov	r1, r3
 8003602:	4852      	ldr	r0, [pc, #328]	; (800374c <MX_GPIO_Init+0x600>)
 8003604:	f002 f9bc 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003608:	2310      	movs	r3, #16
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800360c:	2300      	movs	r3, #0
 800360e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003618:	4619      	mov	r1, r3
 800361a:	484e      	ldr	r0, [pc, #312]	; (8003754 <MX_GPIO_Init+0x608>)
 800361c:	f002 f9b0 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8003620:	2304      	movs	r3, #4
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362c:	2303      	movs	r3, #3
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003630:	230c      	movs	r3, #12
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8003634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003638:	4619      	mov	r1, r3
 800363a:	4846      	ldr	r0, [pc, #280]	; (8003754 <MX_GPIO_Init+0x608>)
 800363c:	f002 f9a0 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003640:	f248 0304 	movw	r3, #32772	; 0x8004
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003646:	2300      	movs	r3, #0
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800364e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003652:	4619      	mov	r1, r3
 8003654:	4845      	ldr	r0, [pc, #276]	; (800376c <MX_GPIO_Init+0x620>)
 8003656:	f002 f993 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800365a:	2302      	movs	r3, #2
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003666:	2300      	movs	r3, #0
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800366a:	2305      	movs	r3, #5
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800366e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003672:	4619      	mov	r1, r3
 8003674:	4839      	ldr	r0, [pc, #228]	; (800375c <MX_GPIO_Init+0x610>)
 8003676:	f002 f983 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800367a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003680:	2301      	movs	r3, #1
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003688:	2300      	movs	r3, #0
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800368c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003690:	4619      	mov	r1, r3
 8003692:	4836      	ldr	r0, [pc, #216]	; (800376c <MX_GPIO_Init+0x620>)
 8003694:	f002 f974 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003698:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80036aa:	230d      	movs	r3, #13
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80036ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b2:	4619      	mov	r1, r3
 80036b4:	482d      	ldr	r0, [pc, #180]	; (800376c <MX_GPIO_Init+0x620>)
 80036b6:	f002 f963 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80036ba:	2301      	movs	r3, #1
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036ca:	2302      	movs	r3, #2
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80036ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036d2:	4619      	mov	r1, r3
 80036d4:	4821      	ldr	r0, [pc, #132]	; (800375c <MX_GPIO_Init+0x610>)
 80036d6:	f002 f953 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80036da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e8:	2300      	movs	r3, #0
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036ec:	2307      	movs	r3, #7
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80036f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f4:	4619      	mov	r1, r3
 80036f6:	4818      	ldr	r0, [pc, #96]	; (8003758 <MX_GPIO_Init+0x60c>)
 80036f8:	f002 f942 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80036fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2300      	movs	r3, #0
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800370e:	2301      	movs	r3, #1
 8003710:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003716:	4619      	mov	r1, r3
 8003718:	480f      	ldr	r0, [pc, #60]	; (8003758 <MX_GPIO_Init+0x60c>)
 800371a:	f002 f931 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800371e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003724:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800372e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003732:	4619      	mov	r1, r3
 8003734:	4809      	ldr	r0, [pc, #36]	; (800375c <MX_GPIO_Init+0x610>)
 8003736:	f002 f923 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800373a:	23c0      	movs	r3, #192	; 0xc0
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	2300      	movs	r3, #0
 8003744:	e014      	b.n	8003770 <MX_GPIO_Init+0x624>
 8003746:	bf00      	nop
 8003748:	40020400 	.word	0x40020400
 800374c:	40021800 	.word	0x40021800
 8003750:	40022400 	.word	0x40022400
 8003754:	40020c00 	.word	0x40020c00
 8003758:	40020000 	.word	0x40020000
 800375c:	40022000 	.word	0x40022000
 8003760:	40020800 	.word	0x40020800
 8003764:	40021400 	.word	0x40021400
 8003768:	40022800 	.word	0x40022800
 800376c:	40021c00 	.word	0x40021c00
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003772:	2303      	movs	r3, #3
 8003774:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003776:	2308      	movs	r3, #8
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800377e:	4619      	mov	r1, r3
 8003780:	4879      	ldr	r0, [pc, #484]	; (8003968 <MX_GPIO_Init+0x81c>)
 8003782:	f002 f8fd 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003786:	2310      	movs	r3, #16
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378a:	2302      	movs	r3, #2
 800378c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	2300      	movs	r3, #0
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003792:	2303      	movs	r3, #3
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003796:	230a      	movs	r3, #10
 8003798:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800379a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800379e:	4619      	mov	r1, r3
 80037a0:	4872      	ldr	r0, [pc, #456]	; (800396c <MX_GPIO_Init+0x820>)
 80037a2:	f002 f8ed 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80037a6:	2328      	movs	r3, #40	; 0x28
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b2:	2303      	movs	r3, #3
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037b6:	230c      	movs	r3, #12
 80037b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037be:	4619      	mov	r1, r3
 80037c0:	486a      	ldr	r0, [pc, #424]	; (800396c <MX_GPIO_Init+0x820>)
 80037c2:	f002 f8dd 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80037c6:	23c8      	movs	r3, #200	; 0xc8
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ca:	2301      	movs	r3, #1
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037da:	4619      	mov	r1, r3
 80037dc:	4864      	ldr	r0, [pc, #400]	; (8003970 <MX_GPIO_Init+0x824>)
 80037de:	f002 f8cf 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80037e2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037e8:	2303      	movs	r3, #3
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037f4:	4619      	mov	r1, r3
 80037f6:	485f      	ldr	r0, [pc, #380]	; (8003974 <MX_GPIO_Init+0x828>)
 80037f8:	f002 f8c2 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80037fc:	2308      	movs	r3, #8
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003808:	2303      	movs	r3, #3
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800380c:	230c      	movs	r3, #12
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003814:	4619      	mov	r1, r3
 8003816:	4854      	ldr	r0, [pc, #336]	; (8003968 <MX_GPIO_Init+0x81c>)
 8003818:	f002 f8b2 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800381c:	2305      	movs	r3, #5
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	2302      	movs	r3, #2
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003828:	2303      	movs	r3, #3
 800382a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800382c:	230a      	movs	r3, #10
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003834:	4619      	mov	r1, r3
 8003836:	484c      	ldr	r0, [pc, #304]	; (8003968 <MX_GPIO_Init+0x81c>)
 8003838:	f002 f8a2 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800383c:	2304      	movs	r3, #4
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003848:	2303      	movs	r3, #3
 800384a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800384c:	2309      	movs	r3, #9
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003854:	4619      	mov	r1, r3
 8003856:	4848      	ldr	r0, [pc, #288]	; (8003978 <MX_GPIO_Init+0x82c>)
 8003858:	f002 f892 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800385c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386a:	2303      	movs	r3, #3
 800386c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800386e:	2309      	movs	r3, #9
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003876:	4619      	mov	r1, r3
 8003878:	4840      	ldr	r0, [pc, #256]	; (800397c <MX_GPIO_Init+0x830>)
 800387a:	f002 f881 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800387e:	2304      	movs	r3, #4
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003882:	2300      	movs	r3, #0
 8003884:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800388a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800388e:	4619      	mov	r1, r3
 8003890:	4837      	ldr	r0, [pc, #220]	; (8003970 <MX_GPIO_Init+0x824>)
 8003892:	f002 f875 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003896:	2301      	movs	r3, #1
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800389a:	2303      	movs	r3, #3
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a6:	4619      	mov	r1, r3
 80038a8:	4835      	ldr	r0, [pc, #212]	; (8003980 <MX_GPIO_Init+0x834>)
 80038aa:	f002 f869 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80038ae:	2350      	movs	r3, #80	; 0x50
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	2302      	movs	r3, #2
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ba:	2300      	movs	r3, #0
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038be:	230d      	movs	r3, #13
 80038c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038c6:	4619      	mov	r1, r3
 80038c8:	482d      	ldr	r0, [pc, #180]	; (8003980 <MX_GPIO_Init+0x834>)
 80038ca:	f002 f859 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80038ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038d4:	2312      	movs	r3, #18
 80038d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	2303      	movs	r3, #3
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038e0:	2304      	movs	r3, #4
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038e8:	4619      	mov	r1, r3
 80038ea:	4820      	ldr	r0, [pc, #128]	; (800396c <MX_GPIO_Init+0x820>)
 80038ec:	f002 f848 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80038f0:	2328      	movs	r3, #40	; 0x28
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fc:	2303      	movs	r3, #3
 80038fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003900:	230a      	movs	r3, #10
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003908:	4619      	mov	r1, r3
 800390a:	481d      	ldr	r0, [pc, #116]	; (8003980 <MX_GPIO_Init+0x834>)
 800390c:	f002 f838 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003910:	2340      	movs	r3, #64	; 0x40
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003914:	2302      	movs	r3, #2
 8003916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391c:	2300      	movs	r3, #0
 800391e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003920:	2309      	movs	r3, #9
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003928:	4619      	mov	r1, r3
 800392a:	4810      	ldr	r0, [pc, #64]	; (800396c <MX_GPIO_Init+0x820>)
 800392c:	f002 f828 	bl	8005980 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003930:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393e:	2300      	movs	r3, #0
 8003940:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003942:	2305      	movs	r3, #5
 8003944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800394a:	4619      	mov	r1, r3
 800394c:	480a      	ldr	r0, [pc, #40]	; (8003978 <MX_GPIO_Init+0x82c>)
 800394e:	f002 f817 	bl	8005980 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	keyboard_GPIO_init();
 8003952:	f7fc fe37 	bl	80005c4 <keyboard_GPIO_init>
	switch_GPIO_init();
 8003956:	f7fd fa5b 	bl	8000e10 <switch_GPIO_init>
	spinner_GPIO_init();
 800395a:	f7fd f94d 	bl	8000bf8 <spinner_GPIO_init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800395e:	bf00      	nop
 8003960:	3740      	adds	r7, #64	; 0x40
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40020800 	.word	0x40020800
 800396c:	40021c00 	.word	0x40021c00
 8003970:	40021800 	.word	0x40021800
 8003974:	40021400 	.word	0x40021400
 8003978:	40020400 	.word	0x40020400
 800397c:	40020c00 	.word	0x40020c00
 8003980:	40020000 	.word	0x40020000

08003984 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800398c:	f004 f918 	bl	8007bc0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

osDelay(1);
 8003990:	2001      	movs	r0, #1
 8003992:	f005 f871 	bl	8008a78 <osDelay>
  /* Infinite loop */
  for(;;)
  {
  	//state_machine();
  	//state_ether();
    osDelay(1);
 8003996:	2001      	movs	r0, #1
 8003998:	f005 f86e 	bl	8008a78 <osDelay>
 800399c:	e7fb      	b.n	8003996 <StartDefaultTask+0x12>
	...

080039a0 <StartTaskEtherStates>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskEtherStates */
void StartTaskEtherStates(void *argument)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskEtherStates */
	if(tcp_ether_init()!=0){
 80039a8:	f7ff fa62 	bl	8002e70 <tcp_ether_init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <StartTaskEtherStates+0x22>
		print_string(10, 40, "ETHERNET FAILURE!", 0x797);
 80039b2:	f240 7397 	movw	r3, #1943	; 0x797
 80039b6:	4a09      	ldr	r2, [pc, #36]	; (80039dc <StartTaskEtherStates+0x3c>)
 80039b8:	2128      	movs	r1, #40	; 0x28
 80039ba:	200a      	movs	r0, #10
 80039bc:	f7fd fd96 	bl	80014ec <print_string>
 80039c0:	e008      	b.n	80039d4 <StartTaskEtherStates+0x34>
	}else{
		print_string(10, 40, "ETHERNET SUCCESS!", 0x797);
 80039c2:	f240 7397 	movw	r3, #1943	; 0x797
 80039c6:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <StartTaskEtherStates+0x40>)
 80039c8:	2128      	movs	r1, #40	; 0x28
 80039ca:	200a      	movs	r0, #10
 80039cc:	f7fd fd8e 	bl	80014ec <print_string>
		inf_loop();
 80039d0:	f7ff fa8a 	bl	8002ee8 <inf_loop>
	}
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80039d4:	2001      	movs	r0, #1
 80039d6:	f005 f84f 	bl	8008a78 <osDelay>
 80039da:	e7fb      	b.n	80039d4 <StartTaskEtherStates+0x34>
 80039dc:	0801a318 	.word	0x0801a318
 80039e0:	0801a32c 	.word	0x0801a32c

080039e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039f6:	f000 fc35 	bl	8004264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40001000 	.word	0x40001000

08003a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a0c:	b672      	cpsid	i
}
 8003a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003a10:	e7fe      	b.n	8003a10 <Error_Handler+0x8>
	...

08003a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <HAL_MspInit+0x5c>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a14      	ldr	r2, [pc, #80]	; (8003a70 <HAL_MspInit+0x5c>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_MspInit+0x5c>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <HAL_MspInit+0x5c>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <HAL_MspInit+0x5c>)
 8003a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <HAL_MspInit+0x5c>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	210f      	movs	r1, #15
 8003a4e:	f06f 0001 	mvn.w	r0, #1
 8003a52:	f000 fd03 	bl	800445c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2105      	movs	r1, #5
 8003a5a:	2005      	movs	r0, #5
 8003a5c:	f000 fcfe 	bl	800445c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003a60:	2005      	movs	r0, #5
 8003a62:	f000 fd17 	bl	8004494 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b0ae      	sub	sp, #184	; 0xb8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a8c:	f107 0320 	add.w	r3, r7, #32
 8003a90:	2284      	movs	r2, #132	; 0x84
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f015 fc5c 	bl	8019352 <memset>
  if(hltdc->Instance==LTDC)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <HAL_LTDC_MspInit+0x1f4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	f040 80dd 	bne.w	8003c60 <HAL_LTDC_MspInit+0x1ec>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 249;
 8003aaa:	23f9      	movs	r3, #249	; 0xf9
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003abe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ac4:	f107 0320 	add.w	r3, r7, #32
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 f9b5 	bl	8006e38 <HAL_RCCEx_PeriphCLKConfig>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8003ad4:	f7ff ff98 	bl	8003a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003ad8:	4b64      	ldr	r3, [pc, #400]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	4a63      	ldr	r2, [pc, #396]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003ade:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ae2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae4:	4b61      	ldr	r3, [pc, #388]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003af0:	4b5e      	ldr	r3, [pc, #376]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	4a5d      	ldr	r2, [pc, #372]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003af6:	f043 0310 	orr.w	r3, r3, #16
 8003afa:	6313      	str	r3, [r2, #48]	; 0x30
 8003afc:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003b08:	4b58      	ldr	r3, [pc, #352]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4a57      	ldr	r2, [pc, #348]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b12:	6313      	str	r3, [r2, #48]	; 0x30
 8003b14:	4b55      	ldr	r3, [pc, #340]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003b20:	4b52      	ldr	r3, [pc, #328]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	4a51      	ldr	r2, [pc, #324]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b38:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	4a4b      	ldr	r2, [pc, #300]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b42:	6313      	str	r3, [r2, #48]	; 0x30
 8003b44:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b50:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	4a45      	ldr	r2, [pc, #276]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5c:	4b43      	ldr	r3, [pc, #268]	; (8003c6c <HAL_LTDC_MspInit+0x1f8>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b80:	230e      	movs	r3, #14
 8003b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003b86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4838      	ldr	r0, [pc, #224]	; (8003c70 <HAL_LTDC_MspInit+0x1fc>)
 8003b8e:	f001 fef7 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003b92:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bac:	230e      	movs	r3, #14
 8003bae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003bb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	482e      	ldr	r0, [pc, #184]	; (8003c74 <HAL_LTDC_MspInit+0x200>)
 8003bba:	f001 fee1 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003bbe:	23f7      	movs	r3, #247	; 0xf7
 8003bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bd6:	230e      	movs	r3, #14
 8003bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003bdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4825      	ldr	r0, [pc, #148]	; (8003c78 <HAL_LTDC_MspInit+0x204>)
 8003be4:	f001 fecc 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003c02:	2309      	movs	r3, #9
 8003c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003c08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	481b      	ldr	r0, [pc, #108]	; (8003c7c <HAL_LTDC_MspInit+0x208>)
 8003c10:	f001 feb6 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003c14:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c2e:	230e      	movs	r3, #14
 8003c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003c34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4811      	ldr	r0, [pc, #68]	; (8003c80 <HAL_LTDC_MspInit+0x20c>)
 8003c3c:	f001 fea0 	bl	8005980 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003c40:	2200      	movs	r2, #0
 8003c42:	2105      	movs	r1, #5
 8003c44:	2058      	movs	r0, #88	; 0x58
 8003c46:	f000 fc09 	bl	800445c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003c4a:	2058      	movs	r0, #88	; 0x58
 8003c4c:	f000 fc22 	bl	8004494 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2105      	movs	r1, #5
 8003c54:	2059      	movs	r0, #89	; 0x59
 8003c56:	f000 fc01 	bl	800445c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8003c5a:	2059      	movs	r0, #89	; 0x59
 8003c5c:	f000 fc1a 	bl	8004494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003c60:	bf00      	nop
 8003c62:	37b8      	adds	r7, #184	; 0xb8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40016800 	.word	0x40016800
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40022400 	.word	0x40022400
 8003c78:	40022800 	.word	0x40022800
 8003c7c:	40021800 	.word	0x40021800
 8003c80:	40022000 	.word	0x40022000

08003c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	; 0x38
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c94:	4b33      	ldr	r3, [pc, #204]	; (8003d64 <HAL_InitTick+0xe0>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	4a32      	ldr	r2, [pc, #200]	; (8003d64 <HAL_InitTick+0xe0>)
 8003c9a:	f043 0310 	orr.w	r3, r3, #16
 8003c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca0:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <HAL_InitTick+0xe0>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003cac:	f107 0210 	add.w	r2, r7, #16
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 f88c 	bl	8006dd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003cc6:	f003 f871 	bl	8006dac <HAL_RCC_GetPCLK1Freq>
 8003cca:	6378      	str	r0, [r7, #52]	; 0x34
 8003ccc:	e004      	b.n	8003cd8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003cce:	f003 f86d 	bl	8006dac <HAL_RCC_GetPCLK1Freq>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <HAL_InitTick+0xe4>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	0c9b      	lsrs	r3, r3, #18
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <HAL_InitTick+0xe8>)
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_InitTick+0xec>)
 8003cea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003cec:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <HAL_InitTick+0xe8>)
 8003cee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cf4:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_InitTick+0xe8>)
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <HAL_InitTick+0xe8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_InitTick+0xe8>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d06:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <HAL_InitTick+0xe8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003d0c:	4817      	ldr	r0, [pc, #92]	; (8003d6c <HAL_InitTick+0xe8>)
 8003d0e:	f003 fc83 	bl	8007618 <HAL_TIM_Base_Init>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003d18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11b      	bne.n	8003d58 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003d20:	4812      	ldr	r0, [pc, #72]	; (8003d6c <HAL_InitTick+0xe8>)
 8003d22:	f003 fcdb 	bl	80076dc <HAL_TIM_Base_Start_IT>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d111      	bne.n	8003d58 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d34:	2036      	movs	r0, #54	; 0x36
 8003d36:	f000 fbad 	bl	8004494 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0f      	cmp	r3, #15
 8003d3e:	d808      	bhi.n	8003d52 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003d40:	2200      	movs	r2, #0
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	2036      	movs	r0, #54	; 0x36
 8003d46:	f000 fb89 	bl	800445c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <HAL_InitTick+0xf0>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e002      	b.n	8003d58 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003d58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3738      	adds	r7, #56	; 0x38
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40023800 	.word	0x40023800
 8003d68:	431bde83 	.word	0x431bde83
 8003d6c:	20041938 	.word	0x20041938
 8003d70:	40001000 	.word	0x40001000
 8003d74:	20001a30 	.word	0x20001a30

08003d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d7c:	e7fe      	b.n	8003d7c <NMI_Handler+0x4>
	...

08003d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    uint8_t reason = *((uint8_t*)0xE000ED2A);
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HardFault_Handler+0x1c>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	71fb      	strb	r3, [r7, #7]
    print_string(10, 40, "HARDFAULT!", 0x797);
 8003d8c:	f240 7397 	movw	r3, #1943	; 0x797
 8003d90:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <HardFault_Handler+0x20>)
 8003d92:	2128      	movs	r1, #40	; 0x28
 8003d94:	200a      	movs	r0, #10
 8003d96:	f7fd fba9 	bl	80014ec <print_string>
  {
 8003d9a:	e7f4      	b.n	8003d86 <HardFault_Handler+0x6>
 8003d9c:	e000ed2a 	.word	0xe000ed2a
 8003da0:	0801a340 	.word	0x0801a340

08003da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <MemManage_Handler+0x4>

08003daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dae:	e7fe      	b.n	8003dae <BusFault_Handler+0x4>

08003db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db4:	e7fe      	b.n	8003db4 <UsageFault_Handler+0x4>

08003db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  get_current_keyboard_state();
 8003dd8:	f7fc fc56 	bl	8000688 <get_current_keyboard_state>
  get_current_spinner_button_state();
 8003ddc:	f7fc ff40 	bl	8000c60 <get_current_spinner_button_state>
  get_spinner_position_change();
 8003de0:	f7fc ff74 	bl	8000ccc <get_spinner_position_change>
  get_current_switch_state();
 8003de4:	f7fd f830 	bl	8000e48 <get_current_switch_state>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003de8:	4802      	ldr	r0, [pc, #8]	; (8003df4 <TIM6_DAC_IRQHandler+0x20>)
 8003dea:	f003 fcef 	bl	80077cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20041938 	.word	0x20041938

08003df8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <ETH_IRQHandler+0x10>)
 8003dfe:	f000 fee5 	bl	8004bcc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20046390 	.word	0x20046390

08003e0c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e10:	4802      	ldr	r0, [pc, #8]	; (8003e1c <LTDC_IRQHandler+0x10>)
 8003e12:	f002 f863 	bl	8005edc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20041884 	.word	0x20041884

08003e20 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <LTDC_ER_IRQHandler+0x10>)
 8003e26:	f002 f859 	bl	8005edc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20041884 	.word	0x20041884

08003e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return 1;
 8003e38:	2301      	movs	r3, #1
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <_kill>:

int _kill(int pid, int sig)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <_kill+0x20>)
 8003e50:	2216      	movs	r2, #22
 8003e52:	601a      	str	r2, [r3, #0]
  return -1;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	2004f130 	.word	0x2004f130

08003e68 <_exit>:

void _exit (int status)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ffe5 	bl	8003e44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e7a:	e7fe      	b.n	8003e7a <_exit+0x12>

08003e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e00a      	b.n	8003ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e8e:	f3af 8000 	nop.w
 8003e92:	4601      	mov	r1, r0
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	60ba      	str	r2, [r7, #8]
 8003e9a:	b2ca      	uxtb	r2, r1
 8003e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	dbf0      	blt.n	8003e8e <_read+0x12>
  }

  return len;
 8003eac:	687b      	ldr	r3, [r7, #4]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b086      	sub	sp, #24
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e009      	b.n	8003edc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	60ba      	str	r2, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	dbf1      	blt.n	8003ec8 <_write+0x12>
  }
  return len;
 8003ee4:	687b      	ldr	r3, [r7, #4]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <_close>:

int _close(int file)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f16:	605a      	str	r2, [r3, #4]
  return 0;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <_isatty>:

int _isatty(int file)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f2e:	2301      	movs	r3, #1
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f60:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <_sbrk+0x5c>)
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <_sbrk+0x60>)
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f6c:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <_sbrk+0x64>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <_sbrk+0x64>)
 8003f76:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <_sbrk+0x68>)
 8003f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f7a:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <_sbrk+0x64>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d205      	bcs.n	8003f94 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <_sbrk+0x6c>)
 8003f8a:	220c      	movs	r2, #12
 8003f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f92:	e009      	b.n	8003fa8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <_sbrk+0x64>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f9a:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <_sbrk+0x64>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	4a06      	ldr	r2, [pc, #24]	; (8003fbc <_sbrk+0x64>)
 8003fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20050000 	.word	0x20050000
 8003fb8:	00000400 	.word	0x00000400
 8003fbc:	20041984 	.word	0x20041984
 8003fc0:	2004f138 	.word	0x2004f138
 8003fc4:	2004f130 	.word	0x2004f130

08003fc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <SystemInit+0x20>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <SystemInit+0x20>)
 8003fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004024 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ff0:	f7ff ffea 	bl	8003fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ff4:	480c      	ldr	r0, [pc, #48]	; (8004028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ff6:	490d      	ldr	r1, [pc, #52]	; (800402c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ffc:	e002      	b.n	8004004 <LoopCopyDataInit>

08003ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004002:	3304      	adds	r3, #4

08004004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004008:	d3f9      	bcc.n	8003ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800400c:	4c0a      	ldr	r4, [pc, #40]	; (8004038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800400e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004010:	e001      	b.n	8004016 <LoopFillZerobss>

08004012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004014:	3204      	adds	r2, #4

08004016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004018:	d3fb      	bcc.n	8004012 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800401a:	f015 f955 	bl	80192c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800401e:	f7fe ff75 	bl	8002f0c <main>
  bx  lr    
 8004022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004024:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800402c:	20001ac0 	.word	0x20001ac0
  ldr r2, =_sidata
 8004030:	0801d9ec 	.word	0x0801d9ec
  ldr r2, =_sbss
 8004034:	20001c00 	.word	0x20001c00
  ldr r4, =_ebss
 8004038:	2004f134 	.word	0x2004f134

0800403c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800403c:	e7fe      	b.n	800403c <ADC_IRQHandler>

0800403e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <LAN8742_RegisterBusIO+0x28>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <LAN8742_RegisterBusIO+0x28>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <LAN8742_RegisterBusIO+0x28>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8004066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800406a:	e014      	b.n	8004096 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b086      	sub	sp, #24
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d139      	bne.n	8004132 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e01c      	b.n	8004112 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f107 020c 	add.w	r2, r7, #12
 80040e0:	2112      	movs	r1, #18
 80040e2:	6978      	ldr	r0, [r7, #20]
 80040e4:	4798      	blx	r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	da03      	bge.n	80040f4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80040ec:	f06f 0304 	mvn.w	r3, #4
 80040f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80040f2:	e00b      	b.n	800410c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d105      	bne.n	800410c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
         break;
 800410a:	e005      	b.n	8004118 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3301      	adds	r3, #1
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b1f      	cmp	r3, #31
 8004116:	d9df      	bls.n	80040d8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b1f      	cmp	r3, #31
 800411e:	d902      	bls.n	8004126 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8004120:	f06f 0302 	mvn.w	r3, #2
 8004124:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8004132:	693b      	ldr	r3, [r7, #16]
 }
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6810      	ldr	r0, [r2, #0]
 8004150:	f107 020c 	add.w	r2, r7, #12
 8004154:	2101      	movs	r1, #1
 8004156:	4798      	blx	r3
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	da02      	bge.n	8004164 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800415e:	f06f 0304 	mvn.w	r3, #4
 8004162:	e06e      	b.n	8004242 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6810      	ldr	r0, [r2, #0]
 800416c:	f107 020c 	add.w	r2, r7, #12
 8004170:	2101      	movs	r1, #1
 8004172:	4798      	blx	r3
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	da02      	bge.n	8004180 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800417a:	f06f 0304 	mvn.w	r3, #4
 800417e:	e060      	b.n	8004242 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800418a:	2301      	movs	r3, #1
 800418c:	e059      	b.n	8004242 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6810      	ldr	r0, [r2, #0]
 8004196:	f107 020c 	add.w	r2, r7, #12
 800419a:	2100      	movs	r1, #0
 800419c:	4798      	blx	r3
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	da02      	bge.n	80041aa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80041a4:	f06f 0304 	mvn.w	r3, #4
 80041a8:	e04b      	b.n	8004242 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d11b      	bne.n	80041ec <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <LAN8742_GetLinkState+0x90>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80041c8:	2302      	movs	r3, #2
 80041ca:	e03a      	b.n	8004242 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e033      	b.n	8004242 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80041e4:	2304      	movs	r3, #4
 80041e6:	e02c      	b.n	8004242 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80041e8:	2305      	movs	r3, #5
 80041ea:	e02a      	b.n	8004242 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6810      	ldr	r0, [r2, #0]
 80041f4:	f107 020c 	add.w	r2, r7, #12
 80041f8:	211f      	movs	r1, #31
 80041fa:	4798      	blx	r3
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	da02      	bge.n	8004208 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8004202:	f06f 0304 	mvn.w	r3, #4
 8004206:	e01c      	b.n	8004242 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8004212:	2306      	movs	r3, #6
 8004214:	e015      	b.n	8004242 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 031c 	and.w	r3, r3, #28
 800421c:	2b18      	cmp	r3, #24
 800421e:	d101      	bne.n	8004224 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004220:	2302      	movs	r3, #2
 8004222:	e00e      	b.n	8004242 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 031c 	and.w	r3, r3, #28
 800422a:	2b08      	cmp	r3, #8
 800422c:	d101      	bne.n	8004232 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800422e:	2303      	movs	r3, #3
 8004230:	e007      	b.n	8004242 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 031c 	and.w	r3, r3, #28
 8004238:	2b14      	cmp	r3, #20
 800423a:	d101      	bne.n	8004240 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800423c:	2304      	movs	r3, #4
 800423e:	e000      	b.n	8004242 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004240:	2305      	movs	r3, #5
    }
  }
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800424e:	2003      	movs	r0, #3
 8004250:	f000 f8f9 	bl	8004446 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004254:	200f      	movs	r0, #15
 8004256:	f7ff fd15 	bl	8003c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800425a:	f7ff fbdb 	bl	8003a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_IncTick+0x20>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_IncTick+0x24>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4413      	add	r3, r2
 8004274:	4a04      	ldr	r2, [pc, #16]	; (8004288 <HAL_IncTick+0x24>)
 8004276:	6013      	str	r3, [r2, #0]
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20001a34 	.word	0x20001a34
 8004288:	20041988 	.word	0x20041988

0800428c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return uwTick;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <HAL_GetTick+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20041988 	.word	0x20041988

080042a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042ac:	f7ff ffee 	bl	800428c <HAL_GetTick>
 80042b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042bc:	d005      	beq.n	80042ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_Delay+0x44>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ca:	bf00      	nop
 80042cc:	f7ff ffde 	bl	800428c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d8f7      	bhi.n	80042cc <HAL_Delay+0x28>
  {
  }
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20001a34 	.word	0x20001a34

080042ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <__NVIC_SetPriorityGrouping+0x40>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004308:	4013      	ands	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <__NVIC_SetPriorityGrouping+0x44>)
 8004316:	4313      	orrs	r3, r2
 8004318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <__NVIC_SetPriorityGrouping+0x40>)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	60d3      	str	r3, [r2, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000ed00 	.word	0xe000ed00
 8004330:	05fa0000 	.word	0x05fa0000

08004334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <__NVIC_GetPriorityGrouping+0x18>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	f003 0307 	and.w	r3, r3, #7
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	db0b      	blt.n	800437a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	4907      	ldr	r1, [pc, #28]	; (8004388 <__NVIC_EnableIRQ+0x38>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2001      	movs	r0, #1
 8004372:	fa00 f202 	lsl.w	r2, r0, r2
 8004376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	e000e100 	.word	0xe000e100

0800438c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	db0a      	blt.n	80043b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	490c      	ldr	r1, [pc, #48]	; (80043d8 <__NVIC_SetPriority+0x4c>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	440b      	add	r3, r1
 80043b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b4:	e00a      	b.n	80043cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4908      	ldr	r1, [pc, #32]	; (80043dc <__NVIC_SetPriority+0x50>)
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	3b04      	subs	r3, #4
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	440b      	add	r3, r1
 80043ca:	761a      	strb	r2, [r3, #24]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000e100 	.word	0xe000e100
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b089      	sub	sp, #36	; 0x24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f1c3 0307 	rsb	r3, r3, #7
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	bf28      	it	cs
 80043fe:	2304      	movcs	r3, #4
 8004400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3304      	adds	r3, #4
 8004406:	2b06      	cmp	r3, #6
 8004408:	d902      	bls.n	8004410 <NVIC_EncodePriority+0x30>
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3b03      	subs	r3, #3
 800440e:	e000      	b.n	8004412 <NVIC_EncodePriority+0x32>
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43da      	mvns	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	401a      	ands	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	43d9      	mvns	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004438:	4313      	orrs	r3, r2
         );
}
 800443a:	4618      	mov	r0, r3
 800443c:	3724      	adds	r7, #36	; 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff ff4c 	bl	80042ec <__NVIC_SetPriorityGrouping>
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800446e:	f7ff ff61 	bl	8004334 <__NVIC_GetPriorityGrouping>
 8004472:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	6978      	ldr	r0, [r7, #20]
 800447a:	f7ff ffb1 	bl	80043e0 <NVIC_EncodePriority>
 800447e:	4602      	mov	r2, r0
 8004480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004484:	4611      	mov	r1, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff ff80 	bl	800438c <__NVIC_SetPriority>
}
 800448c:	bf00      	nop
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff ff54 	bl	8004350 <__NVIC_EnableIRQ>
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e086      	b.n	80045d0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2223      	movs	r2, #35	; 0x23
 80044d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f003 ff95 	bl	8008404 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044da:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <HAL_ETH_Init+0x128>)
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	4a3e      	ldr	r2, [pc, #248]	; (80045d8 <HAL_ETH_Init+0x128>)
 80044e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e4:	6453      	str	r3, [r2, #68]	; 0x44
 80044e6:	4b3c      	ldr	r3, [pc, #240]	; (80045d8 <HAL_ETH_Init+0x128>)
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80044f2:	4b3a      	ldr	r3, [pc, #232]	; (80045dc <HAL_ETH_Init+0x12c>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4a39      	ldr	r2, [pc, #228]	; (80045dc <HAL_ETH_Init+0x12c>)
 80044f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044fc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80044fe:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_ETH_Init+0x12c>)
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	4935      	ldr	r1, [pc, #212]	; (80045dc <HAL_ETH_Init+0x12c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800450c:	4b33      	ldr	r3, [pc, #204]	; (80045dc <HAL_ETH_Init+0x12c>)
 800450e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004526:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004528:	f7ff feb0 	bl	800428c <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800452e:	e011      	b.n	8004554 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004530:	f7ff feac 	bl	800428c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800453e:	d909      	bls.n	8004554 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2204      	movs	r2, #4
 8004544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	22e0      	movs	r2, #224	; 0xe0
 800454c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e03d      	b.n	80045d0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e4      	bne.n	8004530 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 ff4e 	bl	8005408 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fff9 	bl	8005564 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f001 f84f 	bl	8005616 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	461a      	mov	r2, r3
 800457e:	2100      	movs	r1, #0
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 ffb7 	bl	80054f4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8004594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <HAL_ETH_Init+0x130>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80045ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2210      	movs	r2, #16
 80045ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40013800 	.word	0x40013800
 80045e0:	00020060 	.word	0x00020060

080045e4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d15f      	bne.n	80046b6 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2223      	movs	r2, #35	; 0x23
 80045fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2204      	movs	r2, #4
 8004608:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f9f6 	bl	80049fc <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004618:	2001      	movs	r0, #1
 800461a:	f7ff fe43 	bl	80042a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800463c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	f043 0302 	orr.w	r3, r3, #2
 8004650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004654:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fd73 	bl	8005142 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0208 	orr.w	r2, r2, #8
 800466a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004674:	2001      	movs	r0, #1
 8004676:	f7ff fe15 	bl	80042a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0204 	orr.w	r2, r2, #4
 8004690:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469a:	69d9      	ldr	r1, [r3, #28]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <HAL_ETH_Start_IT+0xdc>)
 80046a2:	430b      	orrs	r3, r1
 80046a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046a8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2223      	movs	r2, #35	; 0x23
 80046ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e000      	b.n	80046b8 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	0001a0c1 	.word	0x0001a0c1

080046c4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	2b23      	cmp	r3, #35	; 0x23
 80046d4:	d16e      	bne.n	80047b4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2223      	movs	r2, #35	; 0x23
 80046da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e6:	69d9      	ldr	r1, [r3, #28]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <HAL_ETH_Stop_IT+0xfc>)
 80046ee:	400b      	ands	r3, r1
 80046f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046f4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004708:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800470c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	f023 0302 	bic.w	r3, r3, #2
 8004720:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004724:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0204 	bic.w	r2, r2, #4
 8004734:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800473e:	2001      	movs	r0, #1
 8004740:	f7ff fdb0 	bl	80042a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fcf8 	bl	8005142 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0208 	bic.w	r2, r2, #8
 8004760:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800476a:	2001      	movs	r0, #1
 800476c:	f7ff fd9a 	bl	80042a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e00e      	b.n	800479c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	3212      	adds	r2, #18
 8004784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004788:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	3301      	adds	r3, #1
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d9ed      	bls.n	800477e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2210      	movs	r2, #16
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
  }
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	fffe5f3e 	.word	0xfffe5f3e

080047c4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f043 0201 	orr.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e045      	b.n	8004874 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ee:	2b23      	cmp	r3, #35	; 0x23
 80047f0:	d13f      	bne.n	8004872 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80047fa:	2201      	movs	r2, #1
 80047fc:	6839      	ldr	r1, [r7, #0]
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 ff78 	bl	80056f4 <ETH_Prepare_Tx_Descriptors>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f043 0202 	orr.w	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e02a      	b.n	8004874 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800481e:	f3bf 8f4f 	dsb	sy
}
 8004822:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	2b03      	cmp	r3, #3
 8004834:	d904      	bls.n	8004840 <HAL_ETH_Transmit_IT+0x7c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	1f1a      	subs	r2, r3, #4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485a:	461a      	mov	r2, r3
 800485c:	2304      	movs	r3, #4
 800485e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004868:	461a      	mov	r2, r3
 800486a:	2300      	movs	r3, #0
 800486c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e000      	b.n	8004874 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f043 0201 	orr.w	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0a4      	b.n	80049f2 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ae:	2b23      	cmp	r3, #35	; 0x23
 80048b0:	d001      	beq.n	80048b6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e09d      	b.n	80049f2 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	3212      	adds	r2, #18
 80048c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048cc:	f1c3 0304 	rsb	r3, r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80048d2:	e066      	b.n	80049a2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	699a      	ldr	r2, [r3, #24]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d103      	bne.n	8004904 <HAL_ETH_ReadData+0x88>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d03c      	beq.n	800497e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004926:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800493c:	2301      	movs	r3, #1
 800493e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f003 feff 	bl	8008760 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	441a      	add	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2200      	movs	r2, #0
 800497c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3301      	adds	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d902      	bls.n	8004990 <HAL_ETH_ReadData+0x114>
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3b04      	subs	r3, #4
 800498e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	3212      	adds	r2, #18
 8004996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800499a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	3301      	adds	r3, #1
 80049a0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	db06      	blt.n	80049b8 <HAL_ETH_ReadData+0x13c>
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d202      	bcs.n	80049b8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d08d      	beq.n	80048d4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	441a      	add	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f815 	bl	80049fc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d108      	bne.n	80049f0 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a10:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	3212      	adds	r2, #18
 8004a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a22:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004a24:	e042      	b.n	8004aac <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d112      	bne.n	8004a54 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004a2e:	f107 0308 	add.w	r3, r7, #8
 8004a32:	4618      	mov	r0, r3
 8004a34:	f003 fe64 	bl	8008700 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	74fb      	strb	r3, [r7, #19]
 8004a42:	e007      	b.n	8004a54 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	461a      	mov	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d028      	beq.n	8004aac <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <ETH_UpdateDescriptor+0x104>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	6053      	str	r3, [r2, #4]
 8004a6e:	e005      	b.n	8004a7c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d902      	bls.n	8004a9a <ETH_UpdateDescriptor+0x9e>
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	3b04      	subs	r3, #4
 8004a98:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	3212      	adds	r2, #18
 8004aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa4:	617b      	str	r3, [r7, #20]
      desccount--;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <ETH_UpdateDescriptor+0xbc>
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1b6      	bne.n	8004a26 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d01a      	beq.n	8004af8 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004acc:	f3bf 8f5f 	dmb	sy
}
 8004ad0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6919      	ldr	r1, [r3, #16]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	18ca      	adds	r2, r1, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aea:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004af8:	bf00      	nop
 8004afa:	3720      	adds	r7, #32
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	80004000 	.word	0x80004000

08004b04 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3318      	adds	r3, #24
 8004b10:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004b22:	e047      	b.n	8004bb4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3304      	adds	r3, #4
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3301      	adds	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d902      	bls.n	8004b50 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004b54:	7bbb      	ldrb	r3, [r7, #14]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d02c      	beq.n	8004bb4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68d9      	ldr	r1, [r3, #12]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	440b      	add	r3, r1
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	db1f      	blt.n	8004bb0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	3304      	adds	r3, #4
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f003 fe31 	bl	80087e4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	3304      	adds	r3, #4
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	3301      	adds	r3, #1
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d902      	bls.n	8004ba2 <HAL_ETH_ReleaseTxPacket+0x9e>
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	3b04      	subs	r3, #4
 8004ba0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bae:	e001      	b.n	8004bb4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_ETH_ReleaseTxPacket+0xbc>
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1b1      	bne.n	8004b24 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <HAL_ETH_IRQHandler+0x158>)
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00e      	beq.n	8004c22 <HAL_ETH_IRQHandler+0x56>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c16:	461a      	mov	r2, r3
 8004c18:	4b43      	ldr	r3, [pc, #268]	; (8004d28 <HAL_ETH_IRQHandler+0x15c>)
 8004c1a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f003 f953 	bl	8007ec8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00f      	beq.n	8004c4c <HAL_ETH_IRQHandler+0x80>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004c44:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f003 f94e 	bl	8007ee8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d042      	beq.n	8004cdc <HAL_ETH_IRQHandler+0x110>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03d      	beq.n	8004cdc <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f043 0208 	orr.w	r2, r3, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01a      	beq.n	8004cb0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <HAL_ETH_IRQHandler+0x160>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004ca0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ca4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	22e0      	movs	r2, #224	; 0xe0
 8004caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004cae:	e012      	b.n	8004cd6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	f248 6380 	movw	r3, #34432	; 0x8680
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f248 6380 	movw	r3, #34432	; 0x8680
 8004cd4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f003 f916 	bl	8007f08 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f81a 	bl	8004d30 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d006      	beq.n	8004d1c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_ETH_IRQHandler+0x158>)
 8004d10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d14:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f814 	bl	8004d44 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40013c00 	.word	0x40013c00
 8004d28:	00010040 	.word	0x00010040
 8004d2c:	007e2000 	.word	0x007e2000

08004d30 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 031c 	and.w	r3, r3, #28
 8004d74:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	02db      	lsls	r3, r3, #11
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	019b      	lsls	r3, r3, #6
 8004d86:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0302 	bic.w	r3, r3, #2
 8004d96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004da8:	f7ff fa70 	bl	800428c <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004dae:	e00d      	b.n	8004dcc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004db0:	f7ff fa6c 	bl	800428c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbe:	d301      	bcc.n	8004dc4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e010      	b.n	8004de6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ec      	bne.n	8004db0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f003 031c 	and.w	r3, r3, #28
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	02db      	lsls	r3, r3, #11
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	019b      	lsls	r3, r3, #6
 8004e1c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f043 0302 	orr.w	r3, r3, #2
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e48:	f7ff fa20 	bl	800428c <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e4e:	e00d      	b.n	8004e6c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004e50:	f7ff fa1c 	bl	800428c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d301      	bcc.n	8004e64 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e009      	b.n	8004e78 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ec      	bne.n	8004e50 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0e6      	b.n	8005062 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0310 	and.w	r3, r3, #16
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bf14      	ite	ne
 8004ea2:	2301      	movne	r3, #1
 8004ea4:	2300      	moveq	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf0c      	ite	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	2300      	movne	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	bf14      	ite	ne
 8004f86:	2301      	movne	r3, #1
 8004f88:	2300      	moveq	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bf14      	ite	ne
 8004fae:	2301      	movne	r3, #1
 8004fb0:	2300      	moveq	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bf14      	ite	ne
 8004fe2:	2301      	movne	r3, #1
 8004fe4:	2300      	moveq	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf0c      	ite	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	2300      	movne	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	b29a      	uxth	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	461a      	mov	r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e00b      	b.n	800509a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005088:	2b10      	cmp	r3, #16
 800508a:	d105      	bne.n	8005098 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f87c 	bl	800518c <ETH_SetMACConfig>

    return HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	e000      	b.n	800509a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
  }
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 031c 	bic.w	r3, r3, #28
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80050bc:	f001 fe6a 	bl	8006d94 <HAL_RCC_GetHCLKFreq>
 80050c0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <HAL_ETH_SetMDIOClockRange+0x74>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d804      	bhi.n	80050d4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f043 0308 	orr.w	r3, r3, #8
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	e019      	b.n	8005108 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a11      	ldr	r2, [pc, #68]	; (800511c <HAL_ETH_SetMDIOClockRange+0x78>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d204      	bcs.n	80050e6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f043 030c 	orr.w	r3, r3, #12
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e010      	b.n	8005108 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4a0d      	ldr	r2, [pc, #52]	; (8005120 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d90c      	bls.n	8005108 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <HAL_ETH_SetMDIOClockRange+0x80>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d804      	bhi.n	8005100 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f043 0304 	orr.w	r3, r3, #4
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	e003      	b.n	8005108 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f043 0310 	orr.w	r3, r3, #16
 8005106:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	611a      	str	r2, [r3, #16]
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	02160ebf 	.word	0x02160ebf
 800511c:	03938700 	.word	0x03938700
 8005120:	05f5e0ff 	.word	0x05f5e0ff
 8005124:	08f0d17f 	.word	0x08f0d17f

08005128 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8005136:	4618      	mov	r0, r3
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005160:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005164:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005172:	2001      	movs	r0, #1
 8005174:	f7ff f896 	bl	80042a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005182:	6193      	str	r3, [r2, #24]
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4b53      	ldr	r3, [pc, #332]	; (80052f0 <ETH_SetMACConfig+0x164>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	7b9b      	ldrb	r3, [r3, #14]
 80051aa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	7c12      	ldrb	r2, [r2, #16]
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d102      	bne.n	80051ba <ETH_SetMACConfig+0x2e>
 80051b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80051b8:	e000      	b.n	80051bc <ETH_SetMACConfig+0x30>
 80051ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80051bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	7c52      	ldrb	r2, [r2, #17]
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	d102      	bne.n	80051cc <ETH_SetMACConfig+0x40>
 80051c6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80051ca:	e000      	b.n	80051ce <ETH_SetMACConfig+0x42>
 80051cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80051ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80051d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	7fdb      	ldrb	r3, [r3, #31]
 80051da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80051dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80051e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	7f92      	ldrb	r2, [r2, #30]
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	d102      	bne.n	80051f2 <ETH_SetMACConfig+0x66>
 80051ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051f0:	e000      	b.n	80051f4 <ETH_SetMACConfig+0x68>
 80051f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80051f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	7f1b      	ldrb	r3, [r3, #28]
 80051fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80051fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005202:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	791b      	ldrb	r3, [r3, #4]
 8005208:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800520a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005212:	2a00      	cmp	r2, #0
 8005214:	d102      	bne.n	800521c <ETH_SetMACConfig+0x90>
 8005216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521a:	e000      	b.n	800521e <ETH_SetMACConfig+0x92>
 800521c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800521e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	7bdb      	ldrb	r3, [r3, #15]
 8005224:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005226:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800522c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005234:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005236:	4313      	orrs	r3, r2
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800524e:	2001      	movs	r0, #1
 8005250:	f7ff f828 	bl	80042a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f64f 7341 	movw	r3, #65345	; 0xff41
 800526a:	4013      	ands	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005272:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800527a:	2a00      	cmp	r2, #0
 800527c:	d101      	bne.n	8005282 <ETH_SetMACConfig+0xf6>
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	e000      	b.n	8005284 <ETH_SetMACConfig+0xf8>
 8005282:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005284:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800528a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005292:	2a01      	cmp	r2, #1
 8005294:	d101      	bne.n	800529a <ETH_SetMACConfig+0x10e>
 8005296:	2208      	movs	r2, #8
 8005298:	e000      	b.n	800529c <ETH_SetMACConfig+0x110>
 800529a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800529c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80052a4:	2a01      	cmp	r2, #1
 80052a6:	d101      	bne.n	80052ac <ETH_SetMACConfig+0x120>
 80052a8:	2204      	movs	r2, #4
 80052aa:	e000      	b.n	80052ae <ETH_SetMACConfig+0x122>
 80052ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80052ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80052b6:	2a01      	cmp	r2, #1
 80052b8:	d101      	bne.n	80052be <ETH_SetMACConfig+0x132>
 80052ba:	2202      	movs	r2, #2
 80052bc:	e000      	b.n	80052c0 <ETH_SetMACConfig+0x134>
 80052be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80052c0:	4313      	orrs	r3, r2
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052d8:	2001      	movs	r0, #1
 80052da:	f7fe ffe3 	bl	80042a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	619a      	str	r2, [r3, #24]
}
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	fd20810f 	.word	0xfd20810f

080052f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4b3d      	ldr	r3, [pc, #244]	; (8005404 <ETH_SetDMAConfig+0x110>)
 800530e:	4013      	ands	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	7b1b      	ldrb	r3, [r3, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <ETH_SetDMAConfig+0x2c>
 800531a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800531e:	e000      	b.n	8005322 <ETH_SetDMAConfig+0x2e>
 8005320:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	7b5b      	ldrb	r3, [r3, #13]
 8005326:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005328:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	7f52      	ldrb	r2, [r2, #29]
 800532e:	2a00      	cmp	r2, #0
 8005330:	d102      	bne.n	8005338 <ETH_SetDMAConfig+0x44>
 8005332:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005336:	e000      	b.n	800533a <ETH_SetDMAConfig+0x46>
 8005338:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800533a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	7b9b      	ldrb	r3, [r3, #14]
 8005340:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005342:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005348:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	7f1b      	ldrb	r3, [r3, #28]
 800534e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005350:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	7f9b      	ldrb	r3, [r3, #30]
 8005356:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005358:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800535e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005366:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005368:	4313      	orrs	r3, r2
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005378:	461a      	mov	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800538a:	2001      	movs	r0, #1
 800538c:	f7fe ff8a 	bl	80042a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005398:	461a      	mov	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	791b      	ldrb	r3, [r3, #4]
 80053a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80053a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80053ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80053b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80053be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80053c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80053cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80053e8:	2001      	movs	r0, #1
 80053ea:	f7fe ff5b 	bl	80042a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f6:	461a      	mov	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6013      	str	r3, [r2, #0]
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	f8de3f23 	.word	0xf8de3f23

08005408 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b0a6      	sub	sp, #152	; 0x98
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005410:	2301      	movs	r3, #1
 8005412:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800541c:	2300      	movs	r3, #0
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005420:	2300      	movs	r3, #0
 8005422:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800542c:	2300      	movs	r3, #0
 800542e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005432:	2301      	movs	r3, #1
 8005434:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800543e:	2300      	movs	r3, #0
 8005440:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005444:	2300      	movs	r3, #0
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800544a:	2300      	movs	r3, #0
 800544c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800544e:	2300      	movs	r3, #0
 8005450:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005454:	2300      	movs	r3, #0
 8005456:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800545e:	2300      	movs	r3, #0
 8005460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800546a:	2300      	movs	r3, #0
 800546c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005470:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005474:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800547c:	2300      	movs	r3, #0
 800547e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005482:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff fe7f 	bl	800518c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800548e:	2301      	movs	r3, #1
 8005490:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005492:	2301      	movs	r3, #1
 8005494:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800549c:	2301      	movs	r3, #1
 800549e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80054b0:	2300      	movs	r3, #0
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80054be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80054c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054c8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80054ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054ce:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80054de:	f107 0308 	add.w	r3, r7, #8
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ff05 	bl	80052f4 <ETH_SetDMAConfig>
}
 80054ea:	bf00      	nop
 80054ec:	3798      	adds	r7, #152	; 0x98
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3305      	adds	r3, #5
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	3204      	adds	r2, #4
 800550c:	7812      	ldrb	r2, [r2, #0]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <ETH_MACAddressConfig+0x68>)
 8005516:	4413      	add	r3, r2
 8005518:	461a      	mov	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3303      	adds	r3, #3
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	061a      	lsls	r2, r3, #24
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3302      	adds	r3, #2
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3301      	adds	r3, #1
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	4313      	orrs	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <ETH_MACAddressConfig+0x6c>)
 8005546:	4413      	add	r3, r2
 8005548:	461a      	mov	r2, r3
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	6013      	str	r3, [r2, #0]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40028040 	.word	0x40028040
 8005560:	40028044 	.word	0x40028044

08005564 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	e03e      	b.n	80055f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68d9      	ldr	r1, [r3, #12]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	440b      	add	r3, r1
 8005582:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2200      	movs	r2, #0
 800558e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	3206      	adds	r2, #6
 80055a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d80c      	bhi.n	80055d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68d9      	ldr	r1, [r3, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	440b      	add	r3, r1
 80055cc:	461a      	mov	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	e004      	b.n	80055de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	461a      	mov	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d9bd      	bls.n	8005572 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005608:	611a      	str	r2, [r3, #16]
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e048      	b.n	80056b6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6919      	ldr	r1, [r3, #16]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	440b      	add	r3, r1
 8005634:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2200      	movs	r2, #0
 8005646:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2200      	movs	r2, #0
 800564c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2200      	movs	r2, #0
 8005652:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005660:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	3212      	adds	r2, #18
 8005682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d80c      	bhi.n	80056a6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6919      	ldr	r1, [r3, #16]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	440b      	add	r3, r1
 800569e:	461a      	mov	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	60da      	str	r2, [r3, #12]
 80056a4:	e004      	b.n	80056b0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	461a      	mov	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d9b3      	bls.n	8005624 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e6:	60da      	str	r2, [r3, #12]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b091      	sub	sp, #68	; 0x44
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3318      	adds	r3, #24
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800571a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571e:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005736:	d007      	beq.n	8005748 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573c:	3304      	adds	r3, #4
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005748:	2302      	movs	r3, #2
 800574a:	e111      	b.n	8005970 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800574c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574e:	3301      	adds	r3, #1
 8005750:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	4b86      	ldr	r3, [pc, #536]	; (800597c <ETH_Prepare_Tx_Descriptors+0x288>)
 8005762:	4013      	ands	r3, r2
 8005764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005766:	6852      	ldr	r2, [r2, #4]
 8005768:	431a      	orrs	r2, r3
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	431a      	orrs	r2, r3
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80057ce:	e082      	b.n	80058d6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d006      	beq.n	80057f0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	e005      	b.n	80057fc <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80057fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fe:	3301      	adds	r3, #1
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005804:	2b03      	cmp	r3, #3
 8005806:	d902      	bls.n	800580e <ETH_Prepare_Tx_Descriptors+0x11a>
 8005808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580a:	3b04      	subs	r3, #4
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005816:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005824:	d007      	beq.n	8005836 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582a:	3304      	adds	r3, #4
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d029      	beq.n	800588a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005842:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005844:	2300      	movs	r3, #0
 8005846:	63bb      	str	r3, [r7, #56]	; 0x38
 8005848:	e019      	b.n	800587e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800584a:	f3bf 8f5f 	dmb	sy
}
 800584e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800585c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585e:	3301      	adds	r3, #1
 8005860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005864:	2b03      	cmp	r3, #3
 8005866:	d902      	bls.n	800586e <ETH_Prepare_Tx_Descriptors+0x17a>
 8005868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586a:	3b04      	subs	r3, #4
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005876:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	3301      	adds	r3, #1
 800587c:	63bb      	str	r3, [r7, #56]	; 0x38
 800587e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005882:	429a      	cmp	r2, r3
 8005884:	d3e1      	bcc.n	800584a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8005886:	2302      	movs	r3, #2
 8005888:	e072      	b.n	8005970 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	3301      	adds	r3, #1
 800589a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	4b32      	ldr	r3, [pc, #200]	; (800597c <ETH_Prepare_Tx_Descriptors+0x288>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b6:	6852      	ldr	r2, [r2, #4]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	3301      	adds	r3, #1
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80058c4:	f3bf 8f5f 	dmb	sy
}
 80058c8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f47f af78 	bne.w	80057d0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e005      	b.n	8005900 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005914:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005916:	f3bf 8f5f 	dmb	sy
}
 800591a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800592c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800592e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005930:	3304      	adds	r3, #4
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800593c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593e:	f3ef 8310 	mrs	r3, PRIMASK
 8005942:	613b      	str	r3, [r7, #16]
  return(result);
 8005944:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	2301      	movs	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f383 8810 	msr	PRIMASK, r3
}
 8005952:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	4413      	add	r3, r2
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	629a      	str	r2, [r3, #40]	; 0x28
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f383 8810 	msr	PRIMASK, r3
}
 800596c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3744      	adds	r7, #68	; 0x44
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	ffffe000 	.word	0xffffe000

08005980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005980:	b480      	push	{r7}
 8005982:	b089      	sub	sp, #36	; 0x24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005996:	2300      	movs	r3, #0
 8005998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	e175      	b.n	8005c8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80059a0:	2201      	movs	r2, #1
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4013      	ands	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	f040 8164 	bne.w	8005c86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d005      	beq.n	80059d6 <HAL_GPIO_Init+0x56>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d130      	bne.n	8005a38 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	2203      	movs	r2, #3
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 0201 	and.w	r2, r3, #1
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d017      	beq.n	8005a74 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	2203      	movs	r2, #3
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	43db      	mvns	r3, r3
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d123      	bne.n	8005ac8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	08da      	lsrs	r2, r3, #3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3208      	adds	r2, #8
 8005a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	220f      	movs	r2, #15
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	08da      	lsrs	r2, r3, #3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3208      	adds	r2, #8
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4013      	ands	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 0203 	and.w	r2, r3, #3
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80be 	beq.w	8005c86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b0a:	4b66      	ldr	r3, [pc, #408]	; (8005ca4 <HAL_GPIO_Init+0x324>)
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0e:	4a65      	ldr	r2, [pc, #404]	; (8005ca4 <HAL_GPIO_Init+0x324>)
 8005b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b14:	6453      	str	r3, [r2, #68]	; 0x44
 8005b16:	4b63      	ldr	r3, [pc, #396]	; (8005ca4 <HAL_GPIO_Init+0x324>)
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b22:	4a61      	ldr	r2, [pc, #388]	; (8005ca8 <HAL_GPIO_Init+0x328>)
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	089b      	lsrs	r3, r3, #2
 8005b28:	3302      	adds	r3, #2
 8005b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	220f      	movs	r2, #15
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4013      	ands	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a58      	ldr	r2, [pc, #352]	; (8005cac <HAL_GPIO_Init+0x32c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d037      	beq.n	8005bbe <HAL_GPIO_Init+0x23e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a57      	ldr	r2, [pc, #348]	; (8005cb0 <HAL_GPIO_Init+0x330>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d031      	beq.n	8005bba <HAL_GPIO_Init+0x23a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a56      	ldr	r2, [pc, #344]	; (8005cb4 <HAL_GPIO_Init+0x334>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02b      	beq.n	8005bb6 <HAL_GPIO_Init+0x236>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a55      	ldr	r2, [pc, #340]	; (8005cb8 <HAL_GPIO_Init+0x338>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d025      	beq.n	8005bb2 <HAL_GPIO_Init+0x232>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a54      	ldr	r2, [pc, #336]	; (8005cbc <HAL_GPIO_Init+0x33c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01f      	beq.n	8005bae <HAL_GPIO_Init+0x22e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a53      	ldr	r2, [pc, #332]	; (8005cc0 <HAL_GPIO_Init+0x340>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d019      	beq.n	8005baa <HAL_GPIO_Init+0x22a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a52      	ldr	r2, [pc, #328]	; (8005cc4 <HAL_GPIO_Init+0x344>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_GPIO_Init+0x226>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a51      	ldr	r2, [pc, #324]	; (8005cc8 <HAL_GPIO_Init+0x348>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00d      	beq.n	8005ba2 <HAL_GPIO_Init+0x222>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a50      	ldr	r2, [pc, #320]	; (8005ccc <HAL_GPIO_Init+0x34c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <HAL_GPIO_Init+0x21e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a4f      	ldr	r2, [pc, #316]	; (8005cd0 <HAL_GPIO_Init+0x350>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d101      	bne.n	8005b9a <HAL_GPIO_Init+0x21a>
 8005b96:	2309      	movs	r3, #9
 8005b98:	e012      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	e010      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	e00e      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005ba2:	2307      	movs	r3, #7
 8005ba4:	e00c      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005ba6:	2306      	movs	r3, #6
 8005ba8:	e00a      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005baa:	2305      	movs	r3, #5
 8005bac:	e008      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005bae:	2304      	movs	r3, #4
 8005bb0:	e006      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e004      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e002      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_GPIO_Init+0x240>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	f002 0203 	and.w	r2, r2, #3
 8005bc6:	0092      	lsls	r2, r2, #2
 8005bc8:	4093      	lsls	r3, r2
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bd0:	4935      	ldr	r1, [pc, #212]	; (8005ca8 <HAL_GPIO_Init+0x328>)
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	089b      	lsrs	r3, r3, #2
 8005bd6:	3302      	adds	r3, #2
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bde:	4b3d      	ldr	r3, [pc, #244]	; (8005cd4 <HAL_GPIO_Init+0x354>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	43db      	mvns	r3, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c02:	4a34      	ldr	r2, [pc, #208]	; (8005cd4 <HAL_GPIO_Init+0x354>)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c08:	4b32      	ldr	r3, [pc, #200]	; (8005cd4 <HAL_GPIO_Init+0x354>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4013      	ands	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c2c:	4a29      	ldr	r2, [pc, #164]	; (8005cd4 <HAL_GPIO_Init+0x354>)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c32:	4b28      	ldr	r3, [pc, #160]	; (8005cd4 <HAL_GPIO_Init+0x354>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c56:	4a1f      	ldr	r2, [pc, #124]	; (8005cd4 <HAL_GPIO_Init+0x354>)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_GPIO_Init+0x354>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c80:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <HAL_GPIO_Init+0x354>)
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b0f      	cmp	r3, #15
 8005c90:	f67f ae86 	bls.w	80059a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3724      	adds	r7, #36	; 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	40013800 	.word	0x40013800
 8005cac:	40020000 	.word	0x40020000
 8005cb0:	40020400 	.word	0x40020400
 8005cb4:	40020800 	.word	0x40020800
 8005cb8:	40020c00 	.word	0x40020c00
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	40021400 	.word	0x40021400
 8005cc4:	40021800 	.word	0x40021800
 8005cc8:	40021c00 	.word	0x40021c00
 8005ccc:	40022000 	.word	0x40022000
 8005cd0:	40022400 	.word	0x40022400
 8005cd4:	40013c00 	.word	0x40013c00

08005cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	887b      	ldrh	r3, [r7, #2]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
 8005cf4:	e001      	b.n	8005cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	807b      	strh	r3, [r7, #2]
 8005d14:	4613      	mov	r3, r2
 8005d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d18:	787b      	ldrb	r3, [r7, #1]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d1e:	887a      	ldrh	r2, [r7, #2]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005d24:	e003      	b.n	8005d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005d26:	887b      	ldrh	r3, [r7, #2]
 8005d28:	041a      	lsls	r2, r3, #16
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	619a      	str	r2, [r3, #24]
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e0bf      	b.n	8005ece <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fd fe86 	bl	8003a74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d7e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6999      	ldr	r1, [r3, #24]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d94:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6899      	ldr	r1, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b4a      	ldr	r3, [pc, #296]	; (8005ed8 <HAL_LTDC_Init+0x19c>)
 8005db0:	400b      	ands	r3, r1
 8005db2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	041b      	lsls	r3, r3, #16
 8005dba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6899      	ldr	r1, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68d9      	ldr	r1, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	4b3e      	ldr	r3, [pc, #248]	; (8005ed8 <HAL_LTDC_Init+0x19c>)
 8005dde:	400b      	ands	r3, r1
 8005de0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	041b      	lsls	r3, r3, #16
 8005de8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68d9      	ldr	r1, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6919      	ldr	r1, [r3, #16]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b33      	ldr	r3, [pc, #204]	; (8005ed8 <HAL_LTDC_Init+0x19c>)
 8005e0c:	400b      	ands	r3, r1
 8005e0e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6919      	ldr	r1, [r3, #16]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6959      	ldr	r1, [r3, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <HAL_LTDC_Init+0x19c>)
 8005e3a:	400b      	ands	r3, r1
 8005e3c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6959      	ldr	r1, [r3, #20]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e6c:	041b      	lsls	r3, r3, #16
 8005e6e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0206 	orr.w	r2, r2, #6
 8005eaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	f000f800 	.word	0xf000f800

08005edc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d023      	beq.n	8005f46 <HAL_LTDC_IRQHandler+0x6a>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01e      	beq.n	8005f46 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0204 	bic.w	r2, r2, #4
 8005f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f26:	f043 0201 	orr.w	r2, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2204      	movs	r2, #4
 8005f34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f86f 	bl	8006024 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d023      	beq.n	8005f98 <HAL_LTDC_IRQHandler+0xbc>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01e      	beq.n	8005f98 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0202 	bic.w	r2, r2, #2
 8005f68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f78:	f043 0202 	orr.w	r2, r3, #2
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2204      	movs	r2, #4
 8005f86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f846 	bl	8006024 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01b      	beq.n	8005fda <HAL_LTDC_IRQHandler+0xfe>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d016      	beq.n	8005fda <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f82f 	bl	8006038 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <HAL_LTDC_IRQHandler+0x140>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d016      	beq.n	800601c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0208 	bic.w	r2, r2, #8
 8005ffc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2208      	movs	r2, #8
 8006004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f818 	bl	800604c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006060:	b5b0      	push	{r4, r5, r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_LTDC_ConfigLayer+0x1a>
 8006076:	2302      	movs	r3, #2
 8006078:	e02c      	b.n	80060d4 <HAL_LTDC_ConfigLayer+0x74>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2202      	movs	r2, #2
 8006086:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2134      	movs	r1, #52	; 0x34
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	4413      	add	r3, r2
 8006096:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4614      	mov	r4, r2
 800609e:	461d      	mov	r5, r3
 80060a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f87d 	bl	80061b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bdb0      	pop	{r4, r5, r7, pc}

080060dc <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_LTDC_SetAlpha+0x1a>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e024      	b.n	8006140 <HAL_LTDC_SetAlpha+0x64>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2234      	movs	r2, #52	; 0x34
 800610a:	fb02 f303 	mul.w	r3, r2, r3
 800610e:	3338      	adds	r3, #56	; 0x38
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6979      	ldr	r1, [r7, #20]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f847 	bl	80061b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2201      	movs	r2, #1
 800612c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_LTDC_SetAddress+0x1a>
 800615e:	2302      	movs	r3, #2
 8006160:	e024      	b.n	80061ac <HAL_LTDC_SetAddress+0x64>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2234      	movs	r2, #52	; 0x34
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	3338      	adds	r3, #56	; 0x38
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6979      	ldr	r1, [r7, #20]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f811 	bl	80061b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	; 0x24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d0:	4413      	add	r3, r2
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	01db      	lsls	r3, r3, #7
 80061e0:	4413      	add	r3, r2
 80061e2:	3384      	adds	r3, #132	; 0x84
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	4611      	mov	r1, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	01d2      	lsls	r2, r2, #7
 80061f0:	440a      	add	r2, r1
 80061f2:	3284      	adds	r2, #132	; 0x84
 80061f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800620a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800620c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4619      	mov	r1, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	440b      	add	r3, r1
 800621a:	3384      	adds	r3, #132	; 0x84
 800621c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006222:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006232:	4413      	add	r3, r2
 8006234:	041b      	lsls	r3, r3, #16
 8006236:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	01db      	lsls	r3, r3, #7
 8006242:	4413      	add	r3, r2
 8006244:	3384      	adds	r3, #132	; 0x84
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	4611      	mov	r1, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	01d2      	lsls	r2, r2, #7
 8006252:	440a      	add	r2, r1
 8006254:	3284      	adds	r2, #132	; 0x84
 8006256:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800625a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800626a:	4413      	add	r3, r2
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4619      	mov	r1, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	01db      	lsls	r3, r3, #7
 8006278:	440b      	add	r3, r1
 800627a:	3384      	adds	r3, #132	; 0x84
 800627c:	4619      	mov	r1, r3
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4313      	orrs	r3, r2
 8006282:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	01db      	lsls	r3, r3, #7
 800628e:	4413      	add	r3, r2
 8006290:	3384      	adds	r3, #132	; 0x84
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	4611      	mov	r1, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	01d2      	lsls	r2, r2, #7
 800629e:	440a      	add	r2, r1
 80062a0:	3284      	adds	r2, #132	; 0x84
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	01db      	lsls	r3, r3, #7
 80062b2:	4413      	add	r3, r2
 80062b4:	3384      	adds	r3, #132	; 0x84
 80062b6:	461a      	mov	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	061b      	lsls	r3, r3, #24
 80062d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	4413      	add	r3, r2
 80062e6:	3384      	adds	r3, #132	; 0x84
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	01db      	lsls	r3, r3, #7
 80062f4:	4413      	add	r3, r2
 80062f6:	3384      	adds	r3, #132	; 0x84
 80062f8:	461a      	mov	r2, r3
 80062fa:	2300      	movs	r3, #0
 80062fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006304:	461a      	mov	r2, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	431a      	orrs	r2, r3
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	431a      	orrs	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	01db      	lsls	r3, r3, #7
 8006318:	440b      	add	r3, r1
 800631a:	3384      	adds	r3, #132	; 0x84
 800631c:	4619      	mov	r1, r3
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	01db      	lsls	r3, r3, #7
 800632e:	4413      	add	r3, r2
 8006330:	3384      	adds	r3, #132	; 0x84
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	4611      	mov	r1, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	01d2      	lsls	r2, r2, #7
 800633e:	440a      	add	r2, r1
 8006340:	3284      	adds	r2, #132	; 0x84
 8006342:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006346:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	01db      	lsls	r3, r3, #7
 8006352:	4413      	add	r3, r2
 8006354:	3384      	adds	r3, #132	; 0x84
 8006356:	461a      	mov	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	01db      	lsls	r3, r3, #7
 8006368:	4413      	add	r3, r2
 800636a:	3384      	adds	r3, #132	; 0x84
 800636c:	69da      	ldr	r2, [r3, #28]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4619      	mov	r1, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	01db      	lsls	r3, r3, #7
 8006378:	440b      	add	r3, r1
 800637a:	3384      	adds	r3, #132	; 0x84
 800637c:	4619      	mov	r1, r3
 800637e:	4b58      	ldr	r3, [pc, #352]	; (80064e0 <LTDC_SetConfig+0x32c>)
 8006380:	4013      	ands	r3, r2
 8006382:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	68f9      	ldr	r1, [r7, #12]
 800638e:	6809      	ldr	r1, [r1, #0]
 8006390:	4608      	mov	r0, r1
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	01c9      	lsls	r1, r1, #7
 8006396:	4401      	add	r1, r0
 8006398:	3184      	adds	r1, #132	; 0x84
 800639a:	4313      	orrs	r3, r2
 800639c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	01db      	lsls	r3, r3, #7
 80063a8:	4413      	add	r3, r2
 80063aa:	3384      	adds	r3, #132	; 0x84
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	01db      	lsls	r3, r3, #7
 80063b8:	4413      	add	r3, r2
 80063ba:	3384      	adds	r3, #132	; 0x84
 80063bc:	461a      	mov	r2, r3
 80063be:	2300      	movs	r3, #0
 80063c0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	01db      	lsls	r3, r3, #7
 80063cc:	4413      	add	r3, r2
 80063ce:	3384      	adds	r3, #132	; 0x84
 80063d0:	461a      	mov	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80063e0:	2304      	movs	r3, #4
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	e01b      	b.n	800641e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d102      	bne.n	80063f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80063ee:	2303      	movs	r3, #3
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	e014      	b.n	800641e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d00b      	beq.n	8006414 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006400:	2b02      	cmp	r3, #2
 8006402:	d007      	beq.n	8006414 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006408:	2b03      	cmp	r3, #3
 800640a:	d003      	beq.n	8006414 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006410:	2b07      	cmp	r3, #7
 8006412:	d102      	bne.n	800641a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006414:	2302      	movs	r3, #2
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	e001      	b.n	800641e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800641a:	2301      	movs	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	01db      	lsls	r3, r3, #7
 8006428:	4413      	add	r3, r2
 800642a:	3384      	adds	r3, #132	; 0x84
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	4611      	mov	r1, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	01d2      	lsls	r2, r2, #7
 8006438:	440a      	add	r2, r1
 800643a:	3284      	adds	r2, #132	; 0x84
 800643c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006440:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	fb02 f303 	mul.w	r3, r2, r3
 800644c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6859      	ldr	r1, [r3, #4]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	1acb      	subs	r3, r1, r3
 8006458:	69f9      	ldr	r1, [r7, #28]
 800645a:	fb01 f303 	mul.w	r3, r1, r3
 800645e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006460:	68f9      	ldr	r1, [r7, #12]
 8006462:	6809      	ldr	r1, [r1, #0]
 8006464:	4608      	mov	r0, r1
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	01c9      	lsls	r1, r1, #7
 800646a:	4401      	add	r1, r0
 800646c:	3184      	adds	r1, #132	; 0x84
 800646e:	4313      	orrs	r3, r2
 8006470:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	01db      	lsls	r3, r3, #7
 800647c:	4413      	add	r3, r2
 800647e:	3384      	adds	r3, #132	; 0x84
 8006480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4619      	mov	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	440b      	add	r3, r1
 800648e:	3384      	adds	r3, #132	; 0x84
 8006490:	4619      	mov	r1, r3
 8006492:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <LTDC_SetConfig+0x330>)
 8006494:	4013      	ands	r3, r2
 8006496:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	01db      	lsls	r3, r3, #7
 80064a2:	4413      	add	r3, r2
 80064a4:	3384      	adds	r3, #132	; 0x84
 80064a6:	461a      	mov	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	4413      	add	r3, r2
 80064ba:	3384      	adds	r3, #132	; 0x84
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	4611      	mov	r1, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	01d2      	lsls	r2, r2, #7
 80064c8:	440a      	add	r2, r1
 80064ca:	3284      	adds	r2, #132	; 0x84
 80064cc:	f043 0301 	orr.w	r3, r3, #1
 80064d0:	6013      	str	r3, [r2, #0]
}
 80064d2:	bf00      	nop
 80064d4:	3724      	adds	r7, #36	; 0x24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	fffff8f8 	.word	0xfffff8f8
 80064e4:	fffff800 	.word	0xfffff800

080064e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80064f0:	2300      	movs	r3, #0
 80064f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e291      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8087 	beq.w	800661a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800650c:	4b96      	ldr	r3, [pc, #600]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 030c 	and.w	r3, r3, #12
 8006514:	2b04      	cmp	r3, #4
 8006516:	d00c      	beq.n	8006532 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006518:	4b93      	ldr	r3, [pc, #588]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 030c 	and.w	r3, r3, #12
 8006520:	2b08      	cmp	r3, #8
 8006522:	d112      	bne.n	800654a <HAL_RCC_OscConfig+0x62>
 8006524:	4b90      	ldr	r3, [pc, #576]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800652c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006530:	d10b      	bne.n	800654a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006532:	4b8d      	ldr	r3, [pc, #564]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d06c      	beq.n	8006618 <HAL_RCC_OscConfig+0x130>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d168      	bne.n	8006618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e26b      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006552:	d106      	bne.n	8006562 <HAL_RCC_OscConfig+0x7a>
 8006554:	4b84      	ldr	r3, [pc, #528]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a83      	ldr	r2, [pc, #524]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800655a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	e02e      	b.n	80065c0 <HAL_RCC_OscConfig+0xd8>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10c      	bne.n	8006584 <HAL_RCC_OscConfig+0x9c>
 800656a:	4b7f      	ldr	r3, [pc, #508]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a7e      	ldr	r2, [pc, #504]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	4b7c      	ldr	r3, [pc, #496]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a7b      	ldr	r2, [pc, #492]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800657c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e01d      	b.n	80065c0 <HAL_RCC_OscConfig+0xd8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800658c:	d10c      	bne.n	80065a8 <HAL_RCC_OscConfig+0xc0>
 800658e:	4b76      	ldr	r3, [pc, #472]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a75      	ldr	r2, [pc, #468]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b73      	ldr	r3, [pc, #460]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a72      	ldr	r2, [pc, #456]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e00b      	b.n	80065c0 <HAL_RCC_OscConfig+0xd8>
 80065a8:	4b6f      	ldr	r3, [pc, #444]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a6e      	ldr	r2, [pc, #440]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	4b6c      	ldr	r3, [pc, #432]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a6b      	ldr	r2, [pc, #428]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d013      	beq.n	80065f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c8:	f7fd fe60 	bl	800428c <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d0:	f7fd fe5c 	bl	800428c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b64      	cmp	r3, #100	; 0x64
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e21f      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e2:	4b61      	ldr	r3, [pc, #388]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0xe8>
 80065ee:	e014      	b.n	800661a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f0:	f7fd fe4c 	bl	800428c <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f8:	f7fd fe48 	bl	800428c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b64      	cmp	r3, #100	; 0x64
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e20b      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800660a:	4b57      	ldr	r3, [pc, #348]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x110>
 8006616:	e000      	b.n	800661a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d069      	beq.n	80066fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006626:	4b50      	ldr	r3, [pc, #320]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 030c 	and.w	r3, r3, #12
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006632:	4b4d      	ldr	r3, [pc, #308]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
 800663a:	2b08      	cmp	r3, #8
 800663c:	d11c      	bne.n	8006678 <HAL_RCC_OscConfig+0x190>
 800663e:	4b4a      	ldr	r3, [pc, #296]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d116      	bne.n	8006678 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800664a:	4b47      	ldr	r3, [pc, #284]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_RCC_OscConfig+0x17a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d001      	beq.n	8006662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e1df      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006662:	4b41      	ldr	r3, [pc, #260]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	493d      	ldr	r1, [pc, #244]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006672:	4313      	orrs	r3, r2
 8006674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006676:	e040      	b.n	80066fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d023      	beq.n	80066c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006680:	4b39      	ldr	r3, [pc, #228]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a38      	ldr	r2, [pc, #224]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668c:	f7fd fdfe 	bl	800428c <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006694:	f7fd fdfa 	bl	800428c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e1bd      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a6:	4b30      	ldr	r3, [pc, #192]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b2:	4b2d      	ldr	r3, [pc, #180]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4929      	ldr	r1, [pc, #164]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	600b      	str	r3, [r1, #0]
 80066c6:	e018      	b.n	80066fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066c8:	4b27      	ldr	r3, [pc, #156]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a26      	ldr	r2, [pc, #152]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7fd fdda 	bl	800428c <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066dc:	f7fd fdd6 	bl	800428c <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e199      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ee:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f0      	bne.n	80066dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d038      	beq.n	8006778 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d019      	beq.n	8006742 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800670e:	4b16      	ldr	r3, [pc, #88]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006712:	4a15      	ldr	r2, [pc, #84]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800671a:	f7fd fdb7 	bl	800428c <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006722:	f7fd fdb3 	bl	800428c <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e176      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x23a>
 8006740:	e01a      	b.n	8006778 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006742:	4b09      	ldr	r3, [pc, #36]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <HAL_RCC_OscConfig+0x280>)
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800674e:	f7fd fd9d 	bl	800428c <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006754:	e00a      	b.n	800676c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006756:	f7fd fd99 	bl	800428c <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d903      	bls.n	800676c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e15c      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
 8006768:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800676c:	4b91      	ldr	r3, [pc, #580]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 800676e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1ee      	bne.n	8006756 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80a4 	beq.w	80068ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006786:	4b8b      	ldr	r3, [pc, #556]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006792:	4b88      	ldr	r3, [pc, #544]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	4a87      	ldr	r2, [pc, #540]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679c:	6413      	str	r3, [r2, #64]	; 0x40
 800679e:	4b85      	ldr	r3, [pc, #532]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067aa:	2301      	movs	r3, #1
 80067ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ae:	4b82      	ldr	r3, [pc, #520]	; (80069b8 <HAL_RCC_OscConfig+0x4d0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d118      	bne.n	80067ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80067ba:	4b7f      	ldr	r3, [pc, #508]	; (80069b8 <HAL_RCC_OscConfig+0x4d0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a7e      	ldr	r2, [pc, #504]	; (80069b8 <HAL_RCC_OscConfig+0x4d0>)
 80067c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067c6:	f7fd fd61 	bl	800428c <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ce:	f7fd fd5d 	bl	800428c <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b64      	cmp	r3, #100	; 0x64
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e120      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067e0:	4b75      	ldr	r3, [pc, #468]	; (80069b8 <HAL_RCC_OscConfig+0x4d0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f0      	beq.n	80067ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d106      	bne.n	8006802 <HAL_RCC_OscConfig+0x31a>
 80067f4:	4b6f      	ldr	r3, [pc, #444]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80067f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f8:	4a6e      	ldr	r2, [pc, #440]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006800:	e02d      	b.n	800685e <HAL_RCC_OscConfig+0x376>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10c      	bne.n	8006824 <HAL_RCC_OscConfig+0x33c>
 800680a:	4b6a      	ldr	r3, [pc, #424]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	4a69      	ldr	r2, [pc, #420]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006810:	f023 0301 	bic.w	r3, r3, #1
 8006814:	6713      	str	r3, [r2, #112]	; 0x70
 8006816:	4b67      	ldr	r3, [pc, #412]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	4a66      	ldr	r2, [pc, #408]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 800681c:	f023 0304 	bic.w	r3, r3, #4
 8006820:	6713      	str	r3, [r2, #112]	; 0x70
 8006822:	e01c      	b.n	800685e <HAL_RCC_OscConfig+0x376>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b05      	cmp	r3, #5
 800682a:	d10c      	bne.n	8006846 <HAL_RCC_OscConfig+0x35e>
 800682c:	4b61      	ldr	r3, [pc, #388]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 800682e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006830:	4a60      	ldr	r2, [pc, #384]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006832:	f043 0304 	orr.w	r3, r3, #4
 8006836:	6713      	str	r3, [r2, #112]	; 0x70
 8006838:	4b5e      	ldr	r3, [pc, #376]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683c:	4a5d      	ldr	r2, [pc, #372]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	6713      	str	r3, [r2, #112]	; 0x70
 8006844:	e00b      	b.n	800685e <HAL_RCC_OscConfig+0x376>
 8006846:	4b5b      	ldr	r3, [pc, #364]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	4a5a      	ldr	r2, [pc, #360]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	6713      	str	r3, [r2, #112]	; 0x70
 8006852:	4b58      	ldr	r3, [pc, #352]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	4a57      	ldr	r2, [pc, #348]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006858:	f023 0304 	bic.w	r3, r3, #4
 800685c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d015      	beq.n	8006892 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006866:	f7fd fd11 	bl	800428c <HAL_GetTick>
 800686a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800686c:	e00a      	b.n	8006884 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686e:	f7fd fd0d 	bl	800428c <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f241 3288 	movw	r2, #5000	; 0x1388
 800687c:	4293      	cmp	r3, r2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e0ce      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006884:	4b4b      	ldr	r3, [pc, #300]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0ee      	beq.n	800686e <HAL_RCC_OscConfig+0x386>
 8006890:	e014      	b.n	80068bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006892:	f7fd fcfb 	bl	800428c <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006898:	e00a      	b.n	80068b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800689a:	f7fd fcf7 	bl	800428c <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e0b8      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068b0:	4b40      	ldr	r3, [pc, #256]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1ee      	bne.n	800689a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d105      	bne.n	80068ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068c2:	4b3c      	ldr	r3, [pc, #240]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	4a3b      	ldr	r2, [pc, #236]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80068c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a4 	beq.w	8006a20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068d8:	4b36      	ldr	r3, [pc, #216]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 030c 	and.w	r3, r3, #12
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d06b      	beq.n	80069bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d149      	bne.n	8006980 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ec:	4b31      	ldr	r3, [pc, #196]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a30      	ldr	r2, [pc, #192]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80068f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7fd fcc8 	bl	800428c <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006900:	f7fd fcc4 	bl	800428c <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e087      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006912:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69da      	ldr	r2, [r3, #28]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	019b      	lsls	r3, r3, #6
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	085b      	lsrs	r3, r3, #1
 8006936:	3b01      	subs	r3, #1
 8006938:	041b      	lsls	r3, r3, #16
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	4313      	orrs	r3, r2
 8006944:	4a1b      	ldr	r2, [pc, #108]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800694a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800694c:	4b19      	ldr	r3, [pc, #100]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fd fc98 	bl	800428c <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006960:	f7fd fc94 	bl	800428c <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e057      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006972:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0f0      	beq.n	8006960 <HAL_RCC_OscConfig+0x478>
 800697e:	e04f      	b.n	8006a20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006980:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a0b      	ldr	r2, [pc, #44]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 8006986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800698a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fd fc7e 	bl	800428c <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006994:	f7fd fc7a 	bl	800428c <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e03d      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a6:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCC_OscConfig+0x4cc>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f0      	bne.n	8006994 <HAL_RCC_OscConfig+0x4ac>
 80069b2:	e035      	b.n	8006a20 <HAL_RCC_OscConfig+0x538>
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80069bc:	4b1b      	ldr	r3, [pc, #108]	; (8006a2c <HAL_RCC_OscConfig+0x544>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d028      	beq.n	8006a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d121      	bne.n	8006a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d11a      	bne.n	8006a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069ec:	4013      	ands	r3, r2
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d111      	bne.n	8006a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	3b01      	subs	r3, #1
 8006a06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d001      	beq.n	8006a20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40023800 	.word	0x40023800

08006a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0d0      	b.n	8006bea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a48:	4b6a      	ldr	r3, [pc, #424]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d910      	bls.n	8006a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a56:	4b67      	ldr	r3, [pc, #412]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f023 020f 	bic.w	r2, r3, #15
 8006a5e:	4965      	ldr	r1, [pc, #404]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a66:	4b63      	ldr	r3, [pc, #396]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d001      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0b8      	b.n	8006bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d020      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a90:	4b59      	ldr	r3, [pc, #356]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	4a58      	ldr	r2, [pc, #352]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aa8:	4b53      	ldr	r3, [pc, #332]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	4a52      	ldr	r2, [pc, #328]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ab4:	4b50      	ldr	r3, [pc, #320]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	494d      	ldr	r1, [pc, #308]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d040      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d107      	bne.n	8006aea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ada:	4b47      	ldr	r3, [pc, #284]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d115      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e07f      	b.n	8006bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d107      	bne.n	8006b02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af2:	4b41      	ldr	r3, [pc, #260]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e073      	b.n	8006bea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b02:	4b3d      	ldr	r3, [pc, #244]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e06b      	b.n	8006bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b12:	4b39      	ldr	r3, [pc, #228]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f023 0203 	bic.w	r2, r3, #3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4936      	ldr	r1, [pc, #216]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b24:	f7fd fbb2 	bl	800428c <HAL_GetTick>
 8006b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b2a:	e00a      	b.n	8006b42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b2c:	f7fd fbae 	bl	800428c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e053      	b.n	8006bea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b42:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 020c 	and.w	r2, r3, #12
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d1eb      	bne.n	8006b2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b54:	4b27      	ldr	r3, [pc, #156]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d210      	bcs.n	8006b84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b62:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 020f 	bic.w	r2, r3, #15
 8006b6a:	4922      	ldr	r1, [pc, #136]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b72:	4b20      	ldr	r3, [pc, #128]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e032      	b.n	8006bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b90:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	4916      	ldr	r1, [pc, #88]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bae:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	490e      	ldr	r1, [pc, #56]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bc2:	f000 f821 	bl	8006c08 <HAL_RCC_GetSysClockFreq>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	091b      	lsrs	r3, r3, #4
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	490a      	ldr	r1, [pc, #40]	; (8006bfc <HAL_RCC_ClockConfig+0x1cc>)
 8006bd4:	5ccb      	ldrb	r3, [r1, r3]
 8006bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bda:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <HAL_RCC_ClockConfig+0x1d0>)
 8006bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <HAL_RCC_ClockConfig+0x1d4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fd f84e 	bl	8003c84 <HAL_InitTick>

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40023c00 	.word	0x40023c00
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	0801d748 	.word	0x0801d748
 8006c00:	20001a2c 	.word	0x20001a2c
 8006c04:	20001a30 	.word	0x20001a30

08006c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c0c:	b090      	sub	sp, #64	; 0x40
 8006c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
 8006c14:	2300      	movs	r3, #0
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c18:	2300      	movs	r3, #0
 8006c1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c20:	4b59      	ldr	r3, [pc, #356]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 030c 	and.w	r3, r3, #12
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d00d      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0x40>
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	f200 80a1 	bhi.w	8006d74 <HAL_RCC_GetSysClockFreq+0x16c>
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x34>
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d003      	beq.n	8006c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c3a:	e09b      	b.n	8006d74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c3c:	4b53      	ldr	r3, [pc, #332]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8006c3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006c40:	e09b      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c42:	4b53      	ldr	r3, [pc, #332]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006c46:	e098      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c48:	4b4f      	ldr	r3, [pc, #316]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006c52:	4b4d      	ldr	r3, [pc, #308]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d028      	beq.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c5e:	4b4a      	ldr	r3, [pc, #296]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	099b      	lsrs	r3, r3, #6
 8006c64:	2200      	movs	r2, #0
 8006c66:	623b      	str	r3, [r7, #32]
 8006c68:	627a      	str	r2, [r7, #36]	; 0x24
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c70:	2100      	movs	r1, #0
 8006c72:	4b47      	ldr	r3, [pc, #284]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c74:	fb03 f201 	mul.w	r2, r3, r1
 8006c78:	2300      	movs	r3, #0
 8006c7a:	fb00 f303 	mul.w	r3, r0, r3
 8006c7e:	4413      	add	r3, r2
 8006c80:	4a43      	ldr	r2, [pc, #268]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c82:	fba0 1202 	umull	r1, r2, r0, r2
 8006c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c88:	460a      	mov	r2, r1
 8006c8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c8e:	4413      	add	r3, r2
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c94:	2200      	movs	r2, #0
 8006c96:	61bb      	str	r3, [r7, #24]
 8006c98:	61fa      	str	r2, [r7, #28]
 8006c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006ca2:	f7f9 fb0d 	bl	80002c0 <__aeabi_uldivmod>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4613      	mov	r3, r2
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cae:	e053      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cb0:	4b35      	ldr	r3, [pc, #212]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	099b      	lsrs	r3, r3, #6
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	617a      	str	r2, [r7, #20]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006cc2:	f04f 0b00 	mov.w	fp, #0
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	465b      	mov	r3, fp
 8006cca:	f04f 0000 	mov.w	r0, #0
 8006cce:	f04f 0100 	mov.w	r1, #0
 8006cd2:	0159      	lsls	r1, r3, #5
 8006cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cd8:	0150      	lsls	r0, r2, #5
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	ebb2 080a 	subs.w	r8, r2, sl
 8006ce2:	eb63 090b 	sbc.w	r9, r3, fp
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006cf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006cf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006cfa:	ebb2 0408 	subs.w	r4, r2, r8
 8006cfe:	eb63 0509 	sbc.w	r5, r3, r9
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	00eb      	lsls	r3, r5, #3
 8006d0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d10:	00e2      	lsls	r2, r4, #3
 8006d12:	4614      	mov	r4, r2
 8006d14:	461d      	mov	r5, r3
 8006d16:	eb14 030a 	adds.w	r3, r4, sl
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	eb45 030b 	adc.w	r3, r5, fp
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	f04f 0300 	mov.w	r3, #0
 8006d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d2e:	4629      	mov	r1, r5
 8006d30:	028b      	lsls	r3, r1, #10
 8006d32:	4621      	mov	r1, r4
 8006d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d38:	4621      	mov	r1, r4
 8006d3a:	028a      	lsls	r2, r1, #10
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d42:	2200      	movs	r2, #0
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	60fa      	str	r2, [r7, #12]
 8006d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d4c:	f7f9 fab8 	bl	80002c0 <__aeabi_uldivmod>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4613      	mov	r3, r2
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006d58:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	0c1b      	lsrs	r3, r3, #16
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	3301      	adds	r3, #1
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d72:	e002      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8006d76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3740      	adds	r7, #64	; 0x40
 8006d80:	46bd      	mov	sp, r7
 8006d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d86:	bf00      	nop
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	00f42400 	.word	0x00f42400
 8006d90:	017d7840 	.word	0x017d7840

08006d94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d98:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20001a2c 	.word	0x20001a2c

08006dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006db0:	f7ff fff0 	bl	8006d94 <HAL_RCC_GetHCLKFreq>
 8006db4:	4602      	mov	r2, r0
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	0a9b      	lsrs	r3, r3, #10
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	4903      	ldr	r1, [pc, #12]	; (8006dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dc2:	5ccb      	ldrb	r3, [r1, r3]
 8006dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	0801d758 	.word	0x0801d758

08006dd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	220f      	movs	r2, #15
 8006de2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006de4:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <HAL_RCC_GetClockConfig+0x5c>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 0203 	and.w	r2, r3, #3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006df0:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <HAL_RCC_GetClockConfig+0x5c>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <HAL_RCC_GetClockConfig+0x5c>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006e08:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <HAL_RCC_GetClockConfig+0x5c>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	08db      	lsrs	r3, r3, #3
 8006e0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <HAL_RCC_GetClockConfig+0x60>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 020f 	and.w	r2, r3, #15
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	601a      	str	r2, [r3, #0]
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40023800 	.word	0x40023800
 8006e34:	40023c00 	.word	0x40023c00

08006e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d012      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e60:	4b69      	ldr	r3, [pc, #420]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	4a68      	ldr	r2, [pc, #416]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006e6a:	6093      	str	r3, [r2, #8]
 8006e6c:	4b66      	ldr	r3, [pc, #408]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	4964      	ldr	r1, [pc, #400]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d017      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e92:	4b5d      	ldr	r3, [pc, #372]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea0:	4959      	ldr	r1, [pc, #356]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb0:	d101      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d017      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ece:	4b4e      	ldr	r3, [pc, #312]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ed4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	494a      	ldr	r1, [pc, #296]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eec:	d101      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006efa:	2301      	movs	r3, #1
 8006efc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 808b 	beq.w	8007032 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f1c:	4b3a      	ldr	r3, [pc, #232]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	4a39      	ldr	r2, [pc, #228]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f26:	6413      	str	r3, [r2, #64]	; 0x40
 8006f28:	4b37      	ldr	r3, [pc, #220]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f34:	4b35      	ldr	r3, [pc, #212]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a34      	ldr	r2, [pc, #208]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f40:	f7fd f9a4 	bl	800428c <HAL_GetTick>
 8006f44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f46:	e008      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f48:	f7fd f9a0 	bl	800428c <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b64      	cmp	r3, #100	; 0x64
 8006f54:	d901      	bls.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e357      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f5a:	4b2c      	ldr	r3, [pc, #176]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f0      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f66:	4b28      	ldr	r3, [pc, #160]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d035      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d02e      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f84:	4b20      	ldr	r3, [pc, #128]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f8e:	4b1e      	ldr	r3, [pc, #120]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f9a:	4b1b      	ldr	r3, [pc, #108]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	4a1a      	ldr	r2, [pc, #104]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006fa6:	4a18      	ldr	r2, [pc, #96]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fac:	4b16      	ldr	r3, [pc, #88]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d114      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb8:	f7fd f968 	bl	800428c <HAL_GetTick>
 8006fbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fbe:	e00a      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fc0:	f7fd f964 	bl	800428c <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e319      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0ee      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fee:	d111      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ffc:	4b04      	ldr	r3, [pc, #16]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ffe:	400b      	ands	r3, r1
 8007000:	4901      	ldr	r1, [pc, #4]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007002:	4313      	orrs	r3, r2
 8007004:	608b      	str	r3, [r1, #8]
 8007006:	e00b      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007008:	40023800 	.word	0x40023800
 800700c:	40007000 	.word	0x40007000
 8007010:	0ffffcff 	.word	0x0ffffcff
 8007014:	4baa      	ldr	r3, [pc, #680]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	4aa9      	ldr	r2, [pc, #676]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800701a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800701e:	6093      	str	r3, [r2, #8]
 8007020:	4ba7      	ldr	r3, [pc, #668]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800702c:	49a4      	ldr	r1, [pc, #656]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800702e:	4313      	orrs	r3, r2
 8007030:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0310 	and.w	r3, r3, #16
 800703a:	2b00      	cmp	r3, #0
 800703c:	d010      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800703e:	4ba0      	ldr	r3, [pc, #640]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007044:	4a9e      	ldr	r2, [pc, #632]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800704a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800704e:	4b9c      	ldr	r3, [pc, #624]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007050:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	4999      	ldr	r1, [pc, #612]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800706c:	4b94      	ldr	r3, [pc, #592]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800706e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007072:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800707a:	4991      	ldr	r1, [pc, #580]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800708e:	4b8c      	ldr	r3, [pc, #560]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007094:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800709c:	4988      	ldr	r1, [pc, #544]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070b0:	4b83      	ldr	r3, [pc, #524]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070be:	4980      	ldr	r1, [pc, #512]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070d2:	4b7b      	ldr	r3, [pc, #492]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e0:	4977      	ldr	r1, [pc, #476]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070f4:	4b72      	ldr	r3, [pc, #456]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fa:	f023 0203 	bic.w	r2, r3, #3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	496f      	ldr	r1, [pc, #444]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007104:	4313      	orrs	r3, r2
 8007106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007116:	4b6a      	ldr	r3, [pc, #424]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711c:	f023 020c 	bic.w	r2, r3, #12
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007124:	4966      	ldr	r1, [pc, #408]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007138:	4b61      	ldr	r3, [pc, #388]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007146:	495e      	ldr	r1, [pc, #376]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800715a:	4b59      	ldr	r3, [pc, #356]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007168:	4955      	ldr	r1, [pc, #340]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800717c:	4b50      	ldr	r3, [pc, #320]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	494d      	ldr	r1, [pc, #308]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800718c:	4313      	orrs	r3, r2
 800718e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800719e:	4b48      	ldr	r3, [pc, #288]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ac:	4944      	ldr	r1, [pc, #272]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80071c0:	4b3f      	ldr	r3, [pc, #252]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ce:	493c      	ldr	r1, [pc, #240]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80071e2:	4b37      	ldr	r3, [pc, #220]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f0:	4933      	ldr	r1, [pc, #204]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007204:	4b2e      	ldr	r3, [pc, #184]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007212:	492b      	ldr	r1, [pc, #172]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d011      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007226:	4b26      	ldr	r3, [pc, #152]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007234:	4922      	ldr	r1, [pc, #136]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007244:	d101      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007246:	2301      	movs	r3, #1
 8007248:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007256:	2301      	movs	r3, #1
 8007258:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007266:	4b16      	ldr	r3, [pc, #88]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007274:	4912      	ldr	r1, [pc, #72]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007288:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007298:	4909      	ldr	r1, [pc, #36]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800729a:	4313      	orrs	r3, r2
 800729c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d006      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80d9 	beq.w	8007466 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072b4:	4b02      	ldr	r3, [pc, #8]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a01      	ldr	r2, [pc, #4]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072be:	e001      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80072c0:	40023800 	.word	0x40023800
 80072c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c6:	f7fc ffe1 	bl	800428c <HAL_GetTick>
 80072ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072cc:	e008      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072ce:	f7fc ffdd 	bl	800428c <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b64      	cmp	r3, #100	; 0x64
 80072da:	d901      	bls.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e194      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072e0:	4b6c      	ldr	r3, [pc, #432]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1f0      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d021      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d11d      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007300:	4b64      	ldr	r3, [pc, #400]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007306:	0c1b      	lsrs	r3, r3, #16
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800730e:	4b61      	ldr	r3, [pc, #388]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007314:	0e1b      	lsrs	r3, r3, #24
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	019a      	lsls	r2, r3, #6
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	041b      	lsls	r3, r3, #16
 8007326:	431a      	orrs	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	061b      	lsls	r3, r3, #24
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	071b      	lsls	r3, r3, #28
 8007334:	4957      	ldr	r1, [pc, #348]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007350:	d00a      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800735a:	2b00      	cmp	r3, #0
 800735c:	d02e      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007366:	d129      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007368:	4b4a      	ldr	r3, [pc, #296]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800736a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736e:	0c1b      	lsrs	r3, r3, #16
 8007370:	f003 0303 	and.w	r3, r3, #3
 8007374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007376:	4b47      	ldr	r3, [pc, #284]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737c:	0f1b      	lsrs	r3, r3, #28
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	019a      	lsls	r2, r3, #6
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	061b      	lsls	r3, r3, #24
 8007396:	431a      	orrs	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	071b      	lsls	r3, r3, #28
 800739c:	493d      	ldr	r1, [pc, #244]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073a4:	4b3b      	ldr	r3, [pc, #236]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073aa:	f023 021f 	bic.w	r2, r3, #31
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	3b01      	subs	r3, #1
 80073b4:	4937      	ldr	r1, [pc, #220]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01d      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073c8:	4b32      	ldr	r3, [pc, #200]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ce:	0e1b      	lsrs	r3, r3, #24
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073d6:	4b2f      	ldr	r3, [pc, #188]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073dc:	0f1b      	lsrs	r3, r3, #28
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	019a      	lsls	r2, r3, #6
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	431a      	orrs	r2, r3
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	061b      	lsls	r3, r3, #24
 80073f6:	431a      	orrs	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	071b      	lsls	r3, r3, #28
 80073fc:	4925      	ldr	r1, [pc, #148]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d011      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	019a      	lsls	r2, r3, #6
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	041b      	lsls	r3, r3, #16
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	061b      	lsls	r3, r3, #24
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	071b      	lsls	r3, r3, #28
 800742c:	4919      	ldr	r1, [pc, #100]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800742e:	4313      	orrs	r3, r2
 8007430:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007434:	4b17      	ldr	r3, [pc, #92]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a16      	ldr	r2, [pc, #88]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800743a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800743e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007440:	f7fc ff24 	bl	800428c <HAL_GetTick>
 8007444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007446:	e008      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007448:	f7fc ff20 	bl	800428c <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b64      	cmp	r3, #100	; 0x64
 8007454:	d901      	bls.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e0d7      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800745a:	4b0e      	ldr	r3, [pc, #56]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0f0      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b01      	cmp	r3, #1
 800746a:	f040 80cd 	bne.w	8007608 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800746e:	4b09      	ldr	r3, [pc, #36]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a08      	ldr	r2, [pc, #32]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800747a:	f7fc ff07 	bl	800428c <HAL_GetTick>
 800747e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007480:	e00a      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007482:	f7fc ff03 	bl	800428c <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b64      	cmp	r3, #100	; 0x64
 800748e:	d903      	bls.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e0ba      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007494:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007498:	4b5e      	ldr	r3, [pc, #376]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074a4:	d0ed      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d02e      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d12a      	bne.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074ce:	4b51      	ldr	r3, [pc, #324]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074dc:	4b4d      	ldr	r3, [pc, #308]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e2:	0f1b      	lsrs	r3, r3, #28
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	019a      	lsls	r2, r3, #6
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	061b      	lsls	r3, r3, #24
 80074fc:	431a      	orrs	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	071b      	lsls	r3, r3, #28
 8007502:	4944      	ldr	r1, [pc, #272]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800750a:	4b42      	ldr	r3, [pc, #264]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800750c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007510:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	3b01      	subs	r3, #1
 800751a:	021b      	lsls	r3, r3, #8
 800751c:	493d      	ldr	r1, [pc, #244]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d022      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007538:	d11d      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800753a:	4b36      	ldr	r3, [pc, #216]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800753c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007540:	0e1b      	lsrs	r3, r3, #24
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007548:	4b32      	ldr	r3, [pc, #200]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800754a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754e:	0f1b      	lsrs	r3, r3, #28
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	019a      	lsls	r2, r3, #6
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	041b      	lsls	r3, r3, #16
 8007562:	431a      	orrs	r2, r3
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	061b      	lsls	r3, r3, #24
 8007568:	431a      	orrs	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	071b      	lsls	r3, r3, #28
 800756e:	4929      	ldr	r1, [pc, #164]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d028      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007582:	4b24      	ldr	r3, [pc, #144]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	0e1b      	lsrs	r3, r3, #24
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007590:	4b20      	ldr	r3, [pc, #128]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007596:	0c1b      	lsrs	r3, r3, #16
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	019a      	lsls	r2, r3, #6
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	041b      	lsls	r3, r3, #16
 80075a8:	431a      	orrs	r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	061b      	lsls	r3, r3, #24
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	071b      	lsls	r3, r3, #28
 80075b6:	4917      	ldr	r1, [pc, #92]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075be:	4b15      	ldr	r3, [pc, #84]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	4911      	ldr	r1, [pc, #68]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075d4:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a0e      	ldr	r2, [pc, #56]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e0:	f7fc fe54 	bl	800428c <HAL_GetTick>
 80075e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075e6:	e008      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075e8:	f7fc fe50 	bl	800428c <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b64      	cmp	r3, #100	; 0x64
 80075f4:	d901      	bls.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e007      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075fa:	4b06      	ldr	r3, [pc, #24]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007606:	d1ef      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	40023800 	.word	0x40023800

08007618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e049      	b.n	80076be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f841 	bl	80076c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f000 f9e8 	bl	8007a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
	...

080076dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d001      	beq.n	80076f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e054      	b.n	800779e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0201 	orr.w	r2, r2, #1
 800770a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a26      	ldr	r2, [pc, #152]	; (80077ac <HAL_TIM_Base_Start_IT+0xd0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d022      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x80>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771e:	d01d      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x80>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a22      	ldr	r2, [pc, #136]	; (80077b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d018      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x80>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d013      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x80>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1f      	ldr	r2, [pc, #124]	; (80077b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00e      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x80>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <HAL_TIM_Base_Start_IT+0xe0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d009      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x80>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1c      	ldr	r2, [pc, #112]	; (80077c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d004      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x80>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1b      	ldr	r2, [pc, #108]	; (80077c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d115      	bne.n	8007788 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	4b19      	ldr	r3, [pc, #100]	; (80077c8 <HAL_TIM_Base_Start_IT+0xec>)
 8007764:	4013      	ands	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b06      	cmp	r3, #6
 800776c:	d015      	beq.n	800779a <HAL_TIM_Base_Start_IT+0xbe>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007774:	d011      	beq.n	800779a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0201 	orr.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007786:	e008      	b.n	800779a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	e000      	b.n	800779c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40010000 	.word	0x40010000
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800
 80077b8:	40000c00 	.word	0x40000c00
 80077bc:	40010400 	.word	0x40010400
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40001800 	.word	0x40001800
 80077c8:	00010007 	.word	0x00010007

080077cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d020      	beq.n	8007830 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01b      	beq.n	8007830 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0202 	mvn.w	r2, #2
 8007800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f8e9 	bl	80079ee <HAL_TIM_IC_CaptureCallback>
 800781c:	e005      	b.n	800782a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f8db 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8ec 	bl	8007a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	d020      	beq.n	800787c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01b      	beq.n	800787c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0204 	mvn.w	r2, #4
 800784c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8c3 	bl	80079ee <HAL_TIM_IC_CaptureCallback>
 8007868:	e005      	b.n	8007876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f8b5 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8c6 	bl	8007a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d020      	beq.n	80078c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01b      	beq.n	80078c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f06f 0208 	mvn.w	r2, #8
 8007898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2204      	movs	r2, #4
 800789e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f89d 	bl	80079ee <HAL_TIM_IC_CaptureCallback>
 80078b4:	e005      	b.n	80078c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f88f 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f8a0 	bl	8007a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d020      	beq.n	8007914 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01b      	beq.n	8007914 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0210 	mvn.w	r2, #16
 80078e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2208      	movs	r2, #8
 80078ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f877 	bl	80079ee <HAL_TIM_IC_CaptureCallback>
 8007900:	e005      	b.n	800790e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f869 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f87a 	bl	8007a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f06f 0201 	mvn.w	r2, #1
 8007930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fc f856 	bl	80039e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00c      	beq.n	8007966 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800795e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f919 	bl	8007b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00c      	beq.n	800798a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f911 	bl	8007bac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00c      	beq.n	80079ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d007      	beq.n	80079ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f834 	bl	8007a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00c      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f06f 0220 	mvn.w	r2, #32
 80079ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f8d9 	bl	8007b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d2:	bf00      	nop
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a46      	ldr	r2, [pc, #280]	; (8007b58 <TIM_Base_SetConfig+0x12c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4a:	d00f      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a43      	ldr	r2, [pc, #268]	; (8007b5c <TIM_Base_SetConfig+0x130>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00b      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a42      	ldr	r2, [pc, #264]	; (8007b60 <TIM_Base_SetConfig+0x134>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a41      	ldr	r2, [pc, #260]	; (8007b64 <TIM_Base_SetConfig+0x138>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a40      	ldr	r2, [pc, #256]	; (8007b68 <TIM_Base_SetConfig+0x13c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d108      	bne.n	8007a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a35      	ldr	r2, [pc, #212]	; (8007b58 <TIM_Base_SetConfig+0x12c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d02b      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8c:	d027      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a32      	ldr	r2, [pc, #200]	; (8007b5c <TIM_Base_SetConfig+0x130>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d023      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a31      	ldr	r2, [pc, #196]	; (8007b60 <TIM_Base_SetConfig+0x134>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01f      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a30      	ldr	r2, [pc, #192]	; (8007b64 <TIM_Base_SetConfig+0x138>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01b      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a2f      	ldr	r2, [pc, #188]	; (8007b68 <TIM_Base_SetConfig+0x13c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d017      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2e      	ldr	r2, [pc, #184]	; (8007b6c <TIM_Base_SetConfig+0x140>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d013      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a2d      	ldr	r2, [pc, #180]	; (8007b70 <TIM_Base_SetConfig+0x144>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00f      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a2c      	ldr	r2, [pc, #176]	; (8007b74 <TIM_Base_SetConfig+0x148>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a2b      	ldr	r2, [pc, #172]	; (8007b78 <TIM_Base_SetConfig+0x14c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d007      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a2a      	ldr	r2, [pc, #168]	; (8007b7c <TIM_Base_SetConfig+0x150>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a29      	ldr	r2, [pc, #164]	; (8007b80 <TIM_Base_SetConfig+0x154>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d108      	bne.n	8007af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a10      	ldr	r2, [pc, #64]	; (8007b58 <TIM_Base_SetConfig+0x12c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d003      	beq.n	8007b24 <TIM_Base_SetConfig+0xf8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a12      	ldr	r2, [pc, #72]	; (8007b68 <TIM_Base_SetConfig+0x13c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d103      	bne.n	8007b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d105      	bne.n	8007b4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f023 0201 	bic.w	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	611a      	str	r2, [r3, #16]
  }
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40010400 	.word	0x40010400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40014400 	.word	0x40014400
 8007b74:	40014800 	.word	0x40014800
 8007b78:	40001800 	.word	0x40001800
 8007b7c:	40001c00 	.word	0x40001c00
 8007b80:	40002000 	.word	0x40002000

08007b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007bc6:	4b98      	ldr	r3, [pc, #608]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007bc8:	22c0      	movs	r2, #192	; 0xc0
 8007bca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007bcc:	4b96      	ldr	r3, [pc, #600]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007bce:	22a8      	movs	r2, #168	; 0xa8
 8007bd0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007bd2:	4b95      	ldr	r3, [pc, #596]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8007bd8:	4b93      	ldr	r3, [pc, #588]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007bda:	227b      	movs	r2, #123	; 0x7b
 8007bdc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007bde:	4b93      	ldr	r3, [pc, #588]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007be0:	22ff      	movs	r2, #255	; 0xff
 8007be2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007be4:	4b91      	ldr	r3, [pc, #580]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007be6:	22ff      	movs	r2, #255	; 0xff
 8007be8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007bea:	4b90      	ldr	r3, [pc, #576]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007bec:	22ff      	movs	r2, #255	; 0xff
 8007bee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007bf0:	4b8e      	ldr	r3, [pc, #568]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007bf6:	4b8e      	ldr	r3, [pc, #568]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007bf8:	22c0      	movs	r2, #192	; 0xc0
 8007bfa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007bfc:	4b8c      	ldr	r3, [pc, #560]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007bfe:	22a8      	movs	r2, #168	; 0xa8
 8007c00:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007c02:	4b8b      	ldr	r3, [pc, #556]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007c08:	4b89      	ldr	r3, [pc, #548]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007c0e:	2100      	movs	r1, #0
 8007c10:	2000      	movs	r0, #0
 8007c12:	f006 fa83 	bl	800e11c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007c16:	4b84      	ldr	r3, [pc, #528]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	061a      	lsls	r2, r3, #24
 8007c1c:	4b82      	ldr	r3, [pc, #520]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	041b      	lsls	r3, r3, #16
 8007c22:	431a      	orrs	r2, r3
 8007c24:	4b80      	ldr	r3, [pc, #512]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c26:	789b      	ldrb	r3, [r3, #2]
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	4a7e      	ldr	r2, [pc, #504]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c2e:	78d2      	ldrb	r2, [r2, #3]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	061a      	lsls	r2, r3, #24
 8007c34:	4b7c      	ldr	r3, [pc, #496]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	0619      	lsls	r1, r3, #24
 8007c3a:	4b7b      	ldr	r3, [pc, #492]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	4319      	orrs	r1, r3
 8007c42:	4b79      	ldr	r3, [pc, #484]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c44:	789b      	ldrb	r3, [r3, #2]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	4977      	ldr	r1, [pc, #476]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c4c:	78c9      	ldrb	r1, [r1, #3]
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c56:	431a      	orrs	r2, r3
 8007c58:	4b73      	ldr	r3, [pc, #460]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	0619      	lsls	r1, r3, #24
 8007c5e:	4b72      	ldr	r3, [pc, #456]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c60:	785b      	ldrb	r3, [r3, #1]
 8007c62:	041b      	lsls	r3, r3, #16
 8007c64:	4319      	orrs	r1, r3
 8007c66:	4b70      	ldr	r3, [pc, #448]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c68:	789b      	ldrb	r3, [r3, #2]
 8007c6a:	021b      	lsls	r3, r3, #8
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	496e      	ldr	r1, [pc, #440]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c70:	78c9      	ldrb	r1, [r1, #3]
 8007c72:	430b      	orrs	r3, r1
 8007c74:	0a1b      	lsrs	r3, r3, #8
 8007c76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	4b6a      	ldr	r3, [pc, #424]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	0619      	lsls	r1, r3, #24
 8007c82:	4b69      	ldr	r3, [pc, #420]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	041b      	lsls	r3, r3, #16
 8007c88:	4319      	orrs	r1, r3
 8007c8a:	4b67      	ldr	r3, [pc, #412]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c8c:	789b      	ldrb	r3, [r3, #2]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	430b      	orrs	r3, r1
 8007c92:	4965      	ldr	r1, [pc, #404]	; (8007e28 <MX_LWIP_Init+0x268>)
 8007c94:	78c9      	ldrb	r1, [r1, #3]
 8007c96:	430b      	orrs	r3, r1
 8007c98:	0e1b      	lsrs	r3, r3, #24
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	4a65      	ldr	r2, [pc, #404]	; (8007e34 <MX_LWIP_Init+0x274>)
 8007c9e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007ca0:	4b62      	ldr	r3, [pc, #392]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	061a      	lsls	r2, r3, #24
 8007ca6:	4b61      	ldr	r3, [pc, #388]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	041b      	lsls	r3, r3, #16
 8007cac:	431a      	orrs	r2, r3
 8007cae:	4b5f      	ldr	r3, [pc, #380]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007cb0:	789b      	ldrb	r3, [r3, #2]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	4a5d      	ldr	r2, [pc, #372]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007cb8:	78d2      	ldrb	r2, [r2, #3]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	061a      	lsls	r2, r3, #24
 8007cbe:	4b5b      	ldr	r3, [pc, #364]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	0619      	lsls	r1, r3, #24
 8007cc4:	4b59      	ldr	r3, [pc, #356]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007cc6:	785b      	ldrb	r3, [r3, #1]
 8007cc8:	041b      	lsls	r3, r3, #16
 8007cca:	4319      	orrs	r1, r3
 8007ccc:	4b57      	ldr	r3, [pc, #348]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007cce:	789b      	ldrb	r3, [r3, #2]
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	4955      	ldr	r1, [pc, #340]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007cd6:	78c9      	ldrb	r1, [r1, #3]
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	4b52      	ldr	r3, [pc, #328]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	0619      	lsls	r1, r3, #24
 8007ce8:	4b50      	ldr	r3, [pc, #320]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	041b      	lsls	r3, r3, #16
 8007cee:	4319      	orrs	r1, r3
 8007cf0:	4b4e      	ldr	r3, [pc, #312]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007cf2:	789b      	ldrb	r3, [r3, #2]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	494c      	ldr	r1, [pc, #304]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007cfa:	78c9      	ldrb	r1, [r1, #3]
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	0a1b      	lsrs	r3, r3, #8
 8007d00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d04:	431a      	orrs	r2, r3
 8007d06:	4b49      	ldr	r3, [pc, #292]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	0619      	lsls	r1, r3, #24
 8007d0c:	4b47      	ldr	r3, [pc, #284]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007d0e:	785b      	ldrb	r3, [r3, #1]
 8007d10:	041b      	lsls	r3, r3, #16
 8007d12:	4319      	orrs	r1, r3
 8007d14:	4b45      	ldr	r3, [pc, #276]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007d16:	789b      	ldrb	r3, [r3, #2]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	430b      	orrs	r3, r1
 8007d1c:	4943      	ldr	r1, [pc, #268]	; (8007e2c <MX_LWIP_Init+0x26c>)
 8007d1e:	78c9      	ldrb	r1, [r1, #3]
 8007d20:	430b      	orrs	r3, r1
 8007d22:	0e1b      	lsrs	r3, r3, #24
 8007d24:	4313      	orrs	r3, r2
 8007d26:	4a44      	ldr	r2, [pc, #272]	; (8007e38 <MX_LWIP_Init+0x278>)
 8007d28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007d2a:	4b41      	ldr	r3, [pc, #260]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	061a      	lsls	r2, r3, #24
 8007d30:	4b3f      	ldr	r3, [pc, #252]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	041b      	lsls	r3, r3, #16
 8007d36:	431a      	orrs	r2, r3
 8007d38:	4b3d      	ldr	r3, [pc, #244]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d3a:	789b      	ldrb	r3, [r3, #2]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	4a3b      	ldr	r2, [pc, #236]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d42:	78d2      	ldrb	r2, [r2, #3]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	061a      	lsls	r2, r3, #24
 8007d48:	4b39      	ldr	r3, [pc, #228]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	0619      	lsls	r1, r3, #24
 8007d4e:	4b38      	ldr	r3, [pc, #224]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d50:	785b      	ldrb	r3, [r3, #1]
 8007d52:	041b      	lsls	r3, r3, #16
 8007d54:	4319      	orrs	r1, r3
 8007d56:	4b36      	ldr	r3, [pc, #216]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d58:	789b      	ldrb	r3, [r3, #2]
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	4934      	ldr	r1, [pc, #208]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d60:	78c9      	ldrb	r1, [r1, #3]
 8007d62:	430b      	orrs	r3, r1
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	4b30      	ldr	r3, [pc, #192]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	0619      	lsls	r1, r3, #24
 8007d72:	4b2f      	ldr	r3, [pc, #188]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	041b      	lsls	r3, r3, #16
 8007d78:	4319      	orrs	r1, r3
 8007d7a:	4b2d      	ldr	r3, [pc, #180]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d7c:	789b      	ldrb	r3, [r3, #2]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	430b      	orrs	r3, r1
 8007d82:	492b      	ldr	r1, [pc, #172]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d84:	78c9      	ldrb	r1, [r1, #3]
 8007d86:	430b      	orrs	r3, r1
 8007d88:	0a1b      	lsrs	r3, r3, #8
 8007d8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	4b27      	ldr	r3, [pc, #156]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	0619      	lsls	r1, r3, #24
 8007d96:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	4319      	orrs	r1, r3
 8007d9e:	4b24      	ldr	r3, [pc, #144]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007da0:	789b      	ldrb	r3, [r3, #2]
 8007da2:	021b      	lsls	r3, r3, #8
 8007da4:	430b      	orrs	r3, r1
 8007da6:	4922      	ldr	r1, [pc, #136]	; (8007e30 <MX_LWIP_Init+0x270>)
 8007da8:	78c9      	ldrb	r1, [r1, #3]
 8007daa:	430b      	orrs	r3, r1
 8007dac:	0e1b      	lsrs	r3, r3, #24
 8007dae:	4313      	orrs	r3, r2
 8007db0:	4a22      	ldr	r2, [pc, #136]	; (8007e3c <MX_LWIP_Init+0x27c>)
 8007db2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007db4:	4b22      	ldr	r3, [pc, #136]	; (8007e40 <MX_LWIP_Init+0x280>)
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	4b22      	ldr	r3, [pc, #136]	; (8007e44 <MX_LWIP_Init+0x284>)
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <MX_LWIP_Init+0x27c>)
 8007dc2:	4a1d      	ldr	r2, [pc, #116]	; (8007e38 <MX_LWIP_Init+0x278>)
 8007dc4:	491b      	ldr	r1, [pc, #108]	; (8007e34 <MX_LWIP_Init+0x274>)
 8007dc6:	4820      	ldr	r0, [pc, #128]	; (8007e48 <MX_LWIP_Init+0x288>)
 8007dc8:	f006 ff72 	bl	800ecb0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007dcc:	481e      	ldr	r0, [pc, #120]	; (8007e48 <MX_LWIP_Init+0x288>)
 8007dce:	f007 f921 	bl	800f014 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <MX_LWIP_Init+0x288>)
 8007dd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007dd8:	089b      	lsrs	r3, r3, #2
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007de4:	4818      	ldr	r0, [pc, #96]	; (8007e48 <MX_LWIP_Init+0x288>)
 8007de6:	f007 f925 	bl	800f034 <netif_set_up>
 8007dea:	e002      	b.n	8007df2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007dec:	4816      	ldr	r0, [pc, #88]	; (8007e48 <MX_LWIP_Init+0x288>)
 8007dee:	f007 f98d 	bl	800f10c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007df2:	4916      	ldr	r1, [pc, #88]	; (8007e4c <MX_LWIP_Init+0x28c>)
 8007df4:	4814      	ldr	r0, [pc, #80]	; (8007e48 <MX_LWIP_Init+0x288>)
 8007df6:	f007 fa1f 	bl	800f238 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007dfa:	2224      	movs	r2, #36	; 0x24
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4814      	ldr	r0, [pc, #80]	; (8007e50 <MX_LWIP_Init+0x290>)
 8007e00:	f011 faa7 	bl	8019352 <memset>
  attributes.name = "EthLink";
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <MX_LWIP_Init+0x290>)
 8007e06:	4a13      	ldr	r2, [pc, #76]	; (8007e54 <MX_LWIP_Init+0x294>)
 8007e08:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007e0a:	4b11      	ldr	r3, [pc, #68]	; (8007e50 <MX_LWIP_Init+0x290>)
 8007e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e10:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007e12:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <MX_LWIP_Init+0x290>)
 8007e14:	2210      	movs	r2, #16
 8007e16:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007e18:	4a0d      	ldr	r2, [pc, #52]	; (8007e50 <MX_LWIP_Init+0x290>)
 8007e1a:	490b      	ldr	r1, [pc, #44]	; (8007e48 <MX_LWIP_Init+0x288>)
 8007e1c:	480e      	ldr	r0, [pc, #56]	; (8007e58 <MX_LWIP_Init+0x298>)
 8007e1e:	f000 fd85 	bl	800892c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007e22:	bf00      	nop
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	200419cc 	.word	0x200419cc
 8007e2c:	200419d0 	.word	0x200419d0
 8007e30:	200419d4 	.word	0x200419d4
 8007e34:	200419c0 	.word	0x200419c0
 8007e38:	200419c4 	.word	0x200419c4
 8007e3c:	200419c8 	.word	0x200419c8
 8007e40:	0800e02d 	.word	0x0800e02d
 8007e44:	08008359 	.word	0x08008359
 8007e48:	2004198c 	.word	0x2004198c
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	200419d8 	.word	0x200419d8
 8007e54:	0801a34c 	.word	0x0801a34c
 8007e58:	080085e5 	.word	0x080085e5

08007e5c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007e82:	2320      	movs	r3, #32
 8007e84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e86:	f3bf 8f4f 	dsb	sy
}
 8007e8a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007e8c:	e00b      	b.n	8007ea6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007e8e:	4a0d      	ldr	r2, [pc, #52]	; (8007ec4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dcf0      	bgt.n	8007e8e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007eac:	f3bf 8f4f 	dsb	sy
}
 8007eb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007eb2:	f3bf 8f6f 	isb	sy
}
 8007eb6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007eb8:	bf00      	nop
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	e000ed00 	.word	0xe000ed00

08007ec8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <HAL_ETH_RxCpltCallback+0x1c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 f847 	bl	8008f68 <osSemaphoreRelease>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20046388 	.word	0x20046388

08007ee8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007ef0:	4b04      	ldr	r3, [pc, #16]	; (8007f04 <HAL_ETH_TxCpltCallback+0x1c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 f837 	bl	8008f68 <osSemaphoreRelease>
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	2004638c 	.word	0x2004638c

08007f08 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7fd f909 	bl	8005128 <HAL_ETH_GetDMAError>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1c:	2b80      	cmp	r3, #128	; 0x80
 8007f1e:	d104      	bne.n	8007f2a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <HAL_ETH_ErrorCallback+0x2c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 f81f 	bl	8008f68 <osSemaphoreRelease>
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20046388 	.word	0x20046388

08007f38 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b0aa      	sub	sp, #168	; 0xa8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8007f52:	f107 0310 	add.w	r3, r7, #16
 8007f56:	2264      	movs	r2, #100	; 0x64
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f011 f9f9 	bl	8019352 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007f60:	4b85      	ldr	r3, [pc, #532]	; (8008178 <low_level_init+0x240>)
 8007f62:	4a86      	ldr	r2, [pc, #536]	; (800817c <low_level_init+0x244>)
 8007f64:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007f66:	2300      	movs	r3, #0
 8007f68:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007f6a:	2380      	movs	r3, #128	; 0x80
 8007f6c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007f6e:	23e1      	movs	r3, #225	; 0xe1
 8007f70:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007f72:	2300      	movs	r3, #0
 8007f74:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007f76:	2300      	movs	r3, #0
 8007f78:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007f7e:	4a7e      	ldr	r2, [pc, #504]	; (8008178 <low_level_init+0x240>)
 8007f80:	f107 0308 	add.w	r3, r7, #8
 8007f84:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007f86:	4b7c      	ldr	r3, [pc, #496]	; (8008178 <low_level_init+0x240>)
 8007f88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007f8c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007f8e:	4b7a      	ldr	r3, [pc, #488]	; (8008178 <low_level_init+0x240>)
 8007f90:	4a7b      	ldr	r2, [pc, #492]	; (8008180 <low_level_init+0x248>)
 8007f92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007f94:	4b78      	ldr	r3, [pc, #480]	; (8008178 <low_level_init+0x240>)
 8007f96:	4a7b      	ldr	r2, [pc, #492]	; (8008184 <low_level_init+0x24c>)
 8007f98:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007f9a:	4b77      	ldr	r3, [pc, #476]	; (8008178 <low_level_init+0x240>)
 8007f9c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007fa0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007fa2:	4875      	ldr	r0, [pc, #468]	; (8008178 <low_level_init+0x240>)
 8007fa4:	f7fc fa84 	bl	80044b0 <HAL_ETH_Init>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007fae:	2238      	movs	r2, #56	; 0x38
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4875      	ldr	r0, [pc, #468]	; (8008188 <low_level_init+0x250>)
 8007fb4:	f011 f9cd 	bl	8019352 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007fb8:	4b73      	ldr	r3, [pc, #460]	; (8008188 <low_level_init+0x250>)
 8007fba:	2221      	movs	r2, #33	; 0x21
 8007fbc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007fbe:	4b72      	ldr	r3, [pc, #456]	; (8008188 <low_level_init+0x250>)
 8007fc0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007fc4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007fc6:	4b70      	ldr	r3, [pc, #448]	; (8008188 <low_level_init+0x250>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007fcc:	486f      	ldr	r0, [pc, #444]	; (800818c <low_level_init+0x254>)
 8007fce:	f006 fd29 	bl	800ea24 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2206      	movs	r2, #6
 8007fd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007fda:	4b67      	ldr	r3, [pc, #412]	; (8008178 <low_level_init+0x240>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	781a      	ldrb	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007fe6:	4b64      	ldr	r3, [pc, #400]	; (8008178 <low_level_init+0x240>)
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	785a      	ldrb	r2, [r3, #1]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007ff2:	4b61      	ldr	r3, [pc, #388]	; (8008178 <low_level_init+0x240>)
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	789a      	ldrb	r2, [r3, #2]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007ffe:	4b5e      	ldr	r3, [pc, #376]	; (8008178 <low_level_init+0x240>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	78da      	ldrb	r2, [r3, #3]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800800a:	4b5b      	ldr	r3, [pc, #364]	; (8008178 <low_level_init+0x240>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	791a      	ldrb	r2, [r3, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008016:	4b58      	ldr	r3, [pc, #352]	; (8008178 <low_level_init+0x240>)
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	795a      	ldrb	r2, [r3, #5]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008028:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008030:	f043 030a 	orr.w	r3, r3, #10
 8008034:	b2da      	uxtb	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800803c:	2200      	movs	r2, #0
 800803e:	2101      	movs	r1, #1
 8008040:	2001      	movs	r0, #1
 8008042:	f000 fe8f 	bl	8008d64 <osSemaphoreNew>
 8008046:	4603      	mov	r3, r0
 8008048:	4a51      	ldr	r2, [pc, #324]	; (8008190 <low_level_init+0x258>)
 800804a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800804c:	2200      	movs	r2, #0
 800804e:	2101      	movs	r1, #1
 8008050:	2001      	movs	r0, #1
 8008052:	f000 fe87 	bl	8008d64 <osSemaphoreNew>
 8008056:	4603      	mov	r3, r0
 8008058:	4a4e      	ldr	r2, [pc, #312]	; (8008194 <low_level_init+0x25c>)
 800805a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800805c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008060:	2224      	movs	r2, #36	; 0x24
 8008062:	2100      	movs	r1, #0
 8008064:	4618      	mov	r0, r3
 8008066:	f011 f974 	bl	8019352 <memset>
  attributes.name = "EthIf";
 800806a:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <low_level_init+0x260>)
 800806c:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800806e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8008072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8008076:	2330      	movs	r3, #48	; 0x30
 8008078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800807c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008080:	461a      	mov	r2, r3
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	4845      	ldr	r0, [pc, #276]	; (800819c <low_level_init+0x264>)
 8008086:	f000 fc51 	bl	800892c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800808a:	4945      	ldr	r1, [pc, #276]	; (80081a0 <low_level_init+0x268>)
 800808c:	4845      	ldr	r0, [pc, #276]	; (80081a4 <low_level_init+0x26c>)
 800808e:	f7fb ffd6 	bl	800403e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008092:	4844      	ldr	r0, [pc, #272]	; (80081a4 <low_level_init+0x26c>)
 8008094:	f7fc f805 	bl	80040a2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008098:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800809c:	2b00      	cmp	r3, #0
 800809e:	d164      	bne.n	800816a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80080a0:	4840      	ldr	r0, [pc, #256]	; (80081a4 <low_level_init+0x26c>)
 80080a2:	f7fc f84b 	bl	800413c <LAN8742_GetLinkState>
 80080a6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80080aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	dc06      	bgt.n	80080c0 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f007 f890 	bl	800f1d8 <netif_set_link_down>
      netif_set_down(netif);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f007 f827 	bl	800f10c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80080be:	e056      	b.n	800816e <low_level_init+0x236>
      switch (PHYLinkState)
 80080c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080c4:	3b02      	subs	r3, #2
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d82a      	bhi.n	8008120 <low_level_init+0x1e8>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <low_level_init+0x198>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	080080e1 	.word	0x080080e1
 80080d4:	080080f3 	.word	0x080080f3
 80080d8:	08008103 	.word	0x08008103
 80080dc:	08008113 	.word	0x08008113
        duplex = ETH_FULLDUPLEX_MODE;
 80080e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80080e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80080f0:	e01f      	b.n	8008132 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80080f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008100:	e017      	b.n	8008132 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800810a:	2300      	movs	r3, #0
 800810c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008110:	e00f      	b.n	8008132 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008112:	2300      	movs	r3, #0
 8008114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8008118:	2300      	movs	r3, #0
 800811a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800811e:	e008      	b.n	8008132 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800812c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008130:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008132:	f107 0310 	add.w	r3, r7, #16
 8008136:	4619      	mov	r1, r3
 8008138:	480f      	ldr	r0, [pc, #60]	; (8008178 <low_level_init+0x240>)
 800813a:	f7fc fea1 	bl	8004e80 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800813e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8008144:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800814a:	f107 0310 	add.w	r3, r7, #16
 800814e:	4619      	mov	r1, r3
 8008150:	4809      	ldr	r0, [pc, #36]	; (8008178 <low_level_init+0x240>)
 8008152:	f7fc ff8c 	bl	800506e <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008156:	4808      	ldr	r0, [pc, #32]	; (8008178 <low_level_init+0x240>)
 8008158:	f7fc fa44 	bl	80045e4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f006 ff69 	bl	800f034 <netif_set_up>
    netif_set_link_up(netif);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f007 f804 	bl	800f170 <netif_set_link_up>
}
 8008168:	e001      	b.n	800816e <low_level_init+0x236>
    Error_Handler();
 800816a:	f7fb fc4d 	bl	8003a08 <Error_Handler>
}
 800816e:	bf00      	nop
 8008170:	37a8      	adds	r7, #168	; 0xa8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20046390 	.word	0x20046390
 800817c:	40028000 	.word	0x40028000
 8008180:	20001b60 	.word	0x20001b60
 8008184:	20001ac0 	.word	0x20001ac0
 8008188:	20046440 	.word	0x20046440
 800818c:	0801d760 	.word	0x0801d760
 8008190:	20046388 	.word	0x20046388
 8008194:	2004638c 	.word	0x2004638c
 8008198:	0801a354 	.word	0x0801a354
 800819c:	08008305 	.word	0x08008305
 80081a0:	20001a38 	.word	0x20001a38
 80081a4:	20046478 	.word	0x20046478

080081a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b092      	sub	sp, #72	; 0x48
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80081c0:	f107 030c 	add.w	r3, r7, #12
 80081c4:	2230      	movs	r2, #48	; 0x30
 80081c6:	2100      	movs	r1, #0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f011 f8c2 	bl	8019352 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80081ce:	f107 030c 	add.w	r3, r7, #12
 80081d2:	2230      	movs	r2, #48	; 0x30
 80081d4:	2100      	movs	r1, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f011 f8bb 	bl	8019352 <memset>

  for(q = p; q != NULL; q = q->next)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	643b      	str	r3, [r7, #64]	; 0x40
 80081e0:	e045      	b.n	800826e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80081e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d902      	bls.n	80081ee <low_level_output+0x46>
      return ERR_IF;
 80081e8:	f06f 030b 	mvn.w	r3, #11
 80081ec:	e065      	b.n	80082ba <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80081ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f0:	6859      	ldr	r1, [r3, #4]
 80081f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081f4:	4613      	mov	r3, r2
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	3348      	adds	r3, #72	; 0x48
 80081fe:	443b      	add	r3, r7
 8008200:	3b3c      	subs	r3, #60	; 0x3c
 8008202:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008206:	895b      	ldrh	r3, [r3, #10]
 8008208:	4619      	mov	r1, r3
 800820a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800820c:	4613      	mov	r3, r2
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	3348      	adds	r3, #72	; 0x48
 8008216:	443b      	add	r3, r7
 8008218:	3b38      	subs	r3, #56	; 0x38
 800821a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800821c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821e:	2b00      	cmp	r3, #0
 8008220:	d011      	beq.n	8008246 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008224:	1e5a      	subs	r2, r3, #1
 8008226:	f107 000c 	add.w	r0, r7, #12
 800822a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800822c:	460b      	mov	r3, r1
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	440b      	add	r3, r1
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	18c1      	adds	r1, r0, r3
 8008236:	4613      	mov	r3, r2
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	3348      	adds	r3, #72	; 0x48
 8008240:	443b      	add	r3, r7
 8008242:	3b34      	subs	r3, #52	; 0x34
 8008244:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800824e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008250:	4613      	mov	r3, r2
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	3348      	adds	r3, #72	; 0x48
 800825a:	443b      	add	r3, r7
 800825c:	3b34      	subs	r3, #52	; 0x34
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008264:	3301      	adds	r3, #1
 8008266:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	643b      	str	r3, [r7, #64]	; 0x40
 800826e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1b6      	bne.n	80081e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	891b      	ldrh	r3, [r3, #8]
 8008278:	461a      	mov	r2, r3
 800827a:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <low_level_output+0x11c>)
 800827c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800827e:	4a11      	ldr	r2, [pc, #68]	; (80082c4 <low_level_output+0x11c>)
 8008280:	f107 030c 	add.w	r3, r7, #12
 8008284:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008286:	4a0f      	ldr	r2, [pc, #60]	; (80082c4 <low_level_output+0x11c>)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800828c:	6838      	ldr	r0, [r7, #0]
 800828e:	f007 fc27 	bl	800fae0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8008292:	490c      	ldr	r1, [pc, #48]	; (80082c4 <low_level_output+0x11c>)
 8008294:	480c      	ldr	r0, [pc, #48]	; (80082c8 <low_level_output+0x120>)
 8008296:	f7fc fa95 	bl	80047c4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800829a:	bf00      	nop
 800829c:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <low_level_output+0x124>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fdf9 	bl	8008e9c <osSemaphoreAcquire>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1f5      	bne.n	800829c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80082b0:	4805      	ldr	r0, [pc, #20]	; (80082c8 <low_level_output+0x120>)
 80082b2:	f7fc fc27 	bl	8004b04 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80082b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3748      	adds	r7, #72	; 0x48
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20046440 	.word	0x20046440
 80082c8:	20046390 	.word	0x20046390
 80082cc:	2004638c 	.word	0x2004638c

080082d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <low_level_input+0x2c>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d105      	bne.n	80082f0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80082e4:	f107 030c 	add.w	r3, r7, #12
 80082e8:	4619      	mov	r1, r3
 80082ea:	4805      	ldr	r0, [pc, #20]	; (8008300 <low_level_input+0x30>)
 80082ec:	f7fc fac6 	bl	800487c <HAL_ETH_ReadData>
  }

  return p;
 80082f0:	68fb      	ldr	r3, [r7, #12]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20046384 	.word	0x20046384
 8008300:	20046390 	.word	0x20046390

08008304 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008314:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <ethernetif_input+0x50>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fdbd 	bl	8008e9c <osSemaphoreAcquire>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f5      	bne.n	8008314 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8008328:	68b8      	ldr	r0, [r7, #8]
 800832a:	f7ff ffd1 	bl	80082d0 <low_level_input>
 800832e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	4798      	blx	r3
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f007 fb24 	bl	800f994 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1ea      	bne.n	8008328 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008352:	e7df      	b.n	8008314 <ethernetif_input+0x10>
 8008354:	20046388 	.word	0x20046388

08008358 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <ethernetif_init+0x1c>
 8008366:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <ethernetif_init+0x48>)
 8008368:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800836c:	490d      	ldr	r1, [pc, #52]	; (80083a4 <ethernetif_init+0x4c>)
 800836e:	480e      	ldr	r0, [pc, #56]	; (80083a8 <ethernetif_init+0x50>)
 8008370:	f011 f88c 	bl	801948c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2273      	movs	r2, #115	; 0x73
 8008378:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2274      	movs	r2, #116	; 0x74
 8008380:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a09      	ldr	r2, [pc, #36]	; (80083ac <ethernetif_init+0x54>)
 8008388:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a08      	ldr	r2, [pc, #32]	; (80083b0 <ethernetif_init+0x58>)
 800838e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7ff fdd1 	bl	8007f38 <low_level_init>

  return ERR_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	0801a35c 	.word	0x0801a35c
 80083a4:	0801a378 	.word	0x0801a378
 80083a8:	0801a388 	.word	0x0801a388
 80083ac:	080170dd 	.word	0x080170dd
 80083b0:	080081a9 	.word	0x080081a9

080083b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80083c0:	68f9      	ldr	r1, [r7, #12]
 80083c2:	4809      	ldr	r0, [pc, #36]	; (80083e8 <pbuf_free_custom+0x34>)
 80083c4:	f006 fc1e 	bl	800ec04 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80083c8:	4b08      	ldr	r3, [pc, #32]	; (80083ec <pbuf_free_custom+0x38>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d107      	bne.n	80083e0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80083d0:	4b06      	ldr	r3, [pc, #24]	; (80083ec <pbuf_free_custom+0x38>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80083d6:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <pbuf_free_custom+0x3c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fdc4 	bl	8008f68 <osSemaphoreRelease>
  }
}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	0801d760 	.word	0x0801d760
 80083ec:	20046384 	.word	0x20046384
 80083f0:	20046388 	.word	0x20046388

080083f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80083f8:	f7fb ff48 	bl	800428c <HAL_GetTick>
 80083fc:	4603      	mov	r3, r0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	; 0x38
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800840c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	605a      	str	r2, [r3, #4]
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	60da      	str	r2, [r3, #12]
 800841a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a44      	ldr	r2, [pc, #272]	; (8008534 <HAL_ETH_MspInit+0x130>)
 8008422:	4293      	cmp	r3, r2
 8008424:	f040 8081 	bne.w	800852a <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008428:	4b43      	ldr	r3, [pc, #268]	; (8008538 <HAL_ETH_MspInit+0x134>)
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	4a42      	ldr	r2, [pc, #264]	; (8008538 <HAL_ETH_MspInit+0x134>)
 800842e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008432:	6313      	str	r3, [r2, #48]	; 0x30
 8008434:	4b40      	ldr	r3, [pc, #256]	; (8008538 <HAL_ETH_MspInit+0x134>)
 8008436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800843c:	623b      	str	r3, [r7, #32]
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	4b3d      	ldr	r3, [pc, #244]	; (8008538 <HAL_ETH_MspInit+0x134>)
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	4a3c      	ldr	r2, [pc, #240]	; (8008538 <HAL_ETH_MspInit+0x134>)
 8008446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800844a:	6313      	str	r3, [r2, #48]	; 0x30
 800844c:	4b3a      	ldr	r3, [pc, #232]	; (8008538 <HAL_ETH_MspInit+0x134>)
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	4b37      	ldr	r3, [pc, #220]	; (8008538 <HAL_ETH_MspInit+0x134>)
 800845a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845c:	4a36      	ldr	r2, [pc, #216]	; (8008538 <HAL_ETH_MspInit+0x134>)
 800845e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008462:	6313      	str	r3, [r2, #48]	; 0x30
 8008464:	4b34      	ldr	r3, [pc, #208]	; (8008538 <HAL_ETH_MspInit+0x134>)
 8008466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008470:	4b31      	ldr	r3, [pc, #196]	; (8008538 <HAL_ETH_MspInit+0x134>)
 8008472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008474:	4a30      	ldr	r2, [pc, #192]	; (8008538 <HAL_ETH_MspInit+0x134>)
 8008476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800847a:	6313      	str	r3, [r2, #48]	; 0x30
 800847c:	4b2e      	ldr	r3, [pc, #184]	; (8008538 <HAL_ETH_MspInit+0x134>)
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008488:	4b2b      	ldr	r3, [pc, #172]	; (8008538 <HAL_ETH_MspInit+0x134>)
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	4a2a      	ldr	r2, [pc, #168]	; (8008538 <HAL_ETH_MspInit+0x134>)
 800848e:	f043 0304 	orr.w	r3, r3, #4
 8008492:	6313      	str	r3, [r2, #48]	; 0x30
 8008494:	4b28      	ldr	r3, [pc, #160]	; (8008538 <HAL_ETH_MspInit+0x134>)
 8008496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084a0:	4b25      	ldr	r3, [pc, #148]	; (8008538 <HAL_ETH_MspInit+0x134>)
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	4a24      	ldr	r2, [pc, #144]	; (8008538 <HAL_ETH_MspInit+0x134>)
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	6313      	str	r3, [r2, #48]	; 0x30
 80084ac:	4b22      	ldr	r3, [pc, #136]	; (8008538 <HAL_ETH_MspInit+0x134>)
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80084b8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084be:	2302      	movs	r3, #2
 80084c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084c6:	2303      	movs	r3, #3
 80084c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084ca:	230b      	movs	r3, #11
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80084ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084d2:	4619      	mov	r1, r3
 80084d4:	4819      	ldr	r0, [pc, #100]	; (800853c <HAL_ETH_MspInit+0x138>)
 80084d6:	f7fd fa53 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80084da:	2332      	movs	r3, #50	; 0x32
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084de:	2302      	movs	r3, #2
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084e6:	2303      	movs	r3, #3
 80084e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084ea:	230b      	movs	r3, #11
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084f2:	4619      	mov	r1, r3
 80084f4:	4812      	ldr	r0, [pc, #72]	; (8008540 <HAL_ETH_MspInit+0x13c>)
 80084f6:	f7fd fa43 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80084fa:	2386      	movs	r3, #134	; 0x86
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084fe:	2302      	movs	r3, #2
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008502:	2300      	movs	r3, #0
 8008504:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008506:	2303      	movs	r3, #3
 8008508:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800850a:	230b      	movs	r3, #11
 800850c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800850e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008512:	4619      	mov	r1, r3
 8008514:	480b      	ldr	r0, [pc, #44]	; (8008544 <HAL_ETH_MspInit+0x140>)
 8008516:	f7fd fa33 	bl	8005980 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800851a:	2200      	movs	r2, #0
 800851c:	2105      	movs	r1, #5
 800851e:	203d      	movs	r0, #61	; 0x3d
 8008520:	f7fb ff9c 	bl	800445c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008524:	203d      	movs	r0, #61	; 0x3d
 8008526:	f7fb ffb5 	bl	8004494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800852a:	bf00      	nop
 800852c:	3738      	adds	r7, #56	; 0x38
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	40028000 	.word	0x40028000
 8008538:	40023800 	.word	0x40023800
 800853c:	40021800 	.word	0x40021800
 8008540:	40020800 	.word	0x40020800
 8008544:	40020000 	.word	0x40020000

08008548 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800854c:	4802      	ldr	r0, [pc, #8]	; (8008558 <ETH_PHY_IO_Init+0x10>)
 800854e:	f7fc fda9 	bl	80050a4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20046390 	.word	0x20046390

0800855c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
  return 0;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	68f9      	ldr	r1, [r7, #12]
 800857e:	4807      	ldr	r0, [pc, #28]	; (800859c <ETH_PHY_IO_ReadReg+0x30>)
 8008580:	f7fc fbea 	bl	8004d58 <HAL_ETH_ReadPHYRegister>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800858a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800858e:	e000      	b.n	8008592 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20046390 	.word	0x20046390

080085a0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	68f9      	ldr	r1, [r7, #12]
 80085b2:	4807      	ldr	r0, [pc, #28]	; (80085d0 <ETH_PHY_IO_WriteReg+0x30>)
 80085b4:	f7fc fc1b 	bl	8004dee <HAL_ETH_WritePHYRegister>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80085be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085c2:	e000      	b.n	80085c6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20046390 	.word	0x20046390

080085d4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80085d8:	f7fb fe58 	bl	800428c <HAL_GetTick>
 80085dc:	4603      	mov	r3, r0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b0a0      	sub	sp, #128	; 0x80
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	2264      	movs	r2, #100	; 0x64
 80085f2:	2100      	movs	r1, #0
 80085f4:	4618      	mov	r0, r3
 80085f6:	f010 feac 	bl	8019352 <memset>
  int32_t PHYLinkState = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008602:	2300      	movs	r3, #0
 8008604:	67bb      	str	r3, [r7, #120]	; 0x78
 8008606:	2300      	movs	r3, #0
 8008608:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800860e:	483a      	ldr	r0, [pc, #232]	; (80086f8 <ethernet_link_thread+0x114>)
 8008610:	f7fb fd94 	bl	800413c <LAN8742_GetLinkState>
 8008614:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008618:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800861c:	089b      	lsrs	r3, r3, #2
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00c      	beq.n	8008642 <ethernet_link_thread+0x5e>
 8008628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800862a:	2b01      	cmp	r3, #1
 800862c:	dc09      	bgt.n	8008642 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800862e:	4833      	ldr	r0, [pc, #204]	; (80086fc <ethernet_link_thread+0x118>)
 8008630:	f7fc f848 	bl	80046c4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008634:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008636:	f006 fd69 	bl	800f10c <netif_set_down>
    netif_set_link_down(netif);
 800863a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800863c:	f006 fdcc 	bl	800f1d8 <netif_set_link_down>
 8008640:	e055      	b.n	80086ee <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d14e      	bne.n	80086ee <ethernet_link_thread+0x10a>
 8008650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008652:	2b01      	cmp	r3, #1
 8008654:	dd4b      	ble.n	80086ee <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8008656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008658:	3b02      	subs	r3, #2
 800865a:	2b03      	cmp	r3, #3
 800865c:	d82a      	bhi.n	80086b4 <ethernet_link_thread+0xd0>
 800865e:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <ethernet_link_thread+0x80>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	08008675 	.word	0x08008675
 8008668:	08008687 	.word	0x08008687
 800866c:	08008697 	.word	0x08008697
 8008670:	080086a7 	.word	0x080086a7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008678:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800867a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800867e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008680:	2301      	movs	r3, #1
 8008682:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008684:	e017      	b.n	80086b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008686:	2300      	movs	r3, #0
 8008688:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800868a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800868e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008690:	2301      	movs	r3, #1
 8008692:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008694:	e00f      	b.n	80086b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008696:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800869a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800869c:	2300      	movs	r3, #0
 800869e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80086a0:	2301      	movs	r3, #1
 80086a2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80086a4:	e007      	b.n	80086b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80086aa:	2300      	movs	r3, #0
 80086ac:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80086ae:	2301      	movs	r3, #1
 80086b0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80086b2:	e000      	b.n	80086b6 <ethernet_link_thread+0xd2>
    default:
      break;
 80086b4:	bf00      	nop
    }

    if(linkchanged)
 80086b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d018      	beq.n	80086ee <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80086bc:	f107 0308 	add.w	r3, r7, #8
 80086c0:	4619      	mov	r1, r3
 80086c2:	480e      	ldr	r0, [pc, #56]	; (80086fc <ethernet_link_thread+0x118>)
 80086c4:	f7fc fbdc 	bl	8004e80 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80086c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086ca:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80086cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ce:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80086d0:	f107 0308 	add.w	r3, r7, #8
 80086d4:	4619      	mov	r1, r3
 80086d6:	4809      	ldr	r0, [pc, #36]	; (80086fc <ethernet_link_thread+0x118>)
 80086d8:	f7fc fcc9 	bl	800506e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80086dc:	4807      	ldr	r0, [pc, #28]	; (80086fc <ethernet_link_thread+0x118>)
 80086de:	f7fb ff81 	bl	80045e4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80086e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086e4:	f006 fca6 	bl	800f034 <netif_set_up>
      netif_set_link_up(netif);
 80086e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086ea:	f006 fd41 	bl	800f170 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80086ee:	2064      	movs	r0, #100	; 0x64
 80086f0:	f000 f9c2 	bl	8008a78 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80086f4:	e78b      	b.n	800860e <ethernet_link_thread+0x2a>
 80086f6:	bf00      	nop
 80086f8:	20046478 	.word	0x20046478
 80086fc:	20046390 	.word	0x20046390

08008700 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af02      	add	r7, sp, #8
 8008706:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008708:	4812      	ldr	r0, [pc, #72]	; (8008754 <HAL_ETH_RxAllocateCallback+0x54>)
 800870a:	f006 fa07 	bl	800eb1c <memp_malloc_pool>
 800870e:	60f8      	str	r0, [r7, #12]
  if (p)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d014      	beq.n	8008740 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f103 0220 	add.w	r2, r3, #32
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a0d      	ldr	r2, [pc, #52]	; (8008758 <HAL_ETH_RxAllocateCallback+0x58>)
 8008724:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800872e:	9201      	str	r2, [sp, #4]
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2241      	movs	r2, #65	; 0x41
 8008736:	2100      	movs	r1, #0
 8008738:	2000      	movs	r0, #0
 800873a:	f006 ff71 	bl	800f620 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800873e:	e005      	b.n	800874c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <HAL_ETH_RxAllocateCallback+0x5c>)
 8008742:	2201      	movs	r2, #1
 8008744:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	0801d760 	.word	0x0801d760
 8008758:	080083b5 	.word	0x080083b5
 800875c:	20046384 	.word	0x20046384

08008760 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3b20      	subs	r3, #32
 800877e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	2200      	movs	r2, #0
 800878a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	887a      	ldrh	r2, [r7, #2]
 8008790:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d103      	bne.n	80087a2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	e003      	b.n	80087aa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	61fb      	str	r3, [r7, #28]
 80087b6:	e009      	b.n	80087cc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	891a      	ldrh	r2, [r3, #8]
 80087bc:	887b      	ldrh	r3, [r7, #2]
 80087be:	4413      	add	r3, r2
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1f2      	bne.n	80087b8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80087d2:	887b      	ldrh	r3, [r7, #2]
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7ff fb4a 	bl	8007e70 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80087dc:	bf00      	nop
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f007 f8d1 	bl	800f994 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80087fa:	b480      	push	{r7}
 80087fc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80087fe:	bf00      	nop
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800880e:	f3ef 8305 	mrs	r3, IPSR
 8008812:	60bb      	str	r3, [r7, #8]
  return(result);
 8008814:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10f      	bne.n	800883a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800881a:	f3ef 8310 	mrs	r3, PRIMASK
 800881e:	607b      	str	r3, [r7, #4]
  return(result);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d105      	bne.n	8008832 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008826:	f3ef 8311 	mrs	r3, BASEPRI
 800882a:	603b      	str	r3, [r7, #0]
  return(result);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <osKernelInitialize+0x3a>
 8008832:	4b0e      	ldr	r3, [pc, #56]	; (800886c <osKernelInitialize+0x64>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d103      	bne.n	8008842 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800883a:	f06f 0305 	mvn.w	r3, #5
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	e00c      	b.n	800885c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008842:	4b0a      	ldr	r3, [pc, #40]	; (800886c <osKernelInitialize+0x64>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d105      	bne.n	8008856 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800884a:	4b08      	ldr	r3, [pc, #32]	; (800886c <osKernelInitialize+0x64>)
 800884c:	2201      	movs	r2, #1
 800884e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	e002      	b.n	800885c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800885a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800885c:	68fb      	ldr	r3, [r7, #12]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	20046498 	.word	0x20046498

08008870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008876:	f3ef 8305 	mrs	r3, IPSR
 800887a:	60bb      	str	r3, [r7, #8]
  return(result);
 800887c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10f      	bne.n	80088a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008882:	f3ef 8310 	mrs	r3, PRIMASK
 8008886:	607b      	str	r3, [r7, #4]
  return(result);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800888e:	f3ef 8311 	mrs	r3, BASEPRI
 8008892:	603b      	str	r3, [r7, #0]
  return(result);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <osKernelStart+0x3a>
 800889a:	4b0f      	ldr	r3, [pc, #60]	; (80088d8 <osKernelStart+0x68>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d103      	bne.n	80088aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80088a2:	f06f 0305 	mvn.w	r3, #5
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e010      	b.n	80088cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088aa:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <osKernelStart+0x68>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d109      	bne.n	80088c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80088b2:	f7ff ffa2 	bl	80087fa <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80088b6:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <osKernelStart+0x68>)
 80088b8:	2202      	movs	r2, #2
 80088ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80088bc:	f002 f9e4 	bl	800ac88 <vTaskStartScheduler>
      stat = osOK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	e002      	b.n	80088cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80088c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80088cc:	68fb      	ldr	r3, [r7, #12]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20046498 	.word	0x20046498

080088dc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e2:	f3ef 8305 	mrs	r3, IPSR
 80088e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80088e8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10f      	bne.n	800890e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ee:	f3ef 8310 	mrs	r3, PRIMASK
 80088f2:	607b      	str	r3, [r7, #4]
  return(result);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d105      	bne.n	8008906 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088fa:	f3ef 8311 	mrs	r3, BASEPRI
 80088fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d007      	beq.n	8008916 <osKernelGetTickCount+0x3a>
 8008906:	4b08      	ldr	r3, [pc, #32]	; (8008928 <osKernelGetTickCount+0x4c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d103      	bne.n	8008916 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800890e:	f002 faed 	bl	800aeec <xTaskGetTickCountFromISR>
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	e002      	b.n	800891c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008916:	f002 fad9 	bl	800aecc <xTaskGetTickCount>
 800891a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800891c:	68fb      	ldr	r3, [r7, #12]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20046498 	.word	0x20046498

0800892c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800892c:	b580      	push	{r7, lr}
 800892e:	b090      	sub	sp, #64	; 0x40
 8008930:	af04      	add	r7, sp, #16
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008938:	2300      	movs	r3, #0
 800893a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800893c:	f3ef 8305 	mrs	r3, IPSR
 8008940:	61fb      	str	r3, [r7, #28]
  return(result);
 8008942:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008944:	2b00      	cmp	r3, #0
 8008946:	f040 808f 	bne.w	8008a68 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800894a:	f3ef 8310 	mrs	r3, PRIMASK
 800894e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d105      	bne.n	8008962 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008956:	f3ef 8311 	mrs	r3, BASEPRI
 800895a:	617b      	str	r3, [r7, #20]
  return(result);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <osThreadNew+0x3e>
 8008962:	4b44      	ldr	r3, [pc, #272]	; (8008a74 <osThreadNew+0x148>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d07e      	beq.n	8008a68 <osThreadNew+0x13c>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d07b      	beq.n	8008a68 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008970:	2380      	movs	r3, #128	; 0x80
 8008972:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008974:	2318      	movs	r3, #24
 8008976:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008978:	2300      	movs	r3, #0
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800897c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008980:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d045      	beq.n	8008a14 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <osThreadNew+0x6a>
        name = attr->name;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d008      	beq.n	80089bc <osThreadNew+0x90>
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	2b38      	cmp	r3, #56	; 0x38
 80089ae:	d805      	bhi.n	80089bc <osThreadNew+0x90>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <osThreadNew+0x94>
        return (NULL);
 80089bc:	2300      	movs	r3, #0
 80089be:	e054      	b.n	8008a6a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	089b      	lsrs	r3, r3, #2
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00e      	beq.n	80089f6 <osThreadNew+0xca>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	2bbb      	cmp	r3, #187	; 0xbb
 80089de:	d90a      	bls.n	80089f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d006      	beq.n	80089f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <osThreadNew+0xca>
        mem = 1;
 80089f0:	2301      	movs	r3, #1
 80089f2:	623b      	str	r3, [r7, #32]
 80089f4:	e010      	b.n	8008a18 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10c      	bne.n	8008a18 <osThreadNew+0xec>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d108      	bne.n	8008a18 <osThreadNew+0xec>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <osThreadNew+0xec>
          mem = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	623b      	str	r3, [r7, #32]
 8008a12:	e001      	b.n	8008a18 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d110      	bne.n	8008a40 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a26:	9202      	str	r2, [sp, #8]
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f001 ff31 	bl	800a89c <xTaskCreateStatic>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	e013      	b.n	8008a68 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d110      	bne.n	8008a68 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	f107 0310 	add.w	r3, r7, #16
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f001 ff82 	bl	800a962 <xTaskCreate>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d001      	beq.n	8008a68 <osThreadNew+0x13c>
          hTask = NULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a68:	693b      	ldr	r3, [r7, #16]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3730      	adds	r7, #48	; 0x30
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20046498 	.word	0x20046498

08008a78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a80:	f3ef 8305 	mrs	r3, IPSR
 8008a84:	613b      	str	r3, [r7, #16]
  return(result);
 8008a86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10f      	bne.n	8008aac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a90:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d105      	bne.n	8008aa4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a98:	f3ef 8311 	mrs	r3, BASEPRI
 8008a9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <osDelay+0x3c>
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <osDelay+0x58>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d103      	bne.n	8008ab4 <osDelay+0x3c>
    stat = osErrorISR;
 8008aac:	f06f 0305 	mvn.w	r3, #5
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	e007      	b.n	8008ac4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f002 f8ac 	bl	800ac1c <vTaskDelay>
    }
  }

  return (stat);
 8008ac4:	697b      	ldr	r3, [r7, #20]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20046498 	.word	0x20046498

08008ad4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08a      	sub	sp, #40	; 0x28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008adc:	2300      	movs	r3, #0
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ae0:	f3ef 8305 	mrs	r3, IPSR
 8008ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ae6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f040 8085 	bne.w	8008bf8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aee:	f3ef 8310 	mrs	r3, PRIMASK
 8008af2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d105      	bne.n	8008b06 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008afa:	f3ef 8311 	mrs	r3, BASEPRI
 8008afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <osMutexNew+0x3a>
 8008b06:	4b3f      	ldr	r3, [pc, #252]	; (8008c04 <osMutexNew+0x130>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d074      	beq.n	8008bf8 <osMutexNew+0x124>
    if (attr != NULL) {
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d003      	beq.n	8008b1c <osMutexNew+0x48>
      type = attr->attr_bits;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	623b      	str	r3, [r7, #32]
 8008b1a:	e001      	b.n	8008b20 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <osMutexNew+0x5c>
      rmtx = 1U;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	61fb      	str	r3, [r7, #28]
 8008b2e:	e001      	b.n	8008b34 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	f003 0308 	and.w	r3, r3, #8
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d15c      	bne.n	8008bf8 <osMutexNew+0x124>
      mem = -1;
 8008b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b42:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d015      	beq.n	8008b76 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d006      	beq.n	8008b60 <osMutexNew+0x8c>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	2b4f      	cmp	r3, #79	; 0x4f
 8008b58:	d902      	bls.n	8008b60 <osMutexNew+0x8c>
          mem = 1;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	e00c      	b.n	8008b7a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d108      	bne.n	8008b7a <osMutexNew+0xa6>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <osMutexNew+0xa6>
            mem = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61bb      	str	r3, [r7, #24]
 8008b74:	e001      	b.n	8008b7a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d112      	bne.n	8008ba6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	2004      	movs	r0, #4
 8008b8e:	f000 feb8 	bl	8009902 <xQueueCreateMutexStatic>
 8008b92:	6278      	str	r0, [r7, #36]	; 0x24
 8008b94:	e016      	b.n	8008bc4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	f000 feb0 	bl	8009902 <xQueueCreateMutexStatic>
 8008ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ba4:	e00e      	b.n	8008bc4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10b      	bne.n	8008bc4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008bb2:	2004      	movs	r0, #4
 8008bb4:	f000 fe8d 	bl	80098d2 <xQueueCreateMutex>
 8008bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8008bba:	e003      	b.n	8008bc4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	f000 fe88 	bl	80098d2 <xQueueCreateMutex>
 8008bc2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00c      	beq.n	8008be4 <osMutexNew+0x110>
        if (attr != NULL) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <osMutexNew+0x104>
          name = attr->name;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	617b      	str	r3, [r7, #20]
 8008bd6:	e001      	b.n	8008bdc <osMutexNew+0x108>
        } else {
          name = NULL;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008bdc:	6979      	ldr	r1, [r7, #20]
 8008bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008be0:	f001 fdd4 	bl	800a78c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d006      	beq.n	8008bf8 <osMutexNew+0x124>
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	f043 0301 	orr.w	r3, r3, #1
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3728      	adds	r7, #40	; 0x28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20046498 	.word	0x20046498

08008c08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f023 0301 	bic.w	r3, r3, #1
 8008c18:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c26:	f3ef 8305 	mrs	r3, IPSR
 8008c2a:	613b      	str	r3, [r7, #16]
  return(result);
 8008c2c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10f      	bne.n	8008c52 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c32:	f3ef 8310 	mrs	r3, PRIMASK
 8008c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d105      	bne.n	8008c4a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8008c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <osMutexAcquire+0x52>
 8008c4a:	4b1d      	ldr	r3, [pc, #116]	; (8008cc0 <osMutexAcquire+0xb8>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d103      	bne.n	8008c5a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008c52:	f06f 0305 	mvn.w	r3, #5
 8008c56:	61fb      	str	r3, [r7, #28]
 8008c58:	e02c      	b.n	8008cb4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d103      	bne.n	8008c68 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008c60:	f06f 0303 	mvn.w	r3, #3
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	e025      	b.n	8008cb4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d011      	beq.n	8008c92 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	69b8      	ldr	r0, [r7, #24]
 8008c72:	f000 fe97 	bl	80099a4 <xQueueTakeMutexRecursive>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d01b      	beq.n	8008cb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008c82:	f06f 0301 	mvn.w	r3, #1
 8008c86:	61fb      	str	r3, [r7, #28]
 8008c88:	e014      	b.n	8008cb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008c8a:	f06f 0302 	mvn.w	r3, #2
 8008c8e:	61fb      	str	r3, [r7, #28]
 8008c90:	e010      	b.n	8008cb4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	69b8      	ldr	r0, [r7, #24]
 8008c96:	f001 fa51 	bl	800a13c <xQueueSemaphoreTake>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d009      	beq.n	8008cb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008ca6:	f06f 0301 	mvn.w	r3, #1
 8008caa:	61fb      	str	r3, [r7, #28]
 8008cac:	e002      	b.n	8008cb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008cae:	f06f 0302 	mvn.w	r3, #2
 8008cb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008cb4:	69fb      	ldr	r3, [r7, #28]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3720      	adds	r7, #32
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20046498 	.word	0x20046498

08008cc4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f023 0301 	bic.w	r3, r3, #1
 8008cd2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ce0:	f3ef 8305 	mrs	r3, IPSR
 8008ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ce6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10f      	bne.n	8008d0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cec:	f3ef 8310 	mrs	r3, PRIMASK
 8008cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d105      	bne.n	8008d04 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cf8:	f3ef 8311 	mrs	r3, BASEPRI
 8008cfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <osMutexRelease+0x50>
 8008d04:	4b16      	ldr	r3, [pc, #88]	; (8008d60 <osMutexRelease+0x9c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d103      	bne.n	8008d14 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008d0c:	f06f 0305 	mvn.w	r3, #5
 8008d10:	61fb      	str	r3, [r7, #28]
 8008d12:	e01f      	b.n	8008d54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d103      	bne.n	8008d22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008d1a:	f06f 0303 	mvn.w	r3, #3
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	e018      	b.n	8008d54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d009      	beq.n	8008d3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008d28:	69b8      	ldr	r0, [r7, #24]
 8008d2a:	f000 fe05 	bl	8009938 <xQueueGiveMutexRecursive>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d00f      	beq.n	8008d54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008d34:	f06f 0302 	mvn.w	r3, #2
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	e00b      	b.n	8008d54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	69b8      	ldr	r0, [r7, #24]
 8008d44:	f000 fed8 	bl	8009af8 <xQueueGenericSend>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d002      	beq.n	8008d54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008d4e:	f06f 0302 	mvn.w	r3, #2
 8008d52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008d54:	69fb      	ldr	r3, [r7, #28]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3720      	adds	r7, #32
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20046498 	.word	0x20046498

08008d64 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08c      	sub	sp, #48	; 0x30
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d74:	f3ef 8305 	mrs	r3, IPSR
 8008d78:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 8086 	bne.w	8008e8e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d82:	f3ef 8310 	mrs	r3, PRIMASK
 8008d86:	617b      	str	r3, [r7, #20]
  return(result);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d105      	bne.n	8008d9a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8008d92:	613b      	str	r3, [r7, #16]
  return(result);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <osSemaphoreNew+0x3e>
 8008d9a:	4b3f      	ldr	r3, [pc, #252]	; (8008e98 <osSemaphoreNew+0x134>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d075      	beq.n	8008e8e <osSemaphoreNew+0x12a>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d072      	beq.n	8008e8e <osSemaphoreNew+0x12a>
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d86e      	bhi.n	8008e8e <osSemaphoreNew+0x12a>
    mem = -1;
 8008db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008db4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d015      	beq.n	8008de8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d006      	beq.n	8008dd2 <osSemaphoreNew+0x6e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	2b4f      	cmp	r3, #79	; 0x4f
 8008dca:	d902      	bls.n	8008dd2 <osSemaphoreNew+0x6e>
        mem = 1;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	623b      	str	r3, [r7, #32]
 8008dd0:	e00c      	b.n	8008dec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d108      	bne.n	8008dec <osSemaphoreNew+0x88>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d104      	bne.n	8008dec <osSemaphoreNew+0x88>
          mem = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	623b      	str	r3, [r7, #32]
 8008de6:	e001      	b.n	8008dec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008df2:	d04c      	beq.n	8008e8e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d128      	bne.n	8008e4c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d10a      	bne.n	8008e16 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	2203      	movs	r2, #3
 8008e06:	9200      	str	r2, [sp, #0]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	f000 fc5f 	bl	80096d0 <xQueueGenericCreateStatic>
 8008e12:	6278      	str	r0, [r7, #36]	; 0x24
 8008e14:	e005      	b.n	8008e22 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008e16:	2203      	movs	r2, #3
 8008e18:	2100      	movs	r1, #0
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	f000 fcda 	bl	80097d4 <xQueueGenericCreate>
 8008e20:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d022      	beq.n	8008e6e <osSemaphoreNew+0x10a>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d01f      	beq.n	8008e6e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2200      	movs	r2, #0
 8008e32:	2100      	movs	r1, #0
 8008e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e36:	f000 fe5f 	bl	8009af8 <xQueueGenericSend>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d016      	beq.n	8008e6e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e42:	f001 fb55 	bl	800a4f0 <vQueueDelete>
            hSemaphore = NULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4a:	e010      	b.n	8008e6e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d108      	bne.n	8008e64 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	461a      	mov	r2, r3
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fdda 	bl	8009a14 <xQueueCreateCountingSemaphoreStatic>
 8008e60:	6278      	str	r0, [r7, #36]	; 0x24
 8008e62:	e004      	b.n	8008e6e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 fe0f 	bl	8009a8a <xQueueCreateCountingSemaphore>
 8008e6c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00c      	beq.n	8008e8e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <osSemaphoreNew+0x11e>
          name = attr->name;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	61fb      	str	r3, [r7, #28]
 8008e80:	e001      	b.n	8008e86 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008e86:	69f9      	ldr	r1, [r7, #28]
 8008e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e8a:	f001 fc7f 	bl	800a78c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3728      	adds	r7, #40	; 0x28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	20046498 	.word	0x20046498

08008e9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d103      	bne.n	8008ebc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008eb4:	f06f 0303 	mvn.w	r3, #3
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	e04b      	b.n	8008f54 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ebc:	f3ef 8305 	mrs	r3, IPSR
 8008ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8008ec2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10f      	bne.n	8008ee8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8008ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d105      	bne.n	8008ee0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8008ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d026      	beq.n	8008f2e <osSemaphoreAcquire+0x92>
 8008ee0:	4b1f      	ldr	r3, [pc, #124]	; (8008f60 <osSemaphoreAcquire+0xc4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d122      	bne.n	8008f2e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008eee:	f06f 0303 	mvn.w	r3, #3
 8008ef2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008ef4:	e02d      	b.n	8008f52 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	461a      	mov	r2, r3
 8008f00:	2100      	movs	r1, #0
 8008f02:	69b8      	ldr	r0, [r7, #24]
 8008f04:	f001 fa2e 	bl	800a364 <xQueueReceiveFromISR>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d003      	beq.n	8008f16 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008f0e:	f06f 0302 	mvn.w	r3, #2
 8008f12:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008f14:	e01d      	b.n	8008f52 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d01a      	beq.n	8008f52 <osSemaphoreAcquire+0xb6>
 8008f1c:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <osSemaphoreAcquire+0xc8>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008f2c:	e011      	b.n	8008f52 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	69b8      	ldr	r0, [r7, #24]
 8008f32:	f001 f903 	bl	800a13c <xQueueSemaphoreTake>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d00b      	beq.n	8008f54 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008f42:	f06f 0301 	mvn.w	r3, #1
 8008f46:	61fb      	str	r3, [r7, #28]
 8008f48:	e004      	b.n	8008f54 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008f4a:	f06f 0302 	mvn.w	r3, #2
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	e000      	b.n	8008f54 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008f52:	bf00      	nop
      }
    }
  }

  return (stat);
 8008f54:	69fb      	ldr	r3, [r7, #28]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3720      	adds	r7, #32
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20046498 	.word	0x20046498
 8008f64:	e000ed04 	.word	0xe000ed04

08008f68 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b088      	sub	sp, #32
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008f7e:	f06f 0303 	mvn.w	r3, #3
 8008f82:	61fb      	str	r3, [r7, #28]
 8008f84:	e03e      	b.n	8009004 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f86:	f3ef 8305 	mrs	r3, IPSR
 8008f8a:	617b      	str	r3, [r7, #20]
  return(result);
 8008f8c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10f      	bne.n	8008fb2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f92:	f3ef 8310 	mrs	r3, PRIMASK
 8008f96:	613b      	str	r3, [r7, #16]
  return(result);
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d105      	bne.n	8008faa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8008fa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d01e      	beq.n	8008fe8 <osSemaphoreRelease+0x80>
 8008faa:	4b19      	ldr	r3, [pc, #100]	; (8009010 <osSemaphoreRelease+0xa8>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d11a      	bne.n	8008fe8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008fb6:	f107 0308 	add.w	r3, r7, #8
 8008fba:	4619      	mov	r1, r3
 8008fbc:	69b8      	ldr	r0, [r7, #24]
 8008fbe:	f000 ff41 	bl	8009e44 <xQueueGiveFromISR>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d003      	beq.n	8008fd0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008fc8:	f06f 0302 	mvn.w	r3, #2
 8008fcc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008fce:	e018      	b.n	8009002 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d015      	beq.n	8009002 <osSemaphoreRelease+0x9a>
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <osSemaphoreRelease+0xac>)
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008fe6:	e00c      	b.n	8009002 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2200      	movs	r2, #0
 8008fec:	2100      	movs	r1, #0
 8008fee:	69b8      	ldr	r0, [r7, #24]
 8008ff0:	f000 fd82 	bl	8009af8 <xQueueGenericSend>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d004      	beq.n	8009004 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008ffa:	f06f 0302 	mvn.w	r3, #2
 8008ffe:	61fb      	str	r3, [r7, #28]
 8009000:	e000      	b.n	8009004 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009002:	bf00      	nop
    }
  }

  return (stat);
 8009004:	69fb      	ldr	r3, [r7, #28]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3720      	adds	r7, #32
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20046498 	.word	0x20046498
 8009014:	e000ed04 	.word	0xe000ed04

08009018 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009024:	f3ef 8305 	mrs	r3, IPSR
 8009028:	617b      	str	r3, [r7, #20]
  return(result);
 800902a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10f      	bne.n	8009050 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009030:	f3ef 8310 	mrs	r3, PRIMASK
 8009034:	613b      	str	r3, [r7, #16]
  return(result);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d105      	bne.n	8009048 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800903c:	f3ef 8311 	mrs	r3, BASEPRI
 8009040:	60fb      	str	r3, [r7, #12]
  return(result);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <osSemaphoreDelete+0x40>
 8009048:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <osSemaphoreDelete+0x68>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d103      	bne.n	8009058 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8009050:	f06f 0305 	mvn.w	r3, #5
 8009054:	61fb      	str	r3, [r7, #28]
 8009056:	e00e      	b.n	8009076 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d103      	bne.n	8009066 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800905e:	f06f 0303 	mvn.w	r3, #3
 8009062:	61fb      	str	r3, [r7, #28]
 8009064:	e007      	b.n	8009076 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009066:	69b8      	ldr	r0, [r7, #24]
 8009068:	f001 fbba 	bl	800a7e0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800906c:	2300      	movs	r3, #0
 800906e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8009070:	69b8      	ldr	r0, [r7, #24]
 8009072:	f001 fa3d 	bl	800a4f0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009076:	69fb      	ldr	r3, [r7, #28]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20046498 	.word	0x20046498

08009084 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009084:	b580      	push	{r7, lr}
 8009086:	b08c      	sub	sp, #48	; 0x30
 8009088:	af02      	add	r7, sp, #8
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009094:	f3ef 8305 	mrs	r3, IPSR
 8009098:	61bb      	str	r3, [r7, #24]
  return(result);
 800909a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800909c:	2b00      	cmp	r3, #0
 800909e:	d16f      	bne.n	8009180 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a0:	f3ef 8310 	mrs	r3, PRIMASK
 80090a4:	617b      	str	r3, [r7, #20]
  return(result);
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d105      	bne.n	80090b8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090ac:	f3ef 8311 	mrs	r3, BASEPRI
 80090b0:	613b      	str	r3, [r7, #16]
  return(result);
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d003      	beq.n	80090c0 <osMessageQueueNew+0x3c>
 80090b8:	4b34      	ldr	r3, [pc, #208]	; (800918c <osMessageQueueNew+0x108>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d05f      	beq.n	8009180 <osMessageQueueNew+0xfc>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d05c      	beq.n	8009180 <osMessageQueueNew+0xfc>
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d059      	beq.n	8009180 <osMessageQueueNew+0xfc>
    mem = -1;
 80090cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d029      	beq.n	800912c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d012      	beq.n	8009106 <osMessageQueueNew+0x82>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	2b4f      	cmp	r3, #79	; 0x4f
 80090e6:	d90e      	bls.n	8009106 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00a      	beq.n	8009106 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	695a      	ldr	r2, [r3, #20]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	68b9      	ldr	r1, [r7, #8]
 80090f8:	fb01 f303 	mul.w	r3, r1, r3
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d302      	bcc.n	8009106 <osMessageQueueNew+0x82>
        mem = 1;
 8009100:	2301      	movs	r3, #1
 8009102:	623b      	str	r3, [r7, #32]
 8009104:	e014      	b.n	8009130 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d110      	bne.n	8009130 <osMessageQueueNew+0xac>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10c      	bne.n	8009130 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800911a:	2b00      	cmp	r3, #0
 800911c:	d108      	bne.n	8009130 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <osMessageQueueNew+0xac>
          mem = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	623b      	str	r3, [r7, #32]
 800912a:	e001      	b.n	8009130 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d10b      	bne.n	800914e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691a      	ldr	r2, [r3, #16]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	2100      	movs	r1, #0
 8009140:	9100      	str	r1, [sp, #0]
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fac3 	bl	80096d0 <xQueueGenericCreateStatic>
 800914a:	6278      	str	r0, [r7, #36]	; 0x24
 800914c:	e008      	b.n	8009160 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d105      	bne.n	8009160 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009154:	2200      	movs	r2, #0
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 fb3b 	bl	80097d4 <xQueueGenericCreate>
 800915e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00c      	beq.n	8009180 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <osMessageQueueNew+0xf0>
        name = attr->name;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	61fb      	str	r3, [r7, #28]
 8009172:	e001      	b.n	8009178 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009178:	69f9      	ldr	r1, [r7, #28]
 800917a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800917c:	f001 fb06 	bl	800a78c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009182:	4618      	mov	r0, r3
 8009184:	3728      	adds	r7, #40	; 0x28
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20046498 	.word	0x20046498

08009190 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009190:	b580      	push	{r7, lr}
 8009192:	b08a      	sub	sp, #40	; 0x28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	4613      	mov	r3, r2
 800919e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091a8:	f3ef 8305 	mrs	r3, IPSR
 80091ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80091ae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10f      	bne.n	80091d4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b4:	f3ef 8310 	mrs	r3, PRIMASK
 80091b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d105      	bne.n	80091cc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091c0:	f3ef 8311 	mrs	r3, BASEPRI
 80091c4:	617b      	str	r3, [r7, #20]
  return(result);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d02c      	beq.n	8009226 <osMessageQueuePut+0x96>
 80091cc:	4b28      	ldr	r3, [pc, #160]	; (8009270 <osMessageQueuePut+0xe0>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d128      	bne.n	8009226 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d005      	beq.n	80091e6 <osMessageQueuePut+0x56>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <osMessageQueuePut+0x56>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80091e6:	f06f 0303 	mvn.w	r3, #3
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091ec:	e039      	b.n	8009262 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80091f2:	f107 0210 	add.w	r2, r7, #16
 80091f6:	2300      	movs	r3, #0
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	6a38      	ldr	r0, [r7, #32]
 80091fc:	f000 fd82 	bl	8009d04 <xQueueGenericSendFromISR>
 8009200:	4603      	mov	r3, r0
 8009202:	2b01      	cmp	r3, #1
 8009204:	d003      	beq.n	800920e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009206:	f06f 0302 	mvn.w	r3, #2
 800920a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800920c:	e029      	b.n	8009262 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d026      	beq.n	8009262 <osMessageQueuePut+0xd2>
 8009214:	4b17      	ldr	r3, [pc, #92]	; (8009274 <osMessageQueuePut+0xe4>)
 8009216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009224:	e01d      	b.n	8009262 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <osMessageQueuePut+0xa2>
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d103      	bne.n	800923a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009232:	f06f 0303 	mvn.w	r3, #3
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
 8009238:	e014      	b.n	8009264 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800923a:	2300      	movs	r3, #0
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	6a38      	ldr	r0, [r7, #32]
 8009242:	f000 fc59 	bl	8009af8 <xQueueGenericSend>
 8009246:	4603      	mov	r3, r0
 8009248:	2b01      	cmp	r3, #1
 800924a:	d00b      	beq.n	8009264 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009252:	f06f 0301 	mvn.w	r3, #1
 8009256:	627b      	str	r3, [r7, #36]	; 0x24
 8009258:	e004      	b.n	8009264 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800925a:	f06f 0302 	mvn.w	r3, #2
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
 8009260:	e000      	b.n	8009264 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009262:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009266:	4618      	mov	r0, r3
 8009268:	3728      	adds	r7, #40	; 0x28
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20046498 	.word	0x20046498
 8009274:	e000ed04 	.word	0xe000ed04

08009278 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009278:	b580      	push	{r7, lr}
 800927a:	b08a      	sub	sp, #40	; 0x28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800928a:	2300      	movs	r3, #0
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800928e:	f3ef 8305 	mrs	r3, IPSR
 8009292:	61fb      	str	r3, [r7, #28]
  return(result);
 8009294:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10f      	bne.n	80092ba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800929a:	f3ef 8310 	mrs	r3, PRIMASK
 800929e:	61bb      	str	r3, [r7, #24]
  return(result);
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d105      	bne.n	80092b2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092a6:	f3ef 8311 	mrs	r3, BASEPRI
 80092aa:	617b      	str	r3, [r7, #20]
  return(result);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d02c      	beq.n	800930c <osMessageQueueGet+0x94>
 80092b2:	4b28      	ldr	r3, [pc, #160]	; (8009354 <osMessageQueueGet+0xdc>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d128      	bne.n	800930c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d005      	beq.n	80092cc <osMessageQueueGet+0x54>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <osMessageQueueGet+0x54>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80092cc:	f06f 0303 	mvn.w	r3, #3
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092d2:	e038      	b.n	8009346 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80092d8:	f107 0310 	add.w	r3, r7, #16
 80092dc:	461a      	mov	r2, r3
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	6a38      	ldr	r0, [r7, #32]
 80092e2:	f001 f83f 	bl	800a364 <xQueueReceiveFromISR>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d003      	beq.n	80092f4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80092ec:	f06f 0302 	mvn.w	r3, #2
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092f2:	e028      	b.n	8009346 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d025      	beq.n	8009346 <osMessageQueueGet+0xce>
 80092fa:	4b17      	ldr	r3, [pc, #92]	; (8009358 <osMessageQueueGet+0xe0>)
 80092fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800930a:	e01c      	b.n	8009346 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <osMessageQueueGet+0xa0>
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d103      	bne.n	8009320 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009318:	f06f 0303 	mvn.w	r3, #3
 800931c:	627b      	str	r3, [r7, #36]	; 0x24
 800931e:	e013      	b.n	8009348 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	68b9      	ldr	r1, [r7, #8]
 8009324:	6a38      	ldr	r0, [r7, #32]
 8009326:	f000 fe23 	bl	8009f70 <xQueueReceive>
 800932a:	4603      	mov	r3, r0
 800932c:	2b01      	cmp	r3, #1
 800932e:	d00b      	beq.n	8009348 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009336:	f06f 0301 	mvn.w	r3, #1
 800933a:	627b      	str	r3, [r7, #36]	; 0x24
 800933c:	e004      	b.n	8009348 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800933e:	f06f 0302 	mvn.w	r3, #2
 8009342:	627b      	str	r3, [r7, #36]	; 0x24
 8009344:	e000      	b.n	8009348 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009346:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800934a:	4618      	mov	r0, r3
 800934c:	3728      	adds	r7, #40	; 0x28
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20046498 	.word	0x20046498
 8009358:	e000ed04 	.word	0xe000ed04

0800935c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <osMessageQueueGetCount+0x18>
    count = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	61fb      	str	r3, [r7, #28]
 8009372:	e01e      	b.n	80093b2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009374:	f3ef 8305 	mrs	r3, IPSR
 8009378:	617b      	str	r3, [r7, #20]
  return(result);
 800937a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10f      	bne.n	80093a0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009380:	f3ef 8310 	mrs	r3, PRIMASK
 8009384:	613b      	str	r3, [r7, #16]
  return(result);
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d105      	bne.n	8009398 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800938c:	f3ef 8311 	mrs	r3, BASEPRI
 8009390:	60fb      	str	r3, [r7, #12]
  return(result);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d008      	beq.n	80093aa <osMessageQueueGetCount+0x4e>
 8009398:	4b08      	ldr	r3, [pc, #32]	; (80093bc <osMessageQueueGetCount+0x60>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d104      	bne.n	80093aa <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80093a0:	69b8      	ldr	r0, [r7, #24]
 80093a2:	f001 f885 	bl	800a4b0 <uxQueueMessagesWaitingFromISR>
 80093a6:	61f8      	str	r0, [r7, #28]
 80093a8:	e003      	b.n	80093b2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80093aa:	69b8      	ldr	r0, [r7, #24]
 80093ac:	f001 f860 	bl	800a470 <uxQueueMessagesWaiting>
 80093b0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80093b2:	69fb      	ldr	r3, [r7, #28]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3720      	adds	r7, #32
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20046498 	.word	0x20046498

080093c0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093cc:	f3ef 8305 	mrs	r3, IPSR
 80093d0:	617b      	str	r3, [r7, #20]
  return(result);
 80093d2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10f      	bne.n	80093f8 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093d8:	f3ef 8310 	mrs	r3, PRIMASK
 80093dc:	613b      	str	r3, [r7, #16]
  return(result);
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d105      	bne.n	80093f0 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80093e4:	f3ef 8311 	mrs	r3, BASEPRI
 80093e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <osMessageQueueDelete+0x40>
 80093f0:	4b0d      	ldr	r3, [pc, #52]	; (8009428 <osMessageQueueDelete+0x68>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d103      	bne.n	8009400 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80093f8:	f06f 0305 	mvn.w	r3, #5
 80093fc:	61fb      	str	r3, [r7, #28]
 80093fe:	e00e      	b.n	800941e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d103      	bne.n	800940e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8009406:	f06f 0303 	mvn.w	r3, #3
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	e007      	b.n	800941e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800940e:	69b8      	ldr	r0, [r7, #24]
 8009410:	f001 f9e6 	bl	800a7e0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009414:	2300      	movs	r3, #0
 8009416:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8009418:	69b8      	ldr	r0, [r7, #24]
 800941a:	f001 f869 	bl	800a4f0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800941e:	69fb      	ldr	r3, [r7, #28]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20046498 	.word	0x20046498

0800942c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4a07      	ldr	r2, [pc, #28]	; (8009458 <vApplicationGetIdleTaskMemory+0x2c>)
 800943c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	4a06      	ldr	r2, [pc, #24]	; (800945c <vApplicationGetIdleTaskMemory+0x30>)
 8009442:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2280      	movs	r2, #128	; 0x80
 8009448:	601a      	str	r2, [r3, #0]
}
 800944a:	bf00      	nop
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	2004649c 	.word	0x2004649c
 800945c:	20046558 	.word	0x20046558

08009460 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4a07      	ldr	r2, [pc, #28]	; (800948c <vApplicationGetTimerTaskMemory+0x2c>)
 8009470:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	4a06      	ldr	r2, [pc, #24]	; (8009490 <vApplicationGetTimerTaskMemory+0x30>)
 8009476:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800947e:	601a      	str	r2, [r3, #0]
}
 8009480:	bf00      	nop
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	20046758 	.word	0x20046758
 8009490:	20046814 	.word	0x20046814

08009494 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f103 0208 	add.w	r2, r3, #8
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f103 0208 	add.w	r2, r3, #8
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f103 0208 	add.w	r2, r3, #8
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094e2:	bf00      	nop
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	601a      	str	r2, [r3, #0]
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009536:	b480      	push	{r7}
 8009538:	b085      	sub	sp, #20
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800954c:	d103      	bne.n	8009556 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	e00c      	b.n	8009570 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3308      	adds	r3, #8
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	e002      	b.n	8009564 <vListInsert+0x2e>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	429a      	cmp	r2, r3
 800956e:	d2f6      	bcs.n	800955e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	601a      	str	r2, [r3, #0]
}
 800959c:	bf00      	nop
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	6892      	ldr	r2, [r2, #8]
 80095be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6852      	ldr	r2, [r2, #4]
 80095c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d103      	bne.n	80095dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689a      	ldr	r2, [r3, #8]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	1e5a      	subs	r2, r3, #1
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10c      	bne.n	800962a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	b672      	cpsid	i
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	b662      	cpsie	i
 8009624:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800962a:	f002 fe0f 	bl	800c24c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800963a:	fb01 f303 	mul.w	r3, r1, r3
 800963e:	441a      	add	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965a:	3b01      	subs	r3, #1
 800965c:	68f9      	ldr	r1, [r7, #12]
 800965e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009660:	fb01 f303 	mul.w	r3, r1, r3
 8009664:	441a      	add	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	22ff      	movs	r2, #255	; 0xff
 800966e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	22ff      	movs	r2, #255	; 0xff
 8009676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d114      	bne.n	80096aa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d01a      	beq.n	80096be <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3310      	adds	r3, #16
 800968c:	4618      	mov	r0, r3
 800968e:	f001 fdb5 	bl	800b1fc <xTaskRemoveFromEventList>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d012      	beq.n	80096be <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009698:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <xQueueGenericReset+0xd0>)
 800969a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	e009      	b.n	80096be <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3310      	adds	r3, #16
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fef0 	bl	8009494 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	3324      	adds	r3, #36	; 0x24
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7ff feeb 	bl	8009494 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096be:	f002 fdf9 	bl	800c2b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096c2:	2301      	movs	r3, #1
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	e000ed04 	.word	0xe000ed04

080096d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08e      	sub	sp, #56	; 0x38
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10c      	bne.n	80096fe <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	b672      	cpsid	i
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	b662      	cpsie	i
 80096f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10c      	bne.n	800971e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	b672      	cpsid	i
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	b662      	cpsie	i
 8009718:	627b      	str	r3, [r7, #36]	; 0x24
}
 800971a:	bf00      	nop
 800971c:	e7fe      	b.n	800971c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <xQueueGenericCreateStatic+0x5a>
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <xQueueGenericCreateStatic+0x5e>
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <xQueueGenericCreateStatic+0x60>
 800972e:	2300      	movs	r3, #0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10c      	bne.n	800974e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	b672      	cpsid	i
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	b662      	cpsie	i
 8009748:	623b      	str	r3, [r7, #32]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d102      	bne.n	800975a <xQueueGenericCreateStatic+0x8a>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <xQueueGenericCreateStatic+0x8e>
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <xQueueGenericCreateStatic+0x90>
 800975e:	2300      	movs	r3, #0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10c      	bne.n	800977e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	b672      	cpsid	i
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	b662      	cpsie	i
 8009778:	61fb      	str	r3, [r7, #28]
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800977e:	2350      	movs	r3, #80	; 0x50
 8009780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b50      	cmp	r3, #80	; 0x50
 8009786:	d00c      	beq.n	80097a2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978c:	b672      	cpsid	i
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	b662      	cpsie	i
 800979c:	61bb      	str	r3, [r7, #24]
}
 800979e:	bf00      	nop
 80097a0:	e7fe      	b.n	80097a0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80097a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00d      	beq.n	80097ca <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80097ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	4613      	mov	r3, r2
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	68b9      	ldr	r1, [r7, #8]
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 f847 	bl	8009858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3730      	adds	r7, #48	; 0x30
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08a      	sub	sp, #40	; 0x28
 80097d8:	af02      	add	r7, sp, #8
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	4613      	mov	r3, r2
 80097e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10c      	bne.n	8009802 <xQueueGenericCreate+0x2e>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	b672      	cpsid	i
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	b662      	cpsie	i
 80097fc:	613b      	str	r3, [r7, #16]
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009808:	2300      	movs	r3, #0
 800980a:	61fb      	str	r3, [r7, #28]
 800980c:	e004      	b.n	8009818 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	fb02 f303 	mul.w	r3, r2, r3
 8009816:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	3350      	adds	r3, #80	; 0x50
 800981c:	4618      	mov	r0, r3
 800981e:	f002 fe41 	bl	800c4a4 <pvPortMalloc>
 8009822:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d011      	beq.n	800984e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	3350      	adds	r3, #80	; 0x50
 8009832:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800983c:	79fa      	ldrb	r2, [r7, #7]
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	4613      	mov	r3, r2
 8009844:	697a      	ldr	r2, [r7, #20]
 8009846:	68b9      	ldr	r1, [r7, #8]
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 f805 	bl	8009858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800984e:	69bb      	ldr	r3, [r7, #24]
	}
 8009850:	4618      	mov	r0, r3
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d103      	bne.n	8009874 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	e002      	b.n	800987a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009886:	2101      	movs	r1, #1
 8009888:	69b8      	ldr	r0, [r7, #24]
 800988a:	f7ff feb7 	bl	80095fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	78fa      	ldrb	r2, [r7, #3]
 8009892:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00e      	beq.n	80098ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80098be:	2300      	movs	r3, #0
 80098c0:	2200      	movs	r2, #0
 80098c2:	2100      	movs	r1, #0
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f917 	bl	8009af8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	4603      	mov	r3, r0
 80098da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80098dc:	2301      	movs	r3, #1
 80098de:	617b      	str	r3, [r7, #20]
 80098e0:	2300      	movs	r3, #0
 80098e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	461a      	mov	r2, r3
 80098e8:	6939      	ldr	r1, [r7, #16]
 80098ea:	6978      	ldr	r0, [r7, #20]
 80098ec:	f7ff ff72 	bl	80097d4 <xQueueGenericCreate>
 80098f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f7ff ffd3 	bl	800989e <prvInitialiseMutex>

		return xNewQueue;
 80098f8:	68fb      	ldr	r3, [r7, #12]
	}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009902:	b580      	push	{r7, lr}
 8009904:	b088      	sub	sp, #32
 8009906:	af02      	add	r7, sp, #8
 8009908:	4603      	mov	r3, r0
 800990a:	6039      	str	r1, [r7, #0]
 800990c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800990e:	2301      	movs	r3, #1
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2200      	movs	r2, #0
 800991e:	6939      	ldr	r1, [r7, #16]
 8009920:	6978      	ldr	r0, [r7, #20]
 8009922:	f7ff fed5 	bl	80096d0 <xQueueGenericCreateStatic>
 8009926:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f7ff ffb8 	bl	800989e <prvInitialiseMutex>

		return xNewQueue;
 800992e:	68fb      	ldr	r3, [r7, #12]
	}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10c      	bne.n	8009964 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	b672      	cpsid	i
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	b662      	cpsie	i
 800995e:	60fb      	str	r3, [r7, #12]
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	689c      	ldr	r4, [r3, #8]
 8009968:	f001 fe12 	bl	800b590 <xTaskGetCurrentTaskHandle>
 800996c:	4603      	mov	r3, r0
 800996e:	429c      	cmp	r4, r3
 8009970:	d111      	bne.n	8009996 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	1e5a      	subs	r2, r3, #1
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d105      	bne.n	8009990 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009984:	2300      	movs	r3, #0
 8009986:	2200      	movs	r2, #0
 8009988:	2100      	movs	r1, #0
 800998a:	6938      	ldr	r0, [r7, #16]
 800998c:	f000 f8b4 	bl	8009af8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009990:	2301      	movs	r3, #1
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e001      	b.n	800999a <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009996:	2300      	movs	r3, #0
 8009998:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800999a:	697b      	ldr	r3, [r7, #20]
	}
 800999c:	4618      	mov	r0, r3
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd90      	pop	{r4, r7, pc}

080099a4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80099a4:	b590      	push	{r4, r7, lr}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10c      	bne.n	80099d2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	b672      	cpsid	i
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	b662      	cpsie	i
 80099cc:	60fb      	str	r3, [r7, #12]
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	689c      	ldr	r4, [r3, #8]
 80099d6:	f001 fddb 	bl	800b590 <xTaskGetCurrentTaskHandle>
 80099da:	4603      	mov	r3, r0
 80099dc:	429c      	cmp	r4, r3
 80099de:	d107      	bne.n	80099f0 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	1c5a      	adds	r2, r3, #1
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80099ea:	2301      	movs	r3, #1
 80099ec:	617b      	str	r3, [r7, #20]
 80099ee:	e00c      	b.n	8009a0a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6938      	ldr	r0, [r7, #16]
 80099f4:	f000 fba2 	bl	800a13c <xQueueSemaphoreTake>
 80099f8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009a0a:	697b      	ldr	r3, [r7, #20]
	}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	371c      	adds	r7, #28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd90      	pop	{r4, r7, pc}

08009a14 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08a      	sub	sp, #40	; 0x28
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10c      	bne.n	8009a40 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	b672      	cpsid	i
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	b662      	cpsie	i
 8009a3a:	61bb      	str	r3, [r7, #24]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d90c      	bls.n	8009a62 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	b672      	cpsid	i
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	b662      	cpsie	i
 8009a5c:	617b      	str	r3, [r7, #20]
}
 8009a5e:	bf00      	nop
 8009a60:	e7fe      	b.n	8009a60 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009a62:	2302      	movs	r3, #2
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f7ff fe2f 	bl	80096d0 <xQueueGenericCreateStatic>
 8009a72:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009a80:	69fb      	ldr	r3, [r7, #28]
	}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3720      	adds	r7, #32
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b086      	sub	sp, #24
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10c      	bne.n	8009ab4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	b672      	cpsid	i
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	b662      	cpsie	i
 8009aae:	613b      	str	r3, [r7, #16]
}
 8009ab0:	bf00      	nop
 8009ab2:	e7fe      	b.n	8009ab2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d90c      	bls.n	8009ad6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	b672      	cpsid	i
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	b662      	cpsie	i
 8009ad0:	60fb      	str	r3, [r7, #12]
}
 8009ad2:	bf00      	nop
 8009ad4:	e7fe      	b.n	8009ad4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	2100      	movs	r1, #0
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff fe7a 	bl	80097d4 <xQueueGenericCreate>
 8009ae0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d002      	beq.n	8009aee <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009aee:	697b      	ldr	r3, [r7, #20]
	}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08e      	sub	sp, #56	; 0x38
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b06:	2300      	movs	r3, #0
 8009b08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10c      	bne.n	8009b2e <xQueueGenericSend+0x36>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	b672      	cpsid	i
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	b662      	cpsie	i
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d103      	bne.n	8009b3c <xQueueGenericSend+0x44>
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <xQueueGenericSend+0x48>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <xQueueGenericSend+0x4a>
 8009b40:	2300      	movs	r3, #0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10c      	bne.n	8009b60 <xQueueGenericSend+0x68>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	b672      	cpsid	i
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	b662      	cpsie	i
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d103      	bne.n	8009b6e <xQueueGenericSend+0x76>
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d101      	bne.n	8009b72 <xQueueGenericSend+0x7a>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e000      	b.n	8009b74 <xQueueGenericSend+0x7c>
 8009b72:	2300      	movs	r3, #0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10c      	bne.n	8009b92 <xQueueGenericSend+0x9a>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7c:	b672      	cpsid	i
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	b662      	cpsie	i
 8009b8c:	623b      	str	r3, [r7, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b92:	f001 fd0d 	bl	800b5b0 <xTaskGetSchedulerState>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d102      	bne.n	8009ba2 <xQueueGenericSend+0xaa>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <xQueueGenericSend+0xae>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e000      	b.n	8009ba8 <xQueueGenericSend+0xb0>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10c      	bne.n	8009bc6 <xQueueGenericSend+0xce>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	b672      	cpsid	i
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	b662      	cpsie	i
 8009bc0:	61fb      	str	r3, [r7, #28]
}
 8009bc2:	bf00      	nop
 8009bc4:	e7fe      	b.n	8009bc4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bc6:	f002 fb41 	bl	800c24c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d302      	bcc.n	8009bdc <xQueueGenericSend+0xe4>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d129      	bne.n	8009c30 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	68b9      	ldr	r1, [r7, #8]
 8009be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009be2:	f000 fcc2 	bl	800a56a <prvCopyDataToQueue>
 8009be6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d010      	beq.n	8009c12 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	3324      	adds	r3, #36	; 0x24
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f001 fb01 	bl	800b1fc <xTaskRemoveFromEventList>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d013      	beq.n	8009c28 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c00:	4b3f      	ldr	r3, [pc, #252]	; (8009d00 <xQueueGenericSend+0x208>)
 8009c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	e00a      	b.n	8009c28 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c18:	4b39      	ldr	r3, [pc, #228]	; (8009d00 <xQueueGenericSend+0x208>)
 8009c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c28:	f002 fb44 	bl	800c2b4 <vPortExitCritical>
				return pdPASS;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e063      	b.n	8009cf8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d103      	bne.n	8009c3e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c36:	f002 fb3d 	bl	800c2b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e05c      	b.n	8009cf8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c44:	f107 0314 	add.w	r3, r7, #20
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 fb3d 	bl	800b2c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c52:	f002 fb2f 	bl	800c2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c56:	f001 f88b 	bl	800ad70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c5a:	f002 faf7 	bl	800c24c <vPortEnterCritical>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c64:	b25b      	sxtb	r3, r3
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c6a:	d103      	bne.n	8009c74 <xQueueGenericSend+0x17c>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c7a:	b25b      	sxtb	r3, r3
 8009c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c80:	d103      	bne.n	8009c8a <xQueueGenericSend+0x192>
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c8a:	f002 fb13 	bl	800c2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c8e:	1d3a      	adds	r2, r7, #4
 8009c90:	f107 0314 	add.w	r3, r7, #20
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fb2c 	bl	800b2f4 <xTaskCheckForTimeOut>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d124      	bne.n	8009cec <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ca4:	f000 fd59 	bl	800a75a <prvIsQueueFull>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d018      	beq.n	8009ce0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	3310      	adds	r3, #16
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f001 fa4c 	bl	800b154 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cbe:	f000 fce4 	bl	800a68a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009cc2:	f001 f863 	bl	800ad8c <xTaskResumeAll>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f47f af7c 	bne.w	8009bc6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009cce:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <xQueueGenericSend+0x208>)
 8009cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	e772      	b.n	8009bc6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ce2:	f000 fcd2 	bl	800a68a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ce6:	f001 f851 	bl	800ad8c <xTaskResumeAll>
 8009cea:	e76c      	b.n	8009bc6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cee:	f000 fccc 	bl	800a68a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cf2:	f001 f84b 	bl	800ad8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009cf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3738      	adds	r7, #56	; 0x38
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	e000ed04 	.word	0xe000ed04

08009d04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08e      	sub	sp, #56	; 0x38
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10c      	bne.n	8009d36 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	b672      	cpsid	i
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	b662      	cpsie	i
 8009d30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d32:	bf00      	nop
 8009d34:	e7fe      	b.n	8009d34 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d103      	bne.n	8009d44 <xQueueGenericSendFromISR+0x40>
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d101      	bne.n	8009d48 <xQueueGenericSendFromISR+0x44>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e000      	b.n	8009d4a <xQueueGenericSendFromISR+0x46>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10c      	bne.n	8009d68 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	b672      	cpsid	i
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	b662      	cpsie	i
 8009d62:	623b      	str	r3, [r7, #32]
}
 8009d64:	bf00      	nop
 8009d66:	e7fe      	b.n	8009d66 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d103      	bne.n	8009d76 <xQueueGenericSendFromISR+0x72>
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d101      	bne.n	8009d7a <xQueueGenericSendFromISR+0x76>
 8009d76:	2301      	movs	r3, #1
 8009d78:	e000      	b.n	8009d7c <xQueueGenericSendFromISR+0x78>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10c      	bne.n	8009d9a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	b672      	cpsid	i
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	b662      	cpsie	i
 8009d94:	61fb      	str	r3, [r7, #28]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d9a:	f002 fb3f 	bl	800c41c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d9e:	f3ef 8211 	mrs	r2, BASEPRI
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	b672      	cpsid	i
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	b662      	cpsie	i
 8009db6:	61ba      	str	r2, [r7, #24]
 8009db8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009dba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d302      	bcc.n	8009dd0 <xQueueGenericSendFromISR+0xcc>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d12c      	bne.n	8009e2a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009de0:	f000 fbc3 	bl	800a56a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009de4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dec:	d112      	bne.n	8009e14 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d016      	beq.n	8009e24 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	3324      	adds	r3, #36	; 0x24
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 f9fe 	bl	800b1fc <xTaskRemoveFromEventList>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00e      	beq.n	8009e24 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00b      	beq.n	8009e24 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	e007      	b.n	8009e24 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e18:	3301      	adds	r3, #1
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	b25a      	sxtb	r2, r3
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e24:	2301      	movs	r3, #1
 8009e26:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009e28:	e001      	b.n	8009e2e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3738      	adds	r7, #56	; 0x38
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08e      	sub	sp, #56	; 0x38
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10c      	bne.n	8009e72 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	b672      	cpsid	i
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	b662      	cpsie	i
 8009e6c:	623b      	str	r3, [r7, #32]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00c      	beq.n	8009e94 <xQueueGiveFromISR+0x50>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	b672      	cpsid	i
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	b662      	cpsie	i
 8009e8e:	61fb      	str	r3, [r7, #28]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d103      	bne.n	8009ea4 <xQueueGiveFromISR+0x60>
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <xQueueGiveFromISR+0x64>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <xQueueGiveFromISR+0x66>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10c      	bne.n	8009ec8 <xQueueGiveFromISR+0x84>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	b672      	cpsid	i
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	b662      	cpsie	i
 8009ec2:	61bb      	str	r3, [r7, #24]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ec8:	f002 faa8 	bl	800c41c <vPortValidateInterruptPriority>
	__asm volatile
 8009ecc:	f3ef 8211 	mrs	r2, BASEPRI
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	b672      	cpsid	i
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	b662      	cpsie	i
 8009ee4:	617a      	str	r2, [r7, #20]
 8009ee6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009ee8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009eea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d22b      	bcs.n	8009f54 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	1c5a      	adds	r2, r3, #1
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f16:	d112      	bne.n	8009f3e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d016      	beq.n	8009f4e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	3324      	adds	r3, #36	; 0x24
 8009f24:	4618      	mov	r0, r3
 8009f26:	f001 f969 	bl	800b1fc <xTaskRemoveFromEventList>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00e      	beq.n	8009f4e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00b      	beq.n	8009f4e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	e007      	b.n	8009f4e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f42:	3301      	adds	r3, #1
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	b25a      	sxtb	r2, r3
 8009f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
 8009f52:	e001      	b.n	8009f58 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	637b      	str	r3, [r7, #52]	; 0x34
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f383 8811 	msr	BASEPRI, r3
}
 8009f62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3738      	adds	r7, #56	; 0x38
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08c      	sub	sp, #48	; 0x30
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10c      	bne.n	8009fa4 <xQueueReceive+0x34>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8e:	b672      	cpsid	i
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	b662      	cpsie	i
 8009f9e:	623b      	str	r3, [r7, #32]
}
 8009fa0:	bf00      	nop
 8009fa2:	e7fe      	b.n	8009fa2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d103      	bne.n	8009fb2 <xQueueReceive+0x42>
 8009faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <xQueueReceive+0x46>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <xQueueReceive+0x48>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10c      	bne.n	8009fd6 <xQueueReceive+0x66>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc0:	b672      	cpsid	i
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	b662      	cpsie	i
 8009fd0:	61fb      	str	r3, [r7, #28]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fd6:	f001 faeb 	bl	800b5b0 <xTaskGetSchedulerState>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <xQueueReceive+0x76>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <xQueueReceive+0x7a>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e000      	b.n	8009fec <xQueueReceive+0x7c>
 8009fea:	2300      	movs	r3, #0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10c      	bne.n	800a00a <xQueueReceive+0x9a>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	b672      	cpsid	i
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	b662      	cpsie	i
 800a004:	61bb      	str	r3, [r7, #24]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a00a:	f002 f91f 	bl	800c24c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a012:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	2b00      	cmp	r3, #0
 800a018:	d01f      	beq.n	800a05a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a01a:	68b9      	ldr	r1, [r7, #8]
 800a01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a01e:	f000 fb0e 	bl	800a63e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	1e5a      	subs	r2, r3, #1
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00f      	beq.n	800a052 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a034:	3310      	adds	r3, #16
 800a036:	4618      	mov	r0, r3
 800a038:	f001 f8e0 	bl	800b1fc <xTaskRemoveFromEventList>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d007      	beq.n	800a052 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a042:	4b3d      	ldr	r3, [pc, #244]	; (800a138 <xQueueReceive+0x1c8>)
 800a044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a052:	f002 f92f 	bl	800c2b4 <vPortExitCritical>
				return pdPASS;
 800a056:	2301      	movs	r3, #1
 800a058:	e069      	b.n	800a12e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d103      	bne.n	800a068 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a060:	f002 f928 	bl	800c2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a064:	2300      	movs	r3, #0
 800a066:	e062      	b.n	800a12e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a06e:	f107 0310 	add.w	r3, r7, #16
 800a072:	4618      	mov	r0, r3
 800a074:	f001 f928 	bl	800b2c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a078:	2301      	movs	r3, #1
 800a07a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a07c:	f002 f91a 	bl	800c2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a080:	f000 fe76 	bl	800ad70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a084:	f002 f8e2 	bl	800c24c <vPortEnterCritical>
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a08e:	b25b      	sxtb	r3, r3
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a094:	d103      	bne.n	800a09e <xQueueReceive+0x12e>
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0a4:	b25b      	sxtb	r3, r3
 800a0a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0aa:	d103      	bne.n	800a0b4 <xQueueReceive+0x144>
 800a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0b4:	f002 f8fe 	bl	800c2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0b8:	1d3a      	adds	r2, r7, #4
 800a0ba:	f107 0310 	add.w	r3, r7, #16
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f001 f917 	bl	800b2f4 <xTaskCheckForTimeOut>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d123      	bne.n	800a114 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ce:	f000 fb2e 	bl	800a72e <prvIsQueueEmpty>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d017      	beq.n	800a108 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	4611      	mov	r1, r2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f001 f837 	bl	800b154 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0e8:	f000 facf 	bl	800a68a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0ec:	f000 fe4e 	bl	800ad8c <xTaskResumeAll>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d189      	bne.n	800a00a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a0f6:	4b10      	ldr	r3, [pc, #64]	; (800a138 <xQueueReceive+0x1c8>)
 800a0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	e780      	b.n	800a00a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a10a:	f000 fabe 	bl	800a68a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a10e:	f000 fe3d 	bl	800ad8c <xTaskResumeAll>
 800a112:	e77a      	b.n	800a00a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a116:	f000 fab8 	bl	800a68a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a11a:	f000 fe37 	bl	800ad8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a120:	f000 fb05 	bl	800a72e <prvIsQueueEmpty>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	f43f af6f 	beq.w	800a00a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a12c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3730      	adds	r7, #48	; 0x30
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	e000ed04 	.word	0xe000ed04

0800a13c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08e      	sub	sp, #56	; 0x38
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a146:	2300      	movs	r3, #0
 800a148:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a14e:	2300      	movs	r3, #0
 800a150:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10c      	bne.n	800a172 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	b672      	cpsid	i
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	b662      	cpsie	i
 800a16c:	623b      	str	r3, [r7, #32]
}
 800a16e:	bf00      	nop
 800a170:	e7fe      	b.n	800a170 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00c      	beq.n	800a194 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	b672      	cpsid	i
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	b662      	cpsie	i
 800a18e:	61fb      	str	r3, [r7, #28]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a194:	f001 fa0c 	bl	800b5b0 <xTaskGetSchedulerState>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d102      	bne.n	800a1a4 <xQueueSemaphoreTake+0x68>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <xQueueSemaphoreTake+0x6c>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e000      	b.n	800a1aa <xQueueSemaphoreTake+0x6e>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10c      	bne.n	800a1c8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	b672      	cpsid	i
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	b662      	cpsie	i
 800a1c2:	61bb      	str	r3, [r7, #24]
}
 800a1c4:	bf00      	nop
 800a1c6:	e7fe      	b.n	800a1c6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1c8:	f002 f840 	bl	800c24c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d024      	beq.n	800a222 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	1e5a      	subs	r2, r3, #1
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d104      	bne.n	800a1f2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a1e8:	f001 fb60 	bl	800b8ac <pvTaskIncrementMutexHeldCount>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00f      	beq.n	800a21a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fc:	3310      	adds	r3, #16
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 fffc 	bl	800b1fc <xTaskRemoveFromEventList>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d007      	beq.n	800a21a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a20a:	4b55      	ldr	r3, [pc, #340]	; (800a360 <xQueueSemaphoreTake+0x224>)
 800a20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a21a:	f002 f84b 	bl	800c2b4 <vPortExitCritical>
				return pdPASS;
 800a21e:	2301      	movs	r3, #1
 800a220:	e099      	b.n	800a356 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d113      	bne.n	800a250 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00c      	beq.n	800a248 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	b672      	cpsid	i
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	b662      	cpsie	i
 800a242:	617b      	str	r3, [r7, #20]
}
 800a244:	bf00      	nop
 800a246:	e7fe      	b.n	800a246 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a248:	f002 f834 	bl	800c2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a24c:	2300      	movs	r3, #0
 800a24e:	e082      	b.n	800a356 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a256:	f107 030c 	add.w	r3, r7, #12
 800a25a:	4618      	mov	r0, r3
 800a25c:	f001 f834 	bl	800b2c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a260:	2301      	movs	r3, #1
 800a262:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a264:	f002 f826 	bl	800c2b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a268:	f000 fd82 	bl	800ad70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a26c:	f001 ffee 	bl	800c24c <vPortEnterCritical>
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a276:	b25b      	sxtb	r3, r3
 800a278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a27c:	d103      	bne.n	800a286 <xQueueSemaphoreTake+0x14a>
 800a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a28c:	b25b      	sxtb	r3, r3
 800a28e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a292:	d103      	bne.n	800a29c <xQueueSemaphoreTake+0x160>
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a29c:	f002 f80a 	bl	800c2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2a0:	463a      	mov	r2, r7
 800a2a2:	f107 030c 	add.w	r3, r7, #12
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f001 f823 	bl	800b2f4 <xTaskCheckForTimeOut>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d132      	bne.n	800a31a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2b6:	f000 fa3a 	bl	800a72e <prvIsQueueEmpty>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d026      	beq.n	800a30e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d109      	bne.n	800a2dc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800a2c8:	f001 ffc0 	bl	800c24c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f001 f98b 	bl	800b5ec <xTaskPriorityInherit>
 800a2d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a2d8:	f001 ffec 	bl	800c2b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2de:	3324      	adds	r3, #36	; 0x24
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 ff35 	bl	800b154 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2ec:	f000 f9cd 	bl	800a68a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2f0:	f000 fd4c 	bl	800ad8c <xTaskResumeAll>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f47f af66 	bne.w	800a1c8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800a2fc:	4b18      	ldr	r3, [pc, #96]	; (800a360 <xQueueSemaphoreTake+0x224>)
 800a2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	e75c      	b.n	800a1c8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a30e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a310:	f000 f9bb 	bl	800a68a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a314:	f000 fd3a 	bl	800ad8c <xTaskResumeAll>
 800a318:	e756      	b.n	800a1c8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a31a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a31c:	f000 f9b5 	bl	800a68a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a320:	f000 fd34 	bl	800ad8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a326:	f000 fa02 	bl	800a72e <prvIsQueueEmpty>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f43f af4b 	beq.w	800a1c8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00d      	beq.n	800a354 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800a338:	f001 ff88 	bl	800c24c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a33c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a33e:	f000 f8fc 	bl	800a53a <prvGetDisinheritPriorityAfterTimeout>
 800a342:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 fa28 	bl	800b7a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a350:	f001 ffb0 	bl	800c2b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a354:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a356:	4618      	mov	r0, r3
 800a358:	3738      	adds	r7, #56	; 0x38
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	e000ed04 	.word	0xe000ed04

0800a364 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b08e      	sub	sp, #56	; 0x38
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10c      	bne.n	800a394 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	b672      	cpsid	i
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	b662      	cpsie	i
 800a38e:	623b      	str	r3, [r7, #32]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d103      	bne.n	800a3a2 <xQueueReceiveFromISR+0x3e>
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <xQueueReceiveFromISR+0x42>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e000      	b.n	800a3a8 <xQueueReceiveFromISR+0x44>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10c      	bne.n	800a3c6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	b672      	cpsid	i
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	b662      	cpsie	i
 800a3c0:	61fb      	str	r3, [r7, #28]
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3c6:	f002 f829 	bl	800c41c <vPortValidateInterruptPriority>
	__asm volatile
 800a3ca:	f3ef 8211 	mrs	r2, BASEPRI
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	b672      	cpsid	i
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	b662      	cpsie	i
 800a3e2:	61ba      	str	r2, [r7, #24]
 800a3e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a3e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d02f      	beq.n	800a456 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a404:	f000 f91b 	bl	800a63e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a410:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a418:	d112      	bne.n	800a440 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d016      	beq.n	800a450 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	3310      	adds	r3, #16
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fee8 	bl	800b1fc <xTaskRemoveFromEventList>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00e      	beq.n	800a450 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00b      	beq.n	800a450 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	e007      	b.n	800a450 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a444:	3301      	adds	r3, #1
 800a446:	b2db      	uxtb	r3, r3
 800a448:	b25a      	sxtb	r2, r3
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a450:	2301      	movs	r3, #1
 800a452:	637b      	str	r3, [r7, #52]	; 0x34
 800a454:	e001      	b.n	800a45a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800a456:	2300      	movs	r3, #0
 800a458:	637b      	str	r3, [r7, #52]	; 0x34
 800a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	f383 8811 	msr	BASEPRI, r3
}
 800a464:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3738      	adds	r7, #56	; 0x38
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10c      	bne.n	800a498 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	b672      	cpsid	i
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	b662      	cpsie	i
 800a492:	60bb      	str	r3, [r7, #8]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800a498:	f001 fed8 	bl	800c24c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a4a2:	f001 ff07 	bl	800c2b4 <vPortExitCritical>

	return uxReturn;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10c      	bne.n	800a4dc <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	b672      	cpsid	i
 800a4c8:	f383 8811 	msr	BASEPRI, r3
 800a4cc:	f3bf 8f6f 	isb	sy
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	b662      	cpsie	i
 800a4d6:	60fb      	str	r3, [r7, #12]
}
 800a4d8:	bf00      	nop
 800a4da:	e7fe      	b.n	800a4da <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a4e2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10c      	bne.n	800a51c <vQueueDelete+0x2c>
	__asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	b672      	cpsid	i
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	b662      	cpsie	i
 800a516:	60bb      	str	r3, [r7, #8]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 f95f 	bl	800a7e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d102      	bne.n	800a532 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f002 f883 	bl	800c638 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a532:	bf00      	nop
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a53a:	b480      	push	{r7}
 800a53c:	b085      	sub	sp, #20
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	2b00      	cmp	r3, #0
 800a548:	d006      	beq.n	800a558 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	e001      	b.n	800a55c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a558:	2300      	movs	r3, #0
 800a55a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a55c:	68fb      	ldr	r3, [r7, #12]
	}
 800a55e:	4618      	mov	r0, r3
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b086      	sub	sp, #24
 800a56e:	af00      	add	r7, sp, #0
 800a570:	60f8      	str	r0, [r7, #12]
 800a572:	60b9      	str	r1, [r7, #8]
 800a574:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a576:	2300      	movs	r3, #0
 800a578:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10d      	bne.n	800a5a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d14d      	bne.n	800a62c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	4618      	mov	r0, r3
 800a596:	f001 f891 	bl	800b6bc <xTaskPriorityDisinherit>
 800a59a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	609a      	str	r2, [r3, #8]
 800a5a2:	e043      	b.n	800a62c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d119      	bne.n	800a5de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6858      	ldr	r0, [r3, #4]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68b9      	ldr	r1, [r7, #8]
 800a5b6:	f00e febe 	bl	8019336 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c2:	441a      	add	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d32b      	bcc.n	800a62c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	605a      	str	r2, [r3, #4]
 800a5dc:	e026      	b.n	800a62c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68d8      	ldr	r0, [r3, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	68b9      	ldr	r1, [r7, #8]
 800a5ea:	f00e fea4 	bl	8019336 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f6:	425b      	negs	r3, r3
 800a5f8:	441a      	add	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	429a      	cmp	r2, r3
 800a608:	d207      	bcs.n	800a61a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689a      	ldr	r2, [r3, #8]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a612:	425b      	negs	r3, r3
 800a614:	441a      	add	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d105      	bne.n	800a62c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	3b01      	subs	r3, #1
 800a62a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a634:	697b      	ldr	r3, [r7, #20]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b082      	sub	sp, #8
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d018      	beq.n	800a682 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	68da      	ldr	r2, [r3, #12]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a658:	441a      	add	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	429a      	cmp	r2, r3
 800a668:	d303      	bcc.n	800a672 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	68d9      	ldr	r1, [r3, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67a:	461a      	mov	r2, r3
 800a67c:	6838      	ldr	r0, [r7, #0]
 800a67e:	f00e fe5a 	bl	8019336 <memcpy>
	}
}
 800a682:	bf00      	nop
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a692:	f001 fddb 	bl	800c24c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a69c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a69e:	e011      	b.n	800a6c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d012      	beq.n	800a6ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3324      	adds	r3, #36	; 0x24
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 fda5 	bl	800b1fc <xTaskRemoveFromEventList>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6b8:	f000 fe82 	bl	800b3c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	dce9      	bgt.n	800a6a0 <prvUnlockQueue+0x16>
 800a6cc:	e000      	b.n	800a6d0 <prvUnlockQueue+0x46>
					break;
 800a6ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	22ff      	movs	r2, #255	; 0xff
 800a6d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6d8:	f001 fdec 	bl	800c2b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6dc:	f001 fdb6 	bl	800c24c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6e8:	e011      	b.n	800a70e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d012      	beq.n	800a718 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fd80 	bl	800b1fc <xTaskRemoveFromEventList>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a702:	f000 fe5d 	bl	800b3c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	3b01      	subs	r3, #1
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a70e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a712:	2b00      	cmp	r3, #0
 800a714:	dce9      	bgt.n	800a6ea <prvUnlockQueue+0x60>
 800a716:	e000      	b.n	800a71a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a718:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	22ff      	movs	r2, #255	; 0xff
 800a71e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a722:	f001 fdc7 	bl	800c2b4 <vPortExitCritical>
}
 800a726:	bf00      	nop
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a736:	f001 fd89 	bl	800c24c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d102      	bne.n	800a748 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a742:	2301      	movs	r3, #1
 800a744:	60fb      	str	r3, [r7, #12]
 800a746:	e001      	b.n	800a74c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a74c:	f001 fdb2 	bl	800c2b4 <vPortExitCritical>

	return xReturn;
 800a750:	68fb      	ldr	r3, [r7, #12]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a762:	f001 fd73 	bl	800c24c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a76e:	429a      	cmp	r2, r3
 800a770:	d102      	bne.n	800a778 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a772:	2301      	movs	r3, #1
 800a774:	60fb      	str	r3, [r7, #12]
 800a776:	e001      	b.n	800a77c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a77c:	f001 fd9a 	bl	800c2b4 <vPortExitCritical>

	return xReturn;
 800a780:	68fb      	ldr	r3, [r7, #12]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a796:	2300      	movs	r3, #0
 800a798:	60fb      	str	r3, [r7, #12]
 800a79a:	e014      	b.n	800a7c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a79c:	4a0f      	ldr	r2, [pc, #60]	; (800a7dc <vQueueAddToRegistry+0x50>)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10b      	bne.n	800a7c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7a8:	490c      	ldr	r1, [pc, #48]	; (800a7dc <vQueueAddToRegistry+0x50>)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7b2:	4a0a      	ldr	r2, [pc, #40]	; (800a7dc <vQueueAddToRegistry+0x50>)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	00db      	lsls	r3, r3, #3
 800a7b8:	4413      	add	r3, r2
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7be:	e006      	b.n	800a7ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b07      	cmp	r3, #7
 800a7ca:	d9e7      	bls.n	800a79c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	3714      	adds	r7, #20
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20046c14 	.word	0x20046c14

0800a7e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	e016      	b.n	800a81c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a7ee:	4a10      	ldr	r2, [pc, #64]	; (800a830 <vQueueUnregisterQueue+0x50>)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	4413      	add	r3, r2
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d10b      	bne.n	800a816 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a7fe:	4a0c      	ldr	r2, [pc, #48]	; (800a830 <vQueueUnregisterQueue+0x50>)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2100      	movs	r1, #0
 800a804:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a808:	4a09      	ldr	r2, [pc, #36]	; (800a830 <vQueueUnregisterQueue+0x50>)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	4413      	add	r3, r2
 800a810:	2200      	movs	r2, #0
 800a812:	605a      	str	r2, [r3, #4]
				break;
 800a814:	e006      	b.n	800a824 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	3301      	adds	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b07      	cmp	r3, #7
 800a820:	d9e5      	bls.n	800a7ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a822:	bf00      	nop
 800a824:	bf00      	nop
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	20046c14 	.word	0x20046c14

0800a834 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a844:	f001 fd02 	bl	800c24c <vPortEnterCritical>
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a84e:	b25b      	sxtb	r3, r3
 800a850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a854:	d103      	bne.n	800a85e <vQueueWaitForMessageRestricted+0x2a>
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a864:	b25b      	sxtb	r3, r3
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a86a:	d103      	bne.n	800a874 <vQueueWaitForMessageRestricted+0x40>
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a874:	f001 fd1e 	bl	800c2b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d106      	bne.n	800a88e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	3324      	adds	r3, #36	; 0x24
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	68b9      	ldr	r1, [r7, #8]
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 fc89 	bl	800b1a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a88e:	6978      	ldr	r0, [r7, #20]
 800a890:	f7ff fefb 	bl	800a68a <prvUnlockQueue>
	}
 800a894:	bf00      	nop
 800a896:	3718      	adds	r7, #24
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08e      	sub	sp, #56	; 0x38
 800a8a0:	af04      	add	r7, sp, #16
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10c      	bne.n	800a8ca <xTaskCreateStatic+0x2e>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	b672      	cpsid	i
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	b662      	cpsie	i
 800a8c4:	623b      	str	r3, [r7, #32]
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10c      	bne.n	800a8ea <xTaskCreateStatic+0x4e>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	b672      	cpsid	i
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	b662      	cpsie	i
 800a8e4:	61fb      	str	r3, [r7, #28]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8ea:	23bc      	movs	r3, #188	; 0xbc
 800a8ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2bbc      	cmp	r3, #188	; 0xbc
 800a8f2:	d00c      	beq.n	800a90e <xTaskCreateStatic+0x72>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	b672      	cpsid	i
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	b662      	cpsie	i
 800a908:	61bb      	str	r3, [r7, #24]
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a90e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	2b00      	cmp	r3, #0
 800a914:	d01e      	beq.n	800a954 <xTaskCreateStatic+0xb8>
 800a916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01b      	beq.n	800a954 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a924:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	2202      	movs	r2, #2
 800a92a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a92e:	2300      	movs	r3, #0
 800a930:	9303      	str	r3, [sp, #12]
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	9302      	str	r3, [sp, #8]
 800a936:	f107 0314 	add.w	r3, r7, #20
 800a93a:	9301      	str	r3, [sp, #4]
 800a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	68b9      	ldr	r1, [r7, #8]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 f850 	bl	800a9ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a94c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a94e:	f000 f8f5 	bl	800ab3c <prvAddNewTaskToReadyList>
 800a952:	e001      	b.n	800a958 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a954:	2300      	movs	r3, #0
 800a956:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a958:	697b      	ldr	r3, [r7, #20]
	}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3728      	adds	r7, #40	; 0x28
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a962:	b580      	push	{r7, lr}
 800a964:	b08c      	sub	sp, #48	; 0x30
 800a966:	af04      	add	r7, sp, #16
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	603b      	str	r3, [r7, #0]
 800a96e:	4613      	mov	r3, r2
 800a970:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a972:	88fb      	ldrh	r3, [r7, #6]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4618      	mov	r0, r3
 800a978:	f001 fd94 	bl	800c4a4 <pvPortMalloc>
 800a97c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00e      	beq.n	800a9a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a984:	20bc      	movs	r0, #188	; 0xbc
 800a986:	f001 fd8d 	bl	800c4a4 <pvPortMalloc>
 800a98a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	631a      	str	r2, [r3, #48]	; 0x30
 800a998:	e005      	b.n	800a9a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a99a:	6978      	ldr	r0, [r7, #20]
 800a99c:	f001 fe4c 	bl	800c638 <vPortFree>
 800a9a0:	e001      	b.n	800a9a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d017      	beq.n	800a9dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9b4:	88fa      	ldrh	r2, [r7, #6]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	9302      	str	r3, [sp, #8]
 800a9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	68b9      	ldr	r1, [r7, #8]
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f000 f80e 	bl	800a9ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9d0:	69f8      	ldr	r0, [r7, #28]
 800a9d2:	f000 f8b3 	bl	800ab3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	61bb      	str	r3, [r7, #24]
 800a9da:	e002      	b.n	800a9e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9e2:	69bb      	ldr	r3, [r7, #24]
	}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3720      	adds	r7, #32
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	461a      	mov	r2, r3
 800aa04:	21a5      	movs	r1, #165	; 0xa5
 800aa06:	f00e fca4 	bl	8019352 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aa14:	440b      	add	r3, r1
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	f023 0307 	bic.w	r3, r3, #7
 800aa22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00c      	beq.n	800aa48 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	b672      	cpsid	i
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	b662      	cpsie	i
 800aa42:	617b      	str	r3, [r7, #20]
}
 800aa44:	bf00      	nop
 800aa46:	e7fe      	b.n	800aa46 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d01f      	beq.n	800aa8e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa4e:	2300      	movs	r3, #0
 800aa50:	61fb      	str	r3, [r7, #28]
 800aa52:	e012      	b.n	800aa7a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	4413      	add	r3, r2
 800aa5a:	7819      	ldrb	r1, [r3, #0]
 800aa5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	4413      	add	r3, r2
 800aa62:	3334      	adds	r3, #52	; 0x34
 800aa64:	460a      	mov	r2, r1
 800aa66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d006      	beq.n	800aa82 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	3301      	adds	r3, #1
 800aa78:	61fb      	str	r3, [r7, #28]
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	2b0f      	cmp	r3, #15
 800aa7e:	d9e9      	bls.n	800aa54 <prvInitialiseNewTask+0x68>
 800aa80:	e000      	b.n	800aa84 <prvInitialiseNewTask+0x98>
			{
				break;
 800aa82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa8c:	e003      	b.n	800aa96 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa98:	2b37      	cmp	r3, #55	; 0x37
 800aa9a:	d901      	bls.n	800aaa0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa9c:	2337      	movs	r3, #55	; 0x37
 800aa9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaaa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aaac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaae:	2200      	movs	r2, #0
 800aab0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	3304      	adds	r3, #4
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe fd0c 	bl	80094d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	3318      	adds	r3, #24
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe fd07 	bl	80094d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aada:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	3354      	adds	r3, #84	; 0x54
 800aaf0:	2260      	movs	r2, #96	; 0x60
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f00e fc2c 	bl	8019352 <memset>
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	4a0c      	ldr	r2, [pc, #48]	; (800ab30 <prvInitialiseNewTask+0x144>)
 800aafe:	659a      	str	r2, [r3, #88]	; 0x58
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	4a0c      	ldr	r2, [pc, #48]	; (800ab34 <prvInitialiseNewTask+0x148>)
 800ab04:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab08:	4a0b      	ldr	r2, [pc, #44]	; (800ab38 <prvInitialiseNewTask+0x14c>)
 800ab0a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	69b8      	ldr	r0, [r7, #24]
 800ab12:	f001 fa8f 	bl	800c034 <pxPortInitialiseStack>
 800ab16:	4602      	mov	r2, r0
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab28:	bf00      	nop
 800ab2a:	3720      	adds	r7, #32
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	0801d8b4 	.word	0x0801d8b4
 800ab34:	0801d8d4 	.word	0x0801d8d4
 800ab38:	0801d894 	.word	0x0801d894

0800ab3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab44:	f001 fb82 	bl	800c24c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab48:	4b2d      	ldr	r3, [pc, #180]	; (800ac00 <prvAddNewTaskToReadyList+0xc4>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	4a2c      	ldr	r2, [pc, #176]	; (800ac00 <prvAddNewTaskToReadyList+0xc4>)
 800ab50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab52:	4b2c      	ldr	r3, [pc, #176]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d109      	bne.n	800ab6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab5a:	4a2a      	ldr	r2, [pc, #168]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab60:	4b27      	ldr	r3, [pc, #156]	; (800ac00 <prvAddNewTaskToReadyList+0xc4>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d110      	bne.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab68:	f000 fc4e 	bl	800b408 <prvInitialiseTaskLists>
 800ab6c:	e00d      	b.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab6e:	4b26      	ldr	r3, [pc, #152]	; (800ac08 <prvAddNewTaskToReadyList+0xcc>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d109      	bne.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab76:	4b23      	ldr	r3, [pc, #140]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d802      	bhi.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab84:	4a1f      	ldr	r2, [pc, #124]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab8a:	4b20      	ldr	r3, [pc, #128]	; (800ac0c <prvAddNewTaskToReadyList+0xd0>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	4a1e      	ldr	r2, [pc, #120]	; (800ac0c <prvAddNewTaskToReadyList+0xd0>)
 800ab92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab94:	4b1d      	ldr	r3, [pc, #116]	; (800ac0c <prvAddNewTaskToReadyList+0xd0>)
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba0:	4b1b      	ldr	r3, [pc, #108]	; (800ac10 <prvAddNewTaskToReadyList+0xd4>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d903      	bls.n	800abb0 <prvAddNewTaskToReadyList+0x74>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	4a18      	ldr	r2, [pc, #96]	; (800ac10 <prvAddNewTaskToReadyList+0xd4>)
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb4:	4613      	mov	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4a15      	ldr	r2, [pc, #84]	; (800ac14 <prvAddNewTaskToReadyList+0xd8>)
 800abbe:	441a      	add	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7fe fc91 	bl	80094ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abcc:	f001 fb72 	bl	800c2b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abd0:	4b0d      	ldr	r3, [pc, #52]	; (800ac08 <prvAddNewTaskToReadyList+0xcc>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00e      	beq.n	800abf6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abd8:	4b0a      	ldr	r3, [pc, #40]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d207      	bcs.n	800abf6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abe6:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <prvAddNewTaskToReadyList+0xdc>)
 800abe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abf6:	bf00      	nop
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	20047128 	.word	0x20047128
 800ac04:	20046c54 	.word	0x20046c54
 800ac08:	20047134 	.word	0x20047134
 800ac0c:	20047144 	.word	0x20047144
 800ac10:	20047130 	.word	0x20047130
 800ac14:	20046c58 	.word	0x20046c58
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac24:	2300      	movs	r3, #0
 800ac26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d019      	beq.n	800ac62 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac2e:	4b14      	ldr	r3, [pc, #80]	; (800ac80 <vTaskDelay+0x64>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00c      	beq.n	800ac50 <vTaskDelay+0x34>
	__asm volatile
 800ac36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3a:	b672      	cpsid	i
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	b662      	cpsie	i
 800ac4a:	60bb      	str	r3, [r7, #8]
}
 800ac4c:	bf00      	nop
 800ac4e:	e7fe      	b.n	800ac4e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ac50:	f000 f88e 	bl	800ad70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac54:	2100      	movs	r1, #0
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fe3c 	bl	800b8d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac5c:	f000 f896 	bl	800ad8c <xTaskResumeAll>
 800ac60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d107      	bne.n	800ac78 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ac68:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <vTaskDelay+0x68>)
 800ac6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac78:	bf00      	nop
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	20047150 	.word	0x20047150
 800ac84:	e000ed04 	.word	0xe000ed04

0800ac88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac96:	463a      	mov	r2, r7
 800ac98:	1d39      	adds	r1, r7, #4
 800ac9a:	f107 0308 	add.w	r3, r7, #8
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe fbc4 	bl	800942c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	9202      	str	r2, [sp, #8]
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	2300      	movs	r3, #0
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	2300      	movs	r3, #0
 800acb4:	460a      	mov	r2, r1
 800acb6:	4926      	ldr	r1, [pc, #152]	; (800ad50 <vTaskStartScheduler+0xc8>)
 800acb8:	4826      	ldr	r0, [pc, #152]	; (800ad54 <vTaskStartScheduler+0xcc>)
 800acba:	f7ff fdef 	bl	800a89c <xTaskCreateStatic>
 800acbe:	4603      	mov	r3, r0
 800acc0:	4a25      	ldr	r2, [pc, #148]	; (800ad58 <vTaskStartScheduler+0xd0>)
 800acc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acc4:	4b24      	ldr	r3, [pc, #144]	; (800ad58 <vTaskStartScheduler+0xd0>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800accc:	2301      	movs	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	e001      	b.n	800acd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d102      	bne.n	800ace2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800acdc:	f000 fe4e 	bl	800b97c <xTimerCreateTimerTask>
 800ace0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d11d      	bne.n	800ad24 <vTaskStartScheduler+0x9c>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	b672      	cpsid	i
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	b662      	cpsie	i
 800acfc:	613b      	str	r3, [r7, #16]
}
 800acfe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad00:	4b16      	ldr	r3, [pc, #88]	; (800ad5c <vTaskStartScheduler+0xd4>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3354      	adds	r3, #84	; 0x54
 800ad06:	4a16      	ldr	r2, [pc, #88]	; (800ad60 <vTaskStartScheduler+0xd8>)
 800ad08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad0a:	4b16      	ldr	r3, [pc, #88]	; (800ad64 <vTaskStartScheduler+0xdc>)
 800ad0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad12:	4b15      	ldr	r3, [pc, #84]	; (800ad68 <vTaskStartScheduler+0xe0>)
 800ad14:	2201      	movs	r2, #1
 800ad16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad18:	4b14      	ldr	r3, [pc, #80]	; (800ad6c <vTaskStartScheduler+0xe4>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad1e:	f001 fa17 	bl	800c150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad22:	e010      	b.n	800ad46 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad2a:	d10c      	bne.n	800ad46 <vTaskStartScheduler+0xbe>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	b672      	cpsid	i
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	b662      	cpsie	i
 800ad40:	60fb      	str	r3, [r7, #12]
}
 800ad42:	bf00      	nop
 800ad44:	e7fe      	b.n	800ad44 <vTaskStartScheduler+0xbc>
}
 800ad46:	bf00      	nop
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	0801a3b0 	.word	0x0801a3b0
 800ad54:	0800b3d9 	.word	0x0800b3d9
 800ad58:	2004714c 	.word	0x2004714c
 800ad5c:	20046c54 	.word	0x20046c54
 800ad60:	20001a5c 	.word	0x20001a5c
 800ad64:	20047148 	.word	0x20047148
 800ad68:	20047134 	.word	0x20047134
 800ad6c:	2004712c 	.word	0x2004712c

0800ad70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad70:	b480      	push	{r7}
 800ad72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ad74:	4b04      	ldr	r3, [pc, #16]	; (800ad88 <vTaskSuspendAll+0x18>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	4a03      	ldr	r2, [pc, #12]	; (800ad88 <vTaskSuspendAll+0x18>)
 800ad7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ad7e:	bf00      	nop
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	20047150 	.word	0x20047150

0800ad8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad92:	2300      	movs	r3, #0
 800ad94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad96:	2300      	movs	r3, #0
 800ad98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad9a:	4b43      	ldr	r3, [pc, #268]	; (800aea8 <xTaskResumeAll+0x11c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10c      	bne.n	800adbc <xTaskResumeAll+0x30>
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	b672      	cpsid	i
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	b662      	cpsie	i
 800adb6:	603b      	str	r3, [r7, #0]
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800adbc:	f001 fa46 	bl	800c24c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800adc0:	4b39      	ldr	r3, [pc, #228]	; (800aea8 <xTaskResumeAll+0x11c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	4a38      	ldr	r2, [pc, #224]	; (800aea8 <xTaskResumeAll+0x11c>)
 800adc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adca:	4b37      	ldr	r3, [pc, #220]	; (800aea8 <xTaskResumeAll+0x11c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d162      	bne.n	800ae98 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800add2:	4b36      	ldr	r3, [pc, #216]	; (800aeac <xTaskResumeAll+0x120>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d05e      	beq.n	800ae98 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adda:	e02f      	b.n	800ae3c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800addc:	4b34      	ldr	r3, [pc, #208]	; (800aeb0 <xTaskResumeAll+0x124>)
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	3318      	adds	r3, #24
 800ade8:	4618      	mov	r0, r3
 800adea:	f7fe fbdd 	bl	80095a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3304      	adds	r3, #4
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe fbd8 	bl	80095a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfc:	4b2d      	ldr	r3, [pc, #180]	; (800aeb4 <xTaskResumeAll+0x128>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d903      	bls.n	800ae0c <xTaskResumeAll+0x80>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	4a2a      	ldr	r2, [pc, #168]	; (800aeb4 <xTaskResumeAll+0x128>)
 800ae0a:	6013      	str	r3, [r2, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae10:	4613      	mov	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4a27      	ldr	r2, [pc, #156]	; (800aeb8 <xTaskResumeAll+0x12c>)
 800ae1a:	441a      	add	r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3304      	adds	r3, #4
 800ae20:	4619      	mov	r1, r3
 800ae22:	4610      	mov	r0, r2
 800ae24:	f7fe fb63 	bl	80094ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2c:	4b23      	ldr	r3, [pc, #140]	; (800aebc <xTaskResumeAll+0x130>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d302      	bcc.n	800ae3c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ae36:	4b22      	ldr	r3, [pc, #136]	; (800aec0 <xTaskResumeAll+0x134>)
 800ae38:	2201      	movs	r2, #1
 800ae3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae3c:	4b1c      	ldr	r3, [pc, #112]	; (800aeb0 <xTaskResumeAll+0x124>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1cb      	bne.n	800addc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae4a:	f000 fb81 	bl	800b550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ae4e:	4b1d      	ldr	r3, [pc, #116]	; (800aec4 <xTaskResumeAll+0x138>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d010      	beq.n	800ae7c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae5a:	f000 f859 	bl	800af10 <xTaskIncrementTick>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800ae64:	4b16      	ldr	r3, [pc, #88]	; (800aec0 <xTaskResumeAll+0x134>)
 800ae66:	2201      	movs	r2, #1
 800ae68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1f1      	bne.n	800ae5a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800ae76:	4b13      	ldr	r3, [pc, #76]	; (800aec4 <xTaskResumeAll+0x138>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae7c:	4b10      	ldr	r3, [pc, #64]	; (800aec0 <xTaskResumeAll+0x134>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d009      	beq.n	800ae98 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae88:	4b0f      	ldr	r3, [pc, #60]	; (800aec8 <xTaskResumeAll+0x13c>)
 800ae8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae8e:	601a      	str	r2, [r3, #0]
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae98:	f001 fa0c 	bl	800c2b4 <vPortExitCritical>

	return xAlreadyYielded;
 800ae9c:	68bb      	ldr	r3, [r7, #8]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20047150 	.word	0x20047150
 800aeac:	20047128 	.word	0x20047128
 800aeb0:	200470e8 	.word	0x200470e8
 800aeb4:	20047130 	.word	0x20047130
 800aeb8:	20046c58 	.word	0x20046c58
 800aebc:	20046c54 	.word	0x20046c54
 800aec0:	2004713c 	.word	0x2004713c
 800aec4:	20047138 	.word	0x20047138
 800aec8:	e000ed04 	.word	0xe000ed04

0800aecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <xTaskGetTickCount+0x1c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aed8:	687b      	ldr	r3, [r7, #4]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	2004712c 	.word	0x2004712c

0800aeec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aef2:	f001 fa93 	bl	800c41c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aef6:	2300      	movs	r3, #0
 800aef8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aefa:	4b04      	ldr	r3, [pc, #16]	; (800af0c <xTaskGetTickCountFromISR+0x20>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af00:	683b      	ldr	r3, [r7, #0]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	2004712c 	.word	0x2004712c

0800af10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af1a:	4b50      	ldr	r3, [pc, #320]	; (800b05c <xTaskIncrementTick+0x14c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f040 808b 	bne.w	800b03a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af24:	4b4e      	ldr	r3, [pc, #312]	; (800b060 <xTaskIncrementTick+0x150>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af2c:	4a4c      	ldr	r2, [pc, #304]	; (800b060 <xTaskIncrementTick+0x150>)
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d122      	bne.n	800af7e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800af38:	4b4a      	ldr	r3, [pc, #296]	; (800b064 <xTaskIncrementTick+0x154>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00c      	beq.n	800af5c <xTaskIncrementTick+0x4c>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	b672      	cpsid	i
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	b662      	cpsie	i
 800af56:	603b      	str	r3, [r7, #0]
}
 800af58:	bf00      	nop
 800af5a:	e7fe      	b.n	800af5a <xTaskIncrementTick+0x4a>
 800af5c:	4b41      	ldr	r3, [pc, #260]	; (800b064 <xTaskIncrementTick+0x154>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	4b41      	ldr	r3, [pc, #260]	; (800b068 <xTaskIncrementTick+0x158>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a3f      	ldr	r2, [pc, #252]	; (800b064 <xTaskIncrementTick+0x154>)
 800af68:	6013      	str	r3, [r2, #0]
 800af6a:	4a3f      	ldr	r2, [pc, #252]	; (800b068 <xTaskIncrementTick+0x158>)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	4b3e      	ldr	r3, [pc, #248]	; (800b06c <xTaskIncrementTick+0x15c>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	3301      	adds	r3, #1
 800af76:	4a3d      	ldr	r2, [pc, #244]	; (800b06c <xTaskIncrementTick+0x15c>)
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	f000 fae9 	bl	800b550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af7e:	4b3c      	ldr	r3, [pc, #240]	; (800b070 <xTaskIncrementTick+0x160>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	429a      	cmp	r2, r3
 800af86:	d349      	bcc.n	800b01c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af88:	4b36      	ldr	r3, [pc, #216]	; (800b064 <xTaskIncrementTick+0x154>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d104      	bne.n	800af9c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af92:	4b37      	ldr	r3, [pc, #220]	; (800b070 <xTaskIncrementTick+0x160>)
 800af94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af98:	601a      	str	r2, [r3, #0]
					break;
 800af9a:	e03f      	b.n	800b01c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af9c:	4b31      	ldr	r3, [pc, #196]	; (800b064 <xTaskIncrementTick+0x154>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d203      	bcs.n	800afbc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afb4:	4a2e      	ldr	r2, [pc, #184]	; (800b070 <xTaskIncrementTick+0x160>)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afba:	e02f      	b.n	800b01c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	3304      	adds	r3, #4
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fe faf1 	bl	80095a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d004      	beq.n	800afd8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	3318      	adds	r3, #24
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe fae8 	bl	80095a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afdc:	4b25      	ldr	r3, [pc, #148]	; (800b074 <xTaskIncrementTick+0x164>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d903      	bls.n	800afec <xTaskIncrementTick+0xdc>
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	4a22      	ldr	r2, [pc, #136]	; (800b074 <xTaskIncrementTick+0x164>)
 800afea:	6013      	str	r3, [r2, #0]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff0:	4613      	mov	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4413      	add	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4a1f      	ldr	r2, [pc, #124]	; (800b078 <xTaskIncrementTick+0x168>)
 800affa:	441a      	add	r2, r3
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	3304      	adds	r3, #4
 800b000:	4619      	mov	r1, r3
 800b002:	4610      	mov	r0, r2
 800b004:	f7fe fa73 	bl	80094ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00c:	4b1b      	ldr	r3, [pc, #108]	; (800b07c <xTaskIncrementTick+0x16c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b012:	429a      	cmp	r2, r3
 800b014:	d3b8      	bcc.n	800af88 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b016:	2301      	movs	r3, #1
 800b018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b01a:	e7b5      	b.n	800af88 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b01c:	4b17      	ldr	r3, [pc, #92]	; (800b07c <xTaskIncrementTick+0x16c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b022:	4915      	ldr	r1, [pc, #84]	; (800b078 <xTaskIncrementTick+0x168>)
 800b024:	4613      	mov	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	440b      	add	r3, r1
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d907      	bls.n	800b044 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b034:	2301      	movs	r3, #1
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	e004      	b.n	800b044 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b03a:	4b11      	ldr	r3, [pc, #68]	; (800b080 <xTaskIncrementTick+0x170>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3301      	adds	r3, #1
 800b040:	4a0f      	ldr	r2, [pc, #60]	; (800b080 <xTaskIncrementTick+0x170>)
 800b042:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b044:	4b0f      	ldr	r3, [pc, #60]	; (800b084 <xTaskIncrementTick+0x174>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b050:	697b      	ldr	r3, [r7, #20]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3718      	adds	r7, #24
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20047150 	.word	0x20047150
 800b060:	2004712c 	.word	0x2004712c
 800b064:	200470e0 	.word	0x200470e0
 800b068:	200470e4 	.word	0x200470e4
 800b06c:	20047140 	.word	0x20047140
 800b070:	20047148 	.word	0x20047148
 800b074:	20047130 	.word	0x20047130
 800b078:	20046c58 	.word	0x20046c58
 800b07c:	20046c54 	.word	0x20046c54
 800b080:	20047138 	.word	0x20047138
 800b084:	2004713c 	.word	0x2004713c

0800b088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b08e:	4b2b      	ldr	r3, [pc, #172]	; (800b13c <vTaskSwitchContext+0xb4>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b096:	4b2a      	ldr	r3, [pc, #168]	; (800b140 <vTaskSwitchContext+0xb8>)
 800b098:	2201      	movs	r2, #1
 800b09a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b09c:	e048      	b.n	800b130 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b09e:	4b28      	ldr	r3, [pc, #160]	; (800b140 <vTaskSwitchContext+0xb8>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a4:	4b27      	ldr	r3, [pc, #156]	; (800b144 <vTaskSwitchContext+0xbc>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	e012      	b.n	800b0d2 <vTaskSwitchContext+0x4a>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10c      	bne.n	800b0cc <vTaskSwitchContext+0x44>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	b672      	cpsid	i
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	b662      	cpsie	i
 800b0c6:	607b      	str	r3, [r7, #4]
}
 800b0c8:	bf00      	nop
 800b0ca:	e7fe      	b.n	800b0ca <vTaskSwitchContext+0x42>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	491d      	ldr	r1, [pc, #116]	; (800b148 <vTaskSwitchContext+0xc0>)
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	440b      	add	r3, r1
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0e2      	beq.n	800b0ac <vTaskSwitchContext+0x24>
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4a15      	ldr	r2, [pc, #84]	; (800b148 <vTaskSwitchContext+0xc0>)
 800b0f2:	4413      	add	r3, r2
 800b0f4:	60bb      	str	r3, [r7, #8]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	605a      	str	r2, [r3, #4]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	3308      	adds	r3, #8
 800b108:	429a      	cmp	r2, r3
 800b10a:	d104      	bne.n	800b116 <vTaskSwitchContext+0x8e>
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	605a      	str	r2, [r3, #4]
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	4a0b      	ldr	r2, [pc, #44]	; (800b14c <vTaskSwitchContext+0xc4>)
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	4a08      	ldr	r2, [pc, #32]	; (800b144 <vTaskSwitchContext+0xbc>)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b126:	4b09      	ldr	r3, [pc, #36]	; (800b14c <vTaskSwitchContext+0xc4>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3354      	adds	r3, #84	; 0x54
 800b12c:	4a08      	ldr	r2, [pc, #32]	; (800b150 <vTaskSwitchContext+0xc8>)
 800b12e:	6013      	str	r3, [r2, #0]
}
 800b130:	bf00      	nop
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	20047150 	.word	0x20047150
 800b140:	2004713c 	.word	0x2004713c
 800b144:	20047130 	.word	0x20047130
 800b148:	20046c58 	.word	0x20046c58
 800b14c:	20046c54 	.word	0x20046c54
 800b150:	20001a5c 	.word	0x20001a5c

0800b154 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10c      	bne.n	800b17e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	b672      	cpsid	i
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	b662      	cpsie	i
 800b178:	60fb      	str	r3, [r7, #12]
}
 800b17a:	bf00      	nop
 800b17c:	e7fe      	b.n	800b17c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b17e:	4b07      	ldr	r3, [pc, #28]	; (800b19c <vTaskPlaceOnEventList+0x48>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3318      	adds	r3, #24
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7fe f9d5 	bl	8009536 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b18c:	2101      	movs	r1, #1
 800b18e:	6838      	ldr	r0, [r7, #0]
 800b190:	f000 fba0 	bl	800b8d4 <prvAddCurrentTaskToDelayedList>
}
 800b194:	bf00      	nop
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	20046c54 	.word	0x20046c54

0800b1a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10c      	bne.n	800b1cc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	b672      	cpsid	i
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	b662      	cpsie	i
 800b1c6:	617b      	str	r3, [r7, #20]
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1cc:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <vTaskPlaceOnEventListRestricted+0x58>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3318      	adds	r3, #24
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f7fe f98a 	bl	80094ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	68b8      	ldr	r0, [r7, #8]
 800b1ea:	f000 fb73 	bl	800b8d4 <prvAddCurrentTaskToDelayedList>
	}
 800b1ee:	bf00      	nop
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20046c54 	.word	0x20046c54

0800b1fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10c      	bne.n	800b22c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b216:	b672      	cpsid	i
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	b662      	cpsie	i
 800b226:	60fb      	str	r3, [r7, #12]
}
 800b228:	bf00      	nop
 800b22a:	e7fe      	b.n	800b22a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	3318      	adds	r3, #24
 800b230:	4618      	mov	r0, r3
 800b232:	f7fe f9b9 	bl	80095a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b236:	4b1e      	ldr	r3, [pc, #120]	; (800b2b0 <xTaskRemoveFromEventList+0xb4>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d11d      	bne.n	800b27a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	3304      	adds	r3, #4
 800b242:	4618      	mov	r0, r3
 800b244:	f7fe f9b0 	bl	80095a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24c:	4b19      	ldr	r3, [pc, #100]	; (800b2b4 <xTaskRemoveFromEventList+0xb8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	429a      	cmp	r2, r3
 800b252:	d903      	bls.n	800b25c <xTaskRemoveFromEventList+0x60>
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b258:	4a16      	ldr	r2, [pc, #88]	; (800b2b4 <xTaskRemoveFromEventList+0xb8>)
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4a13      	ldr	r2, [pc, #76]	; (800b2b8 <xTaskRemoveFromEventList+0xbc>)
 800b26a:	441a      	add	r2, r3
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	3304      	adds	r3, #4
 800b270:	4619      	mov	r1, r3
 800b272:	4610      	mov	r0, r2
 800b274:	f7fe f93b 	bl	80094ee <vListInsertEnd>
 800b278:	e005      	b.n	800b286 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	3318      	adds	r3, #24
 800b27e:	4619      	mov	r1, r3
 800b280:	480e      	ldr	r0, [pc, #56]	; (800b2bc <xTaskRemoveFromEventList+0xc0>)
 800b282:	f7fe f934 	bl	80094ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28a:	4b0d      	ldr	r3, [pc, #52]	; (800b2c0 <xTaskRemoveFromEventList+0xc4>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	429a      	cmp	r2, r3
 800b292:	d905      	bls.n	800b2a0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b294:	2301      	movs	r3, #1
 800b296:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b298:	4b0a      	ldr	r3, [pc, #40]	; (800b2c4 <xTaskRemoveFromEventList+0xc8>)
 800b29a:	2201      	movs	r2, #1
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	e001      	b.n	800b2a4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b2a4:	697b      	ldr	r3, [r7, #20]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20047150 	.word	0x20047150
 800b2b4:	20047130 	.word	0x20047130
 800b2b8:	20046c58 	.word	0x20046c58
 800b2bc:	200470e8 	.word	0x200470e8
 800b2c0:	20046c54 	.word	0x20046c54
 800b2c4:	2004713c 	.word	0x2004713c

0800b2c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2d0:	4b06      	ldr	r3, [pc, #24]	; (800b2ec <vTaskInternalSetTimeOutState+0x24>)
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2d8:	4b05      	ldr	r3, [pc, #20]	; (800b2f0 <vTaskInternalSetTimeOutState+0x28>)
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	605a      	str	r2, [r3, #4]
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	20047140 	.word	0x20047140
 800b2f0:	2004712c 	.word	0x2004712c

0800b2f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10c      	bne.n	800b31e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	b672      	cpsid	i
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	b662      	cpsie	i
 800b318:	613b      	str	r3, [r7, #16]
}
 800b31a:	bf00      	nop
 800b31c:	e7fe      	b.n	800b31c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10c      	bne.n	800b33e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	b672      	cpsid	i
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	b662      	cpsie	i
 800b338:	60fb      	str	r3, [r7, #12]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b33e:	f000 ff85 	bl	800c24c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b342:	4b1d      	ldr	r3, [pc, #116]	; (800b3b8 <xTaskCheckForTimeOut+0xc4>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b35a:	d102      	bne.n	800b362 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b35c:	2300      	movs	r3, #0
 800b35e:	61fb      	str	r3, [r7, #28]
 800b360:	e023      	b.n	800b3aa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	4b15      	ldr	r3, [pc, #84]	; (800b3bc <xTaskCheckForTimeOut+0xc8>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d007      	beq.n	800b37e <xTaskCheckForTimeOut+0x8a>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	69ba      	ldr	r2, [r7, #24]
 800b374:	429a      	cmp	r2, r3
 800b376:	d302      	bcc.n	800b37e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b378:	2301      	movs	r3, #1
 800b37a:	61fb      	str	r3, [r7, #28]
 800b37c:	e015      	b.n	800b3aa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	429a      	cmp	r2, r3
 800b386:	d20b      	bcs.n	800b3a0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	1ad2      	subs	r2, r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff ff97 	bl	800b2c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b39a:	2300      	movs	r3, #0
 800b39c:	61fb      	str	r3, [r7, #28]
 800b39e:	e004      	b.n	800b3aa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3aa:	f000 ff83 	bl	800c2b4 <vPortExitCritical>

	return xReturn;
 800b3ae:	69fb      	ldr	r3, [r7, #28]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3720      	adds	r7, #32
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	2004712c 	.word	0x2004712c
 800b3bc:	20047140 	.word	0x20047140

0800b3c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3c4:	4b03      	ldr	r3, [pc, #12]	; (800b3d4 <vTaskMissedYield+0x14>)
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	2004713c 	.word	0x2004713c

0800b3d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3e0:	f000 f852 	bl	800b488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3e4:	4b06      	ldr	r3, [pc, #24]	; (800b400 <prvIdleTask+0x28>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d9f9      	bls.n	800b3e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b3ec:	4b05      	ldr	r3, [pc, #20]	; (800b404 <prvIdleTask+0x2c>)
 800b3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3fc:	e7f0      	b.n	800b3e0 <prvIdleTask+0x8>
 800b3fe:	bf00      	nop
 800b400:	20046c58 	.word	0x20046c58
 800b404:	e000ed04 	.word	0xe000ed04

0800b408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b40e:	2300      	movs	r3, #0
 800b410:	607b      	str	r3, [r7, #4]
 800b412:	e00c      	b.n	800b42e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4a12      	ldr	r2, [pc, #72]	; (800b468 <prvInitialiseTaskLists+0x60>)
 800b420:	4413      	add	r3, r2
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe f836 	bl	8009494 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	3301      	adds	r3, #1
 800b42c:	607b      	str	r3, [r7, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b37      	cmp	r3, #55	; 0x37
 800b432:	d9ef      	bls.n	800b414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b434:	480d      	ldr	r0, [pc, #52]	; (800b46c <prvInitialiseTaskLists+0x64>)
 800b436:	f7fe f82d 	bl	8009494 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b43a:	480d      	ldr	r0, [pc, #52]	; (800b470 <prvInitialiseTaskLists+0x68>)
 800b43c:	f7fe f82a 	bl	8009494 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b440:	480c      	ldr	r0, [pc, #48]	; (800b474 <prvInitialiseTaskLists+0x6c>)
 800b442:	f7fe f827 	bl	8009494 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b446:	480c      	ldr	r0, [pc, #48]	; (800b478 <prvInitialiseTaskLists+0x70>)
 800b448:	f7fe f824 	bl	8009494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b44c:	480b      	ldr	r0, [pc, #44]	; (800b47c <prvInitialiseTaskLists+0x74>)
 800b44e:	f7fe f821 	bl	8009494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b452:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <prvInitialiseTaskLists+0x78>)
 800b454:	4a05      	ldr	r2, [pc, #20]	; (800b46c <prvInitialiseTaskLists+0x64>)
 800b456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <prvInitialiseTaskLists+0x7c>)
 800b45a:	4a05      	ldr	r2, [pc, #20]	; (800b470 <prvInitialiseTaskLists+0x68>)
 800b45c:	601a      	str	r2, [r3, #0]
}
 800b45e:	bf00      	nop
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20046c58 	.word	0x20046c58
 800b46c:	200470b8 	.word	0x200470b8
 800b470:	200470cc 	.word	0x200470cc
 800b474:	200470e8 	.word	0x200470e8
 800b478:	200470fc 	.word	0x200470fc
 800b47c:	20047114 	.word	0x20047114
 800b480:	200470e0 	.word	0x200470e0
 800b484:	200470e4 	.word	0x200470e4

0800b488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b48e:	e019      	b.n	800b4c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b490:	f000 fedc 	bl	800c24c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b494:	4b10      	ldr	r3, [pc, #64]	; (800b4d8 <prvCheckTasksWaitingTermination+0x50>)
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe f881 	bl	80095a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b4a6:	4b0d      	ldr	r3, [pc, #52]	; (800b4dc <prvCheckTasksWaitingTermination+0x54>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	4a0b      	ldr	r2, [pc, #44]	; (800b4dc <prvCheckTasksWaitingTermination+0x54>)
 800b4ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <prvCheckTasksWaitingTermination+0x58>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	4a0a      	ldr	r2, [pc, #40]	; (800b4e0 <prvCheckTasksWaitingTermination+0x58>)
 800b4b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4ba:	f000 fefb 	bl	800c2b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f810 	bl	800b4e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4c4:	4b06      	ldr	r3, [pc, #24]	; (800b4e0 <prvCheckTasksWaitingTermination+0x58>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e1      	bne.n	800b490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	200470fc 	.word	0x200470fc
 800b4dc:	20047128 	.word	0x20047128
 800b4e0:	20047110 	.word	0x20047110

0800b4e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	3354      	adds	r3, #84	; 0x54
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f00e f82f 	bl	8019554 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d108      	bne.n	800b512 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b504:	4618      	mov	r0, r3
 800b506:	f001 f897 	bl	800c638 <vPortFree>
				vPortFree( pxTCB );
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f001 f894 	bl	800c638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b510:	e01a      	b.n	800b548 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d103      	bne.n	800b524 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f001 f88b 	bl	800c638 <vPortFree>
	}
 800b522:	e011      	b.n	800b548 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d00c      	beq.n	800b548 <prvDeleteTCB+0x64>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	b672      	cpsid	i
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	b662      	cpsie	i
 800b542:	60fb      	str	r3, [r7, #12]
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <prvDeleteTCB+0x62>
	}
 800b548:	bf00      	nop
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b556:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <prvResetNextTaskUnblockTime+0x38>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d104      	bne.n	800b56a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b560:	4b0a      	ldr	r3, [pc, #40]	; (800b58c <prvResetNextTaskUnblockTime+0x3c>)
 800b562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b566:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b568:	e008      	b.n	800b57c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b56a:	4b07      	ldr	r3, [pc, #28]	; (800b588 <prvResetNextTaskUnblockTime+0x38>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	4a04      	ldr	r2, [pc, #16]	; (800b58c <prvResetNextTaskUnblockTime+0x3c>)
 800b57a:	6013      	str	r3, [r2, #0]
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	200470e0 	.word	0x200470e0
 800b58c:	20047148 	.word	0x20047148

0800b590 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b596:	4b05      	ldr	r3, [pc, #20]	; (800b5ac <xTaskGetCurrentTaskHandle+0x1c>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b59c:	687b      	ldr	r3, [r7, #4]
	}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	20046c54 	.word	0x20046c54

0800b5b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b5b6:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <xTaskGetSchedulerState+0x34>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d102      	bne.n	800b5c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	607b      	str	r3, [r7, #4]
 800b5c2:	e008      	b.n	800b5d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5c4:	4b08      	ldr	r3, [pc, #32]	; (800b5e8 <xTaskGetSchedulerState+0x38>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d102      	bne.n	800b5d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	607b      	str	r3, [r7, #4]
 800b5d0:	e001      	b.n	800b5d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5d6:	687b      	ldr	r3, [r7, #4]
	}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	20047134 	.word	0x20047134
 800b5e8:	20047150 	.word	0x20047150

0800b5ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d051      	beq.n	800b6a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b606:	4b2a      	ldr	r3, [pc, #168]	; (800b6b0 <xTaskPriorityInherit+0xc4>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d241      	bcs.n	800b694 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	699b      	ldr	r3, [r3, #24]
 800b614:	2b00      	cmp	r3, #0
 800b616:	db06      	blt.n	800b626 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b618:	4b25      	ldr	r3, [pc, #148]	; (800b6b0 <xTaskPriorityInherit+0xc4>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	6959      	ldr	r1, [r3, #20]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62e:	4613      	mov	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4a1f      	ldr	r2, [pc, #124]	; (800b6b4 <xTaskPriorityInherit+0xc8>)
 800b638:	4413      	add	r3, r2
 800b63a:	4299      	cmp	r1, r3
 800b63c:	d122      	bne.n	800b684 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	3304      	adds	r3, #4
 800b642:	4618      	mov	r0, r3
 800b644:	f7fd ffb0 	bl	80095a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b648:	4b19      	ldr	r3, [pc, #100]	; (800b6b0 <xTaskPriorityInherit+0xc4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b656:	4b18      	ldr	r3, [pc, #96]	; (800b6b8 <xTaskPriorityInherit+0xcc>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d903      	bls.n	800b666 <xTaskPriorityInherit+0x7a>
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	4a15      	ldr	r2, [pc, #84]	; (800b6b8 <xTaskPriorityInherit+0xcc>)
 800b664:	6013      	str	r3, [r2, #0]
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4a10      	ldr	r2, [pc, #64]	; (800b6b4 <xTaskPriorityInherit+0xc8>)
 800b674:	441a      	add	r2, r3
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	3304      	adds	r3, #4
 800b67a:	4619      	mov	r1, r3
 800b67c:	4610      	mov	r0, r2
 800b67e:	f7fd ff36 	bl	80094ee <vListInsertEnd>
 800b682:	e004      	b.n	800b68e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b684:	4b0a      	ldr	r3, [pc, #40]	; (800b6b0 <xTaskPriorityInherit+0xc4>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b68e:	2301      	movs	r3, #1
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	e008      	b.n	800b6a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b698:	4b05      	ldr	r3, [pc, #20]	; (800b6b0 <xTaskPriorityInherit+0xc4>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d201      	bcs.n	800b6a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
	}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	20046c54 	.word	0x20046c54
 800b6b4:	20046c58 	.word	0x20046c58
 800b6b8:	20047130 	.word	0x20047130

0800b6bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d05a      	beq.n	800b788 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6d2:	4b30      	ldr	r3, [pc, #192]	; (800b794 <xTaskPriorityDisinherit+0xd8>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d00c      	beq.n	800b6f6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e0:	b672      	cpsid	i
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	b662      	cpsie	i
 800b6f0:	60fb      	str	r3, [r7, #12]
}
 800b6f2:	bf00      	nop
 800b6f4:	e7fe      	b.n	800b6f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10c      	bne.n	800b718 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b702:	b672      	cpsid	i
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	b662      	cpsie	i
 800b712:	60bb      	str	r3, [r7, #8]
}
 800b714:	bf00      	nop
 800b716:	e7fe      	b.n	800b716 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b71c:	1e5a      	subs	r2, r3, #1
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d02c      	beq.n	800b788 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b732:	2b00      	cmp	r3, #0
 800b734:	d128      	bne.n	800b788 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	3304      	adds	r3, #4
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fd ff34 	bl	80095a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b758:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <xTaskPriorityDisinherit+0xdc>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d903      	bls.n	800b768 <xTaskPriorityDisinherit+0xac>
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	4a0c      	ldr	r2, [pc, #48]	; (800b798 <xTaskPriorityDisinherit+0xdc>)
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4a09      	ldr	r2, [pc, #36]	; (800b79c <xTaskPriorityDisinherit+0xe0>)
 800b776:	441a      	add	r2, r3
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	3304      	adds	r3, #4
 800b77c:	4619      	mov	r1, r3
 800b77e:	4610      	mov	r0, r2
 800b780:	f7fd feb5 	bl	80094ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b784:	2301      	movs	r3, #1
 800b786:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b788:	697b      	ldr	r3, [r7, #20]
	}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20046c54 	.word	0x20046c54
 800b798:	20047130 	.word	0x20047130
 800b79c:	20046c58 	.word	0x20046c58

0800b7a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d06e      	beq.n	800b896 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10c      	bne.n	800b7da <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	b672      	cpsid	i
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	b662      	cpsie	i
 800b7d4:	60fb      	str	r3, [r7, #12]
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d902      	bls.n	800b7ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	e002      	b.n	800b7f0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	69fa      	ldr	r2, [r7, #28]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d04d      	beq.n	800b896 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	429a      	cmp	r2, r3
 800b802:	d148      	bne.n	800b896 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b804:	4b26      	ldr	r3, [pc, #152]	; (800b8a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	69ba      	ldr	r2, [r7, #24]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d10c      	bne.n	800b828 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	b672      	cpsid	i
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	b662      	cpsie	i
 800b822:	60bb      	str	r3, [r7, #8]
}
 800b824:	bf00      	nop
 800b826:	e7fe      	b.n	800b826 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	69fa      	ldr	r2, [r7, #28]
 800b832:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	db04      	blt.n	800b846 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	6959      	ldr	r1, [r3, #20]
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4a13      	ldr	r2, [pc, #76]	; (800b8a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b856:	4413      	add	r3, r2
 800b858:	4299      	cmp	r1, r3
 800b85a:	d11c      	bne.n	800b896 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	3304      	adds	r3, #4
 800b860:	4618      	mov	r0, r3
 800b862:	f7fd fea1 	bl	80095a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86a:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d903      	bls.n	800b87a <vTaskPriorityDisinheritAfterTimeout+0xda>
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b876:	4a0c      	ldr	r2, [pc, #48]	; (800b8a8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b878:	6013      	str	r3, [r2, #0]
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4a07      	ldr	r2, [pc, #28]	; (800b8a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b888:	441a      	add	r2, r3
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	3304      	adds	r3, #4
 800b88e:	4619      	mov	r1, r3
 800b890:	4610      	mov	r0, r2
 800b892:	f7fd fe2c 	bl	80094ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b896:	bf00      	nop
 800b898:	3720      	adds	r7, #32
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	20046c54 	.word	0x20046c54
 800b8a4:	20046c58 	.word	0x20046c58
 800b8a8:	20047130 	.word	0x20047130

0800b8ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b8ac:	b480      	push	{r7}
 800b8ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b8b0:	4b07      	ldr	r3, [pc, #28]	; (800b8d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d004      	beq.n	800b8c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b8b8:	4b05      	ldr	r3, [pc, #20]	; (800b8d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8be:	3201      	adds	r2, #1
 800b8c0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b8c2:	4b03      	ldr	r3, [pc, #12]	; (800b8d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
	}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	20046c54 	.word	0x20046c54

0800b8d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8de:	4b21      	ldr	r3, [pc, #132]	; (800b964 <prvAddCurrentTaskToDelayedList+0x90>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e4:	4b20      	ldr	r3, [pc, #128]	; (800b968 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fd fe5c 	bl	80095a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8f6:	d10a      	bne.n	800b90e <prvAddCurrentTaskToDelayedList+0x3a>
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d007      	beq.n	800b90e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8fe:	4b1a      	ldr	r3, [pc, #104]	; (800b968 <prvAddCurrentTaskToDelayedList+0x94>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3304      	adds	r3, #4
 800b904:	4619      	mov	r1, r3
 800b906:	4819      	ldr	r0, [pc, #100]	; (800b96c <prvAddCurrentTaskToDelayedList+0x98>)
 800b908:	f7fd fdf1 	bl	80094ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b90c:	e026      	b.n	800b95c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4413      	add	r3, r2
 800b914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b916:	4b14      	ldr	r3, [pc, #80]	; (800b968 <prvAddCurrentTaskToDelayedList+0x94>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	429a      	cmp	r2, r3
 800b924:	d209      	bcs.n	800b93a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b926:	4b12      	ldr	r3, [pc, #72]	; (800b970 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	4b0f      	ldr	r3, [pc, #60]	; (800b968 <prvAddCurrentTaskToDelayedList+0x94>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	3304      	adds	r3, #4
 800b930:	4619      	mov	r1, r3
 800b932:	4610      	mov	r0, r2
 800b934:	f7fd fdff 	bl	8009536 <vListInsert>
}
 800b938:	e010      	b.n	800b95c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b93a:	4b0e      	ldr	r3, [pc, #56]	; (800b974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	4b0a      	ldr	r3, [pc, #40]	; (800b968 <prvAddCurrentTaskToDelayedList+0x94>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3304      	adds	r3, #4
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f7fd fdf5 	bl	8009536 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b94c:	4b0a      	ldr	r3, [pc, #40]	; (800b978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	429a      	cmp	r2, r3
 800b954:	d202      	bcs.n	800b95c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b956:	4a08      	ldr	r2, [pc, #32]	; (800b978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	6013      	str	r3, [r2, #0]
}
 800b95c:	bf00      	nop
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	2004712c 	.word	0x2004712c
 800b968:	20046c54 	.word	0x20046c54
 800b96c:	20047114 	.word	0x20047114
 800b970:	200470e4 	.word	0x200470e4
 800b974:	200470e0 	.word	0x200470e0
 800b978:	20047148 	.word	0x20047148

0800b97c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08a      	sub	sp, #40	; 0x28
 800b980:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b982:	2300      	movs	r3, #0
 800b984:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b986:	f000 fb15 	bl	800bfb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b98a:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <xTimerCreateTimerTask+0x84>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d021      	beq.n	800b9d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b992:	2300      	movs	r3, #0
 800b994:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b996:	2300      	movs	r3, #0
 800b998:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b99a:	1d3a      	adds	r2, r7, #4
 800b99c:	f107 0108 	add.w	r1, r7, #8
 800b9a0:	f107 030c 	add.w	r3, r7, #12
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fd fd5b 	bl	8009460 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	9202      	str	r2, [sp, #8]
 800b9b2:	9301      	str	r3, [sp, #4]
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	460a      	mov	r2, r1
 800b9bc:	4911      	ldr	r1, [pc, #68]	; (800ba04 <xTimerCreateTimerTask+0x88>)
 800b9be:	4812      	ldr	r0, [pc, #72]	; (800ba08 <xTimerCreateTimerTask+0x8c>)
 800b9c0:	f7fe ff6c 	bl	800a89c <xTaskCreateStatic>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	4a11      	ldr	r2, [pc, #68]	; (800ba0c <xTimerCreateTimerTask+0x90>)
 800b9c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9ca:	4b10      	ldr	r3, [pc, #64]	; (800ba0c <xTimerCreateTimerTask+0x90>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10c      	bne.n	800b9f6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e0:	b672      	cpsid	i
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	b662      	cpsie	i
 800b9f0:	613b      	str	r3, [r7, #16]
}
 800b9f2:	bf00      	nop
 800b9f4:	e7fe      	b.n	800b9f4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b9f6:	697b      	ldr	r3, [r7, #20]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	20047184 	.word	0x20047184
 800ba04:	0801a3b8 	.word	0x0801a3b8
 800ba08:	0800bb4d 	.word	0x0800bb4d
 800ba0c:	20047188 	.word	0x20047188

0800ba10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b08a      	sub	sp, #40	; 0x28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
 800ba1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10c      	bne.n	800ba42 <xTimerGenericCommand+0x32>
	__asm volatile
 800ba28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2c:	b672      	cpsid	i
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	b662      	cpsie	i
 800ba3c:	623b      	str	r3, [r7, #32]
}
 800ba3e:	bf00      	nop
 800ba40:	e7fe      	b.n	800ba40 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba42:	4b1a      	ldr	r3, [pc, #104]	; (800baac <xTimerGenericCommand+0x9c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d02a      	beq.n	800baa0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	2b05      	cmp	r3, #5
 800ba5a:	dc18      	bgt.n	800ba8e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba5c:	f7ff fda8 	bl	800b5b0 <xTaskGetSchedulerState>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d109      	bne.n	800ba7a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba66:	4b11      	ldr	r3, [pc, #68]	; (800baac <xTimerGenericCommand+0x9c>)
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	f107 0110 	add.w	r1, r7, #16
 800ba6e:	2300      	movs	r3, #0
 800ba70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba72:	f7fe f841 	bl	8009af8 <xQueueGenericSend>
 800ba76:	6278      	str	r0, [r7, #36]	; 0x24
 800ba78:	e012      	b.n	800baa0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba7a:	4b0c      	ldr	r3, [pc, #48]	; (800baac <xTimerGenericCommand+0x9c>)
 800ba7c:	6818      	ldr	r0, [r3, #0]
 800ba7e:	f107 0110 	add.w	r1, r7, #16
 800ba82:	2300      	movs	r3, #0
 800ba84:	2200      	movs	r2, #0
 800ba86:	f7fe f837 	bl	8009af8 <xQueueGenericSend>
 800ba8a:	6278      	str	r0, [r7, #36]	; 0x24
 800ba8c:	e008      	b.n	800baa0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba8e:	4b07      	ldr	r3, [pc, #28]	; (800baac <xTimerGenericCommand+0x9c>)
 800ba90:	6818      	ldr	r0, [r3, #0]
 800ba92:	f107 0110 	add.w	r1, r7, #16
 800ba96:	2300      	movs	r3, #0
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	f7fe f933 	bl	8009d04 <xQueueGenericSendFromISR>
 800ba9e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3728      	adds	r7, #40	; 0x28
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	20047184 	.word	0x20047184

0800bab0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b088      	sub	sp, #32
 800bab4:	af02      	add	r7, sp, #8
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baba:	4b23      	ldr	r3, [pc, #140]	; (800bb48 <prvProcessExpiredTimer+0x98>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	3304      	adds	r3, #4
 800bac8:	4618      	mov	r0, r3
 800baca:	f7fd fd6d 	bl	80095a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d024      	beq.n	800bb26 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	699a      	ldr	r2, [r3, #24]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	18d1      	adds	r1, r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	6978      	ldr	r0, [r7, #20]
 800baea:	f000 f8d3 	bl	800bc94 <prvInsertTimerInActiveList>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d021      	beq.n	800bb38 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800baf4:	2300      	movs	r3, #0
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	2300      	movs	r3, #0
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	2100      	movs	r1, #0
 800bafe:	6978      	ldr	r0, [r7, #20]
 800bb00:	f7ff ff86 	bl	800ba10 <xTimerGenericCommand>
 800bb04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d115      	bne.n	800bb38 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb10:	b672      	cpsid	i
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	b662      	cpsie	i
 800bb20:	60fb      	str	r3, [r7, #12]
}
 800bb22:	bf00      	nop
 800bb24:	e7fe      	b.n	800bb24 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb2c:	f023 0301 	bic.w	r3, r3, #1
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	6a1b      	ldr	r3, [r3, #32]
 800bb3c:	6978      	ldr	r0, [r7, #20]
 800bb3e:	4798      	blx	r3
}
 800bb40:	bf00      	nop
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	2004717c 	.word	0x2004717c

0800bb4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb54:	f107 0308 	add.w	r3, r7, #8
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 f857 	bl	800bc0c <prvGetNextExpireTime>
 800bb5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	4619      	mov	r1, r3
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f803 	bl	800bb70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb6a:	f000 f8d5 	bl	800bd18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb6e:	e7f1      	b.n	800bb54 <prvTimerTask+0x8>

0800bb70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb7a:	f7ff f8f9 	bl	800ad70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb7e:	f107 0308 	add.w	r3, r7, #8
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 f866 	bl	800bc54 <prvSampleTimeNow>
 800bb88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d130      	bne.n	800bbf2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10a      	bne.n	800bbac <prvProcessTimerOrBlockTask+0x3c>
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d806      	bhi.n	800bbac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb9e:	f7ff f8f5 	bl	800ad8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bba2:	68f9      	ldr	r1, [r7, #12]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff ff83 	bl	800bab0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbaa:	e024      	b.n	800bbf6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d008      	beq.n	800bbc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bbb2:	4b13      	ldr	r3, [pc, #76]	; (800bc00 <prvProcessTimerOrBlockTask+0x90>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <prvProcessTimerOrBlockTask+0x50>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e000      	b.n	800bbc2 <prvProcessTimerOrBlockTask+0x52>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bbc4:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <prvProcessTimerOrBlockTask+0x94>)
 800bbc6:	6818      	ldr	r0, [r3, #0]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f7fe fe2f 	bl	800a834 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bbd6:	f7ff f8d9 	bl	800ad8c <xTaskResumeAll>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10a      	bne.n	800bbf6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bbe0:	4b09      	ldr	r3, [pc, #36]	; (800bc08 <prvProcessTimerOrBlockTask+0x98>)
 800bbe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	f3bf 8f6f 	isb	sy
}
 800bbf0:	e001      	b.n	800bbf6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bbf2:	f7ff f8cb 	bl	800ad8c <xTaskResumeAll>
}
 800bbf6:	bf00      	nop
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20047180 	.word	0x20047180
 800bc04:	20047184 	.word	0x20047184
 800bc08:	e000ed04 	.word	0xe000ed04

0800bc0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc14:	4b0e      	ldr	r3, [pc, #56]	; (800bc50 <prvGetNextExpireTime+0x44>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d101      	bne.n	800bc22 <prvGetNextExpireTime+0x16>
 800bc1e:	2201      	movs	r2, #1
 800bc20:	e000      	b.n	800bc24 <prvGetNextExpireTime+0x18>
 800bc22:	2200      	movs	r2, #0
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d105      	bne.n	800bc3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc30:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <prvGetNextExpireTime+0x44>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	60fb      	str	r3, [r7, #12]
 800bc3a:	e001      	b.n	800bc40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc40:	68fb      	ldr	r3, [r7, #12]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3714      	adds	r7, #20
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	2004717c 	.word	0x2004717c

0800bc54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc5c:	f7ff f936 	bl	800aecc <xTaskGetTickCount>
 800bc60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc62:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <prvSampleTimeNow+0x3c>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d205      	bcs.n	800bc78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc6c:	f000 f93c 	bl	800bee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	601a      	str	r2, [r3, #0]
 800bc76:	e002      	b.n	800bc7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc7e:	4a04      	ldr	r2, [pc, #16]	; (800bc90 <prvSampleTimeNow+0x3c>)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc84:	68fb      	ldr	r3, [r7, #12]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	2004718c 	.word	0x2004718c

0800bc94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bca2:	2300      	movs	r3, #0
 800bca4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d812      	bhi.n	800bce0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	1ad2      	subs	r2, r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	699b      	ldr	r3, [r3, #24]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d302      	bcc.n	800bcce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	e01b      	b.n	800bd06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bcce:	4b10      	ldr	r3, [pc, #64]	; (800bd10 <prvInsertTimerInActiveList+0x7c>)
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	4610      	mov	r0, r2
 800bcda:	f7fd fc2c 	bl	8009536 <vListInsert>
 800bcde:	e012      	b.n	800bd06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d206      	bcs.n	800bcf6 <prvInsertTimerInActiveList+0x62>
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d302      	bcc.n	800bcf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	e007      	b.n	800bd06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcf6:	4b07      	ldr	r3, [pc, #28]	; (800bd14 <prvInsertTimerInActiveList+0x80>)
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f7fd fc18 	bl	8009536 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd06:	697b      	ldr	r3, [r7, #20]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20047180 	.word	0x20047180
 800bd14:	2004717c 	.word	0x2004717c

0800bd18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08e      	sub	sp, #56	; 0x38
 800bd1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd1e:	e0d0      	b.n	800bec2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	da1a      	bge.n	800bd5c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd26:	1d3b      	adds	r3, r7, #4
 800bd28:	3304      	adds	r3, #4
 800bd2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10c      	bne.n	800bd4c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	b672      	cpsid	i
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	b662      	cpsie	i
 800bd46:	61fb      	str	r3, [r7, #28]
}
 800bd48:	bf00      	nop
 800bd4a:	e7fe      	b.n	800bd4a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd52:	6850      	ldr	r0, [r2, #4]
 800bd54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd56:	6892      	ldr	r2, [r2, #8]
 800bd58:	4611      	mov	r1, r2
 800bd5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f2c0 80ae 	blt.w	800bec0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d004      	beq.n	800bd7a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	3304      	adds	r3, #4
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fd fc17 	bl	80095a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd7a:	463b      	mov	r3, r7
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7ff ff69 	bl	800bc54 <prvSampleTimeNow>
 800bd82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b09      	cmp	r3, #9
 800bd88:	f200 809b 	bhi.w	800bec2 <prvProcessReceivedCommands+0x1aa>
 800bd8c:	a201      	add	r2, pc, #4	; (adr r2, 800bd94 <prvProcessReceivedCommands+0x7c>)
 800bd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd92:	bf00      	nop
 800bd94:	0800bdbd 	.word	0x0800bdbd
 800bd98:	0800bdbd 	.word	0x0800bdbd
 800bd9c:	0800bdbd 	.word	0x0800bdbd
 800bda0:	0800be35 	.word	0x0800be35
 800bda4:	0800be49 	.word	0x0800be49
 800bda8:	0800be97 	.word	0x0800be97
 800bdac:	0800bdbd 	.word	0x0800bdbd
 800bdb0:	0800bdbd 	.word	0x0800bdbd
 800bdb4:	0800be35 	.word	0x0800be35
 800bdb8:	0800be49 	.word	0x0800be49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdc2:	f043 0301 	orr.w	r3, r3, #1
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	18d1      	adds	r1, r2, r3
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bddc:	f7ff ff5a 	bl	800bc94 <prvInsertTimerInActiveList>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d06d      	beq.n	800bec2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf4:	f003 0304 	and.w	r3, r3, #4
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d062      	beq.n	800bec2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	441a      	add	r2, r3
 800be04:	2300      	movs	r3, #0
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	2300      	movs	r3, #0
 800be0a:	2100      	movs	r1, #0
 800be0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be0e:	f7ff fdff 	bl	800ba10 <xTimerGenericCommand>
 800be12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d153      	bne.n	800bec2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1e:	b672      	cpsid	i
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	b662      	cpsie	i
 800be2e:	61bb      	str	r3, [r7, #24]
}
 800be30:	bf00      	nop
 800be32:	e7fe      	b.n	800be32 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be3a:	f023 0301 	bic.w	r3, r3, #1
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800be46:	e03c      	b.n	800bec2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be4e:	f043 0301 	orr.w	r3, r3, #1
 800be52:	b2da      	uxtb	r2, r3
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10c      	bne.n	800be82 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	b672      	cpsid	i
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	b662      	cpsie	i
 800be7c:	617b      	str	r3, [r7, #20]
}
 800be7e:	bf00      	nop
 800be80:	e7fe      	b.n	800be80 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	699a      	ldr	r2, [r3, #24]
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	18d1      	adds	r1, r2, r3
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be90:	f7ff ff00 	bl	800bc94 <prvInsertTimerInActiveList>
					break;
 800be94:	e015      	b.n	800bec2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be9c:	f003 0302 	and.w	r3, r3, #2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d103      	bne.n	800beac <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800bea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bea6:	f000 fbc7 	bl	800c638 <vPortFree>
 800beaa:	e00a      	b.n	800bec2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beb2:	f023 0301 	bic.w	r3, r3, #1
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bebe:	e000      	b.n	800bec2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bec0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bec2:	4b08      	ldr	r3, [pc, #32]	; (800bee4 <prvProcessReceivedCommands+0x1cc>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	1d39      	adds	r1, r7, #4
 800bec8:	2200      	movs	r2, #0
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe f850 	bl	8009f70 <xQueueReceive>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f47f af24 	bne.w	800bd20 <prvProcessReceivedCommands+0x8>
	}
}
 800bed8:	bf00      	nop
 800beda:	bf00      	nop
 800bedc:	3730      	adds	r7, #48	; 0x30
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	20047184 	.word	0x20047184

0800bee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800beee:	e04a      	b.n	800bf86 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bef0:	4b2e      	ldr	r3, [pc, #184]	; (800bfac <prvSwitchTimerLists+0xc4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800befa:	4b2c      	ldr	r3, [pc, #176]	; (800bfac <prvSwitchTimerLists+0xc4>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	3304      	adds	r3, #4
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fd fb4d 	bl	80095a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf1c:	f003 0304 	and.w	r3, r3, #4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d030      	beq.n	800bf86 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d90e      	bls.n	800bf54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf42:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <prvSwitchTimerLists+0xc4>)
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3304      	adds	r3, #4
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	f7fd faf2 	bl	8009536 <vListInsert>
 800bf52:	e018      	b.n	800bf86 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf54:	2300      	movs	r3, #0
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f7ff fd56 	bl	800ba10 <xTimerGenericCommand>
 800bf64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10c      	bne.n	800bf86 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800bf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf70:	b672      	cpsid	i
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	b662      	cpsie	i
 800bf80:	603b      	str	r3, [r7, #0]
}
 800bf82:	bf00      	nop
 800bf84:	e7fe      	b.n	800bf84 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf86:	4b09      	ldr	r3, [pc, #36]	; (800bfac <prvSwitchTimerLists+0xc4>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1af      	bne.n	800bef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf90:	4b06      	ldr	r3, [pc, #24]	; (800bfac <prvSwitchTimerLists+0xc4>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf96:	4b06      	ldr	r3, [pc, #24]	; (800bfb0 <prvSwitchTimerLists+0xc8>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a04      	ldr	r2, [pc, #16]	; (800bfac <prvSwitchTimerLists+0xc4>)
 800bf9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf9e:	4a04      	ldr	r2, [pc, #16]	; (800bfb0 <prvSwitchTimerLists+0xc8>)
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	6013      	str	r3, [r2, #0]
}
 800bfa4:	bf00      	nop
 800bfa6:	3718      	adds	r7, #24
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	2004717c 	.word	0x2004717c
 800bfb0:	20047180 	.word	0x20047180

0800bfb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bfba:	f000 f947 	bl	800c24c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bfbe:	4b15      	ldr	r3, [pc, #84]	; (800c014 <prvCheckForValidListAndQueue+0x60>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d120      	bne.n	800c008 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bfc6:	4814      	ldr	r0, [pc, #80]	; (800c018 <prvCheckForValidListAndQueue+0x64>)
 800bfc8:	f7fd fa64 	bl	8009494 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bfcc:	4813      	ldr	r0, [pc, #76]	; (800c01c <prvCheckForValidListAndQueue+0x68>)
 800bfce:	f7fd fa61 	bl	8009494 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bfd2:	4b13      	ldr	r3, [pc, #76]	; (800c020 <prvCheckForValidListAndQueue+0x6c>)
 800bfd4:	4a10      	ldr	r2, [pc, #64]	; (800c018 <prvCheckForValidListAndQueue+0x64>)
 800bfd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bfd8:	4b12      	ldr	r3, [pc, #72]	; (800c024 <prvCheckForValidListAndQueue+0x70>)
 800bfda:	4a10      	ldr	r2, [pc, #64]	; (800c01c <prvCheckForValidListAndQueue+0x68>)
 800bfdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bfde:	2300      	movs	r3, #0
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	4b11      	ldr	r3, [pc, #68]	; (800c028 <prvCheckForValidListAndQueue+0x74>)
 800bfe4:	4a11      	ldr	r2, [pc, #68]	; (800c02c <prvCheckForValidListAndQueue+0x78>)
 800bfe6:	2110      	movs	r1, #16
 800bfe8:	200a      	movs	r0, #10
 800bfea:	f7fd fb71 	bl	80096d0 <xQueueGenericCreateStatic>
 800bfee:	4603      	mov	r3, r0
 800bff0:	4a08      	ldr	r2, [pc, #32]	; (800c014 <prvCheckForValidListAndQueue+0x60>)
 800bff2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bff4:	4b07      	ldr	r3, [pc, #28]	; (800c014 <prvCheckForValidListAndQueue+0x60>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bffc:	4b05      	ldr	r3, [pc, #20]	; (800c014 <prvCheckForValidListAndQueue+0x60>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	490b      	ldr	r1, [pc, #44]	; (800c030 <prvCheckForValidListAndQueue+0x7c>)
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe fbc2 	bl	800a78c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c008:	f000 f954 	bl	800c2b4 <vPortExitCritical>
}
 800c00c:	bf00      	nop
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	20047184 	.word	0x20047184
 800c018:	20047154 	.word	0x20047154
 800c01c:	20047168 	.word	0x20047168
 800c020:	2004717c 	.word	0x2004717c
 800c024:	20047180 	.word	0x20047180
 800c028:	20047230 	.word	0x20047230
 800c02c:	20047190 	.word	0x20047190
 800c030:	0801a3c0 	.word	0x0801a3c0

0800c034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	3b04      	subs	r3, #4
 800c044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c04c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3b04      	subs	r3, #4
 800c052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	f023 0201 	bic.w	r2, r3, #1
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3b04      	subs	r3, #4
 800c062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c064:	4a0c      	ldr	r2, [pc, #48]	; (800c098 <pxPortInitialiseStack+0x64>)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3b14      	subs	r3, #20
 800c06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3b04      	subs	r3, #4
 800c07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f06f 0202 	mvn.w	r2, #2
 800c082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	3b20      	subs	r3, #32
 800c088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c08a:	68fb      	ldr	r3, [r7, #12]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr
 800c098:	0800c09d 	.word	0x0800c09d

0800c09c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0a6:	4b14      	ldr	r3, [pc, #80]	; (800c0f8 <prvTaskExitError+0x5c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0ae:	d00c      	beq.n	800c0ca <prvTaskExitError+0x2e>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b4:	b672      	cpsid	i
 800c0b6:	f383 8811 	msr	BASEPRI, r3
 800c0ba:	f3bf 8f6f 	isb	sy
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	b662      	cpsie	i
 800c0c4:	60fb      	str	r3, [r7, #12]
}
 800c0c6:	bf00      	nop
 800c0c8:	e7fe      	b.n	800c0c8 <prvTaskExitError+0x2c>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	b672      	cpsid	i
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	b662      	cpsie	i
 800c0de:	60bb      	str	r3, [r7, #8]
}
 800c0e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c0e2:	bf00      	nop
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d0fc      	beq.n	800c0e4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr
 800c0f8:	20001a4c 	.word	0x20001a4c
 800c0fc:	00000000 	.word	0x00000000

0800c100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c100:	4b07      	ldr	r3, [pc, #28]	; (800c120 <pxCurrentTCBConst2>)
 800c102:	6819      	ldr	r1, [r3, #0]
 800c104:	6808      	ldr	r0, [r1, #0]
 800c106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10a:	f380 8809 	msr	PSP, r0
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f04f 0000 	mov.w	r0, #0
 800c116:	f380 8811 	msr	BASEPRI, r0
 800c11a:	4770      	bx	lr
 800c11c:	f3af 8000 	nop.w

0800c120 <pxCurrentTCBConst2>:
 800c120:	20046c54 	.word	0x20046c54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop

0800c128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c128:	4808      	ldr	r0, [pc, #32]	; (800c14c <prvPortStartFirstTask+0x24>)
 800c12a:	6800      	ldr	r0, [r0, #0]
 800c12c:	6800      	ldr	r0, [r0, #0]
 800c12e:	f380 8808 	msr	MSP, r0
 800c132:	f04f 0000 	mov.w	r0, #0
 800c136:	f380 8814 	msr	CONTROL, r0
 800c13a:	b662      	cpsie	i
 800c13c:	b661      	cpsie	f
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	df00      	svc	0
 800c148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c14a:	bf00      	nop
 800c14c:	e000ed08 	.word	0xe000ed08

0800c150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c156:	4b37      	ldr	r3, [pc, #220]	; (800c234 <xPortStartScheduler+0xe4>)
 800c158:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	22ff      	movs	r2, #255	; 0xff
 800c166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c170:	78fb      	ldrb	r3, [r7, #3]
 800c172:	b2db      	uxtb	r3, r3
 800c174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	4b2f      	ldr	r3, [pc, #188]	; (800c238 <xPortStartScheduler+0xe8>)
 800c17c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c17e:	4b2f      	ldr	r3, [pc, #188]	; (800c23c <xPortStartScheduler+0xec>)
 800c180:	2207      	movs	r2, #7
 800c182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c184:	e009      	b.n	800c19a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c186:	4b2d      	ldr	r3, [pc, #180]	; (800c23c <xPortStartScheduler+0xec>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	3b01      	subs	r3, #1
 800c18c:	4a2b      	ldr	r2, [pc, #172]	; (800c23c <xPortStartScheduler+0xec>)
 800c18e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c190:	78fb      	ldrb	r3, [r7, #3]
 800c192:	b2db      	uxtb	r3, r3
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c19a:	78fb      	ldrb	r3, [r7, #3]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1a2:	2b80      	cmp	r3, #128	; 0x80
 800c1a4:	d0ef      	beq.n	800c186 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1a6:	4b25      	ldr	r3, [pc, #148]	; (800c23c <xPortStartScheduler+0xec>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f1c3 0307 	rsb	r3, r3, #7
 800c1ae:	2b04      	cmp	r3, #4
 800c1b0:	d00c      	beq.n	800c1cc <xPortStartScheduler+0x7c>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	b672      	cpsid	i
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	b662      	cpsie	i
 800c1c6:	60bb      	str	r3, [r7, #8]
}
 800c1c8:	bf00      	nop
 800c1ca:	e7fe      	b.n	800c1ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1cc:	4b1b      	ldr	r3, [pc, #108]	; (800c23c <xPortStartScheduler+0xec>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	021b      	lsls	r3, r3, #8
 800c1d2:	4a1a      	ldr	r2, [pc, #104]	; (800c23c <xPortStartScheduler+0xec>)
 800c1d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1d6:	4b19      	ldr	r3, [pc, #100]	; (800c23c <xPortStartScheduler+0xec>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1de:	4a17      	ldr	r2, [pc, #92]	; (800c23c <xPortStartScheduler+0xec>)
 800c1e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1ea:	4b15      	ldr	r3, [pc, #84]	; (800c240 <xPortStartScheduler+0xf0>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a14      	ldr	r2, [pc, #80]	; (800c240 <xPortStartScheduler+0xf0>)
 800c1f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1f6:	4b12      	ldr	r3, [pc, #72]	; (800c240 <xPortStartScheduler+0xf0>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a11      	ldr	r2, [pc, #68]	; (800c240 <xPortStartScheduler+0xf0>)
 800c1fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c200:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c202:	f000 f8dd 	bl	800c3c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c206:	4b0f      	ldr	r3, [pc, #60]	; (800c244 <xPortStartScheduler+0xf4>)
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c20c:	f000 f8fc 	bl	800c408 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c210:	4b0d      	ldr	r3, [pc, #52]	; (800c248 <xPortStartScheduler+0xf8>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a0c      	ldr	r2, [pc, #48]	; (800c248 <xPortStartScheduler+0xf8>)
 800c216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c21a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c21c:	f7ff ff84 	bl	800c128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c220:	f7fe ff32 	bl	800b088 <vTaskSwitchContext>
	prvTaskExitError();
 800c224:	f7ff ff3a 	bl	800c09c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	e000e400 	.word	0xe000e400
 800c238:	20047280 	.word	0x20047280
 800c23c:	20047284 	.word	0x20047284
 800c240:	e000ed20 	.word	0xe000ed20
 800c244:	20001a4c 	.word	0x20001a4c
 800c248:	e000ef34 	.word	0xe000ef34

0800c24c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	b672      	cpsid	i
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	b662      	cpsie	i
 800c266:	607b      	str	r3, [r7, #4]
}
 800c268:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c26a:	4b10      	ldr	r3, [pc, #64]	; (800c2ac <vPortEnterCritical+0x60>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	3301      	adds	r3, #1
 800c270:	4a0e      	ldr	r2, [pc, #56]	; (800c2ac <vPortEnterCritical+0x60>)
 800c272:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c274:	4b0d      	ldr	r3, [pc, #52]	; (800c2ac <vPortEnterCritical+0x60>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d111      	bne.n	800c2a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c27c:	4b0c      	ldr	r3, [pc, #48]	; (800c2b0 <vPortEnterCritical+0x64>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00c      	beq.n	800c2a0 <vPortEnterCritical+0x54>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28a:	b672      	cpsid	i
 800c28c:	f383 8811 	msr	BASEPRI, r3
 800c290:	f3bf 8f6f 	isb	sy
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	b662      	cpsie	i
 800c29a:	603b      	str	r3, [r7, #0]
}
 800c29c:	bf00      	nop
 800c29e:	e7fe      	b.n	800c29e <vPortEnterCritical+0x52>
	}
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	20001a4c 	.word	0x20001a4c
 800c2b0:	e000ed04 	.word	0xe000ed04

0800c2b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2ba:	4b13      	ldr	r3, [pc, #76]	; (800c308 <vPortExitCritical+0x54>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10c      	bne.n	800c2dc <vPortExitCritical+0x28>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	b672      	cpsid	i
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	b662      	cpsie	i
 800c2d6:	607b      	str	r3, [r7, #4]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <vPortExitCritical+0x54>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	4a09      	ldr	r2, [pc, #36]	; (800c308 <vPortExitCritical+0x54>)
 800c2e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2e6:	4b08      	ldr	r3, [pc, #32]	; (800c308 <vPortExitCritical+0x54>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d105      	bne.n	800c2fa <vPortExitCritical+0x46>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	f383 8811 	msr	BASEPRI, r3
}
 800c2f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2fa:	bf00      	nop
 800c2fc:	370c      	adds	r7, #12
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	20001a4c 	.word	0x20001a4c
 800c30c:	00000000 	.word	0x00000000

0800c310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c310:	f3ef 8009 	mrs	r0, PSP
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	4b15      	ldr	r3, [pc, #84]	; (800c370 <pxCurrentTCBConst>)
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	f01e 0f10 	tst.w	lr, #16
 800c320:	bf08      	it	eq
 800c322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32a:	6010      	str	r0, [r2, #0]
 800c32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c334:	b672      	cpsid	i
 800c336:	f380 8811 	msr	BASEPRI, r0
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	b662      	cpsie	i
 800c344:	f7fe fea0 	bl	800b088 <vTaskSwitchContext>
 800c348:	f04f 0000 	mov.w	r0, #0
 800c34c:	f380 8811 	msr	BASEPRI, r0
 800c350:	bc09      	pop	{r0, r3}
 800c352:	6819      	ldr	r1, [r3, #0]
 800c354:	6808      	ldr	r0, [r1, #0]
 800c356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35a:	f01e 0f10 	tst.w	lr, #16
 800c35e:	bf08      	it	eq
 800c360:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c364:	f380 8809 	msr	PSP, r0
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop

0800c370 <pxCurrentTCBConst>:
 800c370:	20046c54 	.word	0x20046c54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop

0800c378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	b672      	cpsid	i
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	b662      	cpsie	i
 800c392:	607b      	str	r3, [r7, #4]
}
 800c394:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c396:	f7fe fdbb 	bl	800af10 <xTaskIncrementTick>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d003      	beq.n	800c3a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3a0:	4b06      	ldr	r3, [pc, #24]	; (800c3bc <SysTick_Handler+0x44>)
 800c3a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a6:	601a      	str	r2, [r3, #0]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	f383 8811 	msr	BASEPRI, r3
}
 800c3b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3b4:	bf00      	nop
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	e000ed04 	.word	0xe000ed04

0800c3c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3c4:	4b0b      	ldr	r3, [pc, #44]	; (800c3f4 <vPortSetupTimerInterrupt+0x34>)
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3ca:	4b0b      	ldr	r3, [pc, #44]	; (800c3f8 <vPortSetupTimerInterrupt+0x38>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3d0:	4b0a      	ldr	r3, [pc, #40]	; (800c3fc <vPortSetupTimerInterrupt+0x3c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a0a      	ldr	r2, [pc, #40]	; (800c400 <vPortSetupTimerInterrupt+0x40>)
 800c3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3da:	099b      	lsrs	r3, r3, #6
 800c3dc:	4a09      	ldr	r2, [pc, #36]	; (800c404 <vPortSetupTimerInterrupt+0x44>)
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3e2:	4b04      	ldr	r3, [pc, #16]	; (800c3f4 <vPortSetupTimerInterrupt+0x34>)
 800c3e4:	2207      	movs	r2, #7
 800c3e6:	601a      	str	r2, [r3, #0]
}
 800c3e8:	bf00      	nop
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	e000e010 	.word	0xe000e010
 800c3f8:	e000e018 	.word	0xe000e018
 800c3fc:	20001a2c 	.word	0x20001a2c
 800c400:	10624dd3 	.word	0x10624dd3
 800c404:	e000e014 	.word	0xe000e014

0800c408 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c408:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c418 <vPortEnableVFP+0x10>
 800c40c:	6801      	ldr	r1, [r0, #0]
 800c40e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c412:	6001      	str	r1, [r0, #0]
 800c414:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c416:	bf00      	nop
 800c418:	e000ed88 	.word	0xe000ed88

0800c41c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c422:	f3ef 8305 	mrs	r3, IPSR
 800c426:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2b0f      	cmp	r3, #15
 800c42c:	d916      	bls.n	800c45c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c42e:	4a19      	ldr	r2, [pc, #100]	; (800c494 <vPortValidateInterruptPriority+0x78>)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4413      	add	r3, r2
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c438:	4b17      	ldr	r3, [pc, #92]	; (800c498 <vPortValidateInterruptPriority+0x7c>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	7afa      	ldrb	r2, [r7, #11]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d20c      	bcs.n	800c45c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	b672      	cpsid	i
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	b662      	cpsie	i
 800c456:	607b      	str	r3, [r7, #4]
}
 800c458:	bf00      	nop
 800c45a:	e7fe      	b.n	800c45a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c45c:	4b0f      	ldr	r3, [pc, #60]	; (800c49c <vPortValidateInterruptPriority+0x80>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c464:	4b0e      	ldr	r3, [pc, #56]	; (800c4a0 <vPortValidateInterruptPriority+0x84>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d90c      	bls.n	800c486 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	b672      	cpsid	i
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	b662      	cpsie	i
 800c480:	603b      	str	r3, [r7, #0]
}
 800c482:	bf00      	nop
 800c484:	e7fe      	b.n	800c484 <vPortValidateInterruptPriority+0x68>
	}
 800c486:	bf00      	nop
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	e000e3f0 	.word	0xe000e3f0
 800c498:	20047280 	.word	0x20047280
 800c49c:	e000ed0c 	.word	0xe000ed0c
 800c4a0:	20047284 	.word	0x20047284

0800c4a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b08a      	sub	sp, #40	; 0x28
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4b0:	f7fe fc5e 	bl	800ad70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4b4:	4b5b      	ldr	r3, [pc, #364]	; (800c624 <pvPortMalloc+0x180>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d101      	bne.n	800c4c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4bc:	f000 f91a 	bl	800c6f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4c0:	4b59      	ldr	r3, [pc, #356]	; (800c628 <pvPortMalloc+0x184>)
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f040 8092 	bne.w	800c5f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01f      	beq.n	800c514 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c4d4:	2208      	movs	r2, #8
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4413      	add	r3, r2
 800c4da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f003 0307 	and.w	r3, r3, #7
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d016      	beq.n	800c514 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f023 0307 	bic.w	r3, r3, #7
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f003 0307 	and.w	r3, r3, #7
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00c      	beq.n	800c514 <pvPortMalloc+0x70>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fe:	b672      	cpsid	i
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	b662      	cpsie	i
 800c50e:	617b      	str	r3, [r7, #20]
}
 800c510:	bf00      	nop
 800c512:	e7fe      	b.n	800c512 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d06b      	beq.n	800c5f2 <pvPortMalloc+0x14e>
 800c51a:	4b44      	ldr	r3, [pc, #272]	; (800c62c <pvPortMalloc+0x188>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	429a      	cmp	r2, r3
 800c522:	d866      	bhi.n	800c5f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c524:	4b42      	ldr	r3, [pc, #264]	; (800c630 <pvPortMalloc+0x18c>)
 800c526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c528:	4b41      	ldr	r3, [pc, #260]	; (800c630 <pvPortMalloc+0x18c>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c52e:	e004      	b.n	800c53a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	429a      	cmp	r2, r3
 800c542:	d903      	bls.n	800c54c <pvPortMalloc+0xa8>
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1f1      	bne.n	800c530 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c54c:	4b35      	ldr	r3, [pc, #212]	; (800c624 <pvPortMalloc+0x180>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c552:	429a      	cmp	r2, r3
 800c554:	d04d      	beq.n	800c5f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2208      	movs	r2, #8
 800c55c:	4413      	add	r3, r2
 800c55e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	1ad2      	subs	r2, r2, r3
 800c570:	2308      	movs	r3, #8
 800c572:	005b      	lsls	r3, r3, #1
 800c574:	429a      	cmp	r2, r3
 800c576:	d921      	bls.n	800c5bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4413      	add	r3, r2
 800c57e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	f003 0307 	and.w	r3, r3, #7
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00c      	beq.n	800c5a4 <pvPortMalloc+0x100>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	b672      	cpsid	i
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	b662      	cpsie	i
 800c59e:	613b      	str	r3, [r7, #16]
}
 800c5a0:	bf00      	nop
 800c5a2:	e7fe      	b.n	800c5a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	1ad2      	subs	r2, r2, r3
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5b6:	69b8      	ldr	r0, [r7, #24]
 800c5b8:	f000 f8fe 	bl	800c7b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5bc:	4b1b      	ldr	r3, [pc, #108]	; (800c62c <pvPortMalloc+0x188>)
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	4a19      	ldr	r2, [pc, #100]	; (800c62c <pvPortMalloc+0x188>)
 800c5c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5ca:	4b18      	ldr	r3, [pc, #96]	; (800c62c <pvPortMalloc+0x188>)
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	4b19      	ldr	r3, [pc, #100]	; (800c634 <pvPortMalloc+0x190>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d203      	bcs.n	800c5de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5d6:	4b15      	ldr	r3, [pc, #84]	; (800c62c <pvPortMalloc+0x188>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a16      	ldr	r2, [pc, #88]	; (800c634 <pvPortMalloc+0x190>)
 800c5dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e0:	685a      	ldr	r2, [r3, #4]
 800c5e2:	4b11      	ldr	r3, [pc, #68]	; (800c628 <pvPortMalloc+0x184>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5f2:	f7fe fbcb 	bl	800ad8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	f003 0307 	and.w	r3, r3, #7
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00c      	beq.n	800c61a <pvPortMalloc+0x176>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	b672      	cpsid	i
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	b662      	cpsie	i
 800c614:	60fb      	str	r3, [r7, #12]
}
 800c616:	bf00      	nop
 800c618:	e7fe      	b.n	800c618 <pvPortMalloc+0x174>
	return pvReturn;
 800c61a:	69fb      	ldr	r3, [r7, #28]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3728      	adds	r7, #40	; 0x28
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	2004ae90 	.word	0x2004ae90
 800c628:	2004ae9c 	.word	0x2004ae9c
 800c62c:	2004ae94 	.word	0x2004ae94
 800c630:	2004ae88 	.word	0x2004ae88
 800c634:	2004ae98 	.word	0x2004ae98

0800c638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b086      	sub	sp, #24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d04c      	beq.n	800c6e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c64a:	2308      	movs	r3, #8
 800c64c:	425b      	negs	r3, r3
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	4413      	add	r3, r2
 800c652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	4b23      	ldr	r3, [pc, #140]	; (800c6ec <vPortFree+0xb4>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4013      	ands	r3, r2
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10c      	bne.n	800c680 <vPortFree+0x48>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	b672      	cpsid	i
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	b662      	cpsie	i
 800c67a:	60fb      	str	r3, [r7, #12]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00c      	beq.n	800c6a2 <vPortFree+0x6a>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	b672      	cpsid	i
 800c68e:	f383 8811 	msr	BASEPRI, r3
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	b662      	cpsie	i
 800c69c:	60bb      	str	r3, [r7, #8]
}
 800c69e:	bf00      	nop
 800c6a0:	e7fe      	b.n	800c6a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	685a      	ldr	r2, [r3, #4]
 800c6a6:	4b11      	ldr	r3, [pc, #68]	; (800c6ec <vPortFree+0xb4>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d019      	beq.n	800c6e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d115      	bne.n	800c6e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	4b0b      	ldr	r3, [pc, #44]	; (800c6ec <vPortFree+0xb4>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	43db      	mvns	r3, r3
 800c6c2:	401a      	ands	r2, r3
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6c8:	f7fe fb52 	bl	800ad70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <vPortFree+0xb8>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	4a06      	ldr	r2, [pc, #24]	; (800c6f0 <vPortFree+0xb8>)
 800c6d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6da:	6938      	ldr	r0, [r7, #16]
 800c6dc:	f000 f86c 	bl	800c7b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c6e0:	f7fe fb54 	bl	800ad8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6e4:	bf00      	nop
 800c6e6:	3718      	adds	r7, #24
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	2004ae9c 	.word	0x2004ae9c
 800c6f0:	2004ae94 	.word	0x2004ae94

0800c6f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c6fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c700:	4b27      	ldr	r3, [pc, #156]	; (800c7a0 <prvHeapInit+0xac>)
 800c702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f003 0307 	and.w	r3, r3, #7
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00c      	beq.n	800c728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	3307      	adds	r3, #7
 800c712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f023 0307 	bic.w	r3, r3, #7
 800c71a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	4a1f      	ldr	r2, [pc, #124]	; (800c7a0 <prvHeapInit+0xac>)
 800c724:	4413      	add	r3, r2
 800c726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c72c:	4a1d      	ldr	r2, [pc, #116]	; (800c7a4 <prvHeapInit+0xb0>)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c732:	4b1c      	ldr	r3, [pc, #112]	; (800c7a4 <prvHeapInit+0xb0>)
 800c734:	2200      	movs	r2, #0
 800c736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	4413      	add	r3, r2
 800c73e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c740:	2208      	movs	r2, #8
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	1a9b      	subs	r3, r3, r2
 800c746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f023 0307 	bic.w	r3, r3, #7
 800c74e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	4a15      	ldr	r2, [pc, #84]	; (800c7a8 <prvHeapInit+0xb4>)
 800c754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c756:	4b14      	ldr	r3, [pc, #80]	; (800c7a8 <prvHeapInit+0xb4>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2200      	movs	r2, #0
 800c75c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c75e:	4b12      	ldr	r3, [pc, #72]	; (800c7a8 <prvHeapInit+0xb4>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	1ad2      	subs	r2, r2, r3
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c774:	4b0c      	ldr	r3, [pc, #48]	; (800c7a8 <prvHeapInit+0xb4>)
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	4a0a      	ldr	r2, [pc, #40]	; (800c7ac <prvHeapInit+0xb8>)
 800c782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	4a09      	ldr	r2, [pc, #36]	; (800c7b0 <prvHeapInit+0xbc>)
 800c78a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c78c:	4b09      	ldr	r3, [pc, #36]	; (800c7b4 <prvHeapInit+0xc0>)
 800c78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c792:	601a      	str	r2, [r3, #0]
}
 800c794:	bf00      	nop
 800c796:	3714      	adds	r7, #20
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr
 800c7a0:	20047288 	.word	0x20047288
 800c7a4:	2004ae88 	.word	0x2004ae88
 800c7a8:	2004ae90 	.word	0x2004ae90
 800c7ac:	2004ae98 	.word	0x2004ae98
 800c7b0:	2004ae94 	.word	0x2004ae94
 800c7b4:	2004ae9c 	.word	0x2004ae9c

0800c7b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7c0:	4b28      	ldr	r3, [pc, #160]	; (800c864 <prvInsertBlockIntoFreeList+0xac>)
 800c7c2:	60fb      	str	r3, [r7, #12]
 800c7c4:	e002      	b.n	800c7cc <prvInsertBlockIntoFreeList+0x14>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d8f7      	bhi.n	800c7c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d108      	bne.n	800c7fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	441a      	add	r2, r3
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	441a      	add	r2, r3
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d118      	bne.n	800c840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	4b15      	ldr	r3, [pc, #84]	; (800c868 <prvInsertBlockIntoFreeList+0xb0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	429a      	cmp	r2, r3
 800c818:	d00d      	beq.n	800c836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	685a      	ldr	r2, [r3, #4]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	441a      	add	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	e008      	b.n	800c848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c836:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <prvInsertBlockIntoFreeList+0xb0>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	601a      	str	r2, [r3, #0]
 800c83e:	e003      	b.n	800c848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d002      	beq.n	800c856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c856:	bf00      	nop
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	2004ae88 	.word	0x2004ae88
 800c868:	2004ae90 	.word	0x2004ae90

0800c86c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	330c      	adds	r3, #12
 800c87c:	461a      	mov	r2, r3
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f001 fc35 	bl	800e0f0 <tcpip_send_msg_wait_sem>
 800c886:	4603      	mov	r3, r0
 800c888:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d103      	bne.n	800c89a <netconn_apimsg+0x2e>
    return apimsg->err;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c898:	e001      	b.n	800c89e <netconn_apimsg+0x32>
  }
  return err;
 800c89a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
	...

0800c8a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b08c      	sub	sp, #48	; 0x30
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	603a      	str	r2, [r7, #0]
 800c8b2:	71fb      	strb	r3, [r7, #7]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c8b8:	79fb      	ldrb	r3, [r7, #7]
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f000 fddf 	bl	800d480 <netconn_alloc>
 800c8c2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d054      	beq.n	800c974 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c8ca:	79bb      	ldrb	r3, [r7, #6]
 800c8cc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c8d2:	f107 0308 	add.w	r3, r7, #8
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4829      	ldr	r0, [pc, #164]	; (800c980 <netconn_new_with_proto_and_callback+0xd8>)
 800c8da:	f7ff ffc7 	bl	800c86c <netconn_apimsg>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800c8e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d043      	beq.n	800c974 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d005      	beq.n	800c900 <netconn_new_with_proto_and_callback+0x58>
 800c8f4:	4b23      	ldr	r3, [pc, #140]	; (800c984 <netconn_new_with_proto_and_callback+0xdc>)
 800c8f6:	22a3      	movs	r2, #163	; 0xa3
 800c8f8:	4923      	ldr	r1, [pc, #140]	; (800c988 <netconn_new_with_proto_and_callback+0xe0>)
 800c8fa:	4824      	ldr	r0, [pc, #144]	; (800c98c <netconn_new_with_proto_and_callback+0xe4>)
 800c8fc:	f00c fdc6 	bl	801948c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c902:	3310      	adds	r3, #16
 800c904:	4618      	mov	r0, r3
 800c906:	f00c faf1 	bl	8018eec <sys_mbox_valid>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d105      	bne.n	800c91c <netconn_new_with_proto_and_callback+0x74>
 800c910:	4b1c      	ldr	r3, [pc, #112]	; (800c984 <netconn_new_with_proto_and_callback+0xdc>)
 800c912:	22a4      	movs	r2, #164	; 0xa4
 800c914:	491e      	ldr	r1, [pc, #120]	; (800c990 <netconn_new_with_proto_and_callback+0xe8>)
 800c916:	481d      	ldr	r0, [pc, #116]	; (800c98c <netconn_new_with_proto_and_callback+0xe4>)
 800c918:	f00c fdb8 	bl	801948c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91e:	3314      	adds	r3, #20
 800c920:	4618      	mov	r0, r3
 800c922:	f00c fae3 	bl	8018eec <sys_mbox_valid>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d005      	beq.n	800c938 <netconn_new_with_proto_and_callback+0x90>
 800c92c:	4b15      	ldr	r3, [pc, #84]	; (800c984 <netconn_new_with_proto_and_callback+0xdc>)
 800c92e:	22a6      	movs	r2, #166	; 0xa6
 800c930:	4918      	ldr	r1, [pc, #96]	; (800c994 <netconn_new_with_proto_and_callback+0xec>)
 800c932:	4816      	ldr	r0, [pc, #88]	; (800c98c <netconn_new_with_proto_and_callback+0xe4>)
 800c934:	f00c fdaa 	bl	801948c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	330c      	adds	r3, #12
 800c93c:	4618      	mov	r0, r3
 800c93e:	f00c fb32 	bl	8018fa6 <sys_sem_valid>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d105      	bne.n	800c954 <netconn_new_with_proto_and_callback+0xac>
 800c948:	4b0e      	ldr	r3, [pc, #56]	; (800c984 <netconn_new_with_proto_and_callback+0xdc>)
 800c94a:	22a9      	movs	r2, #169	; 0xa9
 800c94c:	4912      	ldr	r1, [pc, #72]	; (800c998 <netconn_new_with_proto_and_callback+0xf0>)
 800c94e:	480f      	ldr	r0, [pc, #60]	; (800c98c <netconn_new_with_proto_and_callback+0xe4>)
 800c950:	f00c fd9c 	bl	801948c <iprintf>
      sys_sem_free(&conn->op_completed);
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	330c      	adds	r3, #12
 800c958:	4618      	mov	r0, r3
 800c95a:	f00c fb17 	bl	8018f8c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	3310      	adds	r3, #16
 800c962:	4618      	mov	r0, r3
 800c964:	f00c fa4e 	bl	8018e04 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c96a:	2007      	movs	r0, #7
 800c96c:	f002 f96e 	bl	800ec4c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c970:	2300      	movs	r3, #0
 800c972:	e000      	b.n	800c976 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c976:	4618      	mov	r0, r3
 800c978:	3730      	adds	r7, #48	; 0x30
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	0800d455 	.word	0x0800d455
 800c984:	0801a3c8 	.word	0x0801a3c8
 800c988:	0801a3fc 	.word	0x0801a3fc
 800c98c:	0801a420 	.word	0x0801a420
 800c990:	0801a448 	.word	0x0801a448
 800c994:	0801a460 	.word	0x0801a460
 800c998:	0801a484 	.word	0x0801a484

0800c99c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08e      	sub	sp, #56	; 0x38
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d109      	bne.n	800c9c4 <netconn_bind+0x28>
 800c9b0:	4b11      	ldr	r3, [pc, #68]	; (800c9f8 <netconn_bind+0x5c>)
 800c9b2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c9b6:	4911      	ldr	r1, [pc, #68]	; (800c9fc <netconn_bind+0x60>)
 800c9b8:	4811      	ldr	r0, [pc, #68]	; (800ca00 <netconn_bind+0x64>)
 800c9ba:	f00c fd67 	bl	801948c <iprintf>
 800c9be:	f06f 030f 	mvn.w	r3, #15
 800c9c2:	e015      	b.n	800c9f0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ca04 <netconn_bind+0x68>)
 800c9cc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c9d6:	88fb      	ldrh	r3, [r7, #6]
 800c9d8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c9da:	f107 0314 	add.w	r3, r7, #20
 800c9de:	4619      	mov	r1, r3
 800c9e0:	4809      	ldr	r0, [pc, #36]	; (800ca08 <netconn_bind+0x6c>)
 800c9e2:	f7ff ff43 	bl	800c86c <netconn_apimsg>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c9ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3738      	adds	r7, #56	; 0x38
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	0801a3c8 	.word	0x0801a3c8
 800c9fc:	0801a500 	.word	0x0801a500
 800ca00:	0801a420 	.word	0x0801a420
 800ca04:	0801d880 	.word	0x0801d880
 800ca08:	0800d8c5 	.word	0x0800d8c5

0800ca0c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08c      	sub	sp, #48	; 0x30
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	460b      	mov	r3, r1
 800ca16:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d109      	bne.n	800ca32 <netconn_listen_with_backlog+0x26>
 800ca1e:	4b0d      	ldr	r3, [pc, #52]	; (800ca54 <netconn_listen_with_backlog+0x48>)
 800ca20:	f240 12bb 	movw	r2, #443	; 0x1bb
 800ca24:	490c      	ldr	r1, [pc, #48]	; (800ca58 <netconn_listen_with_backlog+0x4c>)
 800ca26:	480d      	ldr	r0, [pc, #52]	; (800ca5c <netconn_listen_with_backlog+0x50>)
 800ca28:	f00c fd30 	bl	801948c <iprintf>
 800ca2c:	f06f 030f 	mvn.w	r3, #15
 800ca30:	e00c      	b.n	800ca4c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ca36:	f107 030c 	add.w	r3, r7, #12
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	4808      	ldr	r0, [pc, #32]	; (800ca60 <netconn_listen_with_backlog+0x54>)
 800ca3e:	f7ff ff15 	bl	800c86c <netconn_apimsg>
 800ca42:	4603      	mov	r3, r0
 800ca44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ca48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3730      	adds	r7, #48	; 0x30
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	0801a3c8 	.word	0x0801a3c8
 800ca58:	0801a580 	.word	0x0801a580
 800ca5c:	0801a420 	.word	0x0801a420
 800ca60:	0800d939 	.word	0x0800d939

0800ca64 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d109      	bne.n	800ca88 <netconn_accept+0x24>
 800ca74:	4b3d      	ldr	r3, [pc, #244]	; (800cb6c <netconn_accept+0x108>)
 800ca76:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ca7a:	493d      	ldr	r1, [pc, #244]	; (800cb70 <netconn_accept+0x10c>)
 800ca7c:	483d      	ldr	r0, [pc, #244]	; (800cb74 <netconn_accept+0x110>)
 800ca7e:	f00c fd05 	bl	801948c <iprintf>
 800ca82:	f06f 030f 	mvn.w	r3, #15
 800ca86:	e06c      	b.n	800cb62 <netconn_accept+0xfe>
  *new_conn = NULL;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d109      	bne.n	800caa8 <netconn_accept+0x44>
 800ca94:	4b35      	ldr	r3, [pc, #212]	; (800cb6c <netconn_accept+0x108>)
 800ca96:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ca9a:	4937      	ldr	r1, [pc, #220]	; (800cb78 <netconn_accept+0x114>)
 800ca9c:	4835      	ldr	r0, [pc, #212]	; (800cb74 <netconn_accept+0x110>)
 800ca9e:	f00c fcf5 	bl	801948c <iprintf>
 800caa2:	f06f 030f 	mvn.w	r3, #15
 800caa6:	e05c      	b.n	800cb62 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f867 	bl	800cb7c <netconn_err>
 800caae:	4603      	mov	r3, r0
 800cab0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800cab2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d002      	beq.n	800cac0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800caba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cabe:	e050      	b.n	800cb62 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	3314      	adds	r3, #20
 800cac4:	4618      	mov	r0, r3
 800cac6:	f00c fa11 	bl	8018eec <sys_mbox_valid>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d005      	beq.n	800cadc <netconn_accept+0x78>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7f1b      	ldrb	r3, [r3, #28]
 800cad4:	f003 0301 	and.w	r3, r3, #1
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800cadc:	f06f 030e 	mvn.w	r3, #14
 800cae0:	e03f      	b.n	800cb62 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	7f1b      	ldrb	r3, [r3, #28]
 800cae6:	f003 0302 	and.w	r3, r3, #2
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00e      	beq.n	800cb0c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3314      	adds	r3, #20
 800caf2:	f107 020c 	add.w	r2, r7, #12
 800caf6:	4611      	mov	r1, r2
 800caf8:	4618      	mov	r0, r3
 800cafa:	f00c f9e0 	bl	8018ebe <sys_arch_mbox_tryfetch>
 800cafe:	4603      	mov	r3, r0
 800cb00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb04:	d10a      	bne.n	800cb1c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800cb06:	f06f 0306 	mvn.w	r3, #6
 800cb0a:	e02a      	b.n	800cb62 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3314      	adds	r3, #20
 800cb10:	f107 010c 	add.w	r1, r7, #12
 800cb14:	2200      	movs	r2, #0
 800cb16:	4618      	mov	r0, r3
 800cb18:	f00c f9a0 	bl	8018e5c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d005      	beq.n	800cb30 <netconn_accept+0xcc>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb28:	2200      	movs	r2, #0
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f107 0213 	add.w	r2, r7, #19
 800cb36:	4611      	mov	r1, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 f871 	bl	800cc20 <lwip_netconn_is_err_msg>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800cb44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb48:	e00b      	b.n	800cb62 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d102      	bne.n	800cb56 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800cb50:	f06f 030e 	mvn.w	r3, #14
 800cb54:	e005      	b.n	800cb62 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cb60:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3718      	adds	r7, #24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	0801a3c8 	.word	0x0801a3c8
 800cb70:	0801a5a0 	.word	0x0801a5a0
 800cb74:	0801a420 	.word	0x0801a420
 800cb78:	0801a5c0 	.word	0x0801a5c0

0800cb7c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <netconn_err+0x12>
    return ERR_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	e00d      	b.n	800cbaa <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800cb8e:	f00c fa87 	bl	80190a0 <sys_arch_protect>
 800cb92:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	7a1b      	ldrb	r3, [r3, #8]
 800cb98:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f00c fa8b 	bl	80190bc <sys_arch_unprotect>
  return err;
 800cba6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800cbbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbc2:	f113 0f0d 	cmn.w	r3, #13
 800cbc6:	d009      	beq.n	800cbdc <lwip_netconn_err_to_msg+0x28>
 800cbc8:	f113 0f0d 	cmn.w	r3, #13
 800cbcc:	dc0c      	bgt.n	800cbe8 <lwip_netconn_err_to_msg+0x34>
 800cbce:	f113 0f0f 	cmn.w	r3, #15
 800cbd2:	d007      	beq.n	800cbe4 <lwip_netconn_err_to_msg+0x30>
 800cbd4:	f113 0f0e 	cmn.w	r3, #14
 800cbd8:	d002      	beq.n	800cbe0 <lwip_netconn_err_to_msg+0x2c>
 800cbda:	e005      	b.n	800cbe8 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800cbdc:	4b0a      	ldr	r3, [pc, #40]	; (800cc08 <lwip_netconn_err_to_msg+0x54>)
 800cbde:	e00e      	b.n	800cbfe <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800cbe0:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <lwip_netconn_err_to_msg+0x58>)
 800cbe2:	e00c      	b.n	800cbfe <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800cbe4:	4b0a      	ldr	r3, [pc, #40]	; (800cc10 <lwip_netconn_err_to_msg+0x5c>)
 800cbe6:	e00a      	b.n	800cbfe <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800cbe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d005      	beq.n	800cbfc <lwip_netconn_err_to_msg+0x48>
 800cbf0:	4b08      	ldr	r3, [pc, #32]	; (800cc14 <lwip_netconn_err_to_msg+0x60>)
 800cbf2:	227d      	movs	r2, #125	; 0x7d
 800cbf4:	4908      	ldr	r1, [pc, #32]	; (800cc18 <lwip_netconn_err_to_msg+0x64>)
 800cbf6:	4809      	ldr	r0, [pc, #36]	; (800cc1c <lwip_netconn_err_to_msg+0x68>)
 800cbf8:	f00c fc48 	bl	801948c <iprintf>
      return NULL;
 800cbfc:	2300      	movs	r3, #0
  }
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	0801d76c 	.word	0x0801d76c
 800cc0c:	0801d76d 	.word	0x0801d76d
 800cc10:	0801d76e 	.word	0x0801d76e
 800cc14:	0801a720 	.word	0x0801a720
 800cc18:	0801a754 	.word	0x0801a754
 800cc1c:	0801a764 	.word	0x0801a764

0800cc20 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d105      	bne.n	800cc3c <lwip_netconn_is_err_msg+0x1c>
 800cc30:	4b12      	ldr	r3, [pc, #72]	; (800cc7c <lwip_netconn_is_err_msg+0x5c>)
 800cc32:	2285      	movs	r2, #133	; 0x85
 800cc34:	4912      	ldr	r1, [pc, #72]	; (800cc80 <lwip_netconn_is_err_msg+0x60>)
 800cc36:	4813      	ldr	r0, [pc, #76]	; (800cc84 <lwip_netconn_is_err_msg+0x64>)
 800cc38:	f00c fc28 	bl	801948c <iprintf>

  if (msg == &netconn_aborted) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a12      	ldr	r2, [pc, #72]	; (800cc88 <lwip_netconn_is_err_msg+0x68>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d104      	bne.n	800cc4e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	22f3      	movs	r2, #243	; 0xf3
 800cc48:	701a      	strb	r2, [r3, #0]
    return 1;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e012      	b.n	800cc74 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a0e      	ldr	r2, [pc, #56]	; (800cc8c <lwip_netconn_is_err_msg+0x6c>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d104      	bne.n	800cc60 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	22f2      	movs	r2, #242	; 0xf2
 800cc5a:	701a      	strb	r2, [r3, #0]
    return 1;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e009      	b.n	800cc74 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a0b      	ldr	r2, [pc, #44]	; (800cc90 <lwip_netconn_is_err_msg+0x70>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d104      	bne.n	800cc72 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	22f1      	movs	r2, #241	; 0xf1
 800cc6c:	701a      	strb	r2, [r3, #0]
    return 1;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e000      	b.n	800cc74 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	0801a720 	.word	0x0801a720
 800cc80:	0801a78c 	.word	0x0801a78c
 800cc84:	0801a764 	.word	0x0801a764
 800cc88:	0801d76c 	.word	0x0801d76c
 800cc8c:	0801d76d 	.word	0x0801d76d
 800cc90:	0801d76e 	.word	0x0801d76e

0800cc94 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d105      	bne.n	800ccb4 <recv_udp+0x20>
 800cca8:	4b34      	ldr	r3, [pc, #208]	; (800cd7c <recv_udp+0xe8>)
 800ccaa:	22e5      	movs	r2, #229	; 0xe5
 800ccac:	4934      	ldr	r1, [pc, #208]	; (800cd80 <recv_udp+0xec>)
 800ccae:	4835      	ldr	r0, [pc, #212]	; (800cd84 <recv_udp+0xf0>)
 800ccb0:	f00c fbec 	bl	801948c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d105      	bne.n	800ccc6 <recv_udp+0x32>
 800ccba:	4b30      	ldr	r3, [pc, #192]	; (800cd7c <recv_udp+0xe8>)
 800ccbc:	22e6      	movs	r2, #230	; 0xe6
 800ccbe:	4932      	ldr	r1, [pc, #200]	; (800cd88 <recv_udp+0xf4>)
 800ccc0:	4830      	ldr	r0, [pc, #192]	; (800cd84 <recv_udp+0xf0>)
 800ccc2:	f00c fbe3 	bl	801948c <iprintf>
  conn = (struct netconn *)arg;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d103      	bne.n	800ccd8 <recv_udp+0x44>
    pbuf_free(p);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f002 fe5f 	bl	800f994 <pbuf_free>
    return;
 800ccd6:	e04d      	b.n	800cd74 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d005      	beq.n	800ccee <recv_udp+0x5a>
 800cce2:	4b26      	ldr	r3, [pc, #152]	; (800cd7c <recv_udp+0xe8>)
 800cce4:	22ee      	movs	r2, #238	; 0xee
 800cce6:	4929      	ldr	r1, [pc, #164]	; (800cd8c <recv_udp+0xf8>)
 800cce8:	4826      	ldr	r0, [pc, #152]	; (800cd84 <recv_udp+0xf0>)
 800ccea:	f00c fbcf 	bl	801948c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	3310      	adds	r3, #16
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f00c f8fa 	bl	8018eec <sys_mbox_valid>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d103      	bne.n	800cd06 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f002 fe48 	bl	800f994 <pbuf_free>
    return;
 800cd04:	e036      	b.n	800cd74 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cd06:	2006      	movs	r0, #6
 800cd08:	f001 ff2a 	bl	800eb60 <memp_malloc>
 800cd0c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d103      	bne.n	800cd1c <recv_udp+0x88>
    pbuf_free(p);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f002 fe3d 	bl	800f994 <pbuf_free>
    return;
 800cd1a:	e02b      	b.n	800cd74 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d002      	beq.n	800cd34 <recv_udp+0xa0>
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	e000      	b.n	800cd36 <recv_udp+0xa2>
 800cd34:	2300      	movs	r3, #0
 800cd36:	69ba      	ldr	r2, [r7, #24]
 800cd38:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cd3e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	891b      	ldrh	r3, [r3, #8]
 800cd44:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	3310      	adds	r3, #16
 800cd4a:	69b9      	ldr	r1, [r7, #24]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f00c f86b 	bl	8018e28 <sys_mbox_trypost>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d003      	beq.n	800cd60 <recv_udp+0xcc>
    netbuf_delete(buf);
 800cd58:	69b8      	ldr	r0, [r7, #24]
 800cd5a:	f001 f851 	bl	800de00 <netbuf_delete>
    return;
 800cd5e:	e009      	b.n	800cd74 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d005      	beq.n	800cd74 <recv_udp+0xe0>
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6c:	8afa      	ldrh	r2, [r7, #22]
 800cd6e:	2100      	movs	r1, #0
 800cd70:	69f8      	ldr	r0, [r7, #28]
 800cd72:	4798      	blx	r3
  }
}
 800cd74:	3720      	adds	r7, #32
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	0801a720 	.word	0x0801a720
 800cd80:	0801a798 	.word	0x0801a798
 800cd84:	0801a764 	.word	0x0801a764
 800cd88:	0801a7bc 	.word	0x0801a7bc
 800cd8c:	0801a7dc 	.word	0x0801a7dc

0800cd90 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
 800cd9c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d106      	bne.n	800cdb2 <recv_tcp+0x22>
 800cda4:	4b36      	ldr	r3, [pc, #216]	; (800ce80 <recv_tcp+0xf0>)
 800cda6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cdaa:	4936      	ldr	r1, [pc, #216]	; (800ce84 <recv_tcp+0xf4>)
 800cdac:	4836      	ldr	r0, [pc, #216]	; (800ce88 <recv_tcp+0xf8>)
 800cdae:	f00c fb6d 	bl	801948c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d106      	bne.n	800cdc6 <recv_tcp+0x36>
 800cdb8:	4b31      	ldr	r3, [pc, #196]	; (800ce80 <recv_tcp+0xf0>)
 800cdba:	f240 122d 	movw	r2, #301	; 0x12d
 800cdbe:	4933      	ldr	r1, [pc, #204]	; (800ce8c <recv_tcp+0xfc>)
 800cdc0:	4831      	ldr	r0, [pc, #196]	; (800ce88 <recv_tcp+0xf8>)
 800cdc2:	f00c fb63 	bl	801948c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800cdc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d006      	beq.n	800cddc <recv_tcp+0x4c>
 800cdce:	4b2c      	ldr	r3, [pc, #176]	; (800ce80 <recv_tcp+0xf0>)
 800cdd0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800cdd4:	492e      	ldr	r1, [pc, #184]	; (800ce90 <recv_tcp+0x100>)
 800cdd6:	482c      	ldr	r0, [pc, #176]	; (800ce88 <recv_tcp+0xf8>)
 800cdd8:	f00c fb58 	bl	801948c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d102      	bne.n	800cdec <recv_tcp+0x5c>
    return ERR_VAL;
 800cde6:	f06f 0305 	mvn.w	r3, #5
 800cdea:	e045      	b.n	800ce78 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d006      	beq.n	800ce04 <recv_tcp+0x74>
 800cdf6:	4b22      	ldr	r3, [pc, #136]	; (800ce80 <recv_tcp+0xf0>)
 800cdf8:	f240 1235 	movw	r2, #309	; 0x135
 800cdfc:	4925      	ldr	r1, [pc, #148]	; (800ce94 <recv_tcp+0x104>)
 800cdfe:	4822      	ldr	r0, [pc, #136]	; (800ce88 <recv_tcp+0xf8>)
 800ce00:	f00c fb44 	bl	801948c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	3310      	adds	r3, #16
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f00c f86f 	bl	8018eec <sys_mbox_valid>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10d      	bne.n	800ce30 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d008      	beq.n	800ce2c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	891b      	ldrh	r3, [r3, #8]
 800ce1e:	4619      	mov	r1, r3
 800ce20:	68b8      	ldr	r0, [r7, #8]
 800ce22:	f003 fd6f 	bl	8010904 <tcp_recved>
      pbuf_free(p);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f002 fdb4 	bl	800f994 <pbuf_free>
    }
    return ERR_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	e023      	b.n	800ce78 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d005      	beq.n	800ce42 <recv_tcp+0xb2>
    msg = p;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	891b      	ldrh	r3, [r3, #8]
 800ce3e:	83fb      	strh	r3, [r7, #30]
 800ce40:	e003      	b.n	800ce4a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ce42:	4b15      	ldr	r3, [pc, #84]	; (800ce98 <recv_tcp+0x108>)
 800ce44:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	3310      	adds	r3, #16
 800ce4e:	69b9      	ldr	r1, [r7, #24]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f00b ffe9 	bl	8018e28 <sys_mbox_trypost>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ce5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce60:	e00a      	b.n	800ce78 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d005      	beq.n	800ce76 <recv_tcp+0xe6>
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6e:	8bfa      	ldrh	r2, [r7, #30]
 800ce70:	2100      	movs	r1, #0
 800ce72:	6978      	ldr	r0, [r7, #20]
 800ce74:	4798      	blx	r3
  }

  return ERR_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3720      	adds	r7, #32
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	0801a720 	.word	0x0801a720
 800ce84:	0801a7fc 	.word	0x0801a7fc
 800ce88:	0801a764 	.word	0x0801a764
 800ce8c:	0801a820 	.word	0x0801a820
 800ce90:	0801a840 	.word	0x0801a840
 800ce94:	0801a858 	.word	0x0801a858
 800ce98:	0801d76e 	.word	0x0801d76e

0800ce9c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d106      	bne.n	800cebe <poll_tcp+0x22>
 800ceb0:	4b29      	ldr	r3, [pc, #164]	; (800cf58 <poll_tcp+0xbc>)
 800ceb2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ceb6:	4929      	ldr	r1, [pc, #164]	; (800cf5c <poll_tcp+0xc0>)
 800ceb8:	4829      	ldr	r0, [pc, #164]	; (800cf60 <poll_tcp+0xc4>)
 800ceba:	f00c fae7 	bl	801948c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	785b      	ldrb	r3, [r3, #1]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d104      	bne.n	800ced0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800cec6:	2101      	movs	r1, #1
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f000 fdcd 	bl	800da68 <lwip_netconn_do_writemore>
 800cece:	e016      	b.n	800cefe <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	785b      	ldrb	r3, [r3, #1]
 800ced4:	2b04      	cmp	r3, #4
 800ced6:	d112      	bne.n	800cefe <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6a1b      	ldr	r3, [r3, #32]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00a      	beq.n	800cef6 <poll_tcp+0x5a>
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6a1b      	ldr	r3, [r3, #32]
 800cee4:	7a5b      	ldrb	r3, [r3, #9]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d005      	beq.n	800cef6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6a1b      	ldr	r3, [r3, #32]
 800ceee:	7a5a      	ldrb	r2, [r3, #9]
 800cef0:	3a01      	subs	r2, #1
 800cef2:	b2d2      	uxtb	r2, r2
 800cef4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800cef6:	2101      	movs	r1, #1
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f000 fb79 	bl	800d5f0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	7f1b      	ldrb	r3, [r3, #28]
 800cf02:	f003 0310 	and.w	r3, r3, #16
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d021      	beq.n	800cf4e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d01d      	beq.n	800cf4e <poll_tcp+0xb2>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cf1a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cf1e:	d316      	bcc.n	800cf4e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cf28:	2b04      	cmp	r3, #4
 800cf2a:	d810      	bhi.n	800cf4e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	7f1b      	ldrb	r3, [r3, #28]
 800cf30:	f023 0310 	bic.w	r3, r3, #16
 800cf34:	b2da      	uxtb	r2, r3
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d005      	beq.n	800cf4e <poll_tcp+0xb2>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf46:	2200      	movs	r2, #0
 800cf48:	2102      	movs	r1, #2
 800cf4a:	68f8      	ldr	r0, [r7, #12]
 800cf4c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800cf4e:	2300      	movs	r3, #0
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	0801a720 	.word	0x0801a720
 800cf5c:	0801a878 	.word	0x0801a878
 800cf60:	0801a764 	.word	0x0801a764

0800cf64 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d106      	bne.n	800cf8a <sent_tcp+0x26>
 800cf7c:	4b20      	ldr	r3, [pc, #128]	; (800d000 <sent_tcp+0x9c>)
 800cf7e:	f240 1293 	movw	r2, #403	; 0x193
 800cf82:	4920      	ldr	r1, [pc, #128]	; (800d004 <sent_tcp+0xa0>)
 800cf84:	4820      	ldr	r0, [pc, #128]	; (800d008 <sent_tcp+0xa4>)
 800cf86:	f00c fa81 	bl	801948c <iprintf>

  if (conn) {
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d032      	beq.n	800cff6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	785b      	ldrb	r3, [r3, #1]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d104      	bne.n	800cfa2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800cf98:	2101      	movs	r1, #1
 800cf9a:	6978      	ldr	r0, [r7, #20]
 800cf9c:	f000 fd64 	bl	800da68 <lwip_netconn_do_writemore>
 800cfa0:	e007      	b.n	800cfb2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	785b      	ldrb	r3, [r3, #1]
 800cfa6:	2b04      	cmp	r3, #4
 800cfa8:	d103      	bne.n	800cfb2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800cfaa:	2101      	movs	r1, #1
 800cfac:	6978      	ldr	r0, [r7, #20]
 800cfae:	f000 fb1f 	bl	800d5f0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d01d      	beq.n	800cff6 <sent_tcp+0x92>
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cfc2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cfc6:	d316      	bcc.n	800cff6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cfd0:	2b04      	cmp	r3, #4
 800cfd2:	d810      	bhi.n	800cff6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	7f1b      	ldrb	r3, [r3, #28]
 800cfd8:	f023 0310 	bic.w	r3, r3, #16
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d005      	beq.n	800cff6 <sent_tcp+0x92>
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfee:	88fa      	ldrh	r2, [r7, #6]
 800cff0:	2102      	movs	r1, #2
 800cff2:	6978      	ldr	r0, [r7, #20]
 800cff4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3718      	adds	r7, #24
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	0801a720 	.word	0x0801a720
 800d004:	0801a878 	.word	0x0801a878
 800d008:	0801a764 	.word	0x0801a764

0800d00c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d106      	bne.n	800d030 <err_tcp+0x24>
 800d022:	4b5f      	ldr	r3, [pc, #380]	; (800d1a0 <err_tcp+0x194>)
 800d024:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d028:	495e      	ldr	r1, [pc, #376]	; (800d1a4 <err_tcp+0x198>)
 800d02a:	485f      	ldr	r0, [pc, #380]	; (800d1a8 <err_tcp+0x19c>)
 800d02c:	f00c fa2e 	bl	801948c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800d030:	f00c f836 	bl	80190a0 <sys_arch_protect>
 800d034:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	2200      	movs	r2, #0
 800d03a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	78fa      	ldrb	r2, [r7, #3]
 800d040:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	7f1b      	ldrb	r3, [r3, #28]
 800d046:	f043 0301 	orr.w	r3, r3, #1
 800d04a:	b2da      	uxtb	r2, r3
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	785b      	ldrb	r3, [r3, #1]
 800d054:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	2200      	movs	r2, #0
 800d05a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d05c:	69b8      	ldr	r0, [r7, #24]
 800d05e:	f00c f82d 	bl	80190bc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d066:	2b00      	cmp	r3, #0
 800d068:	d005      	beq.n	800d076 <err_tcp+0x6a>
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06e:	2200      	movs	r2, #0
 800d070:	2104      	movs	r1, #4
 800d072:	69f8      	ldr	r0, [r7, #28]
 800d074:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d005      	beq.n	800d08a <err_tcp+0x7e>
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d082:	2200      	movs	r2, #0
 800d084:	2100      	movs	r1, #0
 800d086:	69f8      	ldr	r0, [r7, #28]
 800d088:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d005      	beq.n	800d09e <err_tcp+0x92>
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d096:	2200      	movs	r2, #0
 800d098:	2102      	movs	r1, #2
 800d09a:	69f8      	ldr	r0, [r7, #28]
 800d09c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d09e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7ff fd86 	bl	800cbb4 <lwip_netconn_err_to_msg>
 800d0a8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	3310      	adds	r3, #16
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f00b ff1c 	bl	8018eec <sys_mbox_valid>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d005      	beq.n	800d0c6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	3310      	adds	r3, #16
 800d0be:	6939      	ldr	r1, [r7, #16]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f00b feb1 	bl	8018e28 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	3314      	adds	r3, #20
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f00b ff0e 	bl	8018eec <sys_mbox_valid>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d005      	beq.n	800d0e2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	3314      	adds	r3, #20
 800d0da:	6939      	ldr	r1, [r7, #16]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f00b fea3 	bl	8018e28 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d0e2:	7dfb      	ldrb	r3, [r7, #23]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d005      	beq.n	800d0f4 <err_tcp+0xe8>
 800d0e8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ea:	2b04      	cmp	r3, #4
 800d0ec:	d002      	beq.n	800d0f4 <err_tcp+0xe8>
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	d143      	bne.n	800d17c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	7f1b      	ldrb	r3, [r3, #28]
 800d0f8:	f003 0304 	and.w	r3, r3, #4
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bf14      	ite	ne
 800d100:	2301      	movne	r3, #1
 800d102:	2300      	moveq	r3, #0
 800d104:	b2db      	uxtb	r3, r3
 800d106:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	7f1b      	ldrb	r3, [r3, #28]
 800d10c:	f023 0304 	bic.w	r3, r3, #4
 800d110:	b2da      	uxtb	r2, r3
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d13b      	bne.n	800d194 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	6a1b      	ldr	r3, [r3, #32]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d106      	bne.n	800d132 <err_tcp+0x126>
 800d124:	4b1e      	ldr	r3, [pc, #120]	; (800d1a0 <err_tcp+0x194>)
 800d126:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d12a:	4920      	ldr	r1, [pc, #128]	; (800d1ac <err_tcp+0x1a0>)
 800d12c:	481e      	ldr	r0, [pc, #120]	; (800d1a8 <err_tcp+0x19c>)
 800d12e:	f00c f9ad 	bl	801948c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d132:	7dfb      	ldrb	r3, [r7, #23]
 800d134:	2b04      	cmp	r3, #4
 800d136:	d104      	bne.n	800d142 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	6a1b      	ldr	r3, [r3, #32]
 800d13c:	2200      	movs	r2, #0
 800d13e:	711a      	strb	r2, [r3, #4]
 800d140:	e003      	b.n	800d14a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d142:	69fb      	ldr	r3, [r7, #28]
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	78fa      	ldrb	r2, [r7, #3]
 800d148:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	6a1b      	ldr	r3, [r3, #32]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	330c      	adds	r3, #12
 800d152:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d154:	68b8      	ldr	r0, [r7, #8]
 800d156:	f00b ff26 	bl	8018fa6 <sys_sem_valid>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d106      	bne.n	800d16e <err_tcp+0x162>
 800d160:	4b0f      	ldr	r3, [pc, #60]	; (800d1a0 <err_tcp+0x194>)
 800d162:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d166:	4912      	ldr	r1, [pc, #72]	; (800d1b0 <err_tcp+0x1a4>)
 800d168:	480f      	ldr	r0, [pc, #60]	; (800d1a8 <err_tcp+0x19c>)
 800d16a:	f00c f98f 	bl	801948c <iprintf>
      conn->current_msg = NULL;
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	2200      	movs	r2, #0
 800d172:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d174:	68b8      	ldr	r0, [r7, #8]
 800d176:	f00b fefc 	bl	8018f72 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d17a:	e00b      	b.n	800d194 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	6a1b      	ldr	r3, [r3, #32]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d008      	beq.n	800d196 <err_tcp+0x18a>
 800d184:	4b06      	ldr	r3, [pc, #24]	; (800d1a0 <err_tcp+0x194>)
 800d186:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d18a:	490a      	ldr	r1, [pc, #40]	; (800d1b4 <err_tcp+0x1a8>)
 800d18c:	4806      	ldr	r0, [pc, #24]	; (800d1a8 <err_tcp+0x19c>)
 800d18e:	f00c f97d 	bl	801948c <iprintf>
  }
}
 800d192:	e000      	b.n	800d196 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d194:	bf00      	nop
}
 800d196:	bf00      	nop
 800d198:	3720      	adds	r7, #32
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	0801a720 	.word	0x0801a720
 800d1a4:	0801a878 	.word	0x0801a878
 800d1a8:	0801a764 	.word	0x0801a764
 800d1ac:	0801a888 	.word	0x0801a888
 800d1b0:	0801a8a4 	.word	0x0801a8a4
 800d1b4:	0801a8c0 	.word	0x0801a8c0

0800d1b8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f004 fa61 	bl	8011690 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d1ce:	490a      	ldr	r1, [pc, #40]	; (800d1f8 <setup_tcp+0x40>)
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f004 fa6f 	bl	80116b4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d1d6:	4909      	ldr	r1, [pc, #36]	; (800d1fc <setup_tcp+0x44>)
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f004 fa8d 	bl	80116f8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d1de:	2202      	movs	r2, #2
 800d1e0:	4907      	ldr	r1, [pc, #28]	; (800d200 <setup_tcp+0x48>)
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f004 fae4 	bl	80117b0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d1e8:	4906      	ldr	r1, [pc, #24]	; (800d204 <setup_tcp+0x4c>)
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f004 faa6 	bl	801173c <tcp_err>
}
 800d1f0:	bf00      	nop
 800d1f2:	3710      	adds	r7, #16
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	0800cd91 	.word	0x0800cd91
 800d1fc:	0800cf65 	.word	0x0800cf65
 800d200:	0800ce9d 	.word	0x0800ce9d
 800d204:	0800d00d 	.word	0x0800d00d

0800d208 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800d208:	b590      	push	{r4, r7, lr}
 800d20a:	b089      	sub	sp, #36	; 0x24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	4613      	mov	r3, r2
 800d214:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d102      	bne.n	800d226 <accept_function+0x1e>
    return ERR_VAL;
 800d220:	f06f 0305 	mvn.w	r3, #5
 800d224:	e0a1      	b.n	800d36a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	3314      	adds	r3, #20
 800d22a:	4618      	mov	r0, r3
 800d22c:	f00b fe5e 	bl	8018eec <sys_mbox_valid>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d102      	bne.n	800d23c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800d236:	f06f 0305 	mvn.w	r3, #5
 800d23a:	e096      	b.n	800d36a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d11b      	bne.n	800d27a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	f103 0414 	add.w	r4, r3, #20
 800d248:	f06f 000c 	mvn.w	r0, #12
 800d24c:	f7ff fcb2 	bl	800cbb4 <lwip_netconn_err_to_msg>
 800d250:	4603      	mov	r3, r0
 800d252:	4619      	mov	r1, r3
 800d254:	4620      	mov	r0, r4
 800d256:	f00b fde7 	bl	8018e28 <sys_mbox_trypost>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d109      	bne.n	800d274 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d264:	2b00      	cmp	r3, #0
 800d266:	d005      	beq.n	800d274 <accept_function+0x6c>
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26c:	2200      	movs	r2, #0
 800d26e:	2100      	movs	r1, #0
 800d270:	69f8      	ldr	r0, [r7, #28]
 800d272:	4798      	blx	r3
    }
    return ERR_VAL;
 800d274:	f06f 0305 	mvn.w	r3, #5
 800d278:	e077      	b.n	800d36a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800d27a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d006      	beq.n	800d290 <accept_function+0x88>
 800d282:	4b3c      	ldr	r3, [pc, #240]	; (800d374 <accept_function+0x16c>)
 800d284:	f240 222a 	movw	r2, #554	; 0x22a
 800d288:	493b      	ldr	r1, [pc, #236]	; (800d378 <accept_function+0x170>)
 800d28a:	483c      	ldr	r0, [pc, #240]	; (800d37c <accept_function+0x174>)
 800d28c:	f00c f8fe 	bl	801948c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	781a      	ldrb	r2, [r3, #0]
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d298:	4619      	mov	r1, r3
 800d29a:	4610      	mov	r0, r2
 800d29c:	f000 f8f0 	bl	800d480 <netconn_alloc>
 800d2a0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d11b      	bne.n	800d2e0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	f103 0414 	add.w	r4, r3, #20
 800d2ae:	f06f 000c 	mvn.w	r0, #12
 800d2b2:	f7ff fc7f 	bl	800cbb4 <lwip_netconn_err_to_msg>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f00b fdb4 	bl	8018e28 <sys_mbox_trypost>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d109      	bne.n	800d2da <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d005      	beq.n	800d2da <accept_function+0xd2>
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	69f8      	ldr	r0, [r7, #28]
 800d2d8:	4798      	blx	r3
    }
    return ERR_MEM;
 800d2da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2de:	e044      	b.n	800d36a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	68ba      	ldr	r2, [r7, #8]
 800d2e4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800d2e6:	69b8      	ldr	r0, [r7, #24]
 800d2e8:	f7ff ff66 	bl	800d1b8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	3314      	adds	r3, #20
 800d2f0:	69b9      	ldr	r1, [r7, #24]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f00b fd98 	bl	8018e28 <sys_mbox_trypost>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d02a      	beq.n	800d354 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800d304:	2100      	movs	r1, #0
 800d306:	6978      	ldr	r0, [r7, #20]
 800d308:	f004 f9c2 	bl	8011690 <tcp_arg>
    tcp_recv(pcb, NULL);
 800d30c:	2100      	movs	r1, #0
 800d30e:	6978      	ldr	r0, [r7, #20]
 800d310:	f004 f9d0 	bl	80116b4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800d314:	2100      	movs	r1, #0
 800d316:	6978      	ldr	r0, [r7, #20]
 800d318:	f004 f9ee 	bl	80116f8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800d31c:	2200      	movs	r2, #0
 800d31e:	2100      	movs	r1, #0
 800d320:	6978      	ldr	r0, [r7, #20]
 800d322:	f004 fa45 	bl	80117b0 <tcp_poll>
    tcp_err(pcb, NULL);
 800d326:	2100      	movs	r1, #0
 800d328:	6978      	ldr	r0, [r7, #20]
 800d32a:	f004 fa07 	bl	801173c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	2200      	movs	r2, #0
 800d332:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	3310      	adds	r3, #16
 800d338:	4618      	mov	r0, r3
 800d33a:	f00b fd63 	bl	8018e04 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	3310      	adds	r3, #16
 800d342:	4618      	mov	r0, r3
 800d344:	f00b fde3 	bl	8018f0e <sys_mbox_set_invalid>
    netconn_free(newconn);
 800d348:	69b8      	ldr	r0, [r7, #24]
 800d34a:	f000 f907 	bl	800d55c <netconn_free>
    return ERR_MEM;
 800d34e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d352:	e00a      	b.n	800d36a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d005      	beq.n	800d368 <accept_function+0x160>
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d360:	2200      	movs	r2, #0
 800d362:	2100      	movs	r1, #0
 800d364:	69f8      	ldr	r0, [r7, #28]
 800d366:	4798      	blx	r3
  }

  return ERR_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3724      	adds	r7, #36	; 0x24
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd90      	pop	{r4, r7, pc}
 800d372:	bf00      	nop
 800d374:	0801a720 	.word	0x0801a720
 800d378:	0801a8dc 	.word	0x0801a8dc
 800d37c:	0801a764 	.word	0x0801a764

0800d380 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d380:	b590      	push	{r4, r7, lr}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d006      	beq.n	800d3a4 <pcb_new+0x24>
 800d396:	4b2b      	ldr	r3, [pc, #172]	; (800d444 <pcb_new+0xc4>)
 800d398:	f240 2265 	movw	r2, #613	; 0x265
 800d39c:	492a      	ldr	r1, [pc, #168]	; (800d448 <pcb_new+0xc8>)
 800d39e:	482b      	ldr	r0, [pc, #172]	; (800d44c <pcb_new+0xcc>)
 800d3a0:	f00c f874 	bl	801948c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3ae:	2b10      	cmp	r3, #16
 800d3b0:	d022      	beq.n	800d3f8 <pcb_new+0x78>
 800d3b2:	2b20      	cmp	r3, #32
 800d3b4:	d133      	bne.n	800d41e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681c      	ldr	r4, [r3, #0]
 800d3ba:	7bfb      	ldrb	r3, [r7, #15]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f009 fa04 	bl	80167ca <udp_new_ip_type>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d02a      	beq.n	800d426 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	2b22      	cmp	r3, #34	; 0x22
 800d3d8:	d104      	bne.n	800d3e4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6858      	ldr	r0, [r3, #4]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	4917      	ldr	r1, [pc, #92]	; (800d450 <pcb_new+0xd0>)
 800d3f2:	f009 f9b3 	bl	801675c <udp_recv>
      }
      break;
 800d3f6:	e016      	b.n	800d426 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681c      	ldr	r4, [r3, #0]
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f004 f938 	bl	8011674 <tcp_new_ip_type>
 800d404:	4603      	mov	r3, r0
 800d406:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00b      	beq.n	800d42a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4618      	mov	r0, r3
 800d418:	f7ff fece 	bl	800d1b8 <setup_tcp>
      }
      break;
 800d41c:	e005      	b.n	800d42a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	22fa      	movs	r2, #250	; 0xfa
 800d422:	711a      	strb	r2, [r3, #4]
      return;
 800d424:	e00a      	b.n	800d43c <pcb_new+0xbc>
      break;
 800d426:	bf00      	nop
 800d428:	e000      	b.n	800d42c <pcb_new+0xac>
      break;
 800d42a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d102      	bne.n	800d43c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	22ff      	movs	r2, #255	; 0xff
 800d43a:	711a      	strb	r2, [r3, #4]
  }
}
 800d43c:	3714      	adds	r7, #20
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd90      	pop	{r4, r7, pc}
 800d442:	bf00      	nop
 800d444:	0801a720 	.word	0x0801a720
 800d448:	0801a904 	.word	0x0801a904
 800d44c:	0801a764 	.word	0x0801a764
 800d450:	0800cc95 	.word	0x0800cc95

0800d454 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2200      	movs	r2, #0
 800d464:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d102      	bne.n	800d476 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7ff ff85 	bl	800d380 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d476:	bf00      	nop
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
	...

0800d480 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b086      	sub	sp, #24
 800d484:	af00      	add	r7, sp, #0
 800d486:	4603      	mov	r3, r0
 800d488:	6039      	str	r1, [r7, #0]
 800d48a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d490:	2007      	movs	r0, #7
 800d492:	f001 fb65 	bl	800eb60 <memp_malloc>
 800d496:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d101      	bne.n	800d4a2 <netconn_alloc+0x22>
    return NULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e052      	b.n	800d548 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	79fa      	ldrb	r2, [r7, #7]
 800d4ac:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
 800d4b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4ba:	2b10      	cmp	r3, #16
 800d4bc:	d004      	beq.n	800d4c8 <netconn_alloc+0x48>
 800d4be:	2b20      	cmp	r3, #32
 800d4c0:	d105      	bne.n	800d4ce <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d4c2:	2306      	movs	r3, #6
 800d4c4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d4c6:	e00a      	b.n	800d4de <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d4c8:	2306      	movs	r3, #6
 800d4ca:	617b      	str	r3, [r7, #20]
      break;
 800d4cc:	e007      	b.n	800d4de <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d4ce:	4b20      	ldr	r3, [pc, #128]	; (800d550 <netconn_alloc+0xd0>)
 800d4d0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d4d4:	491f      	ldr	r1, [pc, #124]	; (800d554 <netconn_alloc+0xd4>)
 800d4d6:	4820      	ldr	r0, [pc, #128]	; (800d558 <netconn_alloc+0xd8>)
 800d4d8:	f00b ffd8 	bl	801948c <iprintf>
      goto free_and_return;
 800d4dc:	e02f      	b.n	800d53e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	3310      	adds	r3, #16
 800d4e2:	6979      	ldr	r1, [r7, #20]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f00b fc73 	bl	8018dd0 <sys_mbox_new>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d125      	bne.n	800d53c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	330c      	adds	r3, #12
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f00b fd16 	bl	8018f28 <sys_sem_new>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d005      	beq.n	800d50e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	3310      	adds	r3, #16
 800d506:	4618      	mov	r0, r3
 800d508:	f00b fc7c 	bl	8018e04 <sys_mbox_free>
    goto free_and_return;
 800d50c:	e017      	b.n	800d53e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3314      	adds	r3, #20
 800d512:	4618      	mov	r0, r3
 800d514:	f00b fcfb 	bl	8018f0e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d524:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	7cfa      	ldrb	r2, [r7, #19]
 800d536:	771a      	strb	r2, [r3, #28]
  return conn;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	e005      	b.n	800d548 <netconn_alloc+0xc8>
    goto free_and_return;
 800d53c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d53e:	68f9      	ldr	r1, [r7, #12]
 800d540:	2007      	movs	r0, #7
 800d542:	f001 fb83 	bl	800ec4c <memp_free>
  return NULL;
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3718      	adds	r7, #24
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	0801a720 	.word	0x0801a720
 800d554:	0801a924 	.word	0x0801a924
 800d558:	0801a764 	.word	0x0801a764

0800d55c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d006      	beq.n	800d57a <netconn_free+0x1e>
 800d56c:	4b1b      	ldr	r3, [pc, #108]	; (800d5dc <netconn_free+0x80>)
 800d56e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d572:	491b      	ldr	r1, [pc, #108]	; (800d5e0 <netconn_free+0x84>)
 800d574:	481b      	ldr	r0, [pc, #108]	; (800d5e4 <netconn_free+0x88>)
 800d576:	f00b ff89 	bl	801948c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	3310      	adds	r3, #16
 800d57e:	4618      	mov	r0, r3
 800d580:	f00b fcb4 	bl	8018eec <sys_mbox_valid>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d006      	beq.n	800d598 <netconn_free+0x3c>
 800d58a:	4b14      	ldr	r3, [pc, #80]	; (800d5dc <netconn_free+0x80>)
 800d58c:	f240 3223 	movw	r2, #803	; 0x323
 800d590:	4915      	ldr	r1, [pc, #84]	; (800d5e8 <netconn_free+0x8c>)
 800d592:	4814      	ldr	r0, [pc, #80]	; (800d5e4 <netconn_free+0x88>)
 800d594:	f00b ff7a 	bl	801948c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3314      	adds	r3, #20
 800d59c:	4618      	mov	r0, r3
 800d59e:	f00b fca5 	bl	8018eec <sys_mbox_valid>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d006      	beq.n	800d5b6 <netconn_free+0x5a>
 800d5a8:	4b0c      	ldr	r3, [pc, #48]	; (800d5dc <netconn_free+0x80>)
 800d5aa:	f240 3226 	movw	r2, #806	; 0x326
 800d5ae:	490f      	ldr	r1, [pc, #60]	; (800d5ec <netconn_free+0x90>)
 800d5b0:	480c      	ldr	r0, [pc, #48]	; (800d5e4 <netconn_free+0x88>)
 800d5b2:	f00b ff6b 	bl	801948c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	330c      	adds	r3, #12
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f00b fce6 	bl	8018f8c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	330c      	adds	r3, #12
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f00b fcff 	bl	8018fc8 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d5ca:	6879      	ldr	r1, [r7, #4]
 800d5cc:	2007      	movs	r0, #7
 800d5ce:	f001 fb3d 	bl	800ec4c <memp_free>
}
 800d5d2:	bf00      	nop
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	0801a720 	.word	0x0801a720
 800d5e0:	0801a94c 	.word	0x0801a94c
 800d5e4:	0801a764 	.word	0x0801a764
 800d5e8:	0801a97c 	.word	0x0801a97c
 800d5ec:	0801a9b8 	.word	0x0801a9b8

0800d5f0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d106      	bne.n	800d614 <lwip_netconn_do_close_internal+0x24>
 800d606:	4b87      	ldr	r3, [pc, #540]	; (800d824 <lwip_netconn_do_close_internal+0x234>)
 800d608:	f240 32a2 	movw	r2, #930	; 0x3a2
 800d60c:	4986      	ldr	r1, [pc, #536]	; (800d828 <lwip_netconn_do_close_internal+0x238>)
 800d60e:	4887      	ldr	r0, [pc, #540]	; (800d82c <lwip_netconn_do_close_internal+0x23c>)
 800d610:	f00b ff3c 	bl	801948c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d61c:	2b10      	cmp	r3, #16
 800d61e:	d006      	beq.n	800d62e <lwip_netconn_do_close_internal+0x3e>
 800d620:	4b80      	ldr	r3, [pc, #512]	; (800d824 <lwip_netconn_do_close_internal+0x234>)
 800d622:	f240 32a3 	movw	r2, #931	; 0x3a3
 800d626:	4982      	ldr	r1, [pc, #520]	; (800d830 <lwip_netconn_do_close_internal+0x240>)
 800d628:	4880      	ldr	r0, [pc, #512]	; (800d82c <lwip_netconn_do_close_internal+0x23c>)
 800d62a:	f00b ff2f 	bl	801948c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	785b      	ldrb	r3, [r3, #1]
 800d632:	2b04      	cmp	r3, #4
 800d634:	d006      	beq.n	800d644 <lwip_netconn_do_close_internal+0x54>
 800d636:	4b7b      	ldr	r3, [pc, #492]	; (800d824 <lwip_netconn_do_close_internal+0x234>)
 800d638:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800d63c:	497d      	ldr	r1, [pc, #500]	; (800d834 <lwip_netconn_do_close_internal+0x244>)
 800d63e:	487b      	ldr	r0, [pc, #492]	; (800d82c <lwip_netconn_do_close_internal+0x23c>)
 800d640:	f00b ff24 	bl	801948c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d106      	bne.n	800d65a <lwip_netconn_do_close_internal+0x6a>
 800d64c:	4b75      	ldr	r3, [pc, #468]	; (800d824 <lwip_netconn_do_close_internal+0x234>)
 800d64e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800d652:	4979      	ldr	r1, [pc, #484]	; (800d838 <lwip_netconn_do_close_internal+0x248>)
 800d654:	4875      	ldr	r0, [pc, #468]	; (800d82c <lwip_netconn_do_close_internal+0x23c>)
 800d656:	f00b ff19 	bl	801948c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <lwip_netconn_do_close_internal+0x80>
 800d662:	4b70      	ldr	r3, [pc, #448]	; (800d824 <lwip_netconn_do_close_internal+0x234>)
 800d664:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d668:	4974      	ldr	r1, [pc, #464]	; (800d83c <lwip_netconn_do_close_internal+0x24c>)
 800d66a:	4870      	ldr	r0, [pc, #448]	; (800d82c <lwip_netconn_do_close_internal+0x23c>)
 800d66c:	f00b ff0e 	bl	801948c <iprintf>

  tpcb = conn->pcb.tcp;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	7a1b      	ldrb	r3, [r3, #8]
 800d67c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d67e:	7bfb      	ldrb	r3, [r7, #15]
 800d680:	f003 0301 	and.w	r3, r3, #1
 800d684:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d686:	7bfb      	ldrb	r3, [r7, #15]
 800d688:	f003 0302 	and.w	r3, r3, #2
 800d68c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d68e:	7bfb      	ldrb	r3, [r7, #15]
 800d690:	2b03      	cmp	r3, #3
 800d692:	d102      	bne.n	800d69a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d694:	2301      	movs	r3, #1
 800d696:	75bb      	strb	r3, [r7, #22]
 800d698:	e01f      	b.n	800d6da <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d69a:	7bbb      	ldrb	r3, [r7, #14]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00e      	beq.n	800d6be <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d6a4:	2b05      	cmp	r3, #5
 800d6a6:	d007      	beq.n	800d6b8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d6ac:	2b06      	cmp	r3, #6
 800d6ae:	d003      	beq.n	800d6b8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d6b4:	2b08      	cmp	r3, #8
 800d6b6:	d102      	bne.n	800d6be <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	75bb      	strb	r3, [r7, #22]
 800d6bc:	e00d      	b.n	800d6da <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d6be:	7b7b      	ldrb	r3, [r7, #13]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d008      	beq.n	800d6d6 <lwip_netconn_do_close_internal+0xe6>
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	8b5b      	ldrh	r3, [r3, #26]
 800d6c8:	f003 0310 	and.w	r3, r3, #16
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d002      	beq.n	800d6d6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	75bb      	strb	r3, [r7, #22]
 800d6d4:	e001      	b.n	800d6da <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d6da:	7dbb      	ldrb	r3, [r7, #22]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d003      	beq.n	800d6e8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	6938      	ldr	r0, [r7, #16]
 800d6e4:	f003 ffd4 	bl	8011690 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	7d1b      	ldrb	r3, [r3, #20]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d104      	bne.n	800d6fa <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	6938      	ldr	r0, [r7, #16]
 800d6f4:	f004 f844 	bl	8011780 <tcp_accept>
 800d6f8:	e01d      	b.n	800d736 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d6fa:	7bbb      	ldrb	r3, [r7, #14]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d007      	beq.n	800d710 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d700:	2100      	movs	r1, #0
 800d702:	6938      	ldr	r0, [r7, #16]
 800d704:	f003 ffd6 	bl	80116b4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d708:	2100      	movs	r1, #0
 800d70a:	6938      	ldr	r0, [r7, #16]
 800d70c:	f004 f838 	bl	8011780 <tcp_accept>
    }
    if (shut_tx) {
 800d710:	7b7b      	ldrb	r3, [r7, #13]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d003      	beq.n	800d71e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d716:	2100      	movs	r1, #0
 800d718:	6938      	ldr	r0, [r7, #16]
 800d71a:	f003 ffed 	bl	80116f8 <tcp_sent>
    }
    if (shut_close) {
 800d71e:	7dbb      	ldrb	r3, [r7, #22]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d008      	beq.n	800d736 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d724:	2200      	movs	r2, #0
 800d726:	2100      	movs	r1, #0
 800d728:	6938      	ldr	r0, [r7, #16]
 800d72a:	f004 f841 	bl	80117b0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d72e:	2100      	movs	r1, #0
 800d730:	6938      	ldr	r0, [r7, #16]
 800d732:	f004 f803 	bl	801173c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d736:	7dbb      	ldrb	r3, [r7, #22]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d005      	beq.n	800d748 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d73c:	6938      	ldr	r0, [r7, #16]
 800d73e:	f002 fdd3 	bl	80102e8 <tcp_close>
 800d742:	4603      	mov	r3, r0
 800d744:	75fb      	strb	r3, [r7, #23]
 800d746:	e007      	b.n	800d758 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d748:	7bbb      	ldrb	r3, [r7, #14]
 800d74a:	7b7a      	ldrb	r2, [r7, #13]
 800d74c:	4619      	mov	r1, r3
 800d74e:	6938      	ldr	r0, [r7, #16]
 800d750:	f002 fdf6 	bl	8010340 <tcp_shutdown>
 800d754:	4603      	mov	r3, r0
 800d756:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d102      	bne.n	800d766 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d760:	2301      	movs	r3, #1
 800d762:	757b      	strb	r3, [r7, #21]
 800d764:	e016      	b.n	800d794 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d766:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d76a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d76e:	d10f      	bne.n	800d790 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6a1b      	ldr	r3, [r3, #32]
 800d774:	7a5b      	ldrb	r3, [r3, #9]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10c      	bne.n	800d794 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d77a:	2301      	movs	r3, #1
 800d77c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d77e:	7dbb      	ldrb	r3, [r7, #22]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d007      	beq.n	800d794 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d784:	6938      	ldr	r0, [r7, #16]
 800d786:	f002 fef5 	bl	8010574 <tcp_abort>
          err = ERR_OK;
 800d78a:	2300      	movs	r3, #0
 800d78c:	75fb      	strb	r3, [r7, #23]
 800d78e:	e001      	b.n	800d794 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d790:	2301      	movs	r3, #1
 800d792:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d794:	7d7b      	ldrb	r3, [r7, #21]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d052      	beq.n	800d840 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	330c      	adds	r3, #12
 800d7a2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6a1b      	ldr	r3, [r3, #32]
 800d7a8:	7dfa      	ldrb	r2, [r7, #23]
 800d7aa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d7b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d129      	bne.n	800d814 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d7c0:	7dbb      	ldrb	r3, [r7, #22]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00c      	beq.n	800d7e0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d005      	beq.n	800d7e0 <lwip_netconn_do_close_internal+0x1f0>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2104      	movs	r1, #4
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	4798      	blx	r3
      }
      if (shut_rx) {
 800d7e0:	7bbb      	ldrb	r3, [r7, #14]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d009      	beq.n	800d7fa <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d005      	beq.n	800d7fa <lwip_netconn_do_close_internal+0x20a>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	4798      	blx	r3
      }
      if (shut_tx) {
 800d7fa:	7b7b      	ldrb	r3, [r7, #13]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d009      	beq.n	800d814 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d804:	2b00      	cmp	r3, #0
 800d806:	d005      	beq.n	800d814 <lwip_netconn_do_close_internal+0x224>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80c:	2200      	movs	r2, #0
 800d80e:	2102      	movs	r1, #2
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d814:	78fb      	ldrb	r3, [r7, #3]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d002      	beq.n	800d820 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d81a:	68b8      	ldr	r0, [r7, #8]
 800d81c:	f00b fba9 	bl	8018f72 <sys_sem_signal>
    }
    return ERR_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	e03c      	b.n	800d89e <lwip_netconn_do_close_internal+0x2ae>
 800d824:	0801a720 	.word	0x0801a720
 800d828:	0801a9f4 	.word	0x0801a9f4
 800d82c:	0801a764 	.word	0x0801a764
 800d830:	0801aa04 	.word	0x0801aa04
 800d834:	0801aa24 	.word	0x0801aa24
 800d838:	0801aa48 	.word	0x0801aa48
 800d83c:	0801a888 	.word	0x0801a888
  }
  if (!close_finished) {
 800d840:	7d7b      	ldrb	r3, [r7, #21]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d11e      	bne.n	800d884 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	7d1b      	ldrb	r3, [r3, #20]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d106      	bne.n	800d85c <lwip_netconn_do_close_internal+0x26c>
 800d84e:	4b16      	ldr	r3, [pc, #88]	; (800d8a8 <lwip_netconn_do_close_internal+0x2b8>)
 800d850:	f240 4241 	movw	r2, #1089	; 0x441
 800d854:	4915      	ldr	r1, [pc, #84]	; (800d8ac <lwip_netconn_do_close_internal+0x2bc>)
 800d856:	4816      	ldr	r0, [pc, #88]	; (800d8b0 <lwip_netconn_do_close_internal+0x2c0>)
 800d858:	f00b fe18 	bl	801948c <iprintf>
    if (shut_tx) {
 800d85c:	7b7b      	ldrb	r3, [r7, #13]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d003      	beq.n	800d86a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800d862:	4914      	ldr	r1, [pc, #80]	; (800d8b4 <lwip_netconn_do_close_internal+0x2c4>)
 800d864:	6938      	ldr	r0, [r7, #16]
 800d866:	f003 ff47 	bl	80116f8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d86a:	2201      	movs	r2, #1
 800d86c:	4912      	ldr	r1, [pc, #72]	; (800d8b8 <lwip_netconn_do_close_internal+0x2c8>)
 800d86e:	6938      	ldr	r0, [r7, #16]
 800d870:	f003 ff9e 	bl	80117b0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d874:	4911      	ldr	r1, [pc, #68]	; (800d8bc <lwip_netconn_do_close_internal+0x2cc>)
 800d876:	6938      	ldr	r0, [r7, #16]
 800d878:	f003 ff60 	bl	801173c <tcp_err>
    tcp_arg(tpcb, conn);
 800d87c:	6879      	ldr	r1, [r7, #4]
 800d87e:	6938      	ldr	r0, [r7, #16]
 800d880:	f003 ff06 	bl	8011690 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d106      	bne.n	800d89a <lwip_netconn_do_close_internal+0x2aa>
 800d88c:	4b06      	ldr	r3, [pc, #24]	; (800d8a8 <lwip_netconn_do_close_internal+0x2b8>)
 800d88e:	f240 424d 	movw	r2, #1101	; 0x44d
 800d892:	490b      	ldr	r1, [pc, #44]	; (800d8c0 <lwip_netconn_do_close_internal+0x2d0>)
 800d894:	4806      	ldr	r0, [pc, #24]	; (800d8b0 <lwip_netconn_do_close_internal+0x2c0>)
 800d896:	f00b fdf9 	bl	801948c <iprintf>
  return err;
 800d89a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3718      	adds	r7, #24
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	0801a720 	.word	0x0801a720
 800d8ac:	0801aa5c 	.word	0x0801aa5c
 800d8b0:	0801a764 	.word	0x0801a764
 800d8b4:	0800cf65 	.word	0x0800cf65
 800d8b8:	0800ce9d 	.word	0x0800ce9d
 800d8bc:	0800d00d 	.word	0x0800d00d
 800d8c0:	0801aa80 	.word	0x0801aa80

0800d8c4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d025      	beq.n	800d926 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8e4:	2b10      	cmp	r3, #16
 800d8e6:	d00e      	beq.n	800d906 <lwip_netconn_do_bind+0x42>
 800d8e8:	2b20      	cmp	r3, #32
 800d8ea:	d119      	bne.n	800d920 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6858      	ldr	r0, [r3, #4]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	6899      	ldr	r1, [r3, #8]
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	899b      	ldrh	r3, [r3, #12]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	f008 fea6 	bl	801664c <udp_bind>
 800d900:	4603      	mov	r3, r0
 800d902:	73fb      	strb	r3, [r7, #15]
        break;
 800d904:	e011      	b.n	800d92a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	6858      	ldr	r0, [r3, #4]
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	6899      	ldr	r1, [r3, #8]
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	899b      	ldrh	r3, [r3, #12]
 800d914:	461a      	mov	r2, r3
 800d916:	f002 fe39 	bl	801058c <tcp_bind>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73fb      	strb	r3, [r7, #15]
        break;
 800d91e:	e004      	b.n	800d92a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800d920:	23fa      	movs	r3, #250	; 0xfa
 800d922:	73fb      	strb	r3, [r7, #15]
        break;
 800d924:	e001      	b.n	800d92a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800d926:	23fa      	movs	r3, #250	; 0xfa
 800d928:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	7bfa      	ldrb	r2, [r7, #15]
 800d92e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d930:	bf00      	nop
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d07f      	beq.n	800da4e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d958:	2b10      	cmp	r3, #16
 800d95a:	d175      	bne.n	800da48 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	785b      	ldrb	r3, [r3, #1]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d165      	bne.n	800da32 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	7d1b      	ldrb	r3, [r3, #20]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d002      	beq.n	800d978 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800d972:	23fa      	movs	r3, #250	; 0xfa
 800d974:	72fb      	strb	r3, [r7, #11]
 800d976:	e06c      	b.n	800da52 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800d978:	23ff      	movs	r3, #255	; 0xff
 800d97a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	f107 020b 	add.w	r2, r7, #11
 800d986:	7cf9      	ldrb	r1, [r7, #19]
 800d988:	4618      	mov	r0, r3
 800d98a:	f002 feb7 	bl	80106fc <tcp_listen_with_backlog_and_err>
 800d98e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d05d      	beq.n	800da52 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	3310      	adds	r3, #16
 800d99c:	4618      	mov	r0, r3
 800d99e:	f00b faa5 	bl	8018eec <sys_mbox_valid>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00b      	beq.n	800d9c0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3310      	adds	r3, #16
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f00b fa28 	bl	8018e04 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	3310      	adds	r3, #16
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f00b faa7 	bl	8018f0e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	3314      	adds	r3, #20
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f00b fa8e 	bl	8018eec <sys_mbox_valid>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d108      	bne.n	800d9e8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3314      	adds	r3, #20
 800d9dc:	2106      	movs	r1, #6
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f00b f9f6 	bl	8018dd0 <sys_mbox_new>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800d9e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d118      	bne.n	800da22 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	685a      	ldr	r2, [r3, #4]
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4619      	mov	r1, r3
 800da0c:	4610      	mov	r0, r2
 800da0e:	f003 fe3f 	bl	8011690 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	4912      	ldr	r1, [pc, #72]	; (800da64 <lwip_netconn_do_listen+0x12c>)
 800da1a:	4618      	mov	r0, r3
 800da1c:	f003 feb0 	bl	8011780 <tcp_accept>
 800da20:	e017      	b.n	800da52 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f002 fc60 	bl	80102e8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2200      	movs	r2, #0
 800da2e:	605a      	str	r2, [r3, #4]
 800da30:	e00f      	b.n	800da52 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	785b      	ldrb	r3, [r3, #1]
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d102      	bne.n	800da42 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	72fb      	strb	r3, [r7, #11]
 800da40:	e007      	b.n	800da52 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800da42:	23f5      	movs	r3, #245	; 0xf5
 800da44:	72fb      	strb	r3, [r7, #11]
 800da46:	e004      	b.n	800da52 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800da48:	23f0      	movs	r3, #240	; 0xf0
 800da4a:	72fb      	strb	r3, [r7, #11]
 800da4c:	e001      	b.n	800da52 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800da4e:	23f5      	movs	r3, #245	; 0xf5
 800da50:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800da52:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800da5a:	bf00      	nop
 800da5c:	3718      	adds	r7, #24
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	0800d209 	.word	0x0800d209

0800da68 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b088      	sub	sp, #32
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800da74:	2300      	movs	r3, #0
 800da76:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d106      	bne.n	800da8c <lwip_netconn_do_writemore+0x24>
 800da7e:	4b96      	ldr	r3, [pc, #600]	; (800dcd8 <lwip_netconn_do_writemore+0x270>)
 800da80:	f240 6273 	movw	r2, #1651	; 0x673
 800da84:	4995      	ldr	r1, [pc, #596]	; (800dcdc <lwip_netconn_do_writemore+0x274>)
 800da86:	4896      	ldr	r0, [pc, #600]	; (800dce0 <lwip_netconn_do_writemore+0x278>)
 800da88:	f00b fd00 	bl	801948c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	785b      	ldrb	r3, [r3, #1]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d006      	beq.n	800daa2 <lwip_netconn_do_writemore+0x3a>
 800da94:	4b90      	ldr	r3, [pc, #576]	; (800dcd8 <lwip_netconn_do_writemore+0x270>)
 800da96:	f240 6274 	movw	r2, #1652	; 0x674
 800da9a:	4992      	ldr	r1, [pc, #584]	; (800dce4 <lwip_netconn_do_writemore+0x27c>)
 800da9c:	4890      	ldr	r0, [pc, #576]	; (800dce0 <lwip_netconn_do_writemore+0x278>)
 800da9e:	f00b fcf5 	bl	801948c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6a1b      	ldr	r3, [r3, #32]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <lwip_netconn_do_writemore+0x50>
 800daaa:	4b8b      	ldr	r3, [pc, #556]	; (800dcd8 <lwip_netconn_do_writemore+0x270>)
 800daac:	f240 6275 	movw	r2, #1653	; 0x675
 800dab0:	498d      	ldr	r1, [pc, #564]	; (800dce8 <lwip_netconn_do_writemore+0x280>)
 800dab2:	488b      	ldr	r0, [pc, #556]	; (800dce0 <lwip_netconn_do_writemore+0x278>)
 800dab4:	f00b fcea 	bl	801948c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d106      	bne.n	800dace <lwip_netconn_do_writemore+0x66>
 800dac0:	4b85      	ldr	r3, [pc, #532]	; (800dcd8 <lwip_netconn_do_writemore+0x270>)
 800dac2:	f240 6276 	movw	r2, #1654	; 0x676
 800dac6:	4989      	ldr	r1, [pc, #548]	; (800dcec <lwip_netconn_do_writemore+0x284>)
 800dac8:	4885      	ldr	r0, [pc, #532]	; (800dce0 <lwip_netconn_do_writemore+0x278>)
 800daca:	f00b fcdf 	bl	801948c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	699a      	ldr	r2, [r3, #24]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a1b      	ldr	r3, [r3, #32]
 800dad8:	695b      	ldr	r3, [r3, #20]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d306      	bcc.n	800daec <lwip_netconn_do_writemore+0x84>
 800dade:	4b7e      	ldr	r3, [pc, #504]	; (800dcd8 <lwip_netconn_do_writemore+0x270>)
 800dae0:	f240 6277 	movw	r2, #1655	; 0x677
 800dae4:	4982      	ldr	r1, [pc, #520]	; (800dcf0 <lwip_netconn_do_writemore+0x288>)
 800dae6:	487e      	ldr	r0, [pc, #504]	; (800dce0 <lwip_netconn_do_writemore+0x278>)
 800dae8:	f00b fcd0 	bl	801948c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6a1b      	ldr	r3, [r3, #32]
 800daf0:	899b      	ldrh	r3, [r3, #12]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d106      	bne.n	800db04 <lwip_netconn_do_writemore+0x9c>
 800daf6:	4b78      	ldr	r3, [pc, #480]	; (800dcd8 <lwip_netconn_do_writemore+0x270>)
 800daf8:	f240 6279 	movw	r2, #1657	; 0x679
 800dafc:	497d      	ldr	r1, [pc, #500]	; (800dcf4 <lwip_netconn_do_writemore+0x28c>)
 800dafe:	4878      	ldr	r0, [pc, #480]	; (800dce0 <lwip_netconn_do_writemore+0x278>)
 800db00:	f00b fcc4 	bl	801948c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6a1b      	ldr	r3, [r3, #32]
 800db08:	7f1b      	ldrb	r3, [r3, #28]
 800db0a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	7f1b      	ldrb	r3, [r3, #28]
 800db10:	f003 0302 	and.w	r3, r3, #2
 800db14:	2b00      	cmp	r3, #0
 800db16:	d104      	bne.n	800db22 <lwip_netconn_do_writemore+0xba>
 800db18:	7ebb      	ldrb	r3, [r7, #26]
 800db1a:	f003 0304 	and.w	r3, r3, #4
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <lwip_netconn_do_writemore+0xbe>
 800db22:	2301      	movs	r3, #1
 800db24:	e000      	b.n	800db28 <lwip_netconn_do_writemore+0xc0>
 800db26:	2300      	movs	r3, #0
 800db28:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6a1b      	ldr	r3, [r3, #32]
 800db2e:	689b      	ldr	r3, [r3, #8]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a1b      	ldr	r3, [r3, #32]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	4413      	add	r3, r2
 800db3a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a1b      	ldr	r3, [r3, #32]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	685a      	ldr	r2, [r3, #4]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a1b      	ldr	r3, [r3, #32]
 800db48:	691b      	ldr	r3, [r3, #16]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db54:	d307      	bcc.n	800db66 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800db56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db5a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800db5c:	7ebb      	ldrb	r3, [r7, #26]
 800db5e:	f043 0302 	orr.w	r3, r3, #2
 800db62:	76bb      	strb	r3, [r7, #26]
 800db64:	e001      	b.n	800db6a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800db72:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800db74:	89fa      	ldrh	r2, [r7, #14]
 800db76:	8bbb      	ldrh	r3, [r7, #28]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d216      	bcs.n	800dbaa <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800db7c:	89fb      	ldrh	r3, [r7, #14]
 800db7e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800db80:	7e3b      	ldrb	r3, [r7, #24]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00d      	beq.n	800dba2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800db86:	8bbb      	ldrh	r3, [r7, #28]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10e      	bne.n	800dbaa <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a1b      	ldr	r3, [r3, #32]
 800db90:	699b      	ldr	r3, [r3, #24]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d102      	bne.n	800db9c <lwip_netconn_do_writemore+0x134>
 800db96:	f06f 0306 	mvn.w	r3, #6
 800db9a:	e000      	b.n	800db9e <lwip_netconn_do_writemore+0x136>
 800db9c:	2300      	movs	r3, #0
 800db9e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800dba0:	e07d      	b.n	800dc9e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800dba2:	7ebb      	ldrb	r3, [r7, #26]
 800dba4:	f043 0302 	orr.w	r3, r3, #2
 800dba8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	691a      	ldr	r2, [r3, #16]
 800dbb0:	8bbb      	ldrh	r3, [r7, #28]
 800dbb2:	441a      	add	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6a1b      	ldr	r3, [r3, #32]
 800dbb8:	689b      	ldr	r3, [r3, #8]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d906      	bls.n	800dbce <lwip_netconn_do_writemore+0x166>
 800dbc0:	4b45      	ldr	r3, [pc, #276]	; (800dcd8 <lwip_netconn_do_writemore+0x270>)
 800dbc2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800dbc6:	494c      	ldr	r1, [pc, #304]	; (800dcf8 <lwip_netconn_do_writemore+0x290>)
 800dbc8:	4845      	ldr	r0, [pc, #276]	; (800dce0 <lwip_netconn_do_writemore+0x278>)
 800dbca:	f00b fc5f 	bl	801948c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800dbce:	8bbb      	ldrh	r3, [r7, #28]
 800dbd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d103      	bne.n	800dbe0 <lwip_netconn_do_writemore+0x178>
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbde:	d209      	bcs.n	800dbf4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800dbe4:	8bba      	ldrh	r2, [r7, #28]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d10b      	bne.n	800dc02 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a1b      	ldr	r3, [r3, #32]
 800dbee:	899b      	ldrh	r3, [r3, #12]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d906      	bls.n	800dc02 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800dbf8:	7ebb      	ldrb	r3, [r7, #26]
 800dbfa:	f043 0302 	orr.w	r3, r3, #2
 800dbfe:	76bb      	strb	r3, [r7, #26]
 800dc00:	e001      	b.n	800dc06 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6858      	ldr	r0, [r3, #4]
 800dc0a:	7ebb      	ldrb	r3, [r7, #26]
 800dc0c:	8bba      	ldrh	r2, [r7, #28]
 800dc0e:	6979      	ldr	r1, [r7, #20]
 800dc10:	f006 fc80 	bl	8014514 <tcp_write>
 800dc14:	4603      	mov	r3, r0
 800dc16:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800dc18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d12c      	bne.n	800dc7a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a1b      	ldr	r3, [r3, #32]
 800dc24:	6999      	ldr	r1, [r3, #24]
 800dc26:	8bba      	ldrh	r2, [r7, #28]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a1b      	ldr	r3, [r3, #32]
 800dc2c:	440a      	add	r2, r1
 800dc2e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a1b      	ldr	r3, [r3, #32]
 800dc34:	6919      	ldr	r1, [r3, #16]
 800dc36:	8bba      	ldrh	r2, [r7, #28]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a1b      	ldr	r3, [r3, #32]
 800dc3c:	440a      	add	r2, r1
 800dc3e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a1b      	ldr	r3, [r3, #32]
 800dc44:	691a      	ldr	r2, [r3, #16]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a1b      	ldr	r3, [r3, #32]
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d113      	bne.n	800dc7a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	899a      	ldrh	r2, [r3, #12]
 800dc58:	3a01      	subs	r2, #1
 800dc5a:	b292      	uxth	r2, r2
 800dc5c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	899b      	ldrh	r3, [r3, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d008      	beq.n	800dc7a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a1b      	ldr	r3, [r3, #32]
 800dc6c:	689a      	ldr	r2, [r3, #8]
 800dc6e:	3208      	adds	r2, #8
 800dc70:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a1b      	ldr	r3, [r3, #32]
 800dc76:	2200      	movs	r2, #0
 800dc78:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800dc7a:	7e7b      	ldrb	r3, [r7, #25]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d004      	beq.n	800dc8a <lwip_netconn_do_writemore+0x222>
 800dc80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f43f af50 	beq.w	800db2a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800dc8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d004      	beq.n	800dc9c <lwip_netconn_do_writemore+0x234>
 800dc92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc9a:	d146      	bne.n	800dd2a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800dc9c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800dc9e:	7e3b      	ldrb	r3, [r7, #24]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d02b      	beq.n	800dcfc <lwip_netconn_do_writemore+0x294>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6a1b      	ldr	r3, [r3, #32]
 800dca8:	699a      	ldr	r2, [r3, #24]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a1b      	ldr	r3, [r3, #32]
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d223      	bcs.n	800dcfc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d005      	beq.n	800dcc8 <lwip_netconn_do_writemore+0x260>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2103      	movs	r1, #3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7f1b      	ldrb	r3, [r3, #28]
 800dccc:	f043 0310 	orr.w	r3, r3, #16
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	771a      	strb	r2, [r3, #28]
 800dcd6:	e028      	b.n	800dd2a <lwip_netconn_do_writemore+0x2c2>
 800dcd8:	0801a720 	.word	0x0801a720
 800dcdc:	0801a878 	.word	0x0801a878
 800dce0:	0801a764 	.word	0x0801a764
 800dce4:	0801ab80 	.word	0x0801ab80
 800dce8:	0801a888 	.word	0x0801a888
 800dcec:	0801aba0 	.word	0x0801aba0
 800dcf0:	0801abb8 	.word	0x0801abb8
 800dcf4:	0801abf8 	.word	0x0801abf8
 800dcf8:	0801ac20 	.word	0x0801ac20
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dd04:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dd08:	d305      	bcc.n	800dd16 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dd12:	2b04      	cmp	r3, #4
 800dd14:	d909      	bls.n	800dd2a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d005      	beq.n	800dd2a <lwip_netconn_do_writemore+0x2c2>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd22:	2200      	movs	r2, #0
 800dd24:	2103      	movs	r1, #3
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800dd2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d11d      	bne.n	800dd6e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	699a      	ldr	r2, [r3, #24]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6a1b      	ldr	r3, [r3, #32]
 800dd3c:	695b      	ldr	r3, [r3, #20]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d002      	beq.n	800dd48 <lwip_netconn_do_writemore+0x2e0>
 800dd42:	7e3b      	ldrb	r3, [r7, #24]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f007 f9c9 	bl	80150e8 <tcp_output>
 800dd56:	4603      	mov	r3, r0
 800dd58:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800dd5a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800dd5e:	f113 0f04 	cmn.w	r3, #4
 800dd62:	d12c      	bne.n	800ddbe <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800dd64:	7b3b      	ldrb	r3, [r7, #12]
 800dd66:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	76fb      	strb	r3, [r7, #27]
 800dd6c:	e027      	b.n	800ddbe <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800dd6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd76:	d120      	bne.n	800ddba <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f007 f9b3 	bl	80150e8 <tcp_output>
 800dd82:	4603      	mov	r3, r0
 800dd84:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800dd86:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800dd8a:	f113 0f04 	cmn.w	r3, #4
 800dd8e:	d104      	bne.n	800dd9a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800dd90:	7b7b      	ldrb	r3, [r7, #13]
 800dd92:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dd94:	2301      	movs	r3, #1
 800dd96:	76fb      	strb	r3, [r7, #27]
 800dd98:	e011      	b.n	800ddbe <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800dd9a:	7e3b      	ldrb	r3, [r7, #24]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00e      	beq.n	800ddbe <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6a1b      	ldr	r3, [r3, #32]
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d102      	bne.n	800ddb0 <lwip_netconn_do_writemore+0x348>
 800ddaa:	f06f 0306 	mvn.w	r3, #6
 800ddae:	e000      	b.n	800ddb2 <lwip_netconn_do_writemore+0x34a>
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	76fb      	strb	r3, [r7, #27]
 800ddb8:	e001      	b.n	800ddbe <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ddbe:	7efb      	ldrb	r3, [r7, #27]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d015      	beq.n	800ddf0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6a1b      	ldr	r3, [r3, #32]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	330c      	adds	r3, #12
 800ddcc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	7ffa      	ldrb	r2, [r7, #31]
 800ddd4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800dde2:	78fb      	ldrb	r3, [r7, #3]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800dde8:	68b8      	ldr	r0, [r7, #8]
 800ddea:	f00b f8c2 	bl	8018f72 <sys_sem_signal>
 800ddee:	e002      	b.n	800ddf6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ddf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddf4:	e000      	b.n	800ddf8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3720      	adds	r7, #32
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d013      	beq.n	800de36 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00b      	beq.n	800de2e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f001 fdba 	bl	800f994 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	605a      	str	r2, [r3, #4]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	685a      	ldr	r2, [r3, #4]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	2006      	movs	r0, #6
 800de32:	f000 ff0b 	bl	800ec4c <memp_free>
  }
}
 800de36:	bf00      	nop
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
	...

0800de40 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800de4a:	f008 fa05 	bl	8016258 <sys_timeouts_sleeptime>
 800de4e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de56:	d10b      	bne.n	800de70 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800de58:	4813      	ldr	r0, [pc, #76]	; (800dea8 <tcpip_timeouts_mbox_fetch+0x68>)
 800de5a:	f00b f8f4 	bl	8019046 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800de5e:	2200      	movs	r2, #0
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f00a fffa 	bl	8018e5c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800de68:	480f      	ldr	r0, [pc, #60]	; (800dea8 <tcpip_timeouts_mbox_fetch+0x68>)
 800de6a:	f00b f8dd 	bl	8019028 <sys_mutex_lock>
    return;
 800de6e:	e018      	b.n	800dea2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d102      	bne.n	800de7c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800de76:	f008 f9b5 	bl	80161e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800de7a:	e7e6      	b.n	800de4a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800de7c:	480a      	ldr	r0, [pc, #40]	; (800dea8 <tcpip_timeouts_mbox_fetch+0x68>)
 800de7e:	f00b f8e2 	bl	8019046 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	6839      	ldr	r1, [r7, #0]
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f00a ffe8 	bl	8018e5c <sys_arch_mbox_fetch>
 800de8c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800de8e:	4806      	ldr	r0, [pc, #24]	; (800dea8 <tcpip_timeouts_mbox_fetch+0x68>)
 800de90:	f00b f8ca 	bl	8019028 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de9a:	d102      	bne.n	800dea2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800de9c:	f008 f9a2 	bl	80161e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800dea0:	e7d3      	b.n	800de4a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	2004aeac 	.word	0x2004aeac

0800deac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800deb4:	4810      	ldr	r0, [pc, #64]	; (800def8 <tcpip_thread+0x4c>)
 800deb6:	f00b f8b7 	bl	8019028 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800deba:	4b10      	ldr	r3, [pc, #64]	; (800defc <tcpip_thread+0x50>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d005      	beq.n	800dece <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800dec2:	4b0e      	ldr	r3, [pc, #56]	; (800defc <tcpip_thread+0x50>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a0e      	ldr	r2, [pc, #56]	; (800df00 <tcpip_thread+0x54>)
 800dec8:	6812      	ldr	r2, [r2, #0]
 800deca:	4610      	mov	r0, r2
 800decc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dece:	f107 030c 	add.w	r3, r7, #12
 800ded2:	4619      	mov	r1, r3
 800ded4:	480b      	ldr	r0, [pc, #44]	; (800df04 <tcpip_thread+0x58>)
 800ded6:	f7ff ffb3 	bl	800de40 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d106      	bne.n	800deee <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dee0:	4b09      	ldr	r3, [pc, #36]	; (800df08 <tcpip_thread+0x5c>)
 800dee2:	2291      	movs	r2, #145	; 0x91
 800dee4:	4909      	ldr	r1, [pc, #36]	; (800df0c <tcpip_thread+0x60>)
 800dee6:	480a      	ldr	r0, [pc, #40]	; (800df10 <tcpip_thread+0x64>)
 800dee8:	f00b fad0 	bl	801948c <iprintf>
      continue;
 800deec:	e003      	b.n	800def6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	4618      	mov	r0, r3
 800def2:	f000 f80f 	bl	800df14 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800def6:	e7ea      	b.n	800dece <tcpip_thread+0x22>
 800def8:	2004aeac 	.word	0x2004aeac
 800defc:	2004aea0 	.word	0x2004aea0
 800df00:	2004aea4 	.word	0x2004aea4
 800df04:	2004aea8 	.word	0x2004aea8
 800df08:	0801ac78 	.word	0x0801ac78
 800df0c:	0801aca8 	.word	0x0801aca8
 800df10:	0801acc8 	.word	0x0801acc8

0800df14 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	2b02      	cmp	r3, #2
 800df22:	d026      	beq.n	800df72 <tcpip_thread_handle_msg+0x5e>
 800df24:	2b02      	cmp	r3, #2
 800df26:	dc2b      	bgt.n	800df80 <tcpip_thread_handle_msg+0x6c>
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d002      	beq.n	800df32 <tcpip_thread_handle_msg+0x1e>
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d015      	beq.n	800df5c <tcpip_thread_handle_msg+0x48>
 800df30:	e026      	b.n	800df80 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	6850      	ldr	r0, [r2, #4]
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	6892      	ldr	r2, [r2, #8]
 800df3e:	4611      	mov	r1, r2
 800df40:	4798      	blx	r3
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d004      	beq.n	800df52 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f001 fd21 	bl	800f994 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800df52:	6879      	ldr	r1, [r7, #4]
 800df54:	2009      	movs	r0, #9
 800df56:	f000 fe79 	bl	800ec4c <memp_free>
      break;
 800df5a:	e018      	b.n	800df8e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	6892      	ldr	r2, [r2, #8]
 800df64:	4610      	mov	r0, r2
 800df66:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800df68:	6879      	ldr	r1, [r7, #4]
 800df6a:	2008      	movs	r0, #8
 800df6c:	f000 fe6e 	bl	800ec4c <memp_free>
      break;
 800df70:	e00d      	b.n	800df8e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	6892      	ldr	r2, [r2, #8]
 800df7a:	4610      	mov	r0, r2
 800df7c:	4798      	blx	r3
      break;
 800df7e:	e006      	b.n	800df8e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800df80:	4b05      	ldr	r3, [pc, #20]	; (800df98 <tcpip_thread_handle_msg+0x84>)
 800df82:	22cf      	movs	r2, #207	; 0xcf
 800df84:	4905      	ldr	r1, [pc, #20]	; (800df9c <tcpip_thread_handle_msg+0x88>)
 800df86:	4806      	ldr	r0, [pc, #24]	; (800dfa0 <tcpip_thread_handle_msg+0x8c>)
 800df88:	f00b fa80 	bl	801948c <iprintf>
      break;
 800df8c:	bf00      	nop
  }
}
 800df8e:	bf00      	nop
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	0801ac78 	.word	0x0801ac78
 800df9c:	0801aca8 	.word	0x0801aca8
 800dfa0:	0801acc8 	.word	0x0801acc8

0800dfa4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dfb0:	481a      	ldr	r0, [pc, #104]	; (800e01c <tcpip_inpkt+0x78>)
 800dfb2:	f00a ff9b 	bl	8018eec <sys_mbox_valid>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d105      	bne.n	800dfc8 <tcpip_inpkt+0x24>
 800dfbc:	4b18      	ldr	r3, [pc, #96]	; (800e020 <tcpip_inpkt+0x7c>)
 800dfbe:	22fc      	movs	r2, #252	; 0xfc
 800dfc0:	4918      	ldr	r1, [pc, #96]	; (800e024 <tcpip_inpkt+0x80>)
 800dfc2:	4819      	ldr	r0, [pc, #100]	; (800e028 <tcpip_inpkt+0x84>)
 800dfc4:	f00b fa62 	bl	801948c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dfc8:	2009      	movs	r0, #9
 800dfca:	f000 fdc9 	bl	800eb60 <memp_malloc>
 800dfce:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d102      	bne.n	800dfdc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dfd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfda:	e01a      	b.n	800e012 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	68ba      	ldr	r2, [r7, #8]
 800dfec:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dff4:	6979      	ldr	r1, [r7, #20]
 800dff6:	4809      	ldr	r0, [pc, #36]	; (800e01c <tcpip_inpkt+0x78>)
 800dff8:	f00a ff16 	bl	8018e28 <sys_mbox_trypost>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d006      	beq.n	800e010 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e002:	6979      	ldr	r1, [r7, #20]
 800e004:	2009      	movs	r0, #9
 800e006:	f000 fe21 	bl	800ec4c <memp_free>
    return ERR_MEM;
 800e00a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e00e:	e000      	b.n	800e012 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e010:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e012:	4618      	mov	r0, r3
 800e014:	3718      	adds	r7, #24
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	2004aea8 	.word	0x2004aea8
 800e020:	0801ac78 	.word	0x0801ac78
 800e024:	0801acf0 	.word	0x0801acf0
 800e028:	0801acc8 	.word	0x0801acc8

0800e02c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e03c:	f003 0318 	and.w	r3, r3, #24
 800e040:	2b00      	cmp	r3, #0
 800e042:	d006      	beq.n	800e052 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e044:	4a08      	ldr	r2, [pc, #32]	; (800e068 <tcpip_input+0x3c>)
 800e046:	6839      	ldr	r1, [r7, #0]
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7ff ffab 	bl	800dfa4 <tcpip_inpkt>
 800e04e:	4603      	mov	r3, r0
 800e050:	e005      	b.n	800e05e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e052:	4a06      	ldr	r2, [pc, #24]	; (800e06c <tcpip_input+0x40>)
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff ffa4 	bl	800dfa4 <tcpip_inpkt>
 800e05c:	4603      	mov	r3, r0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	08018c25 	.word	0x08018c25
 800e06c:	08017b2d 	.word	0x08017b2d

0800e070 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e07a:	4819      	ldr	r0, [pc, #100]	; (800e0e0 <tcpip_try_callback+0x70>)
 800e07c:	f00a ff36 	bl	8018eec <sys_mbox_valid>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d106      	bne.n	800e094 <tcpip_try_callback+0x24>
 800e086:	4b17      	ldr	r3, [pc, #92]	; (800e0e4 <tcpip_try_callback+0x74>)
 800e088:	f240 125d 	movw	r2, #349	; 0x15d
 800e08c:	4916      	ldr	r1, [pc, #88]	; (800e0e8 <tcpip_try_callback+0x78>)
 800e08e:	4817      	ldr	r0, [pc, #92]	; (800e0ec <tcpip_try_callback+0x7c>)
 800e090:	f00b f9fc 	bl	801948c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e094:	2008      	movs	r0, #8
 800e096:	f000 fd63 	bl	800eb60 <memp_malloc>
 800e09a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d102      	bne.n	800e0a8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e0a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0a6:	e017      	b.n	800e0d8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e0ba:	68f9      	ldr	r1, [r7, #12]
 800e0bc:	4808      	ldr	r0, [pc, #32]	; (800e0e0 <tcpip_try_callback+0x70>)
 800e0be:	f00a feb3 	bl	8018e28 <sys_mbox_trypost>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d006      	beq.n	800e0d6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e0c8:	68f9      	ldr	r1, [r7, #12]
 800e0ca:	2008      	movs	r0, #8
 800e0cc:	f000 fdbe 	bl	800ec4c <memp_free>
    return ERR_MEM;
 800e0d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0d4:	e000      	b.n	800e0d8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	2004aea8 	.word	0x2004aea8
 800e0e4:	0801ac78 	.word	0x0801ac78
 800e0e8:	0801acf0 	.word	0x0801acf0
 800e0ec:	0801acc8 	.word	0x0801acc8

0800e0f0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800e0fc:	4806      	ldr	r0, [pc, #24]	; (800e118 <tcpip_send_msg_wait_sem+0x28>)
 800e0fe:	f00a ff93 	bl	8019028 <sys_mutex_lock>
  fn(apimsg);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	68b8      	ldr	r0, [r7, #8]
 800e106:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800e108:	4803      	ldr	r0, [pc, #12]	; (800e118 <tcpip_send_msg_wait_sem+0x28>)
 800e10a:	f00a ff9c 	bl	8019046 <sys_mutex_unlock>
  return ERR_OK;
 800e10e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	2004aeac 	.word	0x2004aeac

0800e11c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af02      	add	r7, sp, #8
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e126:	f000 f871 	bl	800e20c <lwip_init>

  tcpip_init_done = initfunc;
 800e12a:	4a17      	ldr	r2, [pc, #92]	; (800e188 <tcpip_init+0x6c>)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e130:	4a16      	ldr	r2, [pc, #88]	; (800e18c <tcpip_init+0x70>)
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e136:	2106      	movs	r1, #6
 800e138:	4815      	ldr	r0, [pc, #84]	; (800e190 <tcpip_init+0x74>)
 800e13a:	f00a fe49 	bl	8018dd0 <sys_mbox_new>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d006      	beq.n	800e152 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e144:	4b13      	ldr	r3, [pc, #76]	; (800e194 <tcpip_init+0x78>)
 800e146:	f240 2261 	movw	r2, #609	; 0x261
 800e14a:	4913      	ldr	r1, [pc, #76]	; (800e198 <tcpip_init+0x7c>)
 800e14c:	4813      	ldr	r0, [pc, #76]	; (800e19c <tcpip_init+0x80>)
 800e14e:	f00b f99d 	bl	801948c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e152:	4813      	ldr	r0, [pc, #76]	; (800e1a0 <tcpip_init+0x84>)
 800e154:	f00a ff52 	bl	8018ffc <sys_mutex_new>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d006      	beq.n	800e16c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e15e:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <tcpip_init+0x78>)
 800e160:	f240 2265 	movw	r2, #613	; 0x265
 800e164:	490f      	ldr	r1, [pc, #60]	; (800e1a4 <tcpip_init+0x88>)
 800e166:	480d      	ldr	r0, [pc, #52]	; (800e19c <tcpip_init+0x80>)
 800e168:	f00b f990 	bl	801948c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e16c:	2318      	movs	r3, #24
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e174:	2200      	movs	r2, #0
 800e176:	490c      	ldr	r1, [pc, #48]	; (800e1a8 <tcpip_init+0x8c>)
 800e178:	480c      	ldr	r0, [pc, #48]	; (800e1ac <tcpip_init+0x90>)
 800e17a:	f00a ff71 	bl	8019060 <sys_thread_new>
}
 800e17e:	bf00      	nop
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	2004aea0 	.word	0x2004aea0
 800e18c:	2004aea4 	.word	0x2004aea4
 800e190:	2004aea8 	.word	0x2004aea8
 800e194:	0801ac78 	.word	0x0801ac78
 800e198:	0801ad00 	.word	0x0801ad00
 800e19c:	0801acc8 	.word	0x0801acc8
 800e1a0:	2004aeac 	.word	0x2004aeac
 800e1a4:	0801ad24 	.word	0x0801ad24
 800e1a8:	0800dead 	.word	0x0800dead
 800e1ac:	0801ad48 	.word	0x0801ad48

0800e1b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e1ba:	88fb      	ldrh	r3, [r7, #6]
 800e1bc:	021b      	lsls	r3, r3, #8
 800e1be:	b21a      	sxth	r2, r3
 800e1c0:	88fb      	ldrh	r3, [r7, #6]
 800e1c2:	0a1b      	lsrs	r3, r3, #8
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	b21b      	sxth	r3, r3
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	b21b      	sxth	r3, r3
 800e1cc:	b29b      	uxth	r3, r3
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	370c      	adds	r7, #12
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr

0800e1da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e1da:	b480      	push	{r7}
 800e1dc:	b083      	sub	sp, #12
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	061a      	lsls	r2, r3, #24
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	021b      	lsls	r3, r3, #8
 800e1ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1ee:	431a      	orrs	r2, r3
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	0a1b      	lsrs	r3, r3, #8
 800e1f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e1f8:	431a      	orrs	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	0e1b      	lsrs	r3, r3, #24
 800e1fe:	4313      	orrs	r3, r2
}
 800e200:	4618      	mov	r0, r3
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e216:	f00a fee5 	bl	8018fe4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e21a:	f000 f8d5 	bl	800e3c8 <mem_init>
  memp_init();
 800e21e:	f000 fc31 	bl	800ea84 <memp_init>
  pbuf_init();
  netif_init();
 800e222:	f000 fd3d 	bl	800eca0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e226:	f008 f84f 	bl	80162c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e22a:	f001 fe4d 	bl	800fec8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e22e:	f007 ff91 	bl	8016154 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e232:	bf00      	nop
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
	...

0800e23c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	4603      	mov	r3, r0
 800e244:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e246:	4b05      	ldr	r3, [pc, #20]	; (800e25c <ptr_to_mem+0x20>)
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	88fb      	ldrh	r3, [r7, #6]
 800e24c:	4413      	add	r3, r2
}
 800e24e:	4618      	mov	r0, r3
 800e250:	370c      	adds	r7, #12
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	2004bedc 	.word	0x2004bedc

0800e260 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e268:	4b05      	ldr	r3, [pc, #20]	; (800e280 <mem_to_ptr+0x20>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	b29b      	uxth	r3, r3
}
 800e272:	4618      	mov	r0, r3
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	2004bedc 	.word	0x2004bedc

0800e284 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e284:	b590      	push	{r4, r7, lr}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e28c:	4b45      	ldr	r3, [pc, #276]	; (800e3a4 <plug_holes+0x120>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	429a      	cmp	r2, r3
 800e294:	d206      	bcs.n	800e2a4 <plug_holes+0x20>
 800e296:	4b44      	ldr	r3, [pc, #272]	; (800e3a8 <plug_holes+0x124>)
 800e298:	f240 12df 	movw	r2, #479	; 0x1df
 800e29c:	4943      	ldr	r1, [pc, #268]	; (800e3ac <plug_holes+0x128>)
 800e29e:	4844      	ldr	r0, [pc, #272]	; (800e3b0 <plug_holes+0x12c>)
 800e2a0:	f00b f8f4 	bl	801948c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e2a4:	4b43      	ldr	r3, [pc, #268]	; (800e3b4 <plug_holes+0x130>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d306      	bcc.n	800e2bc <plug_holes+0x38>
 800e2ae:	4b3e      	ldr	r3, [pc, #248]	; (800e3a8 <plug_holes+0x124>)
 800e2b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e2b4:	4940      	ldr	r1, [pc, #256]	; (800e3b8 <plug_holes+0x134>)
 800e2b6:	483e      	ldr	r0, [pc, #248]	; (800e3b0 <plug_holes+0x12c>)
 800e2b8:	f00b f8e8 	bl	801948c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	791b      	ldrb	r3, [r3, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d006      	beq.n	800e2d2 <plug_holes+0x4e>
 800e2c4:	4b38      	ldr	r3, [pc, #224]	; (800e3a8 <plug_holes+0x124>)
 800e2c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e2ca:	493c      	ldr	r1, [pc, #240]	; (800e3bc <plug_holes+0x138>)
 800e2cc:	4838      	ldr	r0, [pc, #224]	; (800e3b0 <plug_holes+0x12c>)
 800e2ce:	f00b f8dd 	bl	801948c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2da:	d906      	bls.n	800e2ea <plug_holes+0x66>
 800e2dc:	4b32      	ldr	r3, [pc, #200]	; (800e3a8 <plug_holes+0x124>)
 800e2de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e2e2:	4937      	ldr	r1, [pc, #220]	; (800e3c0 <plug_holes+0x13c>)
 800e2e4:	4832      	ldr	r0, [pc, #200]	; (800e3b0 <plug_holes+0x12c>)
 800e2e6:	f00b f8d1 	bl	801948c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	881b      	ldrh	r3, [r3, #0]
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7ff ffa4 	bl	800e23c <ptr_to_mem>
 800e2f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d024      	beq.n	800e348 <plug_holes+0xc4>
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	791b      	ldrb	r3, [r3, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d120      	bne.n	800e348 <plug_holes+0xc4>
 800e306:	4b2b      	ldr	r3, [pc, #172]	; (800e3b4 <plug_holes+0x130>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d01b      	beq.n	800e348 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e310:	4b2c      	ldr	r3, [pc, #176]	; (800e3c4 <plug_holes+0x140>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	429a      	cmp	r2, r3
 800e318:	d102      	bne.n	800e320 <plug_holes+0x9c>
      lfree = mem;
 800e31a:	4a2a      	ldr	r2, [pc, #168]	; (800e3c4 <plug_holes+0x140>)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	881a      	ldrh	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	881b      	ldrh	r3, [r3, #0]
 800e32c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e330:	d00a      	beq.n	800e348 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	881b      	ldrh	r3, [r3, #0]
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff ff80 	bl	800e23c <ptr_to_mem>
 800e33c:	4604      	mov	r4, r0
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff ff8e 	bl	800e260 <mem_to_ptr>
 800e344:	4603      	mov	r3, r0
 800e346:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	885b      	ldrh	r3, [r3, #2]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff ff75 	bl	800e23c <ptr_to_mem>
 800e352:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d01f      	beq.n	800e39c <plug_holes+0x118>
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	791b      	ldrb	r3, [r3, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d11b      	bne.n	800e39c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e364:	4b17      	ldr	r3, [pc, #92]	; (800e3c4 <plug_holes+0x140>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d102      	bne.n	800e374 <plug_holes+0xf0>
      lfree = pmem;
 800e36e:	4a15      	ldr	r2, [pc, #84]	; (800e3c4 <plug_holes+0x140>)
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	881a      	ldrh	r2, [r3, #0]
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	881b      	ldrh	r3, [r3, #0]
 800e380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e384:	d00a      	beq.n	800e39c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	881b      	ldrh	r3, [r3, #0]
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7ff ff56 	bl	800e23c <ptr_to_mem>
 800e390:	4604      	mov	r4, r0
 800e392:	68b8      	ldr	r0, [r7, #8]
 800e394:	f7ff ff64 	bl	800e260 <mem_to_ptr>
 800e398:	4603      	mov	r3, r0
 800e39a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e39c:	bf00      	nop
 800e39e:	3714      	adds	r7, #20
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd90      	pop	{r4, r7, pc}
 800e3a4:	2004bedc 	.word	0x2004bedc
 800e3a8:	0801ad58 	.word	0x0801ad58
 800e3ac:	0801ad88 	.word	0x0801ad88
 800e3b0:	0801ada0 	.word	0x0801ada0
 800e3b4:	2004bee0 	.word	0x2004bee0
 800e3b8:	0801adc8 	.word	0x0801adc8
 800e3bc:	0801ade4 	.word	0x0801ade4
 800e3c0:	0801ae00 	.word	0x0801ae00
 800e3c4:	2004bee8 	.word	0x2004bee8

0800e3c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e3ce:	4b1f      	ldr	r3, [pc, #124]	; (800e44c <mem_init+0x84>)
 800e3d0:	3303      	adds	r3, #3
 800e3d2:	f023 0303 	bic.w	r3, r3, #3
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	4b1d      	ldr	r3, [pc, #116]	; (800e450 <mem_init+0x88>)
 800e3da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e3dc:	4b1c      	ldr	r3, [pc, #112]	; (800e450 <mem_init+0x88>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e3e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e3f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e3fa:	f7ff ff1f 	bl	800e23c <ptr_to_mem>
 800e3fe:	4603      	mov	r3, r0
 800e400:	4a14      	ldr	r2, [pc, #80]	; (800e454 <mem_init+0x8c>)
 800e402:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e404:	4b13      	ldr	r3, [pc, #76]	; (800e454 <mem_init+0x8c>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2201      	movs	r2, #1
 800e40a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e40c:	4b11      	ldr	r3, [pc, #68]	; (800e454 <mem_init+0x8c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e414:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e416:	4b0f      	ldr	r3, [pc, #60]	; (800e454 <mem_init+0x8c>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e41e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e420:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <mem_init+0x88>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a0c      	ldr	r2, [pc, #48]	; (800e458 <mem_init+0x90>)
 800e426:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e428:	480c      	ldr	r0, [pc, #48]	; (800e45c <mem_init+0x94>)
 800e42a:	f00a fde7 	bl	8018ffc <sys_mutex_new>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d006      	beq.n	800e442 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e434:	4b0a      	ldr	r3, [pc, #40]	; (800e460 <mem_init+0x98>)
 800e436:	f240 221f 	movw	r2, #543	; 0x21f
 800e43a:	490a      	ldr	r1, [pc, #40]	; (800e464 <mem_init+0x9c>)
 800e43c:	480a      	ldr	r0, [pc, #40]	; (800e468 <mem_init+0xa0>)
 800e43e:	f00b f825 	bl	801948c <iprintf>
  }
}
 800e442:	bf00      	nop
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	2004aec8 	.word	0x2004aec8
 800e450:	2004bedc 	.word	0x2004bedc
 800e454:	2004bee0 	.word	0x2004bee0
 800e458:	2004bee8 	.word	0x2004bee8
 800e45c:	2004bee4 	.word	0x2004bee4
 800e460:	0801ad58 	.word	0x0801ad58
 800e464:	0801ae2c 	.word	0x0801ae2c
 800e468:	0801ada0 	.word	0x0801ada0

0800e46c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff fef3 	bl	800e260 <mem_to_ptr>
 800e47a:	4603      	mov	r3, r0
 800e47c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	881b      	ldrh	r3, [r3, #0]
 800e482:	4618      	mov	r0, r3
 800e484:	f7ff feda 	bl	800e23c <ptr_to_mem>
 800e488:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	885b      	ldrh	r3, [r3, #2]
 800e48e:	4618      	mov	r0, r3
 800e490:	f7ff fed4 	bl	800e23c <ptr_to_mem>
 800e494:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e49e:	d818      	bhi.n	800e4d2 <mem_link_valid+0x66>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	885b      	ldrh	r3, [r3, #2]
 800e4a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4a8:	d813      	bhi.n	800e4d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e4ae:	8afa      	ldrh	r2, [r7, #22]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d004      	beq.n	800e4be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	881b      	ldrh	r3, [r3, #0]
 800e4b8:	8afa      	ldrh	r2, [r7, #22]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d109      	bne.n	800e4d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e4be:	4b08      	ldr	r3, [pc, #32]	; (800e4e0 <mem_link_valid+0x74>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e4c2:	693a      	ldr	r2, [r7, #16]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d006      	beq.n	800e4d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	885b      	ldrh	r3, [r3, #2]
 800e4cc:	8afa      	ldrh	r2, [r7, #22]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d001      	beq.n	800e4d6 <mem_link_valid+0x6a>
    return 0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	e000      	b.n	800e4d8 <mem_link_valid+0x6c>
  }
  return 1;
 800e4d6:	2301      	movs	r3, #1
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3718      	adds	r7, #24
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	2004bee0 	.word	0x2004bee0

0800e4e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b088      	sub	sp, #32
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d070      	beq.n	800e5d4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f003 0303 	and.w	r3, r3, #3
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00d      	beq.n	800e518 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e4fc:	4b37      	ldr	r3, [pc, #220]	; (800e5dc <mem_free+0xf8>)
 800e4fe:	f240 2273 	movw	r2, #627	; 0x273
 800e502:	4937      	ldr	r1, [pc, #220]	; (800e5e0 <mem_free+0xfc>)
 800e504:	4837      	ldr	r0, [pc, #220]	; (800e5e4 <mem_free+0x100>)
 800e506:	f00a ffc1 	bl	801948c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e50a:	f00a fdc9 	bl	80190a0 <sys_arch_protect>
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f00a fdd3 	bl	80190bc <sys_arch_unprotect>
    return;
 800e516:	e05e      	b.n	800e5d6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3b08      	subs	r3, #8
 800e51c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e51e:	4b32      	ldr	r3, [pc, #200]	; (800e5e8 <mem_free+0x104>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	69fa      	ldr	r2, [r7, #28]
 800e524:	429a      	cmp	r2, r3
 800e526:	d306      	bcc.n	800e536 <mem_free+0x52>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f103 020c 	add.w	r2, r3, #12
 800e52e:	4b2f      	ldr	r3, [pc, #188]	; (800e5ec <mem_free+0x108>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	429a      	cmp	r2, r3
 800e534:	d90d      	bls.n	800e552 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e536:	4b29      	ldr	r3, [pc, #164]	; (800e5dc <mem_free+0xf8>)
 800e538:	f240 227f 	movw	r2, #639	; 0x27f
 800e53c:	492c      	ldr	r1, [pc, #176]	; (800e5f0 <mem_free+0x10c>)
 800e53e:	4829      	ldr	r0, [pc, #164]	; (800e5e4 <mem_free+0x100>)
 800e540:	f00a ffa4 	bl	801948c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e544:	f00a fdac 	bl	80190a0 <sys_arch_protect>
 800e548:	6138      	str	r0, [r7, #16]
 800e54a:	6938      	ldr	r0, [r7, #16]
 800e54c:	f00a fdb6 	bl	80190bc <sys_arch_unprotect>
    return;
 800e550:	e041      	b.n	800e5d6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e552:	4828      	ldr	r0, [pc, #160]	; (800e5f4 <mem_free+0x110>)
 800e554:	f00a fd68 	bl	8019028 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	791b      	ldrb	r3, [r3, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d110      	bne.n	800e582 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e560:	4b1e      	ldr	r3, [pc, #120]	; (800e5dc <mem_free+0xf8>)
 800e562:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e566:	4924      	ldr	r1, [pc, #144]	; (800e5f8 <mem_free+0x114>)
 800e568:	481e      	ldr	r0, [pc, #120]	; (800e5e4 <mem_free+0x100>)
 800e56a:	f00a ff8f 	bl	801948c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e56e:	4821      	ldr	r0, [pc, #132]	; (800e5f4 <mem_free+0x110>)
 800e570:	f00a fd69 	bl	8019046 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e574:	f00a fd94 	bl	80190a0 <sys_arch_protect>
 800e578:	6178      	str	r0, [r7, #20]
 800e57a:	6978      	ldr	r0, [r7, #20]
 800e57c:	f00a fd9e 	bl	80190bc <sys_arch_unprotect>
    return;
 800e580:	e029      	b.n	800e5d6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e582:	69f8      	ldr	r0, [r7, #28]
 800e584:	f7ff ff72 	bl	800e46c <mem_link_valid>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d110      	bne.n	800e5b0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e58e:	4b13      	ldr	r3, [pc, #76]	; (800e5dc <mem_free+0xf8>)
 800e590:	f240 2295 	movw	r2, #661	; 0x295
 800e594:	4919      	ldr	r1, [pc, #100]	; (800e5fc <mem_free+0x118>)
 800e596:	4813      	ldr	r0, [pc, #76]	; (800e5e4 <mem_free+0x100>)
 800e598:	f00a ff78 	bl	801948c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e59c:	4815      	ldr	r0, [pc, #84]	; (800e5f4 <mem_free+0x110>)
 800e59e:	f00a fd52 	bl	8019046 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e5a2:	f00a fd7d 	bl	80190a0 <sys_arch_protect>
 800e5a6:	61b8      	str	r0, [r7, #24]
 800e5a8:	69b8      	ldr	r0, [r7, #24]
 800e5aa:	f00a fd87 	bl	80190bc <sys_arch_unprotect>
    return;
 800e5ae:	e012      	b.n	800e5d6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e5b6:	4b12      	ldr	r3, [pc, #72]	; (800e600 <mem_free+0x11c>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	69fa      	ldr	r2, [r7, #28]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d202      	bcs.n	800e5c6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e5c0:	4a0f      	ldr	r2, [pc, #60]	; (800e600 <mem_free+0x11c>)
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e5c6:	69f8      	ldr	r0, [r7, #28]
 800e5c8:	f7ff fe5c 	bl	800e284 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e5cc:	4809      	ldr	r0, [pc, #36]	; (800e5f4 <mem_free+0x110>)
 800e5ce:	f00a fd3a 	bl	8019046 <sys_mutex_unlock>
 800e5d2:	e000      	b.n	800e5d6 <mem_free+0xf2>
    return;
 800e5d4:	bf00      	nop
}
 800e5d6:	3720      	adds	r7, #32
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	0801ad58 	.word	0x0801ad58
 800e5e0:	0801ae48 	.word	0x0801ae48
 800e5e4:	0801ada0 	.word	0x0801ada0
 800e5e8:	2004bedc 	.word	0x2004bedc
 800e5ec:	2004bee0 	.word	0x2004bee0
 800e5f0:	0801ae6c 	.word	0x0801ae6c
 800e5f4:	2004bee4 	.word	0x2004bee4
 800e5f8:	0801ae88 	.word	0x0801ae88
 800e5fc:	0801aeb0 	.word	0x0801aeb0
 800e600:	2004bee8 	.word	0x2004bee8

0800e604 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b088      	sub	sp, #32
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e610:	887b      	ldrh	r3, [r7, #2]
 800e612:	3303      	adds	r3, #3
 800e614:	b29b      	uxth	r3, r3
 800e616:	f023 0303 	bic.w	r3, r3, #3
 800e61a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e61c:	8bfb      	ldrh	r3, [r7, #30]
 800e61e:	2b0b      	cmp	r3, #11
 800e620:	d801      	bhi.n	800e626 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e622:	230c      	movs	r3, #12
 800e624:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e626:	8bfb      	ldrh	r3, [r7, #30]
 800e628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e62c:	d803      	bhi.n	800e636 <mem_trim+0x32>
 800e62e:	8bfa      	ldrh	r2, [r7, #30]
 800e630:	887b      	ldrh	r3, [r7, #2]
 800e632:	429a      	cmp	r2, r3
 800e634:	d201      	bcs.n	800e63a <mem_trim+0x36>
    return NULL;
 800e636:	2300      	movs	r3, #0
 800e638:	e0d8      	b.n	800e7ec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e63a:	4b6e      	ldr	r3, [pc, #440]	; (800e7f4 <mem_trim+0x1f0>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	429a      	cmp	r2, r3
 800e642:	d304      	bcc.n	800e64e <mem_trim+0x4a>
 800e644:	4b6c      	ldr	r3, [pc, #432]	; (800e7f8 <mem_trim+0x1f4>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d306      	bcc.n	800e65c <mem_trim+0x58>
 800e64e:	4b6b      	ldr	r3, [pc, #428]	; (800e7fc <mem_trim+0x1f8>)
 800e650:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e654:	496a      	ldr	r1, [pc, #424]	; (800e800 <mem_trim+0x1fc>)
 800e656:	486b      	ldr	r0, [pc, #428]	; (800e804 <mem_trim+0x200>)
 800e658:	f00a ff18 	bl	801948c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e65c:	4b65      	ldr	r3, [pc, #404]	; (800e7f4 <mem_trim+0x1f0>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	429a      	cmp	r2, r3
 800e664:	d304      	bcc.n	800e670 <mem_trim+0x6c>
 800e666:	4b64      	ldr	r3, [pc, #400]	; (800e7f8 <mem_trim+0x1f4>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d307      	bcc.n	800e680 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e670:	f00a fd16 	bl	80190a0 <sys_arch_protect>
 800e674:	60b8      	str	r0, [r7, #8]
 800e676:	68b8      	ldr	r0, [r7, #8]
 800e678:	f00a fd20 	bl	80190bc <sys_arch_unprotect>
    return rmem;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	e0b5      	b.n	800e7ec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	3b08      	subs	r3, #8
 800e684:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e686:	69b8      	ldr	r0, [r7, #24]
 800e688:	f7ff fdea 	bl	800e260 <mem_to_ptr>
 800e68c:	4603      	mov	r3, r0
 800e68e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	881a      	ldrh	r2, [r3, #0]
 800e694:	8afb      	ldrh	r3, [r7, #22]
 800e696:	1ad3      	subs	r3, r2, r3
 800e698:	b29b      	uxth	r3, r3
 800e69a:	3b08      	subs	r3, #8
 800e69c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e69e:	8bfa      	ldrh	r2, [r7, #30]
 800e6a0:	8abb      	ldrh	r3, [r7, #20]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d906      	bls.n	800e6b4 <mem_trim+0xb0>
 800e6a6:	4b55      	ldr	r3, [pc, #340]	; (800e7fc <mem_trim+0x1f8>)
 800e6a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e6ac:	4956      	ldr	r1, [pc, #344]	; (800e808 <mem_trim+0x204>)
 800e6ae:	4855      	ldr	r0, [pc, #340]	; (800e804 <mem_trim+0x200>)
 800e6b0:	f00a feec 	bl	801948c <iprintf>
  if (newsize > size) {
 800e6b4:	8bfa      	ldrh	r2, [r7, #30]
 800e6b6:	8abb      	ldrh	r3, [r7, #20]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d901      	bls.n	800e6c0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	e095      	b.n	800e7ec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e6c0:	8bfa      	ldrh	r2, [r7, #30]
 800e6c2:	8abb      	ldrh	r3, [r7, #20]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d101      	bne.n	800e6cc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	e08f      	b.n	800e7ec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e6cc:	484f      	ldr	r0, [pc, #316]	; (800e80c <mem_trim+0x208>)
 800e6ce:	f00a fcab 	bl	8019028 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	881b      	ldrh	r3, [r3, #0]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7ff fdb0 	bl	800e23c <ptr_to_mem>
 800e6dc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	791b      	ldrb	r3, [r3, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d13f      	bne.n	800e766 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6ee:	d106      	bne.n	800e6fe <mem_trim+0xfa>
 800e6f0:	4b42      	ldr	r3, [pc, #264]	; (800e7fc <mem_trim+0x1f8>)
 800e6f2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e6f6:	4946      	ldr	r1, [pc, #280]	; (800e810 <mem_trim+0x20c>)
 800e6f8:	4842      	ldr	r0, [pc, #264]	; (800e804 <mem_trim+0x200>)
 800e6fa:	f00a fec7 	bl	801948c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e704:	8afa      	ldrh	r2, [r7, #22]
 800e706:	8bfb      	ldrh	r3, [r7, #30]
 800e708:	4413      	add	r3, r2
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	3308      	adds	r3, #8
 800e70e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e710:	4b40      	ldr	r3, [pc, #256]	; (800e814 <mem_trim+0x210>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	693a      	ldr	r2, [r7, #16]
 800e716:	429a      	cmp	r2, r3
 800e718:	d106      	bne.n	800e728 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e71a:	89fb      	ldrh	r3, [r7, #14]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7ff fd8d 	bl	800e23c <ptr_to_mem>
 800e722:	4603      	mov	r3, r0
 800e724:	4a3b      	ldr	r2, [pc, #236]	; (800e814 <mem_trim+0x210>)
 800e726:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e728:	89fb      	ldrh	r3, [r7, #14]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff fd86 	bl	800e23c <ptr_to_mem>
 800e730:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	2200      	movs	r2, #0
 800e736:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	89ba      	ldrh	r2, [r7, #12]
 800e73c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	8afa      	ldrh	r2, [r7, #22]
 800e742:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	89fa      	ldrh	r2, [r7, #14]
 800e748:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	881b      	ldrh	r3, [r3, #0]
 800e74e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e752:	d047      	beq.n	800e7e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	881b      	ldrh	r3, [r3, #0]
 800e758:	4618      	mov	r0, r3
 800e75a:	f7ff fd6f 	bl	800e23c <ptr_to_mem>
 800e75e:	4602      	mov	r2, r0
 800e760:	89fb      	ldrh	r3, [r7, #14]
 800e762:	8053      	strh	r3, [r2, #2]
 800e764:	e03e      	b.n	800e7e4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e766:	8bfb      	ldrh	r3, [r7, #30]
 800e768:	f103 0214 	add.w	r2, r3, #20
 800e76c:	8abb      	ldrh	r3, [r7, #20]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d838      	bhi.n	800e7e4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e772:	8afa      	ldrh	r2, [r7, #22]
 800e774:	8bfb      	ldrh	r3, [r7, #30]
 800e776:	4413      	add	r3, r2
 800e778:	b29b      	uxth	r3, r3
 800e77a:	3308      	adds	r3, #8
 800e77c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	881b      	ldrh	r3, [r3, #0]
 800e782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e786:	d106      	bne.n	800e796 <mem_trim+0x192>
 800e788:	4b1c      	ldr	r3, [pc, #112]	; (800e7fc <mem_trim+0x1f8>)
 800e78a:	f240 3216 	movw	r2, #790	; 0x316
 800e78e:	4920      	ldr	r1, [pc, #128]	; (800e810 <mem_trim+0x20c>)
 800e790:	481c      	ldr	r0, [pc, #112]	; (800e804 <mem_trim+0x200>)
 800e792:	f00a fe7b 	bl	801948c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e796:	89fb      	ldrh	r3, [r7, #14]
 800e798:	4618      	mov	r0, r3
 800e79a:	f7ff fd4f 	bl	800e23c <ptr_to_mem>
 800e79e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e7a0:	4b1c      	ldr	r3, [pc, #112]	; (800e814 <mem_trim+0x210>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	693a      	ldr	r2, [r7, #16]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d202      	bcs.n	800e7b0 <mem_trim+0x1ac>
      lfree = mem2;
 800e7aa:	4a1a      	ldr	r2, [pc, #104]	; (800e814 <mem_trim+0x210>)
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	881a      	ldrh	r2, [r3, #0]
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	8afa      	ldrh	r2, [r7, #22]
 800e7c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	89fa      	ldrh	r2, [r7, #14]
 800e7c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	881b      	ldrh	r3, [r3, #0]
 800e7ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7d2:	d007      	beq.n	800e7e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	881b      	ldrh	r3, [r3, #0]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fd2f 	bl	800e23c <ptr_to_mem>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	89fb      	ldrh	r3, [r7, #14]
 800e7e2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e7e4:	4809      	ldr	r0, [pc, #36]	; (800e80c <mem_trim+0x208>)
 800e7e6:	f00a fc2e 	bl	8019046 <sys_mutex_unlock>
  return rmem;
 800e7ea:	687b      	ldr	r3, [r7, #4]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3720      	adds	r7, #32
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	2004bedc 	.word	0x2004bedc
 800e7f8:	2004bee0 	.word	0x2004bee0
 800e7fc:	0801ad58 	.word	0x0801ad58
 800e800:	0801aee4 	.word	0x0801aee4
 800e804:	0801ada0 	.word	0x0801ada0
 800e808:	0801aefc 	.word	0x0801aefc
 800e80c:	2004bee4 	.word	0x2004bee4
 800e810:	0801af1c 	.word	0x0801af1c
 800e814:	2004bee8 	.word	0x2004bee8

0800e818 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b088      	sub	sp, #32
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	4603      	mov	r3, r0
 800e820:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e822:	88fb      	ldrh	r3, [r7, #6]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <mem_malloc+0x14>
    return NULL;
 800e828:	2300      	movs	r3, #0
 800e82a:	e0e2      	b.n	800e9f2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e82c:	88fb      	ldrh	r3, [r7, #6]
 800e82e:	3303      	adds	r3, #3
 800e830:	b29b      	uxth	r3, r3
 800e832:	f023 0303 	bic.w	r3, r3, #3
 800e836:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e838:	8bbb      	ldrh	r3, [r7, #28]
 800e83a:	2b0b      	cmp	r3, #11
 800e83c:	d801      	bhi.n	800e842 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e83e:	230c      	movs	r3, #12
 800e840:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e842:	8bbb      	ldrh	r3, [r7, #28]
 800e844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e848:	d803      	bhi.n	800e852 <mem_malloc+0x3a>
 800e84a:	8bba      	ldrh	r2, [r7, #28]
 800e84c:	88fb      	ldrh	r3, [r7, #6]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d201      	bcs.n	800e856 <mem_malloc+0x3e>
    return NULL;
 800e852:	2300      	movs	r3, #0
 800e854:	e0cd      	b.n	800e9f2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e856:	4869      	ldr	r0, [pc, #420]	; (800e9fc <mem_malloc+0x1e4>)
 800e858:	f00a fbe6 	bl	8019028 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e85c:	4b68      	ldr	r3, [pc, #416]	; (800ea00 <mem_malloc+0x1e8>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff fcfd 	bl	800e260 <mem_to_ptr>
 800e866:	4603      	mov	r3, r0
 800e868:	83fb      	strh	r3, [r7, #30]
 800e86a:	e0b7      	b.n	800e9dc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e86c:	8bfb      	ldrh	r3, [r7, #30]
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff fce4 	bl	800e23c <ptr_to_mem>
 800e874:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	791b      	ldrb	r3, [r3, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f040 80a7 	bne.w	800e9ce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	881b      	ldrh	r3, [r3, #0]
 800e884:	461a      	mov	r2, r3
 800e886:	8bfb      	ldrh	r3, [r7, #30]
 800e888:	1ad3      	subs	r3, r2, r3
 800e88a:	f1a3 0208 	sub.w	r2, r3, #8
 800e88e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e890:	429a      	cmp	r2, r3
 800e892:	f0c0 809c 	bcc.w	800e9ce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	461a      	mov	r2, r3
 800e89c:	8bfb      	ldrh	r3, [r7, #30]
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	f1a3 0208 	sub.w	r2, r3, #8
 800e8a4:	8bbb      	ldrh	r3, [r7, #28]
 800e8a6:	3314      	adds	r3, #20
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d333      	bcc.n	800e914 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e8ac:	8bfa      	ldrh	r2, [r7, #30]
 800e8ae:	8bbb      	ldrh	r3, [r7, #28]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	3308      	adds	r3, #8
 800e8b6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e8b8:	8a7b      	ldrh	r3, [r7, #18]
 800e8ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8be:	d106      	bne.n	800e8ce <mem_malloc+0xb6>
 800e8c0:	4b50      	ldr	r3, [pc, #320]	; (800ea04 <mem_malloc+0x1ec>)
 800e8c2:	f240 3287 	movw	r2, #903	; 0x387
 800e8c6:	4950      	ldr	r1, [pc, #320]	; (800ea08 <mem_malloc+0x1f0>)
 800e8c8:	4850      	ldr	r0, [pc, #320]	; (800ea0c <mem_malloc+0x1f4>)
 800e8ca:	f00a fddf 	bl	801948c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e8ce:	8a7b      	ldrh	r3, [r7, #18]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7ff fcb3 	bl	800e23c <ptr_to_mem>
 800e8d6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	881a      	ldrh	r2, [r3, #0]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	8bfa      	ldrh	r2, [r7, #30]
 800e8ea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	8a7a      	ldrh	r2, [r7, #18]
 800e8f0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	881b      	ldrh	r3, [r3, #0]
 800e8fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e900:	d00b      	beq.n	800e91a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	881b      	ldrh	r3, [r3, #0]
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff fc98 	bl	800e23c <ptr_to_mem>
 800e90c:	4602      	mov	r2, r0
 800e90e:	8a7b      	ldrh	r3, [r7, #18]
 800e910:	8053      	strh	r3, [r2, #2]
 800e912:	e002      	b.n	800e91a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	2201      	movs	r2, #1
 800e918:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e91a:	4b39      	ldr	r3, [pc, #228]	; (800ea00 <mem_malloc+0x1e8>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	429a      	cmp	r2, r3
 800e922:	d127      	bne.n	800e974 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e924:	4b36      	ldr	r3, [pc, #216]	; (800ea00 <mem_malloc+0x1e8>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e92a:	e005      	b.n	800e938 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	881b      	ldrh	r3, [r3, #0]
 800e930:	4618      	mov	r0, r3
 800e932:	f7ff fc83 	bl	800e23c <ptr_to_mem>
 800e936:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	791b      	ldrb	r3, [r3, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d004      	beq.n	800e94a <mem_malloc+0x132>
 800e940:	4b33      	ldr	r3, [pc, #204]	; (800ea10 <mem_malloc+0x1f8>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	69ba      	ldr	r2, [r7, #24]
 800e946:	429a      	cmp	r2, r3
 800e948:	d1f0      	bne.n	800e92c <mem_malloc+0x114>
          }
          lfree = cur;
 800e94a:	4a2d      	ldr	r2, [pc, #180]	; (800ea00 <mem_malloc+0x1e8>)
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e950:	4b2b      	ldr	r3, [pc, #172]	; (800ea00 <mem_malloc+0x1e8>)
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	4b2e      	ldr	r3, [pc, #184]	; (800ea10 <mem_malloc+0x1f8>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d00b      	beq.n	800e974 <mem_malloc+0x15c>
 800e95c:	4b28      	ldr	r3, [pc, #160]	; (800ea00 <mem_malloc+0x1e8>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	791b      	ldrb	r3, [r3, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d006      	beq.n	800e974 <mem_malloc+0x15c>
 800e966:	4b27      	ldr	r3, [pc, #156]	; (800ea04 <mem_malloc+0x1ec>)
 800e968:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e96c:	4929      	ldr	r1, [pc, #164]	; (800ea14 <mem_malloc+0x1fc>)
 800e96e:	4827      	ldr	r0, [pc, #156]	; (800ea0c <mem_malloc+0x1f4>)
 800e970:	f00a fd8c 	bl	801948c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e974:	4821      	ldr	r0, [pc, #132]	; (800e9fc <mem_malloc+0x1e4>)
 800e976:	f00a fb66 	bl	8019046 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e97a:	8bba      	ldrh	r2, [r7, #28]
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	4413      	add	r3, r2
 800e980:	3308      	adds	r3, #8
 800e982:	4a23      	ldr	r2, [pc, #140]	; (800ea10 <mem_malloc+0x1f8>)
 800e984:	6812      	ldr	r2, [r2, #0]
 800e986:	4293      	cmp	r3, r2
 800e988:	d906      	bls.n	800e998 <mem_malloc+0x180>
 800e98a:	4b1e      	ldr	r3, [pc, #120]	; (800ea04 <mem_malloc+0x1ec>)
 800e98c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e990:	4921      	ldr	r1, [pc, #132]	; (800ea18 <mem_malloc+0x200>)
 800e992:	481e      	ldr	r0, [pc, #120]	; (800ea0c <mem_malloc+0x1f4>)
 800e994:	f00a fd7a 	bl	801948c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	f003 0303 	and.w	r3, r3, #3
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d006      	beq.n	800e9b0 <mem_malloc+0x198>
 800e9a2:	4b18      	ldr	r3, [pc, #96]	; (800ea04 <mem_malloc+0x1ec>)
 800e9a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e9a8:	491c      	ldr	r1, [pc, #112]	; (800ea1c <mem_malloc+0x204>)
 800e9aa:	4818      	ldr	r0, [pc, #96]	; (800ea0c <mem_malloc+0x1f4>)
 800e9ac:	f00a fd6e 	bl	801948c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	f003 0303 	and.w	r3, r3, #3
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d006      	beq.n	800e9c8 <mem_malloc+0x1b0>
 800e9ba:	4b12      	ldr	r3, [pc, #72]	; (800ea04 <mem_malloc+0x1ec>)
 800e9bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e9c0:	4917      	ldr	r1, [pc, #92]	; (800ea20 <mem_malloc+0x208>)
 800e9c2:	4812      	ldr	r0, [pc, #72]	; (800ea0c <mem_malloc+0x1f4>)
 800e9c4:	f00a fd62 	bl	801948c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	e011      	b.n	800e9f2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e9ce:	8bfb      	ldrh	r3, [r7, #30]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff fc33 	bl	800e23c <ptr_to_mem>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	881b      	ldrh	r3, [r3, #0]
 800e9da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e9dc:	8bfa      	ldrh	r2, [r7, #30]
 800e9de:	8bbb      	ldrh	r3, [r7, #28]
 800e9e0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	f4ff af41 	bcc.w	800e86c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e9ea:	4804      	ldr	r0, [pc, #16]	; (800e9fc <mem_malloc+0x1e4>)
 800e9ec:	f00a fb2b 	bl	8019046 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e9f0:	2300      	movs	r3, #0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3720      	adds	r7, #32
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	2004bee4 	.word	0x2004bee4
 800ea00:	2004bee8 	.word	0x2004bee8
 800ea04:	0801ad58 	.word	0x0801ad58
 800ea08:	0801af1c 	.word	0x0801af1c
 800ea0c:	0801ada0 	.word	0x0801ada0
 800ea10:	2004bee0 	.word	0x2004bee0
 800ea14:	0801af30 	.word	0x0801af30
 800ea18:	0801af4c 	.word	0x0801af4c
 800ea1c:	0801af7c 	.word	0x0801af7c
 800ea20:	0801afac 	.word	0x0801afac

0800ea24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	689b      	ldr	r3, [r3, #8]
 800ea30:	2200      	movs	r2, #0
 800ea32:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	3303      	adds	r3, #3
 800ea3a:	f023 0303 	bic.w	r3, r3, #3
 800ea3e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ea40:	2300      	movs	r3, #0
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	e011      	b.n	800ea6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	68ba      	ldr	r2, [r7, #8]
 800ea56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	881b      	ldrh	r3, [r3, #0]
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	4413      	add	r3, r2
 800ea62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	3301      	adds	r3, #1
 800ea68:	60fb      	str	r3, [r7, #12]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	885b      	ldrh	r3, [r3, #2]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	4293      	cmp	r3, r2
 800ea74:	dbe7      	blt.n	800ea46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ea76:	bf00      	nop
 800ea78:	bf00      	nop
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	80fb      	strh	r3, [r7, #6]
 800ea8e:	e009      	b.n	800eaa4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ea90:	88fb      	ldrh	r3, [r7, #6]
 800ea92:	4a08      	ldr	r2, [pc, #32]	; (800eab4 <memp_init+0x30>)
 800ea94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7ff ffc3 	bl	800ea24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ea9e:	88fb      	ldrh	r3, [r7, #6]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	80fb      	strh	r3, [r7, #6]
 800eaa4:	88fb      	ldrh	r3, [r7, #6]
 800eaa6:	2b0c      	cmp	r3, #12
 800eaa8:	d9f2      	bls.n	800ea90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800eaaa:	bf00      	nop
 800eaac:	bf00      	nop
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	0801d80c 	.word	0x0801d80c

0800eab8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800eac0:	f00a faee 	bl	80190a0 <sys_arch_protect>
 800eac4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d015      	beq.n	800eb00 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	6812      	ldr	r2, [r2, #0]
 800eadc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	f003 0303 	and.w	r3, r3, #3
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d006      	beq.n	800eaf6 <do_memp_malloc_pool+0x3e>
 800eae8:	4b09      	ldr	r3, [pc, #36]	; (800eb10 <do_memp_malloc_pool+0x58>)
 800eaea:	f44f 728c 	mov.w	r2, #280	; 0x118
 800eaee:	4909      	ldr	r1, [pc, #36]	; (800eb14 <do_memp_malloc_pool+0x5c>)
 800eaf0:	4809      	ldr	r0, [pc, #36]	; (800eb18 <do_memp_malloc_pool+0x60>)
 800eaf2:	f00a fccb 	bl	801948c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f00a fae0 	bl	80190bc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	e003      	b.n	800eb08 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f00a fadb 	bl	80190bc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	0801afd0 	.word	0x0801afd0
 800eb14:	0801b000 	.word	0x0801b000
 800eb18:	0801b024 	.word	0x0801b024

0800eb1c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <memp_malloc_pool+0x1c>
 800eb2a:	4b0a      	ldr	r3, [pc, #40]	; (800eb54 <memp_malloc_pool+0x38>)
 800eb2c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800eb30:	4909      	ldr	r1, [pc, #36]	; (800eb58 <memp_malloc_pool+0x3c>)
 800eb32:	480a      	ldr	r0, [pc, #40]	; (800eb5c <memp_malloc_pool+0x40>)
 800eb34:	f00a fcaa 	bl	801948c <iprintf>
  if (desc == NULL) {
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d101      	bne.n	800eb42 <memp_malloc_pool+0x26>
    return NULL;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e003      	b.n	800eb4a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7ff ffb8 	bl	800eab8 <do_memp_malloc_pool>
 800eb48:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	0801afd0 	.word	0x0801afd0
 800eb58:	0801b04c 	.word	0x0801b04c
 800eb5c:	0801b024 	.word	0x0801b024

0800eb60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	4603      	mov	r3, r0
 800eb68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800eb6a:	79fb      	ldrb	r3, [r7, #7]
 800eb6c:	2b0c      	cmp	r3, #12
 800eb6e:	d908      	bls.n	800eb82 <memp_malloc+0x22>
 800eb70:	4b0a      	ldr	r3, [pc, #40]	; (800eb9c <memp_malloc+0x3c>)
 800eb72:	f240 1257 	movw	r2, #343	; 0x157
 800eb76:	490a      	ldr	r1, [pc, #40]	; (800eba0 <memp_malloc+0x40>)
 800eb78:	480a      	ldr	r0, [pc, #40]	; (800eba4 <memp_malloc+0x44>)
 800eb7a:	f00a fc87 	bl	801948c <iprintf>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	e008      	b.n	800eb94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800eb82:	79fb      	ldrb	r3, [r7, #7]
 800eb84:	4a08      	ldr	r2, [pc, #32]	; (800eba8 <memp_malloc+0x48>)
 800eb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7ff ff94 	bl	800eab8 <do_memp_malloc_pool>
 800eb90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800eb92:	68fb      	ldr	r3, [r7, #12]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3710      	adds	r7, #16
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	0801afd0 	.word	0x0801afd0
 800eba0:	0801b060 	.word	0x0801b060
 800eba4:	0801b024 	.word	0x0801b024
 800eba8:	0801d80c 	.word	0x0801d80c

0800ebac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	f003 0303 	and.w	r3, r3, #3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d006      	beq.n	800ebce <do_memp_free_pool+0x22>
 800ebc0:	4b0d      	ldr	r3, [pc, #52]	; (800ebf8 <do_memp_free_pool+0x4c>)
 800ebc2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ebc6:	490d      	ldr	r1, [pc, #52]	; (800ebfc <do_memp_free_pool+0x50>)
 800ebc8:	480d      	ldr	r0, [pc, #52]	; (800ec00 <do_memp_free_pool+0x54>)
 800ebca:	f00a fc5f 	bl	801948c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ebd2:	f00a fa65 	bl	80190a0 <sys_arch_protect>
 800ebd6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	689b      	ldr	r3, [r3, #8]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ebea:	68b8      	ldr	r0, [r7, #8]
 800ebec:	f00a fa66 	bl	80190bc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ebf0:	bf00      	nop
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	0801afd0 	.word	0x0801afd0
 800ebfc:	0801b080 	.word	0x0801b080
 800ec00:	0801b024 	.word	0x0801b024

0800ec04 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d106      	bne.n	800ec22 <memp_free_pool+0x1e>
 800ec14:	4b0a      	ldr	r3, [pc, #40]	; (800ec40 <memp_free_pool+0x3c>)
 800ec16:	f240 1295 	movw	r2, #405	; 0x195
 800ec1a:	490a      	ldr	r1, [pc, #40]	; (800ec44 <memp_free_pool+0x40>)
 800ec1c:	480a      	ldr	r0, [pc, #40]	; (800ec48 <memp_free_pool+0x44>)
 800ec1e:	f00a fc35 	bl	801948c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d007      	beq.n	800ec38 <memp_free_pool+0x34>
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d004      	beq.n	800ec38 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ec2e:	6839      	ldr	r1, [r7, #0]
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f7ff ffbb 	bl	800ebac <do_memp_free_pool>
 800ec36:	e000      	b.n	800ec3a <memp_free_pool+0x36>
    return;
 800ec38:	bf00      	nop
}
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	0801afd0 	.word	0x0801afd0
 800ec44:	0801b04c 	.word	0x0801b04c
 800ec48:	0801b024 	.word	0x0801b024

0800ec4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	4603      	mov	r3, r0
 800ec54:	6039      	str	r1, [r7, #0]
 800ec56:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	2b0c      	cmp	r3, #12
 800ec5c:	d907      	bls.n	800ec6e <memp_free+0x22>
 800ec5e:	4b0c      	ldr	r3, [pc, #48]	; (800ec90 <memp_free+0x44>)
 800ec60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ec64:	490b      	ldr	r1, [pc, #44]	; (800ec94 <memp_free+0x48>)
 800ec66:	480c      	ldr	r0, [pc, #48]	; (800ec98 <memp_free+0x4c>)
 800ec68:	f00a fc10 	bl	801948c <iprintf>
 800ec6c:	e00c      	b.n	800ec88 <memp_free+0x3c>

  if (mem == NULL) {
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d008      	beq.n	800ec86 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ec74:	79fb      	ldrb	r3, [r7, #7]
 800ec76:	4a09      	ldr	r2, [pc, #36]	; (800ec9c <memp_free+0x50>)
 800ec78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec7c:	6839      	ldr	r1, [r7, #0]
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7ff ff94 	bl	800ebac <do_memp_free_pool>
 800ec84:	e000      	b.n	800ec88 <memp_free+0x3c>
    return;
 800ec86:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	0801afd0 	.word	0x0801afd0
 800ec94:	0801b0a0 	.word	0x0801b0a0
 800ec98:	0801b024 	.word	0x0801b024
 800ec9c:	0801d80c 	.word	0x0801d80c

0800eca0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800eca0:	b480      	push	{r7}
 800eca2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800eca4:	bf00      	nop
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
	...

0800ecb0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
 800ecbc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d108      	bne.n	800ecd6 <netif_add+0x26>
 800ecc4:	4b57      	ldr	r3, [pc, #348]	; (800ee24 <netif_add+0x174>)
 800ecc6:	f240 1227 	movw	r2, #295	; 0x127
 800ecca:	4957      	ldr	r1, [pc, #348]	; (800ee28 <netif_add+0x178>)
 800eccc:	4857      	ldr	r0, [pc, #348]	; (800ee2c <netif_add+0x17c>)
 800ecce:	f00a fbdd 	bl	801948c <iprintf>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	e0a2      	b.n	800ee1c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ecd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d108      	bne.n	800ecee <netif_add+0x3e>
 800ecdc:	4b51      	ldr	r3, [pc, #324]	; (800ee24 <netif_add+0x174>)
 800ecde:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ece2:	4953      	ldr	r1, [pc, #332]	; (800ee30 <netif_add+0x180>)
 800ece4:	4851      	ldr	r0, [pc, #324]	; (800ee2c <netif_add+0x17c>)
 800ece6:	f00a fbd1 	bl	801948c <iprintf>
 800ecea:	2300      	movs	r3, #0
 800ecec:	e096      	b.n	800ee1c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ecf4:	4b4f      	ldr	r3, [pc, #316]	; (800ee34 <netif_add+0x184>)
 800ecf6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d101      	bne.n	800ed02 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ecfe:	4b4d      	ldr	r3, [pc, #308]	; (800ee34 <netif_add+0x184>)
 800ed00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d101      	bne.n	800ed0c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ed08:	4b4a      	ldr	r3, [pc, #296]	; (800ee34 <netif_add+0x184>)
 800ed0a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2200      	movs	r2, #0
 800ed16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	4a45      	ldr	r2, [pc, #276]	; (800ee38 <netif_add+0x188>)
 800ed22:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2200      	movs	r2, #0
 800ed28:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2200      	movs	r2, #0
 800ed36:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6a3a      	ldr	r2, [r7, #32]
 800ed3c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ed3e:	4b3f      	ldr	r3, [pc, #252]	; (800ee3c <netif_add+0x18c>)
 800ed40:	781a      	ldrb	r2, [r3, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed4c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	68b9      	ldr	r1, [r7, #8]
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f000 f913 	bl	800ef80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	4798      	blx	r3
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <netif_add+0xba>
    return NULL;
 800ed66:	2300      	movs	r3, #0
 800ed68:	e058      	b.n	800ee1c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed70:	2bff      	cmp	r3, #255	; 0xff
 800ed72:	d103      	bne.n	800ed7c <netif_add+0xcc>
        netif->num = 0;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ed80:	4b2f      	ldr	r3, [pc, #188]	; (800ee40 <netif_add+0x190>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	617b      	str	r3, [r7, #20]
 800ed86:	e02b      	b.n	800ede0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ed88:	697a      	ldr	r2, [r7, #20]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d106      	bne.n	800ed9e <netif_add+0xee>
 800ed90:	4b24      	ldr	r3, [pc, #144]	; (800ee24 <netif_add+0x174>)
 800ed92:	f240 128b 	movw	r2, #395	; 0x18b
 800ed96:	492b      	ldr	r1, [pc, #172]	; (800ee44 <netif_add+0x194>)
 800ed98:	4824      	ldr	r0, [pc, #144]	; (800ee2c <netif_add+0x17c>)
 800ed9a:	f00a fb77 	bl	801948c <iprintf>
        num_netifs++;
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	3301      	adds	r3, #1
 800eda2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	2bff      	cmp	r3, #255	; 0xff
 800eda8:	dd06      	ble.n	800edb8 <netif_add+0x108>
 800edaa:	4b1e      	ldr	r3, [pc, #120]	; (800ee24 <netif_add+0x174>)
 800edac:	f240 128d 	movw	r2, #397	; 0x18d
 800edb0:	4925      	ldr	r1, [pc, #148]	; (800ee48 <netif_add+0x198>)
 800edb2:	481e      	ldr	r0, [pc, #120]	; (800ee2c <netif_add+0x17c>)
 800edb4:	f00a fb6a 	bl	801948c <iprintf>
        if (netif2->num == netif->num) {
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d108      	bne.n	800edda <netif_add+0x12a>
          netif->num++;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800edce:	3301      	adds	r3, #1
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800edd8:	e005      	b.n	800ede6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	617b      	str	r3, [r7, #20]
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1d0      	bne.n	800ed88 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d1be      	bne.n	800ed6a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800edf2:	2bfe      	cmp	r3, #254	; 0xfe
 800edf4:	d103      	bne.n	800edfe <netif_add+0x14e>
    netif_num = 0;
 800edf6:	4b11      	ldr	r3, [pc, #68]	; (800ee3c <netif_add+0x18c>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	701a      	strb	r2, [r3, #0]
 800edfc:	e006      	b.n	800ee0c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee04:	3301      	adds	r3, #1
 800ee06:	b2da      	uxtb	r2, r3
 800ee08:	4b0c      	ldr	r3, [pc, #48]	; (800ee3c <netif_add+0x18c>)
 800ee0a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ee0c:	4b0c      	ldr	r3, [pc, #48]	; (800ee40 <netif_add+0x190>)
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ee14:	4a0a      	ldr	r2, [pc, #40]	; (800ee40 <netif_add+0x190>)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3718      	adds	r7, #24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	0801b0bc 	.word	0x0801b0bc
 800ee28:	0801b150 	.word	0x0801b150
 800ee2c:	0801b10c 	.word	0x0801b10c
 800ee30:	0801b16c 	.word	0x0801b16c
 800ee34:	0801d880 	.word	0x0801d880
 800ee38:	0800f25b 	.word	0x0800f25b
 800ee3c:	2004efc0 	.word	0x2004efc0
 800ee40:	2004efb8 	.word	0x2004efb8
 800ee44:	0801b190 	.word	0x0801b190
 800ee48:	0801b1a4 	.word	0x0801b1a4

0800ee4c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ee56:	6839      	ldr	r1, [r7, #0]
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f002 fe4f 	bl	8011afc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ee5e:	6839      	ldr	r1, [r7, #0]
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f007 fcbf 	bl	80167e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ee66:	bf00      	nop
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
	...

0800ee70 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b086      	sub	sp, #24
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d106      	bne.n	800ee90 <netif_do_set_ipaddr+0x20>
 800ee82:	4b1d      	ldr	r3, [pc, #116]	; (800eef8 <netif_do_set_ipaddr+0x88>)
 800ee84:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ee88:	491c      	ldr	r1, [pc, #112]	; (800eefc <netif_do_set_ipaddr+0x8c>)
 800ee8a:	481d      	ldr	r0, [pc, #116]	; (800ef00 <netif_do_set_ipaddr+0x90>)
 800ee8c:	f00a fafe 	bl	801948c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d106      	bne.n	800eea4 <netif_do_set_ipaddr+0x34>
 800ee96:	4b18      	ldr	r3, [pc, #96]	; (800eef8 <netif_do_set_ipaddr+0x88>)
 800ee98:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ee9c:	4917      	ldr	r1, [pc, #92]	; (800eefc <netif_do_set_ipaddr+0x8c>)
 800ee9e:	4818      	ldr	r0, [pc, #96]	; (800ef00 <netif_do_set_ipaddr+0x90>)
 800eea0:	f00a faf4 	bl	801948c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	3304      	adds	r3, #4
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d01c      	beq.n	800eeec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	3304      	adds	r3, #4
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800eec2:	f107 0314 	add.w	r3, r7, #20
 800eec6:	4619      	mov	r1, r3
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7ff ffbf 	bl	800ee4c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d002      	beq.n	800eeda <netif_do_set_ipaddr+0x6a>
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	e000      	b.n	800eedc <netif_do_set_ipaddr+0x6c>
 800eeda:	2300      	movs	r3, #0
 800eedc:	68fa      	ldr	r2, [r7, #12]
 800eede:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800eee0:	2101      	movs	r1, #1
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f000 f8d2 	bl	800f08c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800eee8:	2301      	movs	r3, #1
 800eeea:	e000      	b.n	800eeee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3718      	adds	r7, #24
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	0801b0bc 	.word	0x0801b0bc
 800eefc:	0801b1d4 	.word	0x0801b1d4
 800ef00:	0801b10c 	.word	0x0801b10c

0800ef04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b085      	sub	sp, #20
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	3308      	adds	r3, #8
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d00a      	beq.n	800ef34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d002      	beq.n	800ef2a <netif_do_set_netmask+0x26>
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	e000      	b.n	800ef2c <netif_do_set_netmask+0x28>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ef30:	2301      	movs	r3, #1
 800ef32:	e000      	b.n	800ef36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ef42:	b480      	push	{r7}
 800ef44:	b085      	sub	sp, #20
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	60f8      	str	r0, [r7, #12]
 800ef4a:	60b9      	str	r1, [r7, #8]
 800ef4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	330c      	adds	r3, #12
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d00a      	beq.n	800ef72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d002      	beq.n	800ef68 <netif_do_set_gw+0x26>
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	e000      	b.n	800ef6a <netif_do_set_gw+0x28>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ef6e:	2301      	movs	r3, #1
 800ef70:	e000      	b.n	800ef74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ef72:	2300      	movs	r3, #0
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3714      	adds	r7, #20
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b088      	sub	sp, #32
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
 800ef8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ef92:	2300      	movs	r3, #0
 800ef94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d101      	bne.n	800efa0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ef9c:	4b1c      	ldr	r3, [pc, #112]	; (800f010 <netif_set_addr+0x90>)
 800ef9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800efa6:	4b1a      	ldr	r3, [pc, #104]	; (800f010 <netif_set_addr+0x90>)
 800efa8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d101      	bne.n	800efb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800efb0:	4b17      	ldr	r3, [pc, #92]	; (800f010 <netif_set_addr+0x90>)
 800efb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d003      	beq.n	800efc2 <netif_set_addr+0x42>
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d101      	bne.n	800efc6 <netif_set_addr+0x46>
 800efc2:	2301      	movs	r3, #1
 800efc4:	e000      	b.n	800efc8 <netif_set_addr+0x48>
 800efc6:	2300      	movs	r3, #0
 800efc8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d006      	beq.n	800efde <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800efd0:	f107 0310 	add.w	r3, r7, #16
 800efd4:	461a      	mov	r2, r3
 800efd6:	68b9      	ldr	r1, [r7, #8]
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	f7ff ff49 	bl	800ee70 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800efde:	69fa      	ldr	r2, [r7, #28]
 800efe0:	6879      	ldr	r1, [r7, #4]
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f7ff ff8e 	bl	800ef04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800efe8:	69ba      	ldr	r2, [r7, #24]
 800efea:	6839      	ldr	r1, [r7, #0]
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f7ff ffa8 	bl	800ef42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d106      	bne.n	800f006 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800eff8:	f107 0310 	add.w	r3, r7, #16
 800effc:	461a      	mov	r2, r3
 800effe:	68b9      	ldr	r1, [r7, #8]
 800f000:	68f8      	ldr	r0, [r7, #12]
 800f002:	f7ff ff35 	bl	800ee70 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f006:	bf00      	nop
 800f008:	3720      	adds	r7, #32
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	0801d880 	.word	0x0801d880

0800f014 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f01c:	4a04      	ldr	r2, [pc, #16]	; (800f030 <netif_set_default+0x1c>)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f022:	bf00      	nop
 800f024:	370c      	adds	r7, #12
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	2004efbc 	.word	0x2004efbc

0800f034 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d107      	bne.n	800f052 <netif_set_up+0x1e>
 800f042:	4b0f      	ldr	r3, [pc, #60]	; (800f080 <netif_set_up+0x4c>)
 800f044:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f048:	490e      	ldr	r1, [pc, #56]	; (800f084 <netif_set_up+0x50>)
 800f04a:	480f      	ldr	r0, [pc, #60]	; (800f088 <netif_set_up+0x54>)
 800f04c:	f00a fa1e 	bl	801948c <iprintf>
 800f050:	e013      	b.n	800f07a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f058:	f003 0301 	and.w	r3, r3, #1
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d10c      	bne.n	800f07a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f066:	f043 0301 	orr.w	r3, r3, #1
 800f06a:	b2da      	uxtb	r2, r3
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f072:	2103      	movs	r1, #3
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 f809 	bl	800f08c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	0801b0bc 	.word	0x0801b0bc
 800f084:	0801b244 	.word	0x0801b244
 800f088:	0801b10c 	.word	0x0801b10c

0800f08c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	460b      	mov	r3, r1
 800f096:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d106      	bne.n	800f0ac <netif_issue_reports+0x20>
 800f09e:	4b18      	ldr	r3, [pc, #96]	; (800f100 <netif_issue_reports+0x74>)
 800f0a0:	f240 326d 	movw	r2, #877	; 0x36d
 800f0a4:	4917      	ldr	r1, [pc, #92]	; (800f104 <netif_issue_reports+0x78>)
 800f0a6:	4818      	ldr	r0, [pc, #96]	; (800f108 <netif_issue_reports+0x7c>)
 800f0a8:	f00a f9f0 	bl	801948c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0b2:	f003 0304 	and.w	r3, r3, #4
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d01e      	beq.n	800f0f8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0c0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d017      	beq.n	800f0f8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f0c8:	78fb      	ldrb	r3, [r7, #3]
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d013      	beq.n	800f0fa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d00e      	beq.n	800f0fa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0e2:	f003 0308 	and.w	r3, r3, #8
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d007      	beq.n	800f0fa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	3304      	adds	r3, #4
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f008 fae1 	bl	80176b8 <etharp_request>
 800f0f6:	e000      	b.n	800f0fa <netif_issue_reports+0x6e>
    return;
 800f0f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	0801b0bc 	.word	0x0801b0bc
 800f104:	0801b260 	.word	0x0801b260
 800f108:	0801b10c 	.word	0x0801b10c

0800f10c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d107      	bne.n	800f12a <netif_set_down+0x1e>
 800f11a:	4b12      	ldr	r3, [pc, #72]	; (800f164 <netif_set_down+0x58>)
 800f11c:	f240 329b 	movw	r2, #923	; 0x39b
 800f120:	4911      	ldr	r1, [pc, #68]	; (800f168 <netif_set_down+0x5c>)
 800f122:	4812      	ldr	r0, [pc, #72]	; (800f16c <netif_set_down+0x60>)
 800f124:	f00a f9b2 	bl	801948c <iprintf>
 800f128:	e019      	b.n	800f15e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f130:	f003 0301 	and.w	r3, r3, #1
 800f134:	2b00      	cmp	r3, #0
 800f136:	d012      	beq.n	800f15e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f13e:	f023 0301 	bic.w	r3, r3, #1
 800f142:	b2da      	uxtb	r2, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f150:	f003 0308 	and.w	r3, r3, #8
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f007 fe6b 	bl	8016e34 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f15e:	3708      	adds	r7, #8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	0801b0bc 	.word	0x0801b0bc
 800f168:	0801b284 	.word	0x0801b284
 800f16c:	0801b10c 	.word	0x0801b10c

0800f170 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d107      	bne.n	800f18e <netif_set_link_up+0x1e>
 800f17e:	4b13      	ldr	r3, [pc, #76]	; (800f1cc <netif_set_link_up+0x5c>)
 800f180:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800f184:	4912      	ldr	r1, [pc, #72]	; (800f1d0 <netif_set_link_up+0x60>)
 800f186:	4813      	ldr	r0, [pc, #76]	; (800f1d4 <netif_set_link_up+0x64>)
 800f188:	f00a f980 	bl	801948c <iprintf>
 800f18c:	e01b      	b.n	800f1c6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f194:	f003 0304 	and.w	r3, r3, #4
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d114      	bne.n	800f1c6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1a2:	f043 0304 	orr.w	r3, r3, #4
 800f1a6:	b2da      	uxtb	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f1ae:	2103      	movs	r1, #3
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7ff ff6b 	bl	800f08c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	69db      	ldr	r3, [r3, #28]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d003      	beq.n	800f1c6 <netif_set_link_up+0x56>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	69db      	ldr	r3, [r3, #28]
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	0801b0bc 	.word	0x0801b0bc
 800f1d0:	0801b2a4 	.word	0x0801b2a4
 800f1d4:	0801b10c 	.word	0x0801b10c

0800f1d8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d107      	bne.n	800f1f6 <netif_set_link_down+0x1e>
 800f1e6:	4b11      	ldr	r3, [pc, #68]	; (800f22c <netif_set_link_down+0x54>)
 800f1e8:	f240 4206 	movw	r2, #1030	; 0x406
 800f1ec:	4910      	ldr	r1, [pc, #64]	; (800f230 <netif_set_link_down+0x58>)
 800f1ee:	4811      	ldr	r0, [pc, #68]	; (800f234 <netif_set_link_down+0x5c>)
 800f1f0:	f00a f94c 	bl	801948c <iprintf>
 800f1f4:	e017      	b.n	800f226 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1fc:	f003 0304 	and.w	r3, r3, #4
 800f200:	2b00      	cmp	r3, #0
 800f202:	d010      	beq.n	800f226 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f20a:	f023 0304 	bic.w	r3, r3, #4
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	69db      	ldr	r3, [r3, #28]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d003      	beq.n	800f226 <netif_set_link_down+0x4e>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	69db      	ldr	r3, [r3, #28]
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}
 800f22c:	0801b0bc 	.word	0x0801b0bc
 800f230:	0801b2c8 	.word	0x0801b2c8
 800f234:	0801b10c 	.word	0x0801b10c

0800f238 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d002      	beq.n	800f24e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	683a      	ldr	r2, [r7, #0]
 800f24c:	61da      	str	r2, [r3, #28]
  }
}
 800f24e:	bf00      	nop
 800f250:	370c      	adds	r7, #12
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr

0800f25a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f25a:	b480      	push	{r7}
 800f25c:	b085      	sub	sp, #20
 800f25e:	af00      	add	r7, sp, #0
 800f260:	60f8      	str	r0, [r7, #12]
 800f262:	60b9      	str	r1, [r7, #8]
 800f264:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f266:	f06f 030b 	mvn.w	r3, #11
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr
	...

0800f278 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	4603      	mov	r3, r0
 800f280:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f282:	79fb      	ldrb	r3, [r7, #7]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d013      	beq.n	800f2b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f288:	4b0d      	ldr	r3, [pc, #52]	; (800f2c0 <netif_get_by_index+0x48>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	60fb      	str	r3, [r7, #12]
 800f28e:	e00c      	b.n	800f2aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f296:	3301      	adds	r3, #1
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	79fa      	ldrb	r2, [r7, #7]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d101      	bne.n	800f2a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	e006      	b.n	800f2b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	60fb      	str	r3, [r7, #12]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d1ef      	bne.n	800f290 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3714      	adds	r7, #20
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	2004efb8 	.word	0x2004efb8

0800f2c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f2ca:	f009 fee9 	bl	80190a0 <sys_arch_protect>
 800f2ce:	6038      	str	r0, [r7, #0]
 800f2d0:	4b0d      	ldr	r3, [pc, #52]	; (800f308 <pbuf_free_ooseq+0x44>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	701a      	strb	r2, [r3, #0]
 800f2d6:	6838      	ldr	r0, [r7, #0]
 800f2d8:	f009 fef0 	bl	80190bc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f2dc:	4b0b      	ldr	r3, [pc, #44]	; (800f30c <pbuf_free_ooseq+0x48>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	607b      	str	r3, [r7, #4]
 800f2e2:	e00a      	b.n	800f2fa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d003      	beq.n	800f2f4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f002 fc43 	bl	8011b78 <tcp_free_ooseq>
      return;
 800f2f2:	e005      	b.n	800f300 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	607b      	str	r3, [r7, #4]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1f1      	bne.n	800f2e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	2004efc1 	.word	0x2004efc1
 800f30c:	2004efd0 	.word	0x2004efd0

0800f310 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f318:	f7ff ffd4 	bl	800f2c4 <pbuf_free_ooseq>
}
 800f31c:	bf00      	nop
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f32a:	f009 feb9 	bl	80190a0 <sys_arch_protect>
 800f32e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f330:	4b0f      	ldr	r3, [pc, #60]	; (800f370 <pbuf_pool_is_empty+0x4c>)
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f336:	4b0e      	ldr	r3, [pc, #56]	; (800f370 <pbuf_pool_is_empty+0x4c>)
 800f338:	2201      	movs	r2, #1
 800f33a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f009 febd 	bl	80190bc <sys_arch_unprotect>

  if (!queued) {
 800f342:	78fb      	ldrb	r3, [r7, #3]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d10f      	bne.n	800f368 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f348:	2100      	movs	r1, #0
 800f34a:	480a      	ldr	r0, [pc, #40]	; (800f374 <pbuf_pool_is_empty+0x50>)
 800f34c:	f7fe fe90 	bl	800e070 <tcpip_try_callback>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d008      	beq.n	800f368 <pbuf_pool_is_empty+0x44>
 800f356:	f009 fea3 	bl	80190a0 <sys_arch_protect>
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	4b04      	ldr	r3, [pc, #16]	; (800f370 <pbuf_pool_is_empty+0x4c>)
 800f35e:	2200      	movs	r2, #0
 800f360:	701a      	strb	r2, [r3, #0]
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f009 feaa 	bl	80190bc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f368:	bf00      	nop
 800f36a:	3708      	adds	r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	2004efc1 	.word	0x2004efc1
 800f374:	0800f311 	.word	0x0800f311

0800f378 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f378:	b480      	push	{r7}
 800f37a:	b085      	sub	sp, #20
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	4611      	mov	r1, r2
 800f384:	461a      	mov	r2, r3
 800f386:	460b      	mov	r3, r1
 800f388:	80fb      	strh	r3, [r7, #6]
 800f38a:	4613      	mov	r3, r2
 800f38c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2200      	movs	r2, #0
 800f392:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	88fa      	ldrh	r2, [r7, #6]
 800f39e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	88ba      	ldrh	r2, [r7, #4]
 800f3a4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f3a6:	8b3b      	ldrh	r3, [r7, #24]
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	7f3a      	ldrb	r2, [r7, #28]
 800f3b2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	73da      	strb	r2, [r3, #15]
}
 800f3c0:	bf00      	nop
 800f3c2:	3714      	adds	r7, #20
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b08c      	sub	sp, #48	; 0x30
 800f3d0:	af02      	add	r7, sp, #8
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	71fb      	strb	r3, [r7, #7]
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	80bb      	strh	r3, [r7, #4]
 800f3da:	4613      	mov	r3, r2
 800f3dc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f3de:	79fb      	ldrb	r3, [r7, #7]
 800f3e0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f3e2:	887b      	ldrh	r3, [r7, #2]
 800f3e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f3e8:	d07f      	beq.n	800f4ea <pbuf_alloc+0x11e>
 800f3ea:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f3ee:	f300 80c8 	bgt.w	800f582 <pbuf_alloc+0x1b6>
 800f3f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f3f6:	d010      	beq.n	800f41a <pbuf_alloc+0x4e>
 800f3f8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f3fc:	f300 80c1 	bgt.w	800f582 <pbuf_alloc+0x1b6>
 800f400:	2b01      	cmp	r3, #1
 800f402:	d002      	beq.n	800f40a <pbuf_alloc+0x3e>
 800f404:	2b41      	cmp	r3, #65	; 0x41
 800f406:	f040 80bc 	bne.w	800f582 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f40a:	887a      	ldrh	r2, [r7, #2]
 800f40c:	88bb      	ldrh	r3, [r7, #4]
 800f40e:	4619      	mov	r1, r3
 800f410:	2000      	movs	r0, #0
 800f412:	f000 f8d1 	bl	800f5b8 <pbuf_alloc_reference>
 800f416:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f418:	e0bd      	b.n	800f596 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f41a:	2300      	movs	r3, #0
 800f41c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f41e:	2300      	movs	r3, #0
 800f420:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f422:	88bb      	ldrh	r3, [r7, #4]
 800f424:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f426:	200c      	movs	r0, #12
 800f428:	f7ff fb9a 	bl	800eb60 <memp_malloc>
 800f42c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d109      	bne.n	800f448 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f434:	f7ff ff76 	bl	800f324 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d002      	beq.n	800f444 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f43e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f440:	f000 faa8 	bl	800f994 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f444:	2300      	movs	r3, #0
 800f446:	e0a7      	b.n	800f598 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f44a:	3303      	adds	r3, #3
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	f023 0303 	bic.w	r3, r3, #3
 800f452:	b29b      	uxth	r3, r3
 800f454:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800f458:	b29b      	uxth	r3, r3
 800f45a:	8b7a      	ldrh	r2, [r7, #26]
 800f45c:	4293      	cmp	r3, r2
 800f45e:	bf28      	it	cs
 800f460:	4613      	movcs	r3, r2
 800f462:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f466:	3310      	adds	r3, #16
 800f468:	693a      	ldr	r2, [r7, #16]
 800f46a:	4413      	add	r3, r2
 800f46c:	3303      	adds	r3, #3
 800f46e:	f023 0303 	bic.w	r3, r3, #3
 800f472:	4618      	mov	r0, r3
 800f474:	89f9      	ldrh	r1, [r7, #14]
 800f476:	8b7a      	ldrh	r2, [r7, #26]
 800f478:	2300      	movs	r3, #0
 800f47a:	9301      	str	r3, [sp, #4]
 800f47c:	887b      	ldrh	r3, [r7, #2]
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	460b      	mov	r3, r1
 800f482:	4601      	mov	r1, r0
 800f484:	6938      	ldr	r0, [r7, #16]
 800f486:	f7ff ff77 	bl	800f378 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	f003 0303 	and.w	r3, r3, #3
 800f492:	2b00      	cmp	r3, #0
 800f494:	d006      	beq.n	800f4a4 <pbuf_alloc+0xd8>
 800f496:	4b42      	ldr	r3, [pc, #264]	; (800f5a0 <pbuf_alloc+0x1d4>)
 800f498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f49c:	4941      	ldr	r1, [pc, #260]	; (800f5a4 <pbuf_alloc+0x1d8>)
 800f49e:	4842      	ldr	r0, [pc, #264]	; (800f5a8 <pbuf_alloc+0x1dc>)
 800f4a0:	f009 fff4 	bl	801948c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f4a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4a6:	3303      	adds	r3, #3
 800f4a8:	f023 0303 	bic.w	r3, r3, #3
 800f4ac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f4b0:	d106      	bne.n	800f4c0 <pbuf_alloc+0xf4>
 800f4b2:	4b3b      	ldr	r3, [pc, #236]	; (800f5a0 <pbuf_alloc+0x1d4>)
 800f4b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f4b8:	493c      	ldr	r1, [pc, #240]	; (800f5ac <pbuf_alloc+0x1e0>)
 800f4ba:	483b      	ldr	r0, [pc, #236]	; (800f5a8 <pbuf_alloc+0x1dc>)
 800f4bc:	f009 ffe6 	bl	801948c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d102      	bne.n	800f4cc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800f4ca:	e002      	b.n	800f4d2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	693a      	ldr	r2, [r7, #16]
 800f4d0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f4d6:	8b7a      	ldrh	r2, [r7, #26]
 800f4d8:	89fb      	ldrh	r3, [r7, #14]
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f4e2:	8b7b      	ldrh	r3, [r7, #26]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d19e      	bne.n	800f426 <pbuf_alloc+0x5a>
      break;
 800f4e8:	e055      	b.n	800f596 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f4ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4ec:	3303      	adds	r3, #3
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	f023 0303 	bic.w	r3, r3, #3
 800f4f4:	b29a      	uxth	r2, r3
 800f4f6:	88bb      	ldrh	r3, [r7, #4]
 800f4f8:	3303      	adds	r3, #3
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	f023 0303 	bic.w	r3, r3, #3
 800f500:	b29b      	uxth	r3, r3
 800f502:	4413      	add	r3, r2
 800f504:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f506:	8b3b      	ldrh	r3, [r7, #24]
 800f508:	3310      	adds	r3, #16
 800f50a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f50c:	8b3a      	ldrh	r2, [r7, #24]
 800f50e:	88bb      	ldrh	r3, [r7, #4]
 800f510:	3303      	adds	r3, #3
 800f512:	f023 0303 	bic.w	r3, r3, #3
 800f516:	429a      	cmp	r2, r3
 800f518:	d306      	bcc.n	800f528 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f51a:	8afa      	ldrh	r2, [r7, #22]
 800f51c:	88bb      	ldrh	r3, [r7, #4]
 800f51e:	3303      	adds	r3, #3
 800f520:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f524:	429a      	cmp	r2, r3
 800f526:	d201      	bcs.n	800f52c <pbuf_alloc+0x160>
        return NULL;
 800f528:	2300      	movs	r3, #0
 800f52a:	e035      	b.n	800f598 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f52c:	8afb      	ldrh	r3, [r7, #22]
 800f52e:	4618      	mov	r0, r3
 800f530:	f7ff f972 	bl	800e818 <mem_malloc>
 800f534:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d101      	bne.n	800f540 <pbuf_alloc+0x174>
        return NULL;
 800f53c:	2300      	movs	r3, #0
 800f53e:	e02b      	b.n	800f598 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f542:	3310      	adds	r3, #16
 800f544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f546:	4413      	add	r3, r2
 800f548:	3303      	adds	r3, #3
 800f54a:	f023 0303 	bic.w	r3, r3, #3
 800f54e:	4618      	mov	r0, r3
 800f550:	88b9      	ldrh	r1, [r7, #4]
 800f552:	88ba      	ldrh	r2, [r7, #4]
 800f554:	2300      	movs	r3, #0
 800f556:	9301      	str	r3, [sp, #4]
 800f558:	887b      	ldrh	r3, [r7, #2]
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	460b      	mov	r3, r1
 800f55e:	4601      	mov	r1, r0
 800f560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f562:	f7ff ff09 	bl	800f378 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	f003 0303 	and.w	r3, r3, #3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d010      	beq.n	800f594 <pbuf_alloc+0x1c8>
 800f572:	4b0b      	ldr	r3, [pc, #44]	; (800f5a0 <pbuf_alloc+0x1d4>)
 800f574:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f578:	490d      	ldr	r1, [pc, #52]	; (800f5b0 <pbuf_alloc+0x1e4>)
 800f57a:	480b      	ldr	r0, [pc, #44]	; (800f5a8 <pbuf_alloc+0x1dc>)
 800f57c:	f009 ff86 	bl	801948c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f580:	e008      	b.n	800f594 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f582:	4b07      	ldr	r3, [pc, #28]	; (800f5a0 <pbuf_alloc+0x1d4>)
 800f584:	f240 1227 	movw	r2, #295	; 0x127
 800f588:	490a      	ldr	r1, [pc, #40]	; (800f5b4 <pbuf_alloc+0x1e8>)
 800f58a:	4807      	ldr	r0, [pc, #28]	; (800f5a8 <pbuf_alloc+0x1dc>)
 800f58c:	f009 ff7e 	bl	801948c <iprintf>
      return NULL;
 800f590:	2300      	movs	r3, #0
 800f592:	e001      	b.n	800f598 <pbuf_alloc+0x1cc>
      break;
 800f594:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3728      	adds	r7, #40	; 0x28
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	0801b2ec 	.word	0x0801b2ec
 800f5a4:	0801b31c 	.word	0x0801b31c
 800f5a8:	0801b34c 	.word	0x0801b34c
 800f5ac:	0801b374 	.word	0x0801b374
 800f5b0:	0801b3a8 	.word	0x0801b3a8
 800f5b4:	0801b3d4 	.word	0x0801b3d4

0800f5b8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af02      	add	r7, sp, #8
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	460b      	mov	r3, r1
 800f5c2:	807b      	strh	r3, [r7, #2]
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f5c8:	883b      	ldrh	r3, [r7, #0]
 800f5ca:	2b41      	cmp	r3, #65	; 0x41
 800f5cc:	d009      	beq.n	800f5e2 <pbuf_alloc_reference+0x2a>
 800f5ce:	883b      	ldrh	r3, [r7, #0]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d006      	beq.n	800f5e2 <pbuf_alloc_reference+0x2a>
 800f5d4:	4b0f      	ldr	r3, [pc, #60]	; (800f614 <pbuf_alloc_reference+0x5c>)
 800f5d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f5da:	490f      	ldr	r1, [pc, #60]	; (800f618 <pbuf_alloc_reference+0x60>)
 800f5dc:	480f      	ldr	r0, [pc, #60]	; (800f61c <pbuf_alloc_reference+0x64>)
 800f5de:	f009 ff55 	bl	801948c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f5e2:	200b      	movs	r0, #11
 800f5e4:	f7ff fabc 	bl	800eb60 <memp_malloc>
 800f5e8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d101      	bne.n	800f5f4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	e00b      	b.n	800f60c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f5f4:	8879      	ldrh	r1, [r7, #2]
 800f5f6:	887a      	ldrh	r2, [r7, #2]
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	9301      	str	r3, [sp, #4]
 800f5fc:	883b      	ldrh	r3, [r7, #0]
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	460b      	mov	r3, r1
 800f602:	6879      	ldr	r1, [r7, #4]
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f7ff feb7 	bl	800f378 <pbuf_init_alloced_pbuf>
  return p;
 800f60a:	68fb      	ldr	r3, [r7, #12]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	0801b2ec 	.word	0x0801b2ec
 800f618:	0801b3f0 	.word	0x0801b3f0
 800f61c:	0801b34c 	.word	0x0801b34c

0800f620 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b088      	sub	sp, #32
 800f624:	af02      	add	r7, sp, #8
 800f626:	607b      	str	r3, [r7, #4]
 800f628:	4603      	mov	r3, r0
 800f62a:	73fb      	strb	r3, [r7, #15]
 800f62c:	460b      	mov	r3, r1
 800f62e:	81bb      	strh	r3, [r7, #12]
 800f630:	4613      	mov	r3, r2
 800f632:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f634:	7bfb      	ldrb	r3, [r7, #15]
 800f636:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f638:	8a7b      	ldrh	r3, [r7, #18]
 800f63a:	3303      	adds	r3, #3
 800f63c:	f023 0203 	bic.w	r2, r3, #3
 800f640:	89bb      	ldrh	r3, [r7, #12]
 800f642:	441a      	add	r2, r3
 800f644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f646:	429a      	cmp	r2, r3
 800f648:	d901      	bls.n	800f64e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f64a:	2300      	movs	r3, #0
 800f64c:	e018      	b.n	800f680 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f64e:	6a3b      	ldr	r3, [r7, #32]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d007      	beq.n	800f664 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f654:	8a7b      	ldrh	r3, [r7, #18]
 800f656:	3303      	adds	r3, #3
 800f658:	f023 0303 	bic.w	r3, r3, #3
 800f65c:	6a3a      	ldr	r2, [r7, #32]
 800f65e:	4413      	add	r3, r2
 800f660:	617b      	str	r3, [r7, #20]
 800f662:	e001      	b.n	800f668 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f664:	2300      	movs	r3, #0
 800f666:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	89b9      	ldrh	r1, [r7, #12]
 800f66c:	89ba      	ldrh	r2, [r7, #12]
 800f66e:	2302      	movs	r3, #2
 800f670:	9301      	str	r3, [sp, #4]
 800f672:	897b      	ldrh	r3, [r7, #10]
 800f674:	9300      	str	r3, [sp, #0]
 800f676:	460b      	mov	r3, r1
 800f678:	6979      	ldr	r1, [r7, #20]
 800f67a:	f7ff fe7d 	bl	800f378 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f67e:	687b      	ldr	r3, [r7, #4]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	460b      	mov	r3, r1
 800f692:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d106      	bne.n	800f6a8 <pbuf_realloc+0x20>
 800f69a:	4b3a      	ldr	r3, [pc, #232]	; (800f784 <pbuf_realloc+0xfc>)
 800f69c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f6a0:	4939      	ldr	r1, [pc, #228]	; (800f788 <pbuf_realloc+0x100>)
 800f6a2:	483a      	ldr	r0, [pc, #232]	; (800f78c <pbuf_realloc+0x104>)
 800f6a4:	f009 fef2 	bl	801948c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	891b      	ldrh	r3, [r3, #8]
 800f6ac:	887a      	ldrh	r2, [r7, #2]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d263      	bcs.n	800f77a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	891a      	ldrh	r2, [r3, #8]
 800f6b6:	887b      	ldrh	r3, [r7, #2]
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f6bc:	887b      	ldrh	r3, [r7, #2]
 800f6be:	817b      	strh	r3, [r7, #10]
  q = p;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f6c4:	e018      	b.n	800f6f8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	895b      	ldrh	r3, [r3, #10]
 800f6ca:	897a      	ldrh	r2, [r7, #10]
 800f6cc:	1ad3      	subs	r3, r2, r3
 800f6ce:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	891a      	ldrh	r2, [r3, #8]
 800f6d4:	893b      	ldrh	r3, [r7, #8]
 800f6d6:	1ad3      	subs	r3, r2, r3
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d106      	bne.n	800f6f8 <pbuf_realloc+0x70>
 800f6ea:	4b26      	ldr	r3, [pc, #152]	; (800f784 <pbuf_realloc+0xfc>)
 800f6ec:	f240 12af 	movw	r2, #431	; 0x1af
 800f6f0:	4927      	ldr	r1, [pc, #156]	; (800f790 <pbuf_realloc+0x108>)
 800f6f2:	4826      	ldr	r0, [pc, #152]	; (800f78c <pbuf_realloc+0x104>)
 800f6f4:	f009 feca 	bl	801948c <iprintf>
  while (rem_len > q->len) {
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	895b      	ldrh	r3, [r3, #10]
 800f6fc:	897a      	ldrh	r2, [r7, #10]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d8e1      	bhi.n	800f6c6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	7b1b      	ldrb	r3, [r3, #12]
 800f706:	f003 030f 	and.w	r3, r3, #15
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d121      	bne.n	800f752 <pbuf_realloc+0xca>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	895b      	ldrh	r3, [r3, #10]
 800f712:	897a      	ldrh	r2, [r7, #10]
 800f714:	429a      	cmp	r2, r3
 800f716:	d01c      	beq.n	800f752 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	7b5b      	ldrb	r3, [r3, #13]
 800f71c:	f003 0302 	and.w	r3, r3, #2
 800f720:	2b00      	cmp	r3, #0
 800f722:	d116      	bne.n	800f752 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	1ad3      	subs	r3, r2, r3
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	897b      	ldrh	r3, [r7, #10]
 800f730:	4413      	add	r3, r2
 800f732:	b29b      	uxth	r3, r3
 800f734:	4619      	mov	r1, r3
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f7fe ff64 	bl	800e604 <mem_trim>
 800f73c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d106      	bne.n	800f752 <pbuf_realloc+0xca>
 800f744:	4b0f      	ldr	r3, [pc, #60]	; (800f784 <pbuf_realloc+0xfc>)
 800f746:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f74a:	4912      	ldr	r1, [pc, #72]	; (800f794 <pbuf_realloc+0x10c>)
 800f74c:	480f      	ldr	r0, [pc, #60]	; (800f78c <pbuf_realloc+0x104>)
 800f74e:	f009 fe9d 	bl	801948c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	897a      	ldrh	r2, [r7, #10]
 800f756:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	895a      	ldrh	r2, [r3, #10]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d004      	beq.n	800f772 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 f911 	bl	800f994 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]
 800f778:	e000      	b.n	800f77c <pbuf_realloc+0xf4>
    return;
 800f77a:	bf00      	nop

}
 800f77c:	3710      	adds	r7, #16
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	0801b2ec 	.word	0x0801b2ec
 800f788:	0801b404 	.word	0x0801b404
 800f78c:	0801b34c 	.word	0x0801b34c
 800f790:	0801b41c 	.word	0x0801b41c
 800f794:	0801b434 	.word	0x0801b434

0800f798 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b086      	sub	sp, #24
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	60b9      	str	r1, [r7, #8]
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d106      	bne.n	800f7ba <pbuf_add_header_impl+0x22>
 800f7ac:	4b2b      	ldr	r3, [pc, #172]	; (800f85c <pbuf_add_header_impl+0xc4>)
 800f7ae:	f240 12df 	movw	r2, #479	; 0x1df
 800f7b2:	492b      	ldr	r1, [pc, #172]	; (800f860 <pbuf_add_header_impl+0xc8>)
 800f7b4:	482b      	ldr	r0, [pc, #172]	; (800f864 <pbuf_add_header_impl+0xcc>)
 800f7b6:	f009 fe69 	bl	801948c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d003      	beq.n	800f7c8 <pbuf_add_header_impl+0x30>
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7c6:	d301      	bcc.n	800f7cc <pbuf_add_header_impl+0x34>
    return 1;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	e043      	b.n	800f854 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d101      	bne.n	800f7d6 <pbuf_add_header_impl+0x3e>
    return 0;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e03e      	b.n	800f854 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	891a      	ldrh	r2, [r3, #8]
 800f7de:	8a7b      	ldrh	r3, [r7, #18]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	8a7a      	ldrh	r2, [r7, #18]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d901      	bls.n	800f7ee <pbuf_add_header_impl+0x56>
    return 1;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e032      	b.n	800f854 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	7b1b      	ldrb	r3, [r3, #12]
 800f7f2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f7f4:	8a3b      	ldrh	r3, [r7, #16]
 800f7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00c      	beq.n	800f818 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	685a      	ldr	r2, [r3, #4]
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	425b      	negs	r3, r3
 800f806:	4413      	add	r3, r2
 800f808:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	3310      	adds	r3, #16
 800f80e:	697a      	ldr	r2, [r7, #20]
 800f810:	429a      	cmp	r2, r3
 800f812:	d20d      	bcs.n	800f830 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f814:	2301      	movs	r3, #1
 800f816:	e01d      	b.n	800f854 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f818:	79fb      	ldrb	r3, [r7, #7]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d006      	beq.n	800f82c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	685a      	ldr	r2, [r3, #4]
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	425b      	negs	r3, r3
 800f826:	4413      	add	r3, r2
 800f828:	617b      	str	r3, [r7, #20]
 800f82a:	e001      	b.n	800f830 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f82c:	2301      	movs	r3, #1
 800f82e:	e011      	b.n	800f854 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	895a      	ldrh	r2, [r3, #10]
 800f83a:	8a7b      	ldrh	r3, [r7, #18]
 800f83c:	4413      	add	r3, r2
 800f83e:	b29a      	uxth	r2, r3
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	891a      	ldrh	r2, [r3, #8]
 800f848:	8a7b      	ldrh	r3, [r7, #18]
 800f84a:	4413      	add	r3, r2
 800f84c:	b29a      	uxth	r2, r3
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	811a      	strh	r2, [r3, #8]


  return 0;
 800f852:	2300      	movs	r3, #0
}
 800f854:	4618      	mov	r0, r3
 800f856:	3718      	adds	r7, #24
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	0801b2ec 	.word	0x0801b2ec
 800f860:	0801b450 	.word	0x0801b450
 800f864:	0801b34c 	.word	0x0801b34c

0800f868 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f872:	2200      	movs	r2, #0
 800f874:	6839      	ldr	r1, [r7, #0]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7ff ff8e 	bl	800f798 <pbuf_add_header_impl>
 800f87c:	4603      	mov	r3, r0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
	...

0800f888 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d106      	bne.n	800f8a6 <pbuf_remove_header+0x1e>
 800f898:	4b20      	ldr	r3, [pc, #128]	; (800f91c <pbuf_remove_header+0x94>)
 800f89a:	f240 224b 	movw	r2, #587	; 0x24b
 800f89e:	4920      	ldr	r1, [pc, #128]	; (800f920 <pbuf_remove_header+0x98>)
 800f8a0:	4820      	ldr	r0, [pc, #128]	; (800f924 <pbuf_remove_header+0x9c>)
 800f8a2:	f009 fdf3 	bl	801948c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d003      	beq.n	800f8b4 <pbuf_remove_header+0x2c>
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8b2:	d301      	bcc.n	800f8b8 <pbuf_remove_header+0x30>
    return 1;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e02c      	b.n	800f912 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d101      	bne.n	800f8c2 <pbuf_remove_header+0x3a>
    return 0;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	e027      	b.n	800f912 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	895b      	ldrh	r3, [r3, #10]
 800f8ca:	89fa      	ldrh	r2, [r7, #14]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d908      	bls.n	800f8e2 <pbuf_remove_header+0x5a>
 800f8d0:	4b12      	ldr	r3, [pc, #72]	; (800f91c <pbuf_remove_header+0x94>)
 800f8d2:	f240 2255 	movw	r2, #597	; 0x255
 800f8d6:	4914      	ldr	r1, [pc, #80]	; (800f928 <pbuf_remove_header+0xa0>)
 800f8d8:	4812      	ldr	r0, [pc, #72]	; (800f924 <pbuf_remove_header+0x9c>)
 800f8da:	f009 fdd7 	bl	801948c <iprintf>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e017      	b.n	800f912 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	441a      	add	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	895a      	ldrh	r2, [r3, #10]
 800f8f8:	89fb      	ldrh	r3, [r7, #14]
 800f8fa:	1ad3      	subs	r3, r2, r3
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	891a      	ldrh	r2, [r3, #8]
 800f906:	89fb      	ldrh	r3, [r7, #14]
 800f908:	1ad3      	subs	r3, r2, r3
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3710      	adds	r7, #16
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	0801b2ec 	.word	0x0801b2ec
 800f920:	0801b450 	.word	0x0801b450
 800f924:	0801b34c 	.word	0x0801b34c
 800f928:	0801b45c 	.word	0x0801b45c

0800f92c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	460b      	mov	r3, r1
 800f936:	807b      	strh	r3, [r7, #2]
 800f938:	4613      	mov	r3, r2
 800f93a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f93c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f940:	2b00      	cmp	r3, #0
 800f942:	da08      	bge.n	800f956 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f944:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f948:	425b      	negs	r3, r3
 800f94a:	4619      	mov	r1, r3
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7ff ff9b 	bl	800f888 <pbuf_remove_header>
 800f952:	4603      	mov	r3, r0
 800f954:	e007      	b.n	800f966 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f956:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f95a:	787a      	ldrb	r2, [r7, #1]
 800f95c:	4619      	mov	r1, r3
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f7ff ff1a 	bl	800f798 <pbuf_add_header_impl>
 800f964:	4603      	mov	r3, r0
  }
}
 800f966:	4618      	mov	r0, r3
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f96e:	b580      	push	{r7, lr}
 800f970:	b082      	sub	sp, #8
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
 800f976:	460b      	mov	r3, r1
 800f978:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f97a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f97e:	2201      	movs	r2, #1
 800f980:	4619      	mov	r1, r3
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7ff ffd2 	bl	800f92c <pbuf_header_impl>
 800f988:	4603      	mov	r3, r0
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3708      	adds	r7, #8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
	...

0800f994 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b088      	sub	sp, #32
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d10b      	bne.n	800f9ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d106      	bne.n	800f9b6 <pbuf_free+0x22>
 800f9a8:	4b3b      	ldr	r3, [pc, #236]	; (800fa98 <pbuf_free+0x104>)
 800f9aa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f9ae:	493b      	ldr	r1, [pc, #236]	; (800fa9c <pbuf_free+0x108>)
 800f9b0:	483b      	ldr	r0, [pc, #236]	; (800faa0 <pbuf_free+0x10c>)
 800f9b2:	f009 fd6b 	bl	801948c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	e069      	b.n	800fa8e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f9be:	e062      	b.n	800fa86 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f9c0:	f009 fb6e 	bl	80190a0 <sys_arch_protect>
 800f9c4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	7b9b      	ldrb	r3, [r3, #14]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d106      	bne.n	800f9dc <pbuf_free+0x48>
 800f9ce:	4b32      	ldr	r3, [pc, #200]	; (800fa98 <pbuf_free+0x104>)
 800f9d0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f9d4:	4933      	ldr	r1, [pc, #204]	; (800faa4 <pbuf_free+0x110>)
 800f9d6:	4832      	ldr	r0, [pc, #200]	; (800faa0 <pbuf_free+0x10c>)
 800f9d8:	f009 fd58 	bl	801948c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	7b9b      	ldrb	r3, [r3, #14]
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	b2da      	uxtb	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	739a      	strb	r2, [r3, #14]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	7b9b      	ldrb	r3, [r3, #14]
 800f9ec:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f9ee:	69b8      	ldr	r0, [r7, #24]
 800f9f0:	f009 fb64 	bl	80190bc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f9f4:	7dfb      	ldrb	r3, [r7, #23]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d143      	bne.n	800fa82 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	7b1b      	ldrb	r3, [r3, #12]
 800fa04:	f003 030f 	and.w	r3, r3, #15
 800fa08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	7b5b      	ldrb	r3, [r3, #13]
 800fa0e:	f003 0302 	and.w	r3, r3, #2
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d011      	beq.n	800fa3a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	691b      	ldr	r3, [r3, #16]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d106      	bne.n	800fa30 <pbuf_free+0x9c>
 800fa22:	4b1d      	ldr	r3, [pc, #116]	; (800fa98 <pbuf_free+0x104>)
 800fa24:	f240 22ff 	movw	r2, #767	; 0x2ff
 800fa28:	491f      	ldr	r1, [pc, #124]	; (800faa8 <pbuf_free+0x114>)
 800fa2a:	481d      	ldr	r0, [pc, #116]	; (800faa0 <pbuf_free+0x10c>)
 800fa2c:	f009 fd2e 	bl	801948c <iprintf>
        pc->custom_free_function(p);
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	691b      	ldr	r3, [r3, #16]
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	4798      	blx	r3
 800fa38:	e01d      	b.n	800fa76 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800fa3a:	7bfb      	ldrb	r3, [r7, #15]
 800fa3c:	2b02      	cmp	r3, #2
 800fa3e:	d104      	bne.n	800fa4a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800fa40:	6879      	ldr	r1, [r7, #4]
 800fa42:	200c      	movs	r0, #12
 800fa44:	f7ff f902 	bl	800ec4c <memp_free>
 800fa48:	e015      	b.n	800fa76 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800fa4a:	7bfb      	ldrb	r3, [r7, #15]
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d104      	bne.n	800fa5a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800fa50:	6879      	ldr	r1, [r7, #4]
 800fa52:	200b      	movs	r0, #11
 800fa54:	f7ff f8fa 	bl	800ec4c <memp_free>
 800fa58:	e00d      	b.n	800fa76 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800fa5a:	7bfb      	ldrb	r3, [r7, #15]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d103      	bne.n	800fa68 <pbuf_free+0xd4>
          mem_free(p);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7fe fd3f 	bl	800e4e4 <mem_free>
 800fa66:	e006      	b.n	800fa76 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800fa68:	4b0b      	ldr	r3, [pc, #44]	; (800fa98 <pbuf_free+0x104>)
 800fa6a:	f240 320f 	movw	r2, #783	; 0x30f
 800fa6e:	490f      	ldr	r1, [pc, #60]	; (800faac <pbuf_free+0x118>)
 800fa70:	480b      	ldr	r0, [pc, #44]	; (800faa0 <pbuf_free+0x10c>)
 800fa72:	f009 fd0b 	bl	801948c <iprintf>
        }
      }
      count++;
 800fa76:	7ffb      	ldrb	r3, [r7, #31]
 800fa78:	3301      	adds	r3, #1
 800fa7a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	607b      	str	r3, [r7, #4]
 800fa80:	e001      	b.n	800fa86 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800fa82:	2300      	movs	r3, #0
 800fa84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d199      	bne.n	800f9c0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800fa8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3720      	adds	r7, #32
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	0801b2ec 	.word	0x0801b2ec
 800fa9c:	0801b450 	.word	0x0801b450
 800faa0:	0801b34c 	.word	0x0801b34c
 800faa4:	0801b47c 	.word	0x0801b47c
 800faa8:	0801b494 	.word	0x0801b494
 800faac:	0801b4b8 	.word	0x0801b4b8

0800fab0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800fab8:	2300      	movs	r3, #0
 800faba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800fabc:	e005      	b.n	800faca <pbuf_clen+0x1a>
    ++len;
 800fabe:	89fb      	ldrh	r3, [r7, #14]
 800fac0:	3301      	adds	r3, #1
 800fac2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2b00      	cmp	r3, #0
 800face:	d1f6      	bne.n	800fabe <pbuf_clen+0xe>
  }
  return len;
 800fad0:	89fb      	ldrh	r3, [r7, #14]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3714      	adds	r7, #20
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr
	...

0800fae0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d016      	beq.n	800fb1c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800faee:	f009 fad7 	bl	80190a0 <sys_arch_protect>
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	7b9b      	ldrb	r3, [r3, #14]
 800faf8:	3301      	adds	r3, #1
 800fafa:	b2da      	uxtb	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	739a      	strb	r2, [r3, #14]
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f009 fadb 	bl	80190bc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	7b9b      	ldrb	r3, [r3, #14]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d106      	bne.n	800fb1c <pbuf_ref+0x3c>
 800fb0e:	4b05      	ldr	r3, [pc, #20]	; (800fb24 <pbuf_ref+0x44>)
 800fb10:	f240 3242 	movw	r2, #834	; 0x342
 800fb14:	4904      	ldr	r1, [pc, #16]	; (800fb28 <pbuf_ref+0x48>)
 800fb16:	4805      	ldr	r0, [pc, #20]	; (800fb2c <pbuf_ref+0x4c>)
 800fb18:	f009 fcb8 	bl	801948c <iprintf>
  }
}
 800fb1c:	bf00      	nop
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	0801b2ec 	.word	0x0801b2ec
 800fb28:	0801b4cc 	.word	0x0801b4cc
 800fb2c:	0801b34c 	.word	0x0801b34c

0800fb30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d002      	beq.n	800fb46 <pbuf_cat+0x16>
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d107      	bne.n	800fb56 <pbuf_cat+0x26>
 800fb46:	4b20      	ldr	r3, [pc, #128]	; (800fbc8 <pbuf_cat+0x98>)
 800fb48:	f240 3259 	movw	r2, #857	; 0x359
 800fb4c:	491f      	ldr	r1, [pc, #124]	; (800fbcc <pbuf_cat+0x9c>)
 800fb4e:	4820      	ldr	r0, [pc, #128]	; (800fbd0 <pbuf_cat+0xa0>)
 800fb50:	f009 fc9c 	bl	801948c <iprintf>
 800fb54:	e034      	b.n	800fbc0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	60fb      	str	r3, [r7, #12]
 800fb5a:	e00a      	b.n	800fb72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	891a      	ldrh	r2, [r3, #8]
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	891b      	ldrh	r3, [r3, #8]
 800fb64:	4413      	add	r3, r2
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	60fb      	str	r3, [r7, #12]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d1f0      	bne.n	800fb5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	891a      	ldrh	r2, [r3, #8]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	895b      	ldrh	r3, [r3, #10]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d006      	beq.n	800fb94 <pbuf_cat+0x64>
 800fb86:	4b10      	ldr	r3, [pc, #64]	; (800fbc8 <pbuf_cat+0x98>)
 800fb88:	f240 3262 	movw	r2, #866	; 0x362
 800fb8c:	4911      	ldr	r1, [pc, #68]	; (800fbd4 <pbuf_cat+0xa4>)
 800fb8e:	4810      	ldr	r0, [pc, #64]	; (800fbd0 <pbuf_cat+0xa0>)
 800fb90:	f009 fc7c 	bl	801948c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d006      	beq.n	800fbaa <pbuf_cat+0x7a>
 800fb9c:	4b0a      	ldr	r3, [pc, #40]	; (800fbc8 <pbuf_cat+0x98>)
 800fb9e:	f240 3263 	movw	r2, #867	; 0x363
 800fba2:	490d      	ldr	r1, [pc, #52]	; (800fbd8 <pbuf_cat+0xa8>)
 800fba4:	480a      	ldr	r0, [pc, #40]	; (800fbd0 <pbuf_cat+0xa0>)
 800fba6:	f009 fc71 	bl	801948c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	891a      	ldrh	r2, [r3, #8]
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	891b      	ldrh	r3, [r3, #8]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	683a      	ldr	r2, [r7, #0]
 800fbbe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	0801b2ec 	.word	0x0801b2ec
 800fbcc:	0801b4e0 	.word	0x0801b4e0
 800fbd0:	0801b34c 	.word	0x0801b34c
 800fbd4:	0801b518 	.word	0x0801b518
 800fbd8:	0801b548 	.word	0x0801b548

0800fbdc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b086      	sub	sp, #24
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	617b      	str	r3, [r7, #20]
 800fbea:	2300      	movs	r3, #0
 800fbec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d008      	beq.n	800fc06 <pbuf_copy+0x2a>
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d005      	beq.n	800fc06 <pbuf_copy+0x2a>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	891a      	ldrh	r2, [r3, #8]
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	891b      	ldrh	r3, [r3, #8]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d209      	bcs.n	800fc1a <pbuf_copy+0x3e>
 800fc06:	4b57      	ldr	r3, [pc, #348]	; (800fd64 <pbuf_copy+0x188>)
 800fc08:	f240 32c9 	movw	r2, #969	; 0x3c9
 800fc0c:	4956      	ldr	r1, [pc, #344]	; (800fd68 <pbuf_copy+0x18c>)
 800fc0e:	4857      	ldr	r0, [pc, #348]	; (800fd6c <pbuf_copy+0x190>)
 800fc10:	f009 fc3c 	bl	801948c <iprintf>
 800fc14:	f06f 030f 	mvn.w	r3, #15
 800fc18:	e09f      	b.n	800fd5a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	895b      	ldrh	r3, [r3, #10]
 800fc1e:	461a      	mov	r2, r3
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	1ad2      	subs	r2, r2, r3
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	895b      	ldrh	r3, [r3, #10]
 800fc28:	4619      	mov	r1, r3
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	1acb      	subs	r3, r1, r3
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d306      	bcc.n	800fc40 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	895b      	ldrh	r3, [r3, #10]
 800fc36:	461a      	mov	r2, r3
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	e005      	b.n	800fc4c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	895b      	ldrh	r3, [r3, #10]
 800fc44:	461a      	mov	r2, r3
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685a      	ldr	r2, [r3, #4]
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	18d0      	adds	r0, r2, r3
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	685a      	ldr	r2, [r3, #4]
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	4619      	mov	r1, r3
 800fc60:	f009 fb69 	bl	8019336 <memcpy>
    offset_to += len;
 800fc64:	697a      	ldr	r2, [r7, #20]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	4413      	add	r3, r2
 800fc6a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800fc6c:	693a      	ldr	r2, [r7, #16]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	4413      	add	r3, r2
 800fc72:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	895b      	ldrh	r3, [r3, #10]
 800fc78:	461a      	mov	r2, r3
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d906      	bls.n	800fc8e <pbuf_copy+0xb2>
 800fc80:	4b38      	ldr	r3, [pc, #224]	; (800fd64 <pbuf_copy+0x188>)
 800fc82:	f240 32d9 	movw	r2, #985	; 0x3d9
 800fc86:	493a      	ldr	r1, [pc, #232]	; (800fd70 <pbuf_copy+0x194>)
 800fc88:	4838      	ldr	r0, [pc, #224]	; (800fd6c <pbuf_copy+0x190>)
 800fc8a:	f009 fbff 	bl	801948c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	895b      	ldrh	r3, [r3, #10]
 800fc92:	461a      	mov	r2, r3
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d906      	bls.n	800fca8 <pbuf_copy+0xcc>
 800fc9a:	4b32      	ldr	r3, [pc, #200]	; (800fd64 <pbuf_copy+0x188>)
 800fc9c:	f240 32da 	movw	r2, #986	; 0x3da
 800fca0:	4934      	ldr	r1, [pc, #208]	; (800fd74 <pbuf_copy+0x198>)
 800fca2:	4832      	ldr	r0, [pc, #200]	; (800fd6c <pbuf_copy+0x190>)
 800fca4:	f009 fbf2 	bl	801948c <iprintf>
    if (offset_from >= p_from->len) {
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	895b      	ldrh	r3, [r3, #10]
 800fcac:	461a      	mov	r2, r3
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d304      	bcc.n	800fcbe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	895b      	ldrh	r3, [r3, #10]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d114      	bne.n	800fcf4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d10c      	bne.n	800fcf4 <pbuf_copy+0x118>
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d009      	beq.n	800fcf4 <pbuf_copy+0x118>
 800fce0:	4b20      	ldr	r3, [pc, #128]	; (800fd64 <pbuf_copy+0x188>)
 800fce2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800fce6:	4924      	ldr	r1, [pc, #144]	; (800fd78 <pbuf_copy+0x19c>)
 800fce8:	4820      	ldr	r0, [pc, #128]	; (800fd6c <pbuf_copy+0x190>)
 800fcea:	f009 fbcf 	bl	801948c <iprintf>
 800fcee:	f06f 030f 	mvn.w	r3, #15
 800fcf2:	e032      	b.n	800fd5a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d013      	beq.n	800fd22 <pbuf_copy+0x146>
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	895a      	ldrh	r2, [r3, #10]
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	891b      	ldrh	r3, [r3, #8]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d10d      	bne.n	800fd22 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d009      	beq.n	800fd22 <pbuf_copy+0x146>
 800fd0e:	4b15      	ldr	r3, [pc, #84]	; (800fd64 <pbuf_copy+0x188>)
 800fd10:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800fd14:	4919      	ldr	r1, [pc, #100]	; (800fd7c <pbuf_copy+0x1a0>)
 800fd16:	4815      	ldr	r0, [pc, #84]	; (800fd6c <pbuf_copy+0x190>)
 800fd18:	f009 fbb8 	bl	801948c <iprintf>
 800fd1c:	f06f 0305 	mvn.w	r3, #5
 800fd20:	e01b      	b.n	800fd5a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d013      	beq.n	800fd50 <pbuf_copy+0x174>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	895a      	ldrh	r2, [r3, #10]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	891b      	ldrh	r3, [r3, #8]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d10d      	bne.n	800fd50 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d009      	beq.n	800fd50 <pbuf_copy+0x174>
 800fd3c:	4b09      	ldr	r3, [pc, #36]	; (800fd64 <pbuf_copy+0x188>)
 800fd3e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800fd42:	490e      	ldr	r1, [pc, #56]	; (800fd7c <pbuf_copy+0x1a0>)
 800fd44:	4809      	ldr	r0, [pc, #36]	; (800fd6c <pbuf_copy+0x190>)
 800fd46:	f009 fba1 	bl	801948c <iprintf>
 800fd4a:	f06f 0305 	mvn.w	r3, #5
 800fd4e:	e004      	b.n	800fd5a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f47f af61 	bne.w	800fc1a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3718      	adds	r7, #24
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	0801b2ec 	.word	0x0801b2ec
 800fd68:	0801b594 	.word	0x0801b594
 800fd6c:	0801b34c 	.word	0x0801b34c
 800fd70:	0801b5c4 	.word	0x0801b5c4
 800fd74:	0801b5dc 	.word	0x0801b5dc
 800fd78:	0801b5f8 	.word	0x0801b5f8
 800fd7c:	0801b608 	.word	0x0801b608

0800fd80 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b088      	sub	sp, #32
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	460b      	mov	r3, r1
 800fd90:	80fb      	strh	r3, [r7, #6]
 800fd92:	4613      	mov	r3, r2
 800fd94:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800fd96:	2300      	movs	r3, #0
 800fd98:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d108      	bne.n	800fdb6 <pbuf_copy_partial+0x36>
 800fda4:	4b2b      	ldr	r3, [pc, #172]	; (800fe54 <pbuf_copy_partial+0xd4>)
 800fda6:	f240 420a 	movw	r2, #1034	; 0x40a
 800fdaa:	492b      	ldr	r1, [pc, #172]	; (800fe58 <pbuf_copy_partial+0xd8>)
 800fdac:	482b      	ldr	r0, [pc, #172]	; (800fe5c <pbuf_copy_partial+0xdc>)
 800fdae:	f009 fb6d 	bl	801948c <iprintf>
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	e04a      	b.n	800fe4c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d108      	bne.n	800fdce <pbuf_copy_partial+0x4e>
 800fdbc:	4b25      	ldr	r3, [pc, #148]	; (800fe54 <pbuf_copy_partial+0xd4>)
 800fdbe:	f240 420b 	movw	r2, #1035	; 0x40b
 800fdc2:	4927      	ldr	r1, [pc, #156]	; (800fe60 <pbuf_copy_partial+0xe0>)
 800fdc4:	4825      	ldr	r0, [pc, #148]	; (800fe5c <pbuf_copy_partial+0xdc>)
 800fdc6:	f009 fb61 	bl	801948c <iprintf>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	e03e      	b.n	800fe4c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	61fb      	str	r3, [r7, #28]
 800fdd2:	e034      	b.n	800fe3e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800fdd4:	88bb      	ldrh	r3, [r7, #4]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d00a      	beq.n	800fdf0 <pbuf_copy_partial+0x70>
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	895b      	ldrh	r3, [r3, #10]
 800fdde:	88ba      	ldrh	r2, [r7, #4]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d305      	bcc.n	800fdf0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	895b      	ldrh	r3, [r3, #10]
 800fde8:	88ba      	ldrh	r2, [r7, #4]
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	80bb      	strh	r3, [r7, #4]
 800fdee:	e023      	b.n	800fe38 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	895a      	ldrh	r2, [r3, #10]
 800fdf4:	88bb      	ldrh	r3, [r7, #4]
 800fdf6:	1ad3      	subs	r3, r2, r3
 800fdf8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fdfa:	8b3a      	ldrh	r2, [r7, #24]
 800fdfc:	88fb      	ldrh	r3, [r7, #6]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d901      	bls.n	800fe06 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800fe02:	88fb      	ldrh	r3, [r7, #6]
 800fe04:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800fe06:	8b7b      	ldrh	r3, [r7, #26]
 800fe08:	68ba      	ldr	r2, [r7, #8]
 800fe0a:	18d0      	adds	r0, r2, r3
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	685a      	ldr	r2, [r3, #4]
 800fe10:	88bb      	ldrh	r3, [r7, #4]
 800fe12:	4413      	add	r3, r2
 800fe14:	8b3a      	ldrh	r2, [r7, #24]
 800fe16:	4619      	mov	r1, r3
 800fe18:	f009 fa8d 	bl	8019336 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800fe1c:	8afa      	ldrh	r2, [r7, #22]
 800fe1e:	8b3b      	ldrh	r3, [r7, #24]
 800fe20:	4413      	add	r3, r2
 800fe22:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800fe24:	8b7a      	ldrh	r2, [r7, #26]
 800fe26:	8b3b      	ldrh	r3, [r7, #24]
 800fe28:	4413      	add	r3, r2
 800fe2a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800fe2c:	88fa      	ldrh	r2, [r7, #6]
 800fe2e:	8b3b      	ldrh	r3, [r7, #24]
 800fe30:	1ad3      	subs	r3, r2, r3
 800fe32:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800fe34:	2300      	movs	r3, #0
 800fe36:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	61fb      	str	r3, [r7, #28]
 800fe3e:	88fb      	ldrh	r3, [r7, #6]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d002      	beq.n	800fe4a <pbuf_copy_partial+0xca>
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d1c4      	bne.n	800fdd4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fe4a:	8afb      	ldrh	r3, [r7, #22]
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3720      	adds	r7, #32
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	0801b2ec 	.word	0x0801b2ec
 800fe58:	0801b634 	.word	0x0801b634
 800fe5c:	0801b34c 	.word	0x0801b34c
 800fe60:	0801b654 	.word	0x0801b654

0800fe64 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	603a      	str	r2, [r7, #0]
 800fe6e:	71fb      	strb	r3, [r7, #7]
 800fe70:	460b      	mov	r3, r1
 800fe72:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	8919      	ldrh	r1, [r3, #8]
 800fe78:	88ba      	ldrh	r2, [r7, #4]
 800fe7a:	79fb      	ldrb	r3, [r7, #7]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7ff faa5 	bl	800f3cc <pbuf_alloc>
 800fe82:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d101      	bne.n	800fe8e <pbuf_clone+0x2a>
    return NULL;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	e011      	b.n	800feb2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fe8e:	6839      	ldr	r1, [r7, #0]
 800fe90:	68f8      	ldr	r0, [r7, #12]
 800fe92:	f7ff fea3 	bl	800fbdc <pbuf_copy>
 800fe96:	4603      	mov	r3, r0
 800fe98:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fe9a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d006      	beq.n	800feb0 <pbuf_clone+0x4c>
 800fea2:	4b06      	ldr	r3, [pc, #24]	; (800febc <pbuf_clone+0x58>)
 800fea4:	f240 5224 	movw	r2, #1316	; 0x524
 800fea8:	4905      	ldr	r1, [pc, #20]	; (800fec0 <pbuf_clone+0x5c>)
 800feaa:	4806      	ldr	r0, [pc, #24]	; (800fec4 <pbuf_clone+0x60>)
 800feac:	f009 faee 	bl	801948c <iprintf>
  return q;
 800feb0:	68fb      	ldr	r3, [r7, #12]
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	0801b2ec 	.word	0x0801b2ec
 800fec0:	0801b760 	.word	0x0801b760
 800fec4:	0801b34c 	.word	0x0801b34c

0800fec8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fecc:	f009 faf6 	bl	80194bc <rand>
 800fed0:	4603      	mov	r3, r0
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fed8:	b29b      	uxth	r3, r3
 800feda:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fede:	b29a      	uxth	r2, r3
 800fee0:	4b01      	ldr	r3, [pc, #4]	; (800fee8 <tcp_init+0x20>)
 800fee2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fee4:	bf00      	nop
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	20001a50 	.word	0x20001a50

0800feec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	7d1b      	ldrb	r3, [r3, #20]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d105      	bne.n	800ff08 <tcp_free+0x1c>
 800fefc:	4b06      	ldr	r3, [pc, #24]	; (800ff18 <tcp_free+0x2c>)
 800fefe:	22d4      	movs	r2, #212	; 0xd4
 800ff00:	4906      	ldr	r1, [pc, #24]	; (800ff1c <tcp_free+0x30>)
 800ff02:	4807      	ldr	r0, [pc, #28]	; (800ff20 <tcp_free+0x34>)
 800ff04:	f009 fac2 	bl	801948c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ff08:	6879      	ldr	r1, [r7, #4]
 800ff0a:	2001      	movs	r0, #1
 800ff0c:	f7fe fe9e 	bl	800ec4c <memp_free>
}
 800ff10:	bf00      	nop
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	0801b7ec 	.word	0x0801b7ec
 800ff1c:	0801b81c 	.word	0x0801b81c
 800ff20:	0801b830 	.word	0x0801b830

0800ff24 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	7d1b      	ldrb	r3, [r3, #20]
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d105      	bne.n	800ff40 <tcp_free_listen+0x1c>
 800ff34:	4b06      	ldr	r3, [pc, #24]	; (800ff50 <tcp_free_listen+0x2c>)
 800ff36:	22df      	movs	r2, #223	; 0xdf
 800ff38:	4906      	ldr	r1, [pc, #24]	; (800ff54 <tcp_free_listen+0x30>)
 800ff3a:	4807      	ldr	r0, [pc, #28]	; (800ff58 <tcp_free_listen+0x34>)
 800ff3c:	f009 faa6 	bl	801948c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ff40:	6879      	ldr	r1, [r7, #4]
 800ff42:	2002      	movs	r0, #2
 800ff44:	f7fe fe82 	bl	800ec4c <memp_free>
}
 800ff48:	bf00      	nop
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	0801b7ec 	.word	0x0801b7ec
 800ff54:	0801b858 	.word	0x0801b858
 800ff58:	0801b830 	.word	0x0801b830

0800ff5c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ff60:	f001 f8a6 	bl	80110b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ff64:	4b07      	ldr	r3, [pc, #28]	; (800ff84 <tcp_tmr+0x28>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	4b05      	ldr	r3, [pc, #20]	; (800ff84 <tcp_tmr+0x28>)
 800ff6e:	701a      	strb	r2, [r3, #0]
 800ff70:	4b04      	ldr	r3, [pc, #16]	; (800ff84 <tcp_tmr+0x28>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	f003 0301 	and.w	r3, r3, #1
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ff7c:	f000 fd58 	bl	8010a30 <tcp_slowtmr>
  }
}
 800ff80:	bf00      	nop
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	2004efd9 	.word	0x2004efd9

0800ff88 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b084      	sub	sp, #16
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d105      	bne.n	800ffa4 <tcp_remove_listener+0x1c>
 800ff98:	4b0d      	ldr	r3, [pc, #52]	; (800ffd0 <tcp_remove_listener+0x48>)
 800ff9a:	22ff      	movs	r2, #255	; 0xff
 800ff9c:	490d      	ldr	r1, [pc, #52]	; (800ffd4 <tcp_remove_listener+0x4c>)
 800ff9e:	480e      	ldr	r0, [pc, #56]	; (800ffd8 <tcp_remove_listener+0x50>)
 800ffa0:	f009 fa74 	bl	801948c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	60fb      	str	r3, [r7, #12]
 800ffa8:	e00a      	b.n	800ffc0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffae:	683a      	ldr	r2, [r7, #0]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d102      	bne.n	800ffba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	60fb      	str	r3, [r7, #12]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d1f1      	bne.n	800ffaa <tcp_remove_listener+0x22>
    }
  }
}
 800ffc6:	bf00      	nop
 800ffc8:	bf00      	nop
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	0801b7ec 	.word	0x0801b7ec
 800ffd4:	0801b874 	.word	0x0801b874
 800ffd8:	0801b830 	.word	0x0801b830

0800ffdc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d106      	bne.n	800fff8 <tcp_listen_closed+0x1c>
 800ffea:	4b14      	ldr	r3, [pc, #80]	; (801003c <tcp_listen_closed+0x60>)
 800ffec:	f240 1211 	movw	r2, #273	; 0x111
 800fff0:	4913      	ldr	r1, [pc, #76]	; (8010040 <tcp_listen_closed+0x64>)
 800fff2:	4814      	ldr	r0, [pc, #80]	; (8010044 <tcp_listen_closed+0x68>)
 800fff4:	f009 fa4a 	bl	801948c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	7d1b      	ldrb	r3, [r3, #20]
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d006      	beq.n	801000e <tcp_listen_closed+0x32>
 8010000:	4b0e      	ldr	r3, [pc, #56]	; (801003c <tcp_listen_closed+0x60>)
 8010002:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010006:	4910      	ldr	r1, [pc, #64]	; (8010048 <tcp_listen_closed+0x6c>)
 8010008:	480e      	ldr	r0, [pc, #56]	; (8010044 <tcp_listen_closed+0x68>)
 801000a:	f009 fa3f 	bl	801948c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801000e:	2301      	movs	r3, #1
 8010010:	60fb      	str	r3, [r7, #12]
 8010012:	e00b      	b.n	801002c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010014:	4a0d      	ldr	r2, [pc, #52]	; (801004c <tcp_listen_closed+0x70>)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	6879      	ldr	r1, [r7, #4]
 8010020:	4618      	mov	r0, r3
 8010022:	f7ff ffb1 	bl	800ff88 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	3301      	adds	r3, #1
 801002a:	60fb      	str	r3, [r7, #12]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2b03      	cmp	r3, #3
 8010030:	d9f0      	bls.n	8010014 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010032:	bf00      	nop
 8010034:	bf00      	nop
 8010036:	3710      	adds	r7, #16
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	0801b7ec 	.word	0x0801b7ec
 8010040:	0801b89c 	.word	0x0801b89c
 8010044:	0801b830 	.word	0x0801b830
 8010048:	0801b8a8 	.word	0x0801b8a8
 801004c:	0801d858 	.word	0x0801d858

08010050 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010050:	b5b0      	push	{r4, r5, r7, lr}
 8010052:	b088      	sub	sp, #32
 8010054:	af04      	add	r7, sp, #16
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	460b      	mov	r3, r1
 801005a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d106      	bne.n	8010070 <tcp_close_shutdown+0x20>
 8010062:	4b63      	ldr	r3, [pc, #396]	; (80101f0 <tcp_close_shutdown+0x1a0>)
 8010064:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010068:	4962      	ldr	r1, [pc, #392]	; (80101f4 <tcp_close_shutdown+0x1a4>)
 801006a:	4863      	ldr	r0, [pc, #396]	; (80101f8 <tcp_close_shutdown+0x1a8>)
 801006c:	f009 fa0e 	bl	801948c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010070:	78fb      	ldrb	r3, [r7, #3]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d066      	beq.n	8010144 <tcp_close_shutdown+0xf4>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	7d1b      	ldrb	r3, [r3, #20]
 801007a:	2b04      	cmp	r3, #4
 801007c:	d003      	beq.n	8010086 <tcp_close_shutdown+0x36>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	7d1b      	ldrb	r3, [r3, #20]
 8010082:	2b07      	cmp	r3, #7
 8010084:	d15e      	bne.n	8010144 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801008a:	2b00      	cmp	r3, #0
 801008c:	d104      	bne.n	8010098 <tcp_close_shutdown+0x48>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010092:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010096:	d055      	beq.n	8010144 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	8b5b      	ldrh	r3, [r3, #26]
 801009c:	f003 0310 	and.w	r3, r3, #16
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d106      	bne.n	80100b2 <tcp_close_shutdown+0x62>
 80100a4:	4b52      	ldr	r3, [pc, #328]	; (80101f0 <tcp_close_shutdown+0x1a0>)
 80100a6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80100aa:	4954      	ldr	r1, [pc, #336]	; (80101fc <tcp_close_shutdown+0x1ac>)
 80100ac:	4852      	ldr	r0, [pc, #328]	; (80101f8 <tcp_close_shutdown+0x1a8>)
 80100ae:	f009 f9ed 	bl	801948c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80100ba:	687d      	ldr	r5, [r7, #4]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	3304      	adds	r3, #4
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	8ad2      	ldrh	r2, [r2, #22]
 80100c4:	6879      	ldr	r1, [r7, #4]
 80100c6:	8b09      	ldrh	r1, [r1, #24]
 80100c8:	9102      	str	r1, [sp, #8]
 80100ca:	9201      	str	r2, [sp, #4]
 80100cc:	9300      	str	r3, [sp, #0]
 80100ce:	462b      	mov	r3, r5
 80100d0:	4622      	mov	r2, r4
 80100d2:	4601      	mov	r1, r0
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f005 fdbb 	bl	8015c50 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f001 fb98 	bl	8011810 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80100e0:	4b47      	ldr	r3, [pc, #284]	; (8010200 <tcp_close_shutdown+0x1b0>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d105      	bne.n	80100f6 <tcp_close_shutdown+0xa6>
 80100ea:	4b45      	ldr	r3, [pc, #276]	; (8010200 <tcp_close_shutdown+0x1b0>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	4a43      	ldr	r2, [pc, #268]	; (8010200 <tcp_close_shutdown+0x1b0>)
 80100f2:	6013      	str	r3, [r2, #0]
 80100f4:	e013      	b.n	801011e <tcp_close_shutdown+0xce>
 80100f6:	4b42      	ldr	r3, [pc, #264]	; (8010200 <tcp_close_shutdown+0x1b0>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	60fb      	str	r3, [r7, #12]
 80100fc:	e00c      	b.n	8010118 <tcp_close_shutdown+0xc8>
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	429a      	cmp	r2, r3
 8010106:	d104      	bne.n	8010112 <tcp_close_shutdown+0xc2>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	68da      	ldr	r2, [r3, #12]
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	60da      	str	r2, [r3, #12]
 8010110:	e005      	b.n	801011e <tcp_close_shutdown+0xce>
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	60fb      	str	r3, [r7, #12]
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1ef      	bne.n	80100fe <tcp_close_shutdown+0xae>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	60da      	str	r2, [r3, #12]
 8010124:	4b37      	ldr	r3, [pc, #220]	; (8010204 <tcp_close_shutdown+0x1b4>)
 8010126:	2201      	movs	r2, #1
 8010128:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801012a:	4b37      	ldr	r3, [pc, #220]	; (8010208 <tcp_close_shutdown+0x1b8>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	429a      	cmp	r2, r3
 8010132:	d102      	bne.n	801013a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010134:	f004 f830 	bl	8014198 <tcp_trigger_input_pcb_close>
 8010138:	e002      	b.n	8010140 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f7ff fed6 	bl	800feec <tcp_free>
      }
      return ERR_OK;
 8010140:	2300      	movs	r3, #0
 8010142:	e050      	b.n	80101e6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	7d1b      	ldrb	r3, [r3, #20]
 8010148:	2b02      	cmp	r3, #2
 801014a:	d03b      	beq.n	80101c4 <tcp_close_shutdown+0x174>
 801014c:	2b02      	cmp	r3, #2
 801014e:	dc44      	bgt.n	80101da <tcp_close_shutdown+0x18a>
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <tcp_close_shutdown+0x10a>
 8010154:	2b01      	cmp	r3, #1
 8010156:	d02a      	beq.n	80101ae <tcp_close_shutdown+0x15e>
 8010158:	e03f      	b.n	80101da <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	8adb      	ldrh	r3, [r3, #22]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d021      	beq.n	80101a6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010162:	4b2a      	ldr	r3, [pc, #168]	; (801020c <tcp_close_shutdown+0x1bc>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	429a      	cmp	r2, r3
 801016a:	d105      	bne.n	8010178 <tcp_close_shutdown+0x128>
 801016c:	4b27      	ldr	r3, [pc, #156]	; (801020c <tcp_close_shutdown+0x1bc>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	4a26      	ldr	r2, [pc, #152]	; (801020c <tcp_close_shutdown+0x1bc>)
 8010174:	6013      	str	r3, [r2, #0]
 8010176:	e013      	b.n	80101a0 <tcp_close_shutdown+0x150>
 8010178:	4b24      	ldr	r3, [pc, #144]	; (801020c <tcp_close_shutdown+0x1bc>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	60bb      	str	r3, [r7, #8]
 801017e:	e00c      	b.n	801019a <tcp_close_shutdown+0x14a>
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	429a      	cmp	r2, r3
 8010188:	d104      	bne.n	8010194 <tcp_close_shutdown+0x144>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	68da      	ldr	r2, [r3, #12]
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	60da      	str	r2, [r3, #12]
 8010192:	e005      	b.n	80101a0 <tcp_close_shutdown+0x150>
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	60bb      	str	r3, [r7, #8]
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d1ef      	bne.n	8010180 <tcp_close_shutdown+0x130>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7ff fea0 	bl	800feec <tcp_free>
      break;
 80101ac:	e01a      	b.n	80101e4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7ff ff14 	bl	800ffdc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80101b4:	6879      	ldr	r1, [r7, #4]
 80101b6:	4816      	ldr	r0, [pc, #88]	; (8010210 <tcp_close_shutdown+0x1c0>)
 80101b8:	f001 fb7a 	bl	80118b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f7ff feb1 	bl	800ff24 <tcp_free_listen>
      break;
 80101c2:	e00f      	b.n	80101e4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80101c4:	6879      	ldr	r1, [r7, #4]
 80101c6:	480e      	ldr	r0, [pc, #56]	; (8010200 <tcp_close_shutdown+0x1b0>)
 80101c8:	f001 fb72 	bl	80118b0 <tcp_pcb_remove>
 80101cc:	4b0d      	ldr	r3, [pc, #52]	; (8010204 <tcp_close_shutdown+0x1b4>)
 80101ce:	2201      	movs	r2, #1
 80101d0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7ff fe8a 	bl	800feec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80101d8:	e004      	b.n	80101e4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 f81a 	bl	8010214 <tcp_close_shutdown_fin>
 80101e0:	4603      	mov	r3, r0
 80101e2:	e000      	b.n	80101e6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bdb0      	pop	{r4, r5, r7, pc}
 80101ee:	bf00      	nop
 80101f0:	0801b7ec 	.word	0x0801b7ec
 80101f4:	0801b8c0 	.word	0x0801b8c0
 80101f8:	0801b830 	.word	0x0801b830
 80101fc:	0801b8e0 	.word	0x0801b8e0
 8010200:	2004efd0 	.word	0x2004efd0
 8010204:	2004efd8 	.word	0x2004efd8
 8010208:	2004f010 	.word	0x2004f010
 801020c:	2004efc8 	.word	0x2004efc8
 8010210:	2004efcc 	.word	0x2004efcc

08010214 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d106      	bne.n	8010230 <tcp_close_shutdown_fin+0x1c>
 8010222:	4b2e      	ldr	r3, [pc, #184]	; (80102dc <tcp_close_shutdown_fin+0xc8>)
 8010224:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010228:	492d      	ldr	r1, [pc, #180]	; (80102e0 <tcp_close_shutdown_fin+0xcc>)
 801022a:	482e      	ldr	r0, [pc, #184]	; (80102e4 <tcp_close_shutdown_fin+0xd0>)
 801022c:	f009 f92e 	bl	801948c <iprintf>

  switch (pcb->state) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	7d1b      	ldrb	r3, [r3, #20]
 8010234:	2b07      	cmp	r3, #7
 8010236:	d020      	beq.n	801027a <tcp_close_shutdown_fin+0x66>
 8010238:	2b07      	cmp	r3, #7
 801023a:	dc2b      	bgt.n	8010294 <tcp_close_shutdown_fin+0x80>
 801023c:	2b03      	cmp	r3, #3
 801023e:	d002      	beq.n	8010246 <tcp_close_shutdown_fin+0x32>
 8010240:	2b04      	cmp	r3, #4
 8010242:	d00d      	beq.n	8010260 <tcp_close_shutdown_fin+0x4c>
 8010244:	e026      	b.n	8010294 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f004 fe10 	bl	8014e6c <tcp_send_fin>
 801024c:	4603      	mov	r3, r0
 801024e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d11f      	bne.n	8010298 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2205      	movs	r2, #5
 801025c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801025e:	e01b      	b.n	8010298 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f004 fe03 	bl	8014e6c <tcp_send_fin>
 8010266:	4603      	mov	r3, r0
 8010268:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801026a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d114      	bne.n	801029c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2205      	movs	r2, #5
 8010276:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010278:	e010      	b.n	801029c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f004 fdf6 	bl	8014e6c <tcp_send_fin>
 8010280:	4603      	mov	r3, r0
 8010282:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d109      	bne.n	80102a0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2209      	movs	r2, #9
 8010290:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010292:	e005      	b.n	80102a0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010294:	2300      	movs	r3, #0
 8010296:	e01c      	b.n	80102d2 <tcp_close_shutdown_fin+0xbe>
      break;
 8010298:	bf00      	nop
 801029a:	e002      	b.n	80102a2 <tcp_close_shutdown_fin+0x8e>
      break;
 801029c:	bf00      	nop
 801029e:	e000      	b.n	80102a2 <tcp_close_shutdown_fin+0x8e>
      break;
 80102a0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80102a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d103      	bne.n	80102b2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f004 ff1c 	bl	80150e8 <tcp_output>
 80102b0:	e00d      	b.n	80102ce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80102b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102ba:	d108      	bne.n	80102ce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	8b5b      	ldrh	r3, [r3, #26]
 80102c0:	f043 0308 	orr.w	r3, r3, #8
 80102c4:	b29a      	uxth	r2, r3
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80102ca:	2300      	movs	r3, #0
 80102cc:	e001      	b.n	80102d2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80102ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	0801b7ec 	.word	0x0801b7ec
 80102e0:	0801b89c 	.word	0x0801b89c
 80102e4:	0801b830 	.word	0x0801b830

080102e8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d109      	bne.n	801030a <tcp_close+0x22>
 80102f6:	4b0f      	ldr	r3, [pc, #60]	; (8010334 <tcp_close+0x4c>)
 80102f8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80102fc:	490e      	ldr	r1, [pc, #56]	; (8010338 <tcp_close+0x50>)
 80102fe:	480f      	ldr	r0, [pc, #60]	; (801033c <tcp_close+0x54>)
 8010300:	f009 f8c4 	bl	801948c <iprintf>
 8010304:	f06f 030f 	mvn.w	r3, #15
 8010308:	e00f      	b.n	801032a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	7d1b      	ldrb	r3, [r3, #20]
 801030e:	2b01      	cmp	r3, #1
 8010310:	d006      	beq.n	8010320 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	8b5b      	ldrh	r3, [r3, #26]
 8010316:	f043 0310 	orr.w	r3, r3, #16
 801031a:	b29a      	uxth	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010320:	2101      	movs	r1, #1
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7ff fe94 	bl	8010050 <tcp_close_shutdown>
 8010328:	4603      	mov	r3, r0
}
 801032a:	4618      	mov	r0, r3
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	0801b7ec 	.word	0x0801b7ec
 8010338:	0801b8fc 	.word	0x0801b8fc
 801033c:	0801b830 	.word	0x0801b830

08010340 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b084      	sub	sp, #16
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d109      	bne.n	8010366 <tcp_shutdown+0x26>
 8010352:	4b26      	ldr	r3, [pc, #152]	; (80103ec <tcp_shutdown+0xac>)
 8010354:	f240 2207 	movw	r2, #519	; 0x207
 8010358:	4925      	ldr	r1, [pc, #148]	; (80103f0 <tcp_shutdown+0xb0>)
 801035a:	4826      	ldr	r0, [pc, #152]	; (80103f4 <tcp_shutdown+0xb4>)
 801035c:	f009 f896 	bl	801948c <iprintf>
 8010360:	f06f 030f 	mvn.w	r3, #15
 8010364:	e03d      	b.n	80103e2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	7d1b      	ldrb	r3, [r3, #20]
 801036a:	2b01      	cmp	r3, #1
 801036c:	d102      	bne.n	8010374 <tcp_shutdown+0x34>
    return ERR_CONN;
 801036e:	f06f 030a 	mvn.w	r3, #10
 8010372:	e036      	b.n	80103e2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d01b      	beq.n	80103b2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	8b5b      	ldrh	r3, [r3, #26]
 801037e:	f043 0310 	orr.w	r3, r3, #16
 8010382:	b29a      	uxth	r2, r3
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d005      	beq.n	801039a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801038e:	2101      	movs	r1, #1
 8010390:	68f8      	ldr	r0, [r7, #12]
 8010392:	f7ff fe5d 	bl	8010050 <tcp_close_shutdown>
 8010396:	4603      	mov	r3, r0
 8010398:	e023      	b.n	80103e2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d007      	beq.n	80103b2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7ff faf4 	bl	800f994 <pbuf_free>
      pcb->refused_data = NULL;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2200      	movs	r2, #0
 80103b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d013      	beq.n	80103e0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	7d1b      	ldrb	r3, [r3, #20]
 80103bc:	2b04      	cmp	r3, #4
 80103be:	dc02      	bgt.n	80103c6 <tcp_shutdown+0x86>
 80103c0:	2b03      	cmp	r3, #3
 80103c2:	da02      	bge.n	80103ca <tcp_shutdown+0x8a>
 80103c4:	e009      	b.n	80103da <tcp_shutdown+0x9a>
 80103c6:	2b07      	cmp	r3, #7
 80103c8:	d107      	bne.n	80103da <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	4619      	mov	r1, r3
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f7ff fe3d 	bl	8010050 <tcp_close_shutdown>
 80103d6:	4603      	mov	r3, r0
 80103d8:	e003      	b.n	80103e2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80103da:	f06f 030a 	mvn.w	r3, #10
 80103de:	e000      	b.n	80103e2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80103e0:	2300      	movs	r3, #0
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	0801b7ec 	.word	0x0801b7ec
 80103f0:	0801b914 	.word	0x0801b914
 80103f4:	0801b830 	.word	0x0801b830

080103f8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b08e      	sub	sp, #56	; 0x38
 80103fc:	af04      	add	r7, sp, #16
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d107      	bne.n	8010418 <tcp_abandon+0x20>
 8010408:	4b52      	ldr	r3, [pc, #328]	; (8010554 <tcp_abandon+0x15c>)
 801040a:	f240 223d 	movw	r2, #573	; 0x23d
 801040e:	4952      	ldr	r1, [pc, #328]	; (8010558 <tcp_abandon+0x160>)
 8010410:	4852      	ldr	r0, [pc, #328]	; (801055c <tcp_abandon+0x164>)
 8010412:	f009 f83b 	bl	801948c <iprintf>
 8010416:	e099      	b.n	801054c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	7d1b      	ldrb	r3, [r3, #20]
 801041c:	2b01      	cmp	r3, #1
 801041e:	d106      	bne.n	801042e <tcp_abandon+0x36>
 8010420:	4b4c      	ldr	r3, [pc, #304]	; (8010554 <tcp_abandon+0x15c>)
 8010422:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010426:	494e      	ldr	r1, [pc, #312]	; (8010560 <tcp_abandon+0x168>)
 8010428:	484c      	ldr	r0, [pc, #304]	; (801055c <tcp_abandon+0x164>)
 801042a:	f009 f82f 	bl	801948c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	7d1b      	ldrb	r3, [r3, #20]
 8010432:	2b0a      	cmp	r3, #10
 8010434:	d107      	bne.n	8010446 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010436:	6879      	ldr	r1, [r7, #4]
 8010438:	484a      	ldr	r0, [pc, #296]	; (8010564 <tcp_abandon+0x16c>)
 801043a:	f001 fa39 	bl	80118b0 <tcp_pcb_remove>
    tcp_free(pcb);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7ff fd54 	bl	800feec <tcp_free>
 8010444:	e082      	b.n	801054c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010446:	2300      	movs	r3, #0
 8010448:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801044a:	2300      	movs	r3, #0
 801044c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010452:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010458:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010460:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	691b      	ldr	r3, [r3, #16]
 8010466:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	7d1b      	ldrb	r3, [r3, #20]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d126      	bne.n	80104be <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	8adb      	ldrh	r3, [r3, #22]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d02e      	beq.n	80104d6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010478:	4b3b      	ldr	r3, [pc, #236]	; (8010568 <tcp_abandon+0x170>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	687a      	ldr	r2, [r7, #4]
 801047e:	429a      	cmp	r2, r3
 8010480:	d105      	bne.n	801048e <tcp_abandon+0x96>
 8010482:	4b39      	ldr	r3, [pc, #228]	; (8010568 <tcp_abandon+0x170>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	4a37      	ldr	r2, [pc, #220]	; (8010568 <tcp_abandon+0x170>)
 801048a:	6013      	str	r3, [r2, #0]
 801048c:	e013      	b.n	80104b6 <tcp_abandon+0xbe>
 801048e:	4b36      	ldr	r3, [pc, #216]	; (8010568 <tcp_abandon+0x170>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	61fb      	str	r3, [r7, #28]
 8010494:	e00c      	b.n	80104b0 <tcp_abandon+0xb8>
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	429a      	cmp	r2, r3
 801049e:	d104      	bne.n	80104aa <tcp_abandon+0xb2>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	68da      	ldr	r2, [r3, #12]
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	60da      	str	r2, [r3, #12]
 80104a8:	e005      	b.n	80104b6 <tcp_abandon+0xbe>
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	61fb      	str	r3, [r7, #28]
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d1ef      	bne.n	8010496 <tcp_abandon+0x9e>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2200      	movs	r2, #0
 80104ba:	60da      	str	r2, [r3, #12]
 80104bc:	e00b      	b.n	80104d6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	8adb      	ldrh	r3, [r3, #22]
 80104c6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80104c8:	6879      	ldr	r1, [r7, #4]
 80104ca:	4828      	ldr	r0, [pc, #160]	; (801056c <tcp_abandon+0x174>)
 80104cc:	f001 f9f0 	bl	80118b0 <tcp_pcb_remove>
 80104d0:	4b27      	ldr	r3, [pc, #156]	; (8010570 <tcp_abandon+0x178>)
 80104d2:	2201      	movs	r2, #1
 80104d4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d004      	beq.n	80104e8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e2:	4618      	mov	r0, r3
 80104e4:	f000 fec4 	bl	8011270 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d004      	beq.n	80104fa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f4:	4618      	mov	r0, r3
 80104f6:	f000 febb 	bl	8011270 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d004      	beq.n	801050c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010506:	4618      	mov	r0, r3
 8010508:	f000 feb2 	bl	8011270 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050e:	2b00      	cmp	r3, #0
 8010510:	d00e      	beq.n	8010530 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010512:	6879      	ldr	r1, [r7, #4]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	3304      	adds	r3, #4
 8010518:	687a      	ldr	r2, [r7, #4]
 801051a:	8b12      	ldrh	r2, [r2, #24]
 801051c:	9202      	str	r2, [sp, #8]
 801051e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010520:	9201      	str	r2, [sp, #4]
 8010522:	9300      	str	r3, [sp, #0]
 8010524:	460b      	mov	r3, r1
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	69b9      	ldr	r1, [r7, #24]
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f005 fb90 	bl	8015c50 <tcp_rst>
    }
    last_state = pcb->state;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	7d1b      	ldrb	r3, [r3, #20]
 8010534:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7ff fcd8 	bl	800feec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d004      	beq.n	801054c <tcp_abandon+0x154>
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	f06f 010c 	mvn.w	r1, #12
 8010548:	68f8      	ldr	r0, [r7, #12]
 801054a:	4798      	blx	r3
  }
}
 801054c:	3728      	adds	r7, #40	; 0x28
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	0801b7ec 	.word	0x0801b7ec
 8010558:	0801b930 	.word	0x0801b930
 801055c:	0801b830 	.word	0x0801b830
 8010560:	0801b94c 	.word	0x0801b94c
 8010564:	2004efd4 	.word	0x2004efd4
 8010568:	2004efc8 	.word	0x2004efc8
 801056c:	2004efd0 	.word	0x2004efd0
 8010570:	2004efd8 	.word	0x2004efd8

08010574 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801057c:	2101      	movs	r1, #1
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7ff ff3a 	bl	80103f8 <tcp_abandon>
}
 8010584:	bf00      	nop
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b088      	sub	sp, #32
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	4613      	mov	r3, r2
 8010598:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801059a:	2304      	movs	r3, #4
 801059c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d101      	bne.n	80105a8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80105a4:	4b3e      	ldr	r3, [pc, #248]	; (80106a0 <tcp_bind+0x114>)
 80105a6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d109      	bne.n	80105c2 <tcp_bind+0x36>
 80105ae:	4b3d      	ldr	r3, [pc, #244]	; (80106a4 <tcp_bind+0x118>)
 80105b0:	f240 22a9 	movw	r2, #681	; 0x2a9
 80105b4:	493c      	ldr	r1, [pc, #240]	; (80106a8 <tcp_bind+0x11c>)
 80105b6:	483d      	ldr	r0, [pc, #244]	; (80106ac <tcp_bind+0x120>)
 80105b8:	f008 ff68 	bl	801948c <iprintf>
 80105bc:	f06f 030f 	mvn.w	r3, #15
 80105c0:	e06a      	b.n	8010698 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	7d1b      	ldrb	r3, [r3, #20]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d009      	beq.n	80105de <tcp_bind+0x52>
 80105ca:	4b36      	ldr	r3, [pc, #216]	; (80106a4 <tcp_bind+0x118>)
 80105cc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80105d0:	4937      	ldr	r1, [pc, #220]	; (80106b0 <tcp_bind+0x124>)
 80105d2:	4836      	ldr	r0, [pc, #216]	; (80106ac <tcp_bind+0x120>)
 80105d4:	f008 ff5a 	bl	801948c <iprintf>
 80105d8:	f06f 0305 	mvn.w	r3, #5
 80105dc:	e05c      	b.n	8010698 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80105de:	88fb      	ldrh	r3, [r7, #6]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d109      	bne.n	80105f8 <tcp_bind+0x6c>
    port = tcp_new_port();
 80105e4:	f000 f9de 	bl	80109a4 <tcp_new_port>
 80105e8:	4603      	mov	r3, r0
 80105ea:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80105ec:	88fb      	ldrh	r3, [r7, #6]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d135      	bne.n	801065e <tcp_bind+0xd2>
      return ERR_BUF;
 80105f2:	f06f 0301 	mvn.w	r3, #1
 80105f6:	e04f      	b.n	8010698 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80105f8:	2300      	movs	r3, #0
 80105fa:	61fb      	str	r3, [r7, #28]
 80105fc:	e02b      	b.n	8010656 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80105fe:	4a2d      	ldr	r2, [pc, #180]	; (80106b4 <tcp_bind+0x128>)
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	61bb      	str	r3, [r7, #24]
 801060a:	e01e      	b.n	801064a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	8adb      	ldrh	r3, [r3, #22]
 8010610:	88fa      	ldrh	r2, [r7, #6]
 8010612:	429a      	cmp	r2, r3
 8010614:	d116      	bne.n	8010644 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010616:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010618:	2b00      	cmp	r3, #0
 801061a:	d010      	beq.n	801063e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801061c:	69bb      	ldr	r3, [r7, #24]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00c      	beq.n	801063e <tcp_bind+0xb2>
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d009      	beq.n	801063e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d005      	beq.n	801063e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801063a:	429a      	cmp	r2, r3
 801063c:	d102      	bne.n	8010644 <tcp_bind+0xb8>
              return ERR_USE;
 801063e:	f06f 0307 	mvn.w	r3, #7
 8010642:	e029      	b.n	8010698 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	61bb      	str	r3, [r7, #24]
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1dd      	bne.n	801060c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	3301      	adds	r3, #1
 8010654:	61fb      	str	r3, [r7, #28]
 8010656:	69fa      	ldr	r2, [r7, #28]
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	429a      	cmp	r2, r3
 801065c:	dbcf      	blt.n	80105fe <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00c      	beq.n	801067e <tcp_bind+0xf2>
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d008      	beq.n	801067e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d002      	beq.n	8010678 <tcp_bind+0xec>
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	e000      	b.n	801067a <tcp_bind+0xee>
 8010678:	2300      	movs	r3, #0
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	88fa      	ldrh	r2, [r7, #6]
 8010682:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010684:	4b0c      	ldr	r3, [pc, #48]	; (80106b8 <tcp_bind+0x12c>)
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	60da      	str	r2, [r3, #12]
 801068c:	4a0a      	ldr	r2, [pc, #40]	; (80106b8 <tcp_bind+0x12c>)
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6013      	str	r3, [r2, #0]
 8010692:	f005 fc9f 	bl	8015fd4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010696:	2300      	movs	r3, #0
}
 8010698:	4618      	mov	r0, r3
 801069a:	3720      	adds	r7, #32
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	0801d880 	.word	0x0801d880
 80106a4:	0801b7ec 	.word	0x0801b7ec
 80106a8:	0801b980 	.word	0x0801b980
 80106ac:	0801b830 	.word	0x0801b830
 80106b0:	0801b998 	.word	0x0801b998
 80106b4:	0801d858 	.word	0x0801d858
 80106b8:	2004efc8 	.word	0x2004efc8

080106bc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	4613      	mov	r3, r2
 80106c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d106      	bne.n	80106de <tcp_accept_null+0x22>
 80106d0:	4b07      	ldr	r3, [pc, #28]	; (80106f0 <tcp_accept_null+0x34>)
 80106d2:	f240 320f 	movw	r2, #783	; 0x30f
 80106d6:	4907      	ldr	r1, [pc, #28]	; (80106f4 <tcp_accept_null+0x38>)
 80106d8:	4807      	ldr	r0, [pc, #28]	; (80106f8 <tcp_accept_null+0x3c>)
 80106da:	f008 fed7 	bl	801948c <iprintf>

  tcp_abort(pcb);
 80106de:	68b8      	ldr	r0, [r7, #8]
 80106e0:	f7ff ff48 	bl	8010574 <tcp_abort>

  return ERR_ABRT;
 80106e4:	f06f 030c 	mvn.w	r3, #12
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3710      	adds	r7, #16
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	0801b7ec 	.word	0x0801b7ec
 80106f4:	0801b9c0 	.word	0x0801b9c0
 80106f8:	0801b830 	.word	0x0801b830

080106fc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b088      	sub	sp, #32
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	460b      	mov	r3, r1
 8010706:	607a      	str	r2, [r7, #4]
 8010708:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801070a:	2300      	movs	r3, #0
 801070c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d109      	bne.n	8010728 <tcp_listen_with_backlog_and_err+0x2c>
 8010714:	4b47      	ldr	r3, [pc, #284]	; (8010834 <tcp_listen_with_backlog_and_err+0x138>)
 8010716:	f240 3259 	movw	r2, #857	; 0x359
 801071a:	4947      	ldr	r1, [pc, #284]	; (8010838 <tcp_listen_with_backlog_and_err+0x13c>)
 801071c:	4847      	ldr	r0, [pc, #284]	; (801083c <tcp_listen_with_backlog_and_err+0x140>)
 801071e:	f008 feb5 	bl	801948c <iprintf>
 8010722:	23f0      	movs	r3, #240	; 0xf0
 8010724:	76fb      	strb	r3, [r7, #27]
 8010726:	e079      	b.n	801081c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	7d1b      	ldrb	r3, [r3, #20]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d009      	beq.n	8010744 <tcp_listen_with_backlog_and_err+0x48>
 8010730:	4b40      	ldr	r3, [pc, #256]	; (8010834 <tcp_listen_with_backlog_and_err+0x138>)
 8010732:	f240 325a 	movw	r2, #858	; 0x35a
 8010736:	4942      	ldr	r1, [pc, #264]	; (8010840 <tcp_listen_with_backlog_and_err+0x144>)
 8010738:	4840      	ldr	r0, [pc, #256]	; (801083c <tcp_listen_with_backlog_and_err+0x140>)
 801073a:	f008 fea7 	bl	801948c <iprintf>
 801073e:	23f1      	movs	r3, #241	; 0xf1
 8010740:	76fb      	strb	r3, [r7, #27]
 8010742:	e06b      	b.n	801081c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	7d1b      	ldrb	r3, [r3, #20]
 8010748:	2b01      	cmp	r3, #1
 801074a:	d104      	bne.n	8010756 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8010750:	23f7      	movs	r3, #247	; 0xf7
 8010752:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010754:	e062      	b.n	801081c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010756:	2002      	movs	r0, #2
 8010758:	f7fe fa02 	bl	800eb60 <memp_malloc>
 801075c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801075e:	69fb      	ldr	r3, [r7, #28]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d102      	bne.n	801076a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8010764:	23ff      	movs	r3, #255	; 0xff
 8010766:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010768:	e058      	b.n	801081c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	691a      	ldr	r2, [r3, #16]
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	8ada      	ldrh	r2, [r3, #22]
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	2201      	movs	r2, #1
 801077e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	7d5a      	ldrb	r2, [r3, #21]
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	7a5a      	ldrb	r2, [r3, #9]
 801078c:	69fb      	ldr	r3, [r7, #28]
 801078e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	2200      	movs	r2, #0
 8010794:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	7ada      	ldrb	r2, [r3, #11]
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	7a9a      	ldrb	r2, [r3, #10]
 80107a2:	69fb      	ldr	r3, [r7, #28]
 80107a4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	8adb      	ldrh	r3, [r3, #22]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d021      	beq.n	80107fa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80107b6:	4b23      	ldr	r3, [pc, #140]	; (8010844 <tcp_listen_with_backlog_and_err+0x148>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d105      	bne.n	80107cc <tcp_listen_with_backlog_and_err+0xd0>
 80107c0:	4b20      	ldr	r3, [pc, #128]	; (8010844 <tcp_listen_with_backlog_and_err+0x148>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	4a1f      	ldr	r2, [pc, #124]	; (8010844 <tcp_listen_with_backlog_and_err+0x148>)
 80107c8:	6013      	str	r3, [r2, #0]
 80107ca:	e013      	b.n	80107f4 <tcp_listen_with_backlog_and_err+0xf8>
 80107cc:	4b1d      	ldr	r3, [pc, #116]	; (8010844 <tcp_listen_with_backlog_and_err+0x148>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	617b      	str	r3, [r7, #20]
 80107d2:	e00c      	b.n	80107ee <tcp_listen_with_backlog_and_err+0xf2>
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d104      	bne.n	80107e8 <tcp_listen_with_backlog_and_err+0xec>
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	68da      	ldr	r2, [r3, #12]
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	60da      	str	r2, [r3, #12]
 80107e6:	e005      	b.n	80107f4 <tcp_listen_with_backlog_and_err+0xf8>
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	617b      	str	r3, [r7, #20]
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d1ef      	bne.n	80107d4 <tcp_listen_with_backlog_and_err+0xd8>
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2200      	movs	r2, #0
 80107f8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80107fa:	68f8      	ldr	r0, [r7, #12]
 80107fc:	f7ff fb76 	bl	800feec <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	4a11      	ldr	r2, [pc, #68]	; (8010848 <tcp_listen_with_backlog_and_err+0x14c>)
 8010804:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010806:	4b11      	ldr	r3, [pc, #68]	; (801084c <tcp_listen_with_backlog_and_err+0x150>)
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	69fb      	ldr	r3, [r7, #28]
 801080c:	60da      	str	r2, [r3, #12]
 801080e:	4a0f      	ldr	r2, [pc, #60]	; (801084c <tcp_listen_with_backlog_and_err+0x150>)
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	6013      	str	r3, [r2, #0]
 8010814:	f005 fbde 	bl	8015fd4 <tcp_timer_needed>
  res = ERR_OK;
 8010818:	2300      	movs	r3, #0
 801081a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d002      	beq.n	8010828 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	7efa      	ldrb	r2, [r7, #27]
 8010826:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8010828:	69fb      	ldr	r3, [r7, #28]
}
 801082a:	4618      	mov	r0, r3
 801082c:	3720      	adds	r7, #32
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}
 8010832:	bf00      	nop
 8010834:	0801b7ec 	.word	0x0801b7ec
 8010838:	0801b9e0 	.word	0x0801b9e0
 801083c:	0801b830 	.word	0x0801b830
 8010840:	0801ba10 	.word	0x0801ba10
 8010844:	2004efc8 	.word	0x2004efc8
 8010848:	080106bd 	.word	0x080106bd
 801084c:	2004efcc 	.word	0x2004efcc

08010850 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d106      	bne.n	801086c <tcp_update_rcv_ann_wnd+0x1c>
 801085e:	4b25      	ldr	r3, [pc, #148]	; (80108f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8010860:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010864:	4924      	ldr	r1, [pc, #144]	; (80108f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8010866:	4825      	ldr	r0, [pc, #148]	; (80108fc <tcp_update_rcv_ann_wnd+0xac>)
 8010868:	f008 fe10 	bl	801948c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010874:	4413      	add	r3, r2
 8010876:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010880:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010884:	bf28      	it	cs
 8010886:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801088a:	b292      	uxth	r2, r2
 801088c:	4413      	add	r3, r2
 801088e:	68fa      	ldr	r2, [r7, #12]
 8010890:	1ad3      	subs	r3, r2, r3
 8010892:	2b00      	cmp	r3, #0
 8010894:	db08      	blt.n	80108a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	1ad3      	subs	r3, r2, r3
 80108a6:	e020      	b.n	80108ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	dd03      	ble.n	80108be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80108bc:	e014      	b.n	80108e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c6:	1ad3      	subs	r3, r2, r3
 80108c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108d0:	d306      	bcc.n	80108e0 <tcp_update_rcv_ann_wnd+0x90>
 80108d2:	4b08      	ldr	r3, [pc, #32]	; (80108f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80108d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80108d8:	4909      	ldr	r1, [pc, #36]	; (8010900 <tcp_update_rcv_ann_wnd+0xb0>)
 80108da:	4808      	ldr	r0, [pc, #32]	; (80108fc <tcp_update_rcv_ann_wnd+0xac>)
 80108dc:	f008 fdd6 	bl	801948c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80108e8:	2300      	movs	r3, #0
  }
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3710      	adds	r7, #16
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	0801b7ec 	.word	0x0801b7ec
 80108f8:	0801ba48 	.word	0x0801ba48
 80108fc:	0801b830 	.word	0x0801b830
 8010900:	0801ba6c 	.word	0x0801ba6c

08010904 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	460b      	mov	r3, r1
 801090e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d107      	bne.n	8010926 <tcp_recved+0x22>
 8010916:	4b1f      	ldr	r3, [pc, #124]	; (8010994 <tcp_recved+0x90>)
 8010918:	f240 32cf 	movw	r2, #975	; 0x3cf
 801091c:	491e      	ldr	r1, [pc, #120]	; (8010998 <tcp_recved+0x94>)
 801091e:	481f      	ldr	r0, [pc, #124]	; (801099c <tcp_recved+0x98>)
 8010920:	f008 fdb4 	bl	801948c <iprintf>
 8010924:	e032      	b.n	801098c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	7d1b      	ldrb	r3, [r3, #20]
 801092a:	2b01      	cmp	r3, #1
 801092c:	d106      	bne.n	801093c <tcp_recved+0x38>
 801092e:	4b19      	ldr	r3, [pc, #100]	; (8010994 <tcp_recved+0x90>)
 8010930:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010934:	491a      	ldr	r1, [pc, #104]	; (80109a0 <tcp_recved+0x9c>)
 8010936:	4819      	ldr	r0, [pc, #100]	; (801099c <tcp_recved+0x98>)
 8010938:	f008 fda8 	bl	801948c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010940:	887b      	ldrh	r3, [r7, #2]
 8010942:	4413      	add	r3, r2
 8010944:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010946:	89fb      	ldrh	r3, [r7, #14]
 8010948:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801094c:	d804      	bhi.n	8010958 <tcp_recved+0x54>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010952:	89fa      	ldrh	r2, [r7, #14]
 8010954:	429a      	cmp	r2, r3
 8010956:	d204      	bcs.n	8010962 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801095e:	851a      	strh	r2, [r3, #40]	; 0x28
 8010960:	e002      	b.n	8010968 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	89fa      	ldrh	r2, [r7, #14]
 8010966:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7ff ff71 	bl	8010850 <tcp_update_rcv_ann_wnd>
 801096e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010976:	d309      	bcc.n	801098c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	8b5b      	ldrh	r3, [r3, #26]
 801097c:	f043 0302 	orr.w	r3, r3, #2
 8010980:	b29a      	uxth	r2, r3
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f004 fbae 	bl	80150e8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801098c:	3710      	adds	r7, #16
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	0801b7ec 	.word	0x0801b7ec
 8010998:	0801ba88 	.word	0x0801ba88
 801099c:	0801b830 	.word	0x0801b830
 80109a0:	0801baa0 	.word	0x0801baa0

080109a4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80109aa:	2300      	movs	r3, #0
 80109ac:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80109ae:	4b1e      	ldr	r3, [pc, #120]	; (8010a28 <tcp_new_port+0x84>)
 80109b0:	881b      	ldrh	r3, [r3, #0]
 80109b2:	3301      	adds	r3, #1
 80109b4:	b29a      	uxth	r2, r3
 80109b6:	4b1c      	ldr	r3, [pc, #112]	; (8010a28 <tcp_new_port+0x84>)
 80109b8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80109ba:	4b1b      	ldr	r3, [pc, #108]	; (8010a28 <tcp_new_port+0x84>)
 80109bc:	881b      	ldrh	r3, [r3, #0]
 80109be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d103      	bne.n	80109ce <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80109c6:	4b18      	ldr	r3, [pc, #96]	; (8010a28 <tcp_new_port+0x84>)
 80109c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80109cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80109ce:	2300      	movs	r3, #0
 80109d0:	71fb      	strb	r3, [r7, #7]
 80109d2:	e01e      	b.n	8010a12 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80109d4:	79fb      	ldrb	r3, [r7, #7]
 80109d6:	4a15      	ldr	r2, [pc, #84]	; (8010a2c <tcp_new_port+0x88>)
 80109d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	603b      	str	r3, [r7, #0]
 80109e0:	e011      	b.n	8010a06 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	8ada      	ldrh	r2, [r3, #22]
 80109e6:	4b10      	ldr	r3, [pc, #64]	; (8010a28 <tcp_new_port+0x84>)
 80109e8:	881b      	ldrh	r3, [r3, #0]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d108      	bne.n	8010a00 <tcp_new_port+0x5c>
        n++;
 80109ee:	88bb      	ldrh	r3, [r7, #4]
 80109f0:	3301      	adds	r3, #1
 80109f2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80109f4:	88bb      	ldrh	r3, [r7, #4]
 80109f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80109fa:	d3d8      	bcc.n	80109ae <tcp_new_port+0xa>
          return 0;
 80109fc:	2300      	movs	r3, #0
 80109fe:	e00d      	b.n	8010a1c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	603b      	str	r3, [r7, #0]
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d1ea      	bne.n	80109e2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010a0c:	79fb      	ldrb	r3, [r7, #7]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	71fb      	strb	r3, [r7, #7]
 8010a12:	79fb      	ldrb	r3, [r7, #7]
 8010a14:	2b03      	cmp	r3, #3
 8010a16:	d9dd      	bls.n	80109d4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010a18:	4b03      	ldr	r3, [pc, #12]	; (8010a28 <tcp_new_port+0x84>)
 8010a1a:	881b      	ldrh	r3, [r3, #0]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr
 8010a28:	20001a50 	.word	0x20001a50
 8010a2c:	0801d858 	.word	0x0801d858

08010a30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010a30:	b5b0      	push	{r4, r5, r7, lr}
 8010a32:	b090      	sub	sp, #64	; 0x40
 8010a34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010a36:	2300      	movs	r3, #0
 8010a38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010a3c:	4b94      	ldr	r3, [pc, #592]	; (8010c90 <tcp_slowtmr+0x260>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	3301      	adds	r3, #1
 8010a42:	4a93      	ldr	r2, [pc, #588]	; (8010c90 <tcp_slowtmr+0x260>)
 8010a44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010a46:	4b93      	ldr	r3, [pc, #588]	; (8010c94 <tcp_slowtmr+0x264>)
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	b2da      	uxtb	r2, r3
 8010a4e:	4b91      	ldr	r3, [pc, #580]	; (8010c94 <tcp_slowtmr+0x264>)
 8010a50:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010a52:	2300      	movs	r3, #0
 8010a54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010a56:	4b90      	ldr	r3, [pc, #576]	; (8010c98 <tcp_slowtmr+0x268>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010a5c:	e29d      	b.n	8010f9a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a60:	7d1b      	ldrb	r3, [r3, #20]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d106      	bne.n	8010a74 <tcp_slowtmr+0x44>
 8010a66:	4b8d      	ldr	r3, [pc, #564]	; (8010c9c <tcp_slowtmr+0x26c>)
 8010a68:	f240 42be 	movw	r2, #1214	; 0x4be
 8010a6c:	498c      	ldr	r1, [pc, #560]	; (8010ca0 <tcp_slowtmr+0x270>)
 8010a6e:	488d      	ldr	r0, [pc, #564]	; (8010ca4 <tcp_slowtmr+0x274>)
 8010a70:	f008 fd0c 	bl	801948c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a76:	7d1b      	ldrb	r3, [r3, #20]
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d106      	bne.n	8010a8a <tcp_slowtmr+0x5a>
 8010a7c:	4b87      	ldr	r3, [pc, #540]	; (8010c9c <tcp_slowtmr+0x26c>)
 8010a7e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010a82:	4989      	ldr	r1, [pc, #548]	; (8010ca8 <tcp_slowtmr+0x278>)
 8010a84:	4887      	ldr	r0, [pc, #540]	; (8010ca4 <tcp_slowtmr+0x274>)
 8010a86:	f008 fd01 	bl	801948c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8c:	7d1b      	ldrb	r3, [r3, #20]
 8010a8e:	2b0a      	cmp	r3, #10
 8010a90:	d106      	bne.n	8010aa0 <tcp_slowtmr+0x70>
 8010a92:	4b82      	ldr	r3, [pc, #520]	; (8010c9c <tcp_slowtmr+0x26c>)
 8010a94:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010a98:	4984      	ldr	r1, [pc, #528]	; (8010cac <tcp_slowtmr+0x27c>)
 8010a9a:	4882      	ldr	r0, [pc, #520]	; (8010ca4 <tcp_slowtmr+0x274>)
 8010a9c:	f008 fcf6 	bl	801948c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa2:	7f9a      	ldrb	r2, [r3, #30]
 8010aa4:	4b7b      	ldr	r3, [pc, #492]	; (8010c94 <tcp_slowtmr+0x264>)
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d105      	bne.n	8010ab8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010ab6:	e270      	b.n	8010f9a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010ab8:	4b76      	ldr	r3, [pc, #472]	; (8010c94 <tcp_slowtmr+0x264>)
 8010aba:	781a      	ldrb	r2, [r3, #0]
 8010abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010abe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ace:	7d1b      	ldrb	r3, [r3, #20]
 8010ad0:	2b02      	cmp	r3, #2
 8010ad2:	d10a      	bne.n	8010aea <tcp_slowtmr+0xba>
 8010ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ada:	2b05      	cmp	r3, #5
 8010adc:	d905      	bls.n	8010aea <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ae8:	e11e      	b.n	8010d28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010af0:	2b0b      	cmp	r3, #11
 8010af2:	d905      	bls.n	8010b00 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010af8:	3301      	adds	r3, #1
 8010afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010afe:	e113      	b.n	8010d28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d075      	beq.n	8010bf6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d006      	beq.n	8010b20 <tcp_slowtmr+0xf0>
 8010b12:	4b62      	ldr	r3, [pc, #392]	; (8010c9c <tcp_slowtmr+0x26c>)
 8010b14:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010b18:	4965      	ldr	r1, [pc, #404]	; (8010cb0 <tcp_slowtmr+0x280>)
 8010b1a:	4862      	ldr	r0, [pc, #392]	; (8010ca4 <tcp_slowtmr+0x274>)
 8010b1c:	f008 fcb6 	bl	801948c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d106      	bne.n	8010b36 <tcp_slowtmr+0x106>
 8010b28:	4b5c      	ldr	r3, [pc, #368]	; (8010c9c <tcp_slowtmr+0x26c>)
 8010b2a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010b2e:	4961      	ldr	r1, [pc, #388]	; (8010cb4 <tcp_slowtmr+0x284>)
 8010b30:	485c      	ldr	r0, [pc, #368]	; (8010ca4 <tcp_slowtmr+0x274>)
 8010b32:	f008 fcab 	bl	801948c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010b3c:	2b0b      	cmp	r3, #11
 8010b3e:	d905      	bls.n	8010b4c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b44:	3301      	adds	r3, #1
 8010b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b4a:	e0ed      	b.n	8010d28 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010b52:	3b01      	subs	r3, #1
 8010b54:	4a58      	ldr	r2, [pc, #352]	; (8010cb8 <tcp_slowtmr+0x288>)
 8010b56:	5cd3      	ldrb	r3, [r2, r3]
 8010b58:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010b60:	7c7a      	ldrb	r2, [r7, #17]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d907      	bls.n	8010b76 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	b2da      	uxtb	r2, r3
 8010b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010b7c:	7c7a      	ldrb	r2, [r7, #17]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	f200 80d2 	bhi.w	8010d28 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010b84:	2301      	movs	r3, #1
 8010b86:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d108      	bne.n	8010ba4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b94:	f005 f950 	bl	8015e38 <tcp_zero_window_probe>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d014      	beq.n	8010bc8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	623b      	str	r3, [r7, #32]
 8010ba2:	e011      	b.n	8010bc8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010baa:	4619      	mov	r1, r3
 8010bac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bae:	f004 f815 	bl	8014bdc <tcp_split_unsent_seg>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d107      	bne.n	8010bc8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bba:	f004 fa95 	bl	80150e8 <tcp_output>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d101      	bne.n	8010bc8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010bc8:	6a3b      	ldr	r3, [r7, #32]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f000 80ac 	beq.w	8010d28 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010bde:	2b06      	cmp	r3, #6
 8010be0:	f200 80a2 	bhi.w	8010d28 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010bea:	3301      	adds	r3, #1
 8010bec:	b2da      	uxtb	r2, r3
 8010bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010bf4:	e098      	b.n	8010d28 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	db0f      	blt.n	8010c20 <tcp_slowtmr+0x1f0>
 8010c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010c06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d008      	beq.n	8010c20 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	3301      	adds	r3, #1
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	b21a      	sxth	r2, r3
 8010c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c1e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c22:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c28:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	db7b      	blt.n	8010d28 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010c30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c32:	f004 fd4b 	bl	80156cc <tcp_rexmit_rto_prepare>
 8010c36:	4603      	mov	r3, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d007      	beq.n	8010c4c <tcp_slowtmr+0x21c>
 8010c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d171      	bne.n	8010d28 <tcp_slowtmr+0x2f8>
 8010c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d06d      	beq.n	8010d28 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4e:	7d1b      	ldrb	r3, [r3, #20]
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	d03a      	beq.n	8010cca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c5a:	2b0c      	cmp	r3, #12
 8010c5c:	bf28      	it	cs
 8010c5e:	230c      	movcs	r3, #12
 8010c60:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c68:	10db      	asrs	r3, r3, #3
 8010c6a:	b21b      	sxth	r3, r3
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c74:	4413      	add	r3, r2
 8010c76:	7efa      	ldrb	r2, [r7, #27]
 8010c78:	4910      	ldr	r1, [pc, #64]	; (8010cbc <tcp_slowtmr+0x28c>)
 8010c7a:	5c8a      	ldrb	r2, [r1, r2]
 8010c7c:	4093      	lsls	r3, r2
 8010c7e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010c86:	4293      	cmp	r3, r2
 8010c88:	dc1a      	bgt.n	8010cc0 <tcp_slowtmr+0x290>
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	b21a      	sxth	r2, r3
 8010c8e:	e019      	b.n	8010cc4 <tcp_slowtmr+0x294>
 8010c90:	2004efc4 	.word	0x2004efc4
 8010c94:	2004efda 	.word	0x2004efda
 8010c98:	2004efd0 	.word	0x2004efd0
 8010c9c:	0801b7ec 	.word	0x0801b7ec
 8010ca0:	0801bb30 	.word	0x0801bb30
 8010ca4:	0801b830 	.word	0x0801b830
 8010ca8:	0801bb5c 	.word	0x0801bb5c
 8010cac:	0801bb88 	.word	0x0801bb88
 8010cb0:	0801bbb8 	.word	0x0801bbb8
 8010cb4:	0801bbec 	.word	0x0801bbec
 8010cb8:	0801d850 	.word	0x0801d850
 8010cbc:	0801d840 	.word	0x0801d840
 8010cc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8010cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ccc:	2200      	movs	r2, #0
 8010cce:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	bf28      	it	cs
 8010ce0:	4613      	movcs	r3, r2
 8010ce2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010ce4:	8a7b      	ldrh	r3, [r7, #18]
 8010ce6:	085b      	lsrs	r3, r3, #1
 8010ce8:	b29a      	uxth	r2, r3
 8010cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cfa:	005b      	lsls	r3, r3, #1
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d206      	bcs.n	8010d10 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d06:	005b      	lsls	r3, r3, #1
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d12:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010d24:	f004 fd42 	bl	80157ac <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2a:	7d1b      	ldrb	r3, [r3, #20]
 8010d2c:	2b06      	cmp	r3, #6
 8010d2e:	d111      	bne.n	8010d54 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d32:	8b5b      	ldrh	r3, [r3, #26]
 8010d34:	f003 0310 	and.w	r3, r3, #16
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d00b      	beq.n	8010d54 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010d3c:	4b9c      	ldr	r3, [pc, #624]	; (8010fb0 <tcp_slowtmr+0x580>)
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d42:	6a1b      	ldr	r3, [r3, #32]
 8010d44:	1ad3      	subs	r3, r2, r3
 8010d46:	2b28      	cmp	r3, #40	; 0x28
 8010d48:	d904      	bls.n	8010d54 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d4e:	3301      	adds	r3, #1
 8010d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d56:	7a5b      	ldrb	r3, [r3, #9]
 8010d58:	f003 0308 	and.w	r3, r3, #8
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d04a      	beq.n	8010df6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8010d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d62:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010d64:	2b04      	cmp	r3, #4
 8010d66:	d003      	beq.n	8010d70 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010d6c:	2b07      	cmp	r3, #7
 8010d6e:	d142      	bne.n	8010df6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010d70:	4b8f      	ldr	r3, [pc, #572]	; (8010fb0 <tcp_slowtmr+0x580>)
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d76:	6a1b      	ldr	r3, [r3, #32]
 8010d78:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010d80:	4b8c      	ldr	r3, [pc, #560]	; (8010fb4 <tcp_slowtmr+0x584>)
 8010d82:	440b      	add	r3, r1
 8010d84:	498c      	ldr	r1, [pc, #560]	; (8010fb8 <tcp_slowtmr+0x588>)
 8010d86:	fba1 1303 	umull	r1, r3, r1, r3
 8010d8a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d90a      	bls.n	8010da6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d94:	3301      	adds	r3, #1
 8010d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8010d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010d9e:	3301      	adds	r3, #1
 8010da0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010da4:	e027      	b.n	8010df6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010da6:	4b82      	ldr	r3, [pc, #520]	; (8010fb0 <tcp_slowtmr+0x580>)
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dac:	6a1b      	ldr	r3, [r3, #32]
 8010dae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	4b7f      	ldr	r3, [pc, #508]	; (8010fbc <tcp_slowtmr+0x58c>)
 8010dc0:	fb00 f303 	mul.w	r3, r0, r3
 8010dc4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010dc6:	497c      	ldr	r1, [pc, #496]	; (8010fb8 <tcp_slowtmr+0x588>)
 8010dc8:	fba1 1303 	umull	r1, r3, r1, r3
 8010dcc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d911      	bls.n	8010df6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8010dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010dd4:	f004 fff0 	bl	8015db8 <tcp_keepalive>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8010dde:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d107      	bne.n	8010df6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8010de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010dec:	3301      	adds	r3, #1
 8010dee:	b2da      	uxtb	r2, r3
 8010df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d011      	beq.n	8010e22 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010dfe:	4b6c      	ldr	r3, [pc, #432]	; (8010fb0 <tcp_slowtmr+0x580>)
 8010e00:	681a      	ldr	r2, [r3, #0]
 8010e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e04:	6a1b      	ldr	r3, [r3, #32]
 8010e06:	1ad2      	subs	r2, r2, r3
 8010e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e0a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010e0e:	4619      	mov	r1, r3
 8010e10:	460b      	mov	r3, r1
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	440b      	add	r3, r1
 8010e16:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d302      	bcc.n	8010e22 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010e1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e1e:	f000 feab 	bl	8011b78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e24:	7d1b      	ldrb	r3, [r3, #20]
 8010e26:	2b03      	cmp	r3, #3
 8010e28:	d10b      	bne.n	8010e42 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010e2a:	4b61      	ldr	r3, [pc, #388]	; (8010fb0 <tcp_slowtmr+0x580>)
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e30:	6a1b      	ldr	r3, [r3, #32]
 8010e32:	1ad3      	subs	r3, r2, r3
 8010e34:	2b28      	cmp	r3, #40	; 0x28
 8010e36:	d904      	bls.n	8010e42 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e44:	7d1b      	ldrb	r3, [r3, #20]
 8010e46:	2b09      	cmp	r3, #9
 8010e48:	d10b      	bne.n	8010e62 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010e4a:	4b59      	ldr	r3, [pc, #356]	; (8010fb0 <tcp_slowtmr+0x580>)
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e50:	6a1b      	ldr	r3, [r3, #32]
 8010e52:	1ad3      	subs	r3, r2, r3
 8010e54:	2bf0      	cmp	r3, #240	; 0xf0
 8010e56:	d904      	bls.n	8010e62 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8010e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d060      	beq.n	8010f2c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e70:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e74:	f000 fccc 	bl	8011810 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d010      	beq.n	8010ea0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010e7e:	4b50      	ldr	r3, [pc, #320]	; (8010fc0 <tcp_slowtmr+0x590>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d106      	bne.n	8010e96 <tcp_slowtmr+0x466>
 8010e88:	4b4e      	ldr	r3, [pc, #312]	; (8010fc4 <tcp_slowtmr+0x594>)
 8010e8a:	f240 526d 	movw	r2, #1389	; 0x56d
 8010e8e:	494e      	ldr	r1, [pc, #312]	; (8010fc8 <tcp_slowtmr+0x598>)
 8010e90:	484e      	ldr	r0, [pc, #312]	; (8010fcc <tcp_slowtmr+0x59c>)
 8010e92:	f008 fafb 	bl	801948c <iprintf>
        prev->next = pcb->next;
 8010e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e98:	68da      	ldr	r2, [r3, #12]
 8010e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9c:	60da      	str	r2, [r3, #12]
 8010e9e:	e00f      	b.n	8010ec0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010ea0:	4b47      	ldr	r3, [pc, #284]	; (8010fc0 <tcp_slowtmr+0x590>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d006      	beq.n	8010eb8 <tcp_slowtmr+0x488>
 8010eaa:	4b46      	ldr	r3, [pc, #280]	; (8010fc4 <tcp_slowtmr+0x594>)
 8010eac:	f240 5271 	movw	r2, #1393	; 0x571
 8010eb0:	4947      	ldr	r1, [pc, #284]	; (8010fd0 <tcp_slowtmr+0x5a0>)
 8010eb2:	4846      	ldr	r0, [pc, #280]	; (8010fcc <tcp_slowtmr+0x59c>)
 8010eb4:	f008 faea 	bl	801948c <iprintf>
        tcp_active_pcbs = pcb->next;
 8010eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	4a40      	ldr	r2, [pc, #256]	; (8010fc0 <tcp_slowtmr+0x590>)
 8010ebe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d013      	beq.n	8010ef0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ece:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010ed0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed4:	3304      	adds	r3, #4
 8010ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ed8:	8ad2      	ldrh	r2, [r2, #22]
 8010eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010edc:	8b09      	ldrh	r1, [r1, #24]
 8010ede:	9102      	str	r1, [sp, #8]
 8010ee0:	9201      	str	r2, [sp, #4]
 8010ee2:	9300      	str	r3, [sp, #0]
 8010ee4:	462b      	mov	r3, r5
 8010ee6:	4622      	mov	r2, r4
 8010ee8:	4601      	mov	r1, r0
 8010eea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010eec:	f004 feb0 	bl	8015c50 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef2:	691b      	ldr	r3, [r3, #16]
 8010ef4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef8:	7d1b      	ldrb	r3, [r3, #20]
 8010efa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010f06:	6838      	ldr	r0, [r7, #0]
 8010f08:	f7fe fff0 	bl	800feec <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010f0c:	4b31      	ldr	r3, [pc, #196]	; (8010fd4 <tcp_slowtmr+0x5a4>)
 8010f0e:	2200      	movs	r2, #0
 8010f10:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d004      	beq.n	8010f22 <tcp_slowtmr+0x4f2>
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f06f 010c 	mvn.w	r1, #12
 8010f1e:	68b8      	ldr	r0, [r7, #8]
 8010f20:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010f22:	4b2c      	ldr	r3, [pc, #176]	; (8010fd4 <tcp_slowtmr+0x5a4>)
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d037      	beq.n	8010f9a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8010f2a:	e592      	b.n	8010a52 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f38:	7f1b      	ldrb	r3, [r3, #28]
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	b2da      	uxtb	r2, r3
 8010f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f40:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f44:	7f1a      	ldrb	r2, [r3, #28]
 8010f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f48:	7f5b      	ldrb	r3, [r3, #29]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d325      	bcc.n	8010f9a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8010f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f50:	2200      	movs	r2, #0
 8010f52:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010f54:	4b1f      	ldr	r3, [pc, #124]	; (8010fd4 <tcp_slowtmr+0x5a4>)
 8010f56:	2200      	movs	r2, #0
 8010f58:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00b      	beq.n	8010f7c <tcp_slowtmr+0x54c>
 8010f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f6c:	6912      	ldr	r2, [r2, #16]
 8010f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010f70:	4610      	mov	r0, r2
 8010f72:	4798      	blx	r3
 8010f74:	4603      	mov	r3, r0
 8010f76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010f7a:	e002      	b.n	8010f82 <tcp_slowtmr+0x552>
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010f82:	4b14      	ldr	r3, [pc, #80]	; (8010fd4 <tcp_slowtmr+0x5a4>)
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d000      	beq.n	8010f8c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8010f8a:	e562      	b.n	8010a52 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010f8c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d102      	bne.n	8010f9a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8010f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f96:	f004 f8a7 	bl	80150e8 <tcp_output>
  while (pcb != NULL) {
 8010f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f47f ad5e 	bne.w	8010a5e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010fa6:	4b0c      	ldr	r3, [pc, #48]	; (8010fd8 <tcp_slowtmr+0x5a8>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010fac:	e069      	b.n	8011082 <tcp_slowtmr+0x652>
 8010fae:	bf00      	nop
 8010fb0:	2004efc4 	.word	0x2004efc4
 8010fb4:	000a4cb8 	.word	0x000a4cb8
 8010fb8:	10624dd3 	.word	0x10624dd3
 8010fbc:	000124f8 	.word	0x000124f8
 8010fc0:	2004efd0 	.word	0x2004efd0
 8010fc4:	0801b7ec 	.word	0x0801b7ec
 8010fc8:	0801bc24 	.word	0x0801bc24
 8010fcc:	0801b830 	.word	0x0801b830
 8010fd0:	0801bc50 	.word	0x0801bc50
 8010fd4:	2004efd8 	.word	0x2004efd8
 8010fd8:	2004efd4 	.word	0x2004efd4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fde:	7d1b      	ldrb	r3, [r3, #20]
 8010fe0:	2b0a      	cmp	r3, #10
 8010fe2:	d006      	beq.n	8010ff2 <tcp_slowtmr+0x5c2>
 8010fe4:	4b2b      	ldr	r3, [pc, #172]	; (8011094 <tcp_slowtmr+0x664>)
 8010fe6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010fea:	492b      	ldr	r1, [pc, #172]	; (8011098 <tcp_slowtmr+0x668>)
 8010fec:	482b      	ldr	r0, [pc, #172]	; (801109c <tcp_slowtmr+0x66c>)
 8010fee:	f008 fa4d 	bl	801948c <iprintf>
    pcb_remove = 0;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010ff8:	4b29      	ldr	r3, [pc, #164]	; (80110a0 <tcp_slowtmr+0x670>)
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	6a1b      	ldr	r3, [r3, #32]
 8011000:	1ad3      	subs	r3, r2, r3
 8011002:	2bf0      	cmp	r3, #240	; 0xf0
 8011004:	d904      	bls.n	8011010 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801100a:	3301      	adds	r3, #1
 801100c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011014:	2b00      	cmp	r3, #0
 8011016:	d02f      	beq.n	8011078 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801101a:	f000 fbf9 	bl	8011810 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011020:	2b00      	cmp	r3, #0
 8011022:	d010      	beq.n	8011046 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011024:	4b1f      	ldr	r3, [pc, #124]	; (80110a4 <tcp_slowtmr+0x674>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801102a:	429a      	cmp	r2, r3
 801102c:	d106      	bne.n	801103c <tcp_slowtmr+0x60c>
 801102e:	4b19      	ldr	r3, [pc, #100]	; (8011094 <tcp_slowtmr+0x664>)
 8011030:	f240 52af 	movw	r2, #1455	; 0x5af
 8011034:	491c      	ldr	r1, [pc, #112]	; (80110a8 <tcp_slowtmr+0x678>)
 8011036:	4819      	ldr	r0, [pc, #100]	; (801109c <tcp_slowtmr+0x66c>)
 8011038:	f008 fa28 	bl	801948c <iprintf>
        prev->next = pcb->next;
 801103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103e:	68da      	ldr	r2, [r3, #12]
 8011040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011042:	60da      	str	r2, [r3, #12]
 8011044:	e00f      	b.n	8011066 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011046:	4b17      	ldr	r3, [pc, #92]	; (80110a4 <tcp_slowtmr+0x674>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801104c:	429a      	cmp	r2, r3
 801104e:	d006      	beq.n	801105e <tcp_slowtmr+0x62e>
 8011050:	4b10      	ldr	r3, [pc, #64]	; (8011094 <tcp_slowtmr+0x664>)
 8011052:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011056:	4915      	ldr	r1, [pc, #84]	; (80110ac <tcp_slowtmr+0x67c>)
 8011058:	4810      	ldr	r0, [pc, #64]	; (801109c <tcp_slowtmr+0x66c>)
 801105a:	f008 fa17 	bl	801948c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011060:	68db      	ldr	r3, [r3, #12]
 8011062:	4a10      	ldr	r2, [pc, #64]	; (80110a4 <tcp_slowtmr+0x674>)
 8011064:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011068:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011070:	69f8      	ldr	r0, [r7, #28]
 8011072:	f7fe ff3b 	bl	800feec <tcp_free>
 8011076:	e004      	b.n	8011082 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011084:	2b00      	cmp	r3, #0
 8011086:	d1a9      	bne.n	8010fdc <tcp_slowtmr+0x5ac>
    }
  }
}
 8011088:	bf00      	nop
 801108a:	bf00      	nop
 801108c:	3730      	adds	r7, #48	; 0x30
 801108e:	46bd      	mov	sp, r7
 8011090:	bdb0      	pop	{r4, r5, r7, pc}
 8011092:	bf00      	nop
 8011094:	0801b7ec 	.word	0x0801b7ec
 8011098:	0801bc7c 	.word	0x0801bc7c
 801109c:	0801b830 	.word	0x0801b830
 80110a0:	2004efc4 	.word	0x2004efc4
 80110a4:	2004efd4 	.word	0x2004efd4
 80110a8:	0801bcac 	.word	0x0801bcac
 80110ac:	0801bcd4 	.word	0x0801bcd4

080110b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80110b6:	4b2d      	ldr	r3, [pc, #180]	; (801116c <tcp_fasttmr+0xbc>)
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	3301      	adds	r3, #1
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	4b2b      	ldr	r3, [pc, #172]	; (801116c <tcp_fasttmr+0xbc>)
 80110c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80110c2:	4b2b      	ldr	r3, [pc, #172]	; (8011170 <tcp_fasttmr+0xc0>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80110c8:	e048      	b.n	801115c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	7f9a      	ldrb	r2, [r3, #30]
 80110ce:	4b27      	ldr	r3, [pc, #156]	; (801116c <tcp_fasttmr+0xbc>)
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d03f      	beq.n	8011156 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80110d6:	4b25      	ldr	r3, [pc, #148]	; (801116c <tcp_fasttmr+0xbc>)
 80110d8:	781a      	ldrb	r2, [r3, #0]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	8b5b      	ldrh	r3, [r3, #26]
 80110e2:	f003 0301 	and.w	r3, r3, #1
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d010      	beq.n	801110c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	8b5b      	ldrh	r3, [r3, #26]
 80110ee:	f043 0302 	orr.w	r3, r3, #2
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f003 fff5 	bl	80150e8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	8b5b      	ldrh	r3, [r3, #26]
 8011102:	f023 0303 	bic.w	r3, r3, #3
 8011106:	b29a      	uxth	r2, r3
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	8b5b      	ldrh	r3, [r3, #26]
 8011110:	f003 0308 	and.w	r3, r3, #8
 8011114:	2b00      	cmp	r3, #0
 8011116:	d009      	beq.n	801112c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	8b5b      	ldrh	r3, [r3, #26]
 801111c:	f023 0308 	bic.w	r3, r3, #8
 8011120:	b29a      	uxth	r2, r3
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f7ff f874 	bl	8010214 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011136:	2b00      	cmp	r3, #0
 8011138:	d00a      	beq.n	8011150 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801113a:	4b0e      	ldr	r3, [pc, #56]	; (8011174 <tcp_fasttmr+0xc4>)
 801113c:	2200      	movs	r2, #0
 801113e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f000 f819 	bl	8011178 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011146:	4b0b      	ldr	r3, [pc, #44]	; (8011174 <tcp_fasttmr+0xc4>)
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d000      	beq.n	8011150 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801114e:	e7b8      	b.n	80110c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	607b      	str	r3, [r7, #4]
 8011154:	e002      	b.n	801115c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d1b3      	bne.n	80110ca <tcp_fasttmr+0x1a>
    }
  }
}
 8011162:	bf00      	nop
 8011164:	bf00      	nop
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	2004efda 	.word	0x2004efda
 8011170:	2004efd0 	.word	0x2004efd0
 8011174:	2004efd8 	.word	0x2004efd8

08011178 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011178:	b590      	push	{r4, r7, lr}
 801117a:	b085      	sub	sp, #20
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d109      	bne.n	801119a <tcp_process_refused_data+0x22>
 8011186:	4b37      	ldr	r3, [pc, #220]	; (8011264 <tcp_process_refused_data+0xec>)
 8011188:	f240 6209 	movw	r2, #1545	; 0x609
 801118c:	4936      	ldr	r1, [pc, #216]	; (8011268 <tcp_process_refused_data+0xf0>)
 801118e:	4837      	ldr	r0, [pc, #220]	; (801126c <tcp_process_refused_data+0xf4>)
 8011190:	f008 f97c 	bl	801948c <iprintf>
 8011194:	f06f 030f 	mvn.w	r3, #15
 8011198:	e060      	b.n	801125c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801119e:	7b5b      	ldrb	r3, [r3, #13]
 80111a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d00b      	beq.n	80111d0 <tcp_process_refused_data+0x58>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6918      	ldr	r0, [r3, #16]
 80111c2:	2300      	movs	r3, #0
 80111c4:	68ba      	ldr	r2, [r7, #8]
 80111c6:	6879      	ldr	r1, [r7, #4]
 80111c8:	47a0      	blx	r4
 80111ca:	4603      	mov	r3, r0
 80111cc:	73fb      	strb	r3, [r7, #15]
 80111ce:	e007      	b.n	80111e0 <tcp_process_refused_data+0x68>
 80111d0:	2300      	movs	r3, #0
 80111d2:	68ba      	ldr	r2, [r7, #8]
 80111d4:	6879      	ldr	r1, [r7, #4]
 80111d6:	2000      	movs	r0, #0
 80111d8:	f000 f8a4 	bl	8011324 <tcp_recv_null>
 80111dc:	4603      	mov	r3, r0
 80111de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80111e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d12a      	bne.n	801123e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80111e8:	7bbb      	ldrb	r3, [r7, #14]
 80111ea:	f003 0320 	and.w	r3, r3, #32
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d033      	beq.n	801125a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80111fa:	d005      	beq.n	8011208 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011200:	3301      	adds	r3, #1
 8011202:	b29a      	uxth	r2, r3
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801120e:	2b00      	cmp	r3, #0
 8011210:	d00b      	beq.n	801122a <tcp_process_refused_data+0xb2>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6918      	ldr	r0, [r3, #16]
 801121c:	2300      	movs	r3, #0
 801121e:	2200      	movs	r2, #0
 8011220:	6879      	ldr	r1, [r7, #4]
 8011222:	47a0      	blx	r4
 8011224:	4603      	mov	r3, r0
 8011226:	73fb      	strb	r3, [r7, #15]
 8011228:	e001      	b.n	801122e <tcp_process_refused_data+0xb6>
 801122a:	2300      	movs	r3, #0
 801122c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011232:	f113 0f0d 	cmn.w	r3, #13
 8011236:	d110      	bne.n	801125a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011238:	f06f 030c 	mvn.w	r3, #12
 801123c:	e00e      	b.n	801125c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011242:	f113 0f0d 	cmn.w	r3, #13
 8011246:	d102      	bne.n	801124e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011248:	f06f 030c 	mvn.w	r3, #12
 801124c:	e006      	b.n	801125c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	68ba      	ldr	r2, [r7, #8]
 8011252:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011254:	f06f 0304 	mvn.w	r3, #4
 8011258:	e000      	b.n	801125c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801125a:	2300      	movs	r3, #0
}
 801125c:	4618      	mov	r0, r3
 801125e:	3714      	adds	r7, #20
 8011260:	46bd      	mov	sp, r7
 8011262:	bd90      	pop	{r4, r7, pc}
 8011264:	0801b7ec 	.word	0x0801b7ec
 8011268:	0801bcfc 	.word	0x0801bcfc
 801126c:	0801b830 	.word	0x0801b830

08011270 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011278:	e007      	b.n	801128a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f000 f80a 	bl	801129a <tcp_seg_free>
    seg = next;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d1f4      	bne.n	801127a <tcp_segs_free+0xa>
  }
}
 8011290:	bf00      	nop
 8011292:	bf00      	nop
 8011294:	3710      	adds	r7, #16
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b082      	sub	sp, #8
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d00c      	beq.n	80112c2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d004      	beq.n	80112ba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fe fb6d 	bl	800f994 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80112ba:	6879      	ldr	r1, [r7, #4]
 80112bc:	2003      	movs	r0, #3
 80112be:	f7fd fcc5 	bl	800ec4c <memp_free>
  }
}
 80112c2:	bf00      	nop
 80112c4:	3708      	adds	r7, #8
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
	...

080112cc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d106      	bne.n	80112e8 <tcp_seg_copy+0x1c>
 80112da:	4b0f      	ldr	r3, [pc, #60]	; (8011318 <tcp_seg_copy+0x4c>)
 80112dc:	f240 6282 	movw	r2, #1666	; 0x682
 80112e0:	490e      	ldr	r1, [pc, #56]	; (801131c <tcp_seg_copy+0x50>)
 80112e2:	480f      	ldr	r0, [pc, #60]	; (8011320 <tcp_seg_copy+0x54>)
 80112e4:	f008 f8d2 	bl	801948c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80112e8:	2003      	movs	r0, #3
 80112ea:	f7fd fc39 	bl	800eb60 <memp_malloc>
 80112ee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d101      	bne.n	80112fa <tcp_seg_copy+0x2e>
    return NULL;
 80112f6:	2300      	movs	r3, #0
 80112f8:	e00a      	b.n	8011310 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80112fa:	2210      	movs	r2, #16
 80112fc:	6879      	ldr	r1, [r7, #4]
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	f008 f819 	bl	8019336 <memcpy>
  pbuf_ref(cseg->p);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	4618      	mov	r0, r3
 801130a:	f7fe fbe9 	bl	800fae0 <pbuf_ref>
  return cseg;
 801130e:	68fb      	ldr	r3, [r7, #12]
}
 8011310:	4618      	mov	r0, r3
 8011312:	3710      	adds	r7, #16
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}
 8011318:	0801b7ec 	.word	0x0801b7ec
 801131c:	0801bd40 	.word	0x0801bd40
 8011320:	0801b830 	.word	0x0801b830

08011324 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	607a      	str	r2, [r7, #4]
 8011330:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d109      	bne.n	801134c <tcp_recv_null+0x28>
 8011338:	4b12      	ldr	r3, [pc, #72]	; (8011384 <tcp_recv_null+0x60>)
 801133a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801133e:	4912      	ldr	r1, [pc, #72]	; (8011388 <tcp_recv_null+0x64>)
 8011340:	4812      	ldr	r0, [pc, #72]	; (801138c <tcp_recv_null+0x68>)
 8011342:	f008 f8a3 	bl	801948c <iprintf>
 8011346:	f06f 030f 	mvn.w	r3, #15
 801134a:	e016      	b.n	801137a <tcp_recv_null+0x56>

  if (p != NULL) {
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d009      	beq.n	8011366 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	891b      	ldrh	r3, [r3, #8]
 8011356:	4619      	mov	r1, r3
 8011358:	68b8      	ldr	r0, [r7, #8]
 801135a:	f7ff fad3 	bl	8010904 <tcp_recved>
    pbuf_free(p);
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7fe fb18 	bl	800f994 <pbuf_free>
 8011364:	e008      	b.n	8011378 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d104      	bne.n	8011378 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801136e:	68b8      	ldr	r0, [r7, #8]
 8011370:	f7fe ffba 	bl	80102e8 <tcp_close>
 8011374:	4603      	mov	r3, r0
 8011376:	e000      	b.n	801137a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011378:	2300      	movs	r3, #0
}
 801137a:	4618      	mov	r0, r3
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
 8011382:	bf00      	nop
 8011384:	0801b7ec 	.word	0x0801b7ec
 8011388:	0801bd5c 	.word	0x0801bd5c
 801138c:	0801b830 	.word	0x0801b830

08011390 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b086      	sub	sp, #24
 8011394:	af00      	add	r7, sp, #0
 8011396:	4603      	mov	r3, r0
 8011398:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	db01      	blt.n	80113a6 <tcp_kill_prio+0x16>
 80113a2:	79fb      	ldrb	r3, [r7, #7]
 80113a4:	e000      	b.n	80113a8 <tcp_kill_prio+0x18>
 80113a6:	237f      	movs	r3, #127	; 0x7f
 80113a8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80113aa:	7afb      	ldrb	r3, [r7, #11]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d034      	beq.n	801141a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80113b0:	7afb      	ldrb	r3, [r7, #11]
 80113b2:	3b01      	subs	r3, #1
 80113b4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80113b6:	2300      	movs	r3, #0
 80113b8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80113ba:	2300      	movs	r3, #0
 80113bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80113be:	4b19      	ldr	r3, [pc, #100]	; (8011424 <tcp_kill_prio+0x94>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	617b      	str	r3, [r7, #20]
 80113c4:	e01f      	b.n	8011406 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	7d5b      	ldrb	r3, [r3, #21]
 80113ca:	7afa      	ldrb	r2, [r7, #11]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d80c      	bhi.n	80113ea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80113d4:	7afa      	ldrb	r2, [r7, #11]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d112      	bne.n	8011400 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80113da:	4b13      	ldr	r3, [pc, #76]	; (8011428 <tcp_kill_prio+0x98>)
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	6a1b      	ldr	r3, [r3, #32]
 80113e2:	1ad3      	subs	r3, r2, r3
 80113e4:	68fa      	ldr	r2, [r7, #12]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d80a      	bhi.n	8011400 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80113ea:	4b0f      	ldr	r3, [pc, #60]	; (8011428 <tcp_kill_prio+0x98>)
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	6a1b      	ldr	r3, [r3, #32]
 80113f2:	1ad3      	subs	r3, r2, r3
 80113f4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	7d5b      	ldrb	r3, [r3, #21]
 80113fe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	617b      	str	r3, [r7, #20]
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d1dc      	bne.n	80113c6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d004      	beq.n	801141c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011412:	6938      	ldr	r0, [r7, #16]
 8011414:	f7ff f8ae 	bl	8010574 <tcp_abort>
 8011418:	e000      	b.n	801141c <tcp_kill_prio+0x8c>
    return;
 801141a:	bf00      	nop
  }
}
 801141c:	3718      	adds	r7, #24
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	2004efd0 	.word	0x2004efd0
 8011428:	2004efc4 	.word	0x2004efc4

0801142c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b086      	sub	sp, #24
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011436:	79fb      	ldrb	r3, [r7, #7]
 8011438:	2b08      	cmp	r3, #8
 801143a:	d009      	beq.n	8011450 <tcp_kill_state+0x24>
 801143c:	79fb      	ldrb	r3, [r7, #7]
 801143e:	2b09      	cmp	r3, #9
 8011440:	d006      	beq.n	8011450 <tcp_kill_state+0x24>
 8011442:	4b1a      	ldr	r3, [pc, #104]	; (80114ac <tcp_kill_state+0x80>)
 8011444:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011448:	4919      	ldr	r1, [pc, #100]	; (80114b0 <tcp_kill_state+0x84>)
 801144a:	481a      	ldr	r0, [pc, #104]	; (80114b4 <tcp_kill_state+0x88>)
 801144c:	f008 f81e 	bl	801948c <iprintf>

  inactivity = 0;
 8011450:	2300      	movs	r3, #0
 8011452:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011454:	2300      	movs	r3, #0
 8011456:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011458:	4b17      	ldr	r3, [pc, #92]	; (80114b8 <tcp_kill_state+0x8c>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	617b      	str	r3, [r7, #20]
 801145e:	e017      	b.n	8011490 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	7d1b      	ldrb	r3, [r3, #20]
 8011464:	79fa      	ldrb	r2, [r7, #7]
 8011466:	429a      	cmp	r2, r3
 8011468:	d10f      	bne.n	801148a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801146a:	4b14      	ldr	r3, [pc, #80]	; (80114bc <tcp_kill_state+0x90>)
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	6a1b      	ldr	r3, [r3, #32]
 8011472:	1ad3      	subs	r3, r2, r3
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	429a      	cmp	r2, r3
 8011478:	d807      	bhi.n	801148a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801147a:	4b10      	ldr	r3, [pc, #64]	; (80114bc <tcp_kill_state+0x90>)
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	6a1b      	ldr	r3, [r3, #32]
 8011482:	1ad3      	subs	r3, r2, r3
 8011484:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	68db      	ldr	r3, [r3, #12]
 801148e:	617b      	str	r3, [r7, #20]
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d1e4      	bne.n	8011460 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d003      	beq.n	80114a4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801149c:	2100      	movs	r1, #0
 801149e:	6938      	ldr	r0, [r7, #16]
 80114a0:	f7fe ffaa 	bl	80103f8 <tcp_abandon>
  }
}
 80114a4:	bf00      	nop
 80114a6:	3718      	adds	r7, #24
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	0801b7ec 	.word	0x0801b7ec
 80114b0:	0801bd78 	.word	0x0801bd78
 80114b4:	0801b830 	.word	0x0801b830
 80114b8:	2004efd0 	.word	0x2004efd0
 80114bc:	2004efc4 	.word	0x2004efc4

080114c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80114c6:	2300      	movs	r3, #0
 80114c8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80114ca:	2300      	movs	r3, #0
 80114cc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80114ce:	4b12      	ldr	r3, [pc, #72]	; (8011518 <tcp_kill_timewait+0x58>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	60fb      	str	r3, [r7, #12]
 80114d4:	e012      	b.n	80114fc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80114d6:	4b11      	ldr	r3, [pc, #68]	; (801151c <tcp_kill_timewait+0x5c>)
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	6a1b      	ldr	r3, [r3, #32]
 80114de:	1ad3      	subs	r3, r2, r3
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d807      	bhi.n	80114f6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80114e6:	4b0d      	ldr	r3, [pc, #52]	; (801151c <tcp_kill_timewait+0x5c>)
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	6a1b      	ldr	r3, [r3, #32]
 80114ee:	1ad3      	subs	r3, r2, r3
 80114f0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	60fb      	str	r3, [r7, #12]
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1e9      	bne.n	80114d6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d002      	beq.n	801150e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011508:	68b8      	ldr	r0, [r7, #8]
 801150a:	f7ff f833 	bl	8010574 <tcp_abort>
  }
}
 801150e:	bf00      	nop
 8011510:	3710      	adds	r7, #16
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	2004efd4 	.word	0x2004efd4
 801151c:	2004efc4 	.word	0x2004efc4

08011520 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011526:	4b10      	ldr	r3, [pc, #64]	; (8011568 <tcp_handle_closepend+0x48>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801152c:	e014      	b.n	8011558 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	8b5b      	ldrh	r3, [r3, #26]
 8011538:	f003 0308 	and.w	r3, r3, #8
 801153c:	2b00      	cmp	r3, #0
 801153e:	d009      	beq.n	8011554 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	8b5b      	ldrh	r3, [r3, #26]
 8011544:	f023 0308 	bic.w	r3, r3, #8
 8011548:	b29a      	uxth	r2, r3
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f7fe fe60 	bl	8010214 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d1e7      	bne.n	801152e <tcp_handle_closepend+0xe>
  }
}
 801155e:	bf00      	nop
 8011560:	bf00      	nop
 8011562:	3708      	adds	r7, #8
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	2004efd0 	.word	0x2004efd0

0801156c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	4603      	mov	r3, r0
 8011574:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011576:	2001      	movs	r0, #1
 8011578:	f7fd faf2 	bl	800eb60 <memp_malloc>
 801157c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d126      	bne.n	80115d2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011584:	f7ff ffcc 	bl	8011520 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011588:	f7ff ff9a 	bl	80114c0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801158c:	2001      	movs	r0, #1
 801158e:	f7fd fae7 	bl	800eb60 <memp_malloc>
 8011592:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d11b      	bne.n	80115d2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801159a:	2009      	movs	r0, #9
 801159c:	f7ff ff46 	bl	801142c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80115a0:	2001      	movs	r0, #1
 80115a2:	f7fd fadd 	bl	800eb60 <memp_malloc>
 80115a6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d111      	bne.n	80115d2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80115ae:	2008      	movs	r0, #8
 80115b0:	f7ff ff3c 	bl	801142c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80115b4:	2001      	movs	r0, #1
 80115b6:	f7fd fad3 	bl	800eb60 <memp_malloc>
 80115ba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d107      	bne.n	80115d2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80115c2:	79fb      	ldrb	r3, [r7, #7]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7ff fee3 	bl	8011390 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80115ca:	2001      	movs	r0, #1
 80115cc:	f7fd fac8 	bl	800eb60 <memp_malloc>
 80115d0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d03f      	beq.n	8011658 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80115d8:	229c      	movs	r2, #156	; 0x9c
 80115da:	2100      	movs	r1, #0
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f007 feb8 	bl	8019352 <memset>
    pcb->prio = prio;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	79fa      	ldrb	r2, [r7, #7]
 80115e6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80115ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80115f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	22ff      	movs	r2, #255	; 0xff
 8011606:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801160e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2206      	movs	r2, #6
 8011614:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2206      	movs	r2, #6
 801161c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011624:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2201      	movs	r2, #1
 801162a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801162e:	4b0d      	ldr	r3, [pc, #52]	; (8011664 <tcp_alloc+0xf8>)
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011636:	4b0c      	ldr	r3, [pc, #48]	; (8011668 <tcp_alloc+0xfc>)
 8011638:	781a      	ldrb	r2, [r3, #0]
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011644:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	4a08      	ldr	r2, [pc, #32]	; (801166c <tcp_alloc+0x100>)
 801164c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	4a07      	ldr	r2, [pc, #28]	; (8011670 <tcp_alloc+0x104>)
 8011654:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011658:	68fb      	ldr	r3, [r7, #12]
}
 801165a:	4618      	mov	r0, r3
 801165c:	3710      	adds	r7, #16
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	2004efc4 	.word	0x2004efc4
 8011668:	2004efda 	.word	0x2004efda
 801166c:	08011325 	.word	0x08011325
 8011670:	006ddd00 	.word	0x006ddd00

08011674 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b084      	sub	sp, #16
 8011678:	af00      	add	r7, sp, #0
 801167a:	4603      	mov	r3, r0
 801167c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801167e:	2040      	movs	r0, #64	; 0x40
 8011680:	f7ff ff74 	bl	801156c <tcp_alloc>
 8011684:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011686:	68fb      	ldr	r3, [r7, #12]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d002      	beq.n	80116a6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	683a      	ldr	r2, [r7, #0]
 80116a4:	611a      	str	r2, [r3, #16]
  }
}
 80116a6:	bf00      	nop
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
	...

080116b4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00e      	beq.n	80116e2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	7d1b      	ldrb	r3, [r3, #20]
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d106      	bne.n	80116da <tcp_recv+0x26>
 80116cc:	4b07      	ldr	r3, [pc, #28]	; (80116ec <tcp_recv+0x38>)
 80116ce:	f240 72df 	movw	r2, #2015	; 0x7df
 80116d2:	4907      	ldr	r1, [pc, #28]	; (80116f0 <tcp_recv+0x3c>)
 80116d4:	4807      	ldr	r0, [pc, #28]	; (80116f4 <tcp_recv+0x40>)
 80116d6:	f007 fed9 	bl	801948c <iprintf>
    pcb->recv = recv;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	683a      	ldr	r2, [r7, #0]
 80116de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80116e2:	bf00      	nop
 80116e4:	3708      	adds	r7, #8
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	0801b7ec 	.word	0x0801b7ec
 80116f0:	0801bd88 	.word	0x0801bd88
 80116f4:	0801b830 	.word	0x0801b830

080116f8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00e      	beq.n	8011726 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	7d1b      	ldrb	r3, [r3, #20]
 801170c:	2b01      	cmp	r3, #1
 801170e:	d106      	bne.n	801171e <tcp_sent+0x26>
 8011710:	4b07      	ldr	r3, [pc, #28]	; (8011730 <tcp_sent+0x38>)
 8011712:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8011716:	4907      	ldr	r1, [pc, #28]	; (8011734 <tcp_sent+0x3c>)
 8011718:	4807      	ldr	r0, [pc, #28]	; (8011738 <tcp_sent+0x40>)
 801171a:	f007 feb7 	bl	801948c <iprintf>
    pcb->sent = sent;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	683a      	ldr	r2, [r7, #0]
 8011722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011726:	bf00      	nop
 8011728:	3708      	adds	r7, #8
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	0801b7ec 	.word	0x0801b7ec
 8011734:	0801bdb0 	.word	0x0801bdb0
 8011738:	0801b830 	.word	0x0801b830

0801173c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00e      	beq.n	801176a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	7d1b      	ldrb	r3, [r3, #20]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d106      	bne.n	8011762 <tcp_err+0x26>
 8011754:	4b07      	ldr	r3, [pc, #28]	; (8011774 <tcp_err+0x38>)
 8011756:	f640 020d 	movw	r2, #2061	; 0x80d
 801175a:	4907      	ldr	r1, [pc, #28]	; (8011778 <tcp_err+0x3c>)
 801175c:	4807      	ldr	r0, [pc, #28]	; (801177c <tcp_err+0x40>)
 801175e:	f007 fe95 	bl	801948c <iprintf>
    pcb->errf = err;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	683a      	ldr	r2, [r7, #0]
 8011766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801176a:	bf00      	nop
 801176c:	3708      	adds	r7, #8
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	0801b7ec 	.word	0x0801b7ec
 8011778:	0801bdd8 	.word	0x0801bdd8
 801177c:	0801b830 	.word	0x0801b830

08011780 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d008      	beq.n	80117a2 <tcp_accept+0x22>
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	7d1b      	ldrb	r3, [r3, #20]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d104      	bne.n	80117a2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	683a      	ldr	r2, [r7, #0]
 80117a0:	619a      	str	r2, [r3, #24]
  }
}
 80117a2:	bf00      	nop
 80117a4:	3714      	adds	r7, #20
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr
	...

080117b0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b084      	sub	sp, #16
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	4613      	mov	r3, r2
 80117bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d107      	bne.n	80117d4 <tcp_poll+0x24>
 80117c4:	4b0e      	ldr	r3, [pc, #56]	; (8011800 <tcp_poll+0x50>)
 80117c6:	f640 023d 	movw	r2, #2109	; 0x83d
 80117ca:	490e      	ldr	r1, [pc, #56]	; (8011804 <tcp_poll+0x54>)
 80117cc:	480e      	ldr	r0, [pc, #56]	; (8011808 <tcp_poll+0x58>)
 80117ce:	f007 fe5d 	bl	801948c <iprintf>
 80117d2:	e011      	b.n	80117f8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	7d1b      	ldrb	r3, [r3, #20]
 80117d8:	2b01      	cmp	r3, #1
 80117da:	d106      	bne.n	80117ea <tcp_poll+0x3a>
 80117dc:	4b08      	ldr	r3, [pc, #32]	; (8011800 <tcp_poll+0x50>)
 80117de:	f640 023e 	movw	r2, #2110	; 0x83e
 80117e2:	490a      	ldr	r1, [pc, #40]	; (801180c <tcp_poll+0x5c>)
 80117e4:	4808      	ldr	r0, [pc, #32]	; (8011808 <tcp_poll+0x58>)
 80117e6:	f007 fe51 	bl	801948c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	79fa      	ldrb	r2, [r7, #7]
 80117f6:	775a      	strb	r2, [r3, #29]
}
 80117f8:	3710      	adds	r7, #16
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	0801b7ec 	.word	0x0801b7ec
 8011804:	0801be00 	.word	0x0801be00
 8011808:	0801b830 	.word	0x0801b830
 801180c:	0801be18 	.word	0x0801be18

08011810 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d107      	bne.n	801182e <tcp_pcb_purge+0x1e>
 801181e:	4b21      	ldr	r3, [pc, #132]	; (80118a4 <tcp_pcb_purge+0x94>)
 8011820:	f640 0251 	movw	r2, #2129	; 0x851
 8011824:	4920      	ldr	r1, [pc, #128]	; (80118a8 <tcp_pcb_purge+0x98>)
 8011826:	4821      	ldr	r0, [pc, #132]	; (80118ac <tcp_pcb_purge+0x9c>)
 8011828:	f007 fe30 	bl	801948c <iprintf>
 801182c:	e037      	b.n	801189e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	7d1b      	ldrb	r3, [r3, #20]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d033      	beq.n	801189e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801183a:	2b0a      	cmp	r3, #10
 801183c:	d02f      	beq.n	801189e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011842:	2b01      	cmp	r3, #1
 8011844:	d02b      	beq.n	801189e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801184a:	2b00      	cmp	r3, #0
 801184c:	d007      	beq.n	801185e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011852:	4618      	mov	r0, r3
 8011854:	f7fe f89e 	bl	800f994 <pbuf_free>
      pcb->refused_data = NULL;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011862:	2b00      	cmp	r3, #0
 8011864:	d002      	beq.n	801186c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f000 f986 	bl	8011b78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011872:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011878:	4618      	mov	r0, r3
 801187a:	f7ff fcf9 	bl	8011270 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff fcf4 	bl	8011270 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	66da      	str	r2, [r3, #108]	; 0x6c
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2200      	movs	r2, #0
 801189a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	0801b7ec 	.word	0x0801b7ec
 80118a8:	0801be38 	.word	0x0801be38
 80118ac:	0801b830 	.word	0x0801b830

080118b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d106      	bne.n	80118ce <tcp_pcb_remove+0x1e>
 80118c0:	4b3e      	ldr	r3, [pc, #248]	; (80119bc <tcp_pcb_remove+0x10c>)
 80118c2:	f640 0283 	movw	r2, #2179	; 0x883
 80118c6:	493e      	ldr	r1, [pc, #248]	; (80119c0 <tcp_pcb_remove+0x110>)
 80118c8:	483e      	ldr	r0, [pc, #248]	; (80119c4 <tcp_pcb_remove+0x114>)
 80118ca:	f007 fddf 	bl	801948c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d106      	bne.n	80118e2 <tcp_pcb_remove+0x32>
 80118d4:	4b39      	ldr	r3, [pc, #228]	; (80119bc <tcp_pcb_remove+0x10c>)
 80118d6:	f640 0284 	movw	r2, #2180	; 0x884
 80118da:	493b      	ldr	r1, [pc, #236]	; (80119c8 <tcp_pcb_remove+0x118>)
 80118dc:	4839      	ldr	r0, [pc, #228]	; (80119c4 <tcp_pcb_remove+0x114>)
 80118de:	f007 fdd5 	bl	801948c <iprintf>

  TCP_RMV(pcblist, pcb);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	683a      	ldr	r2, [r7, #0]
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d105      	bne.n	80118f8 <tcp_pcb_remove+0x48>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	68da      	ldr	r2, [r3, #12]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	601a      	str	r2, [r3, #0]
 80118f6:	e013      	b.n	8011920 <tcp_pcb_remove+0x70>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	60fb      	str	r3, [r7, #12]
 80118fe:	e00c      	b.n	801191a <tcp_pcb_remove+0x6a>
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	68db      	ldr	r3, [r3, #12]
 8011904:	683a      	ldr	r2, [r7, #0]
 8011906:	429a      	cmp	r2, r3
 8011908:	d104      	bne.n	8011914 <tcp_pcb_remove+0x64>
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	68da      	ldr	r2, [r3, #12]
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	60da      	str	r2, [r3, #12]
 8011912:	e005      	b.n	8011920 <tcp_pcb_remove+0x70>
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	60fb      	str	r3, [r7, #12]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d1ef      	bne.n	8011900 <tcp_pcb_remove+0x50>
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	2200      	movs	r2, #0
 8011924:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011926:	6838      	ldr	r0, [r7, #0]
 8011928:	f7ff ff72 	bl	8011810 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	7d1b      	ldrb	r3, [r3, #20]
 8011930:	2b0a      	cmp	r3, #10
 8011932:	d013      	beq.n	801195c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011938:	2b01      	cmp	r3, #1
 801193a:	d00f      	beq.n	801195c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	8b5b      	ldrh	r3, [r3, #26]
 8011940:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011944:	2b00      	cmp	r3, #0
 8011946:	d009      	beq.n	801195c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	8b5b      	ldrh	r3, [r3, #26]
 801194c:	f043 0302 	orr.w	r3, r3, #2
 8011950:	b29a      	uxth	r2, r3
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011956:	6838      	ldr	r0, [r7, #0]
 8011958:	f003 fbc6 	bl	80150e8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	7d1b      	ldrb	r3, [r3, #20]
 8011960:	2b01      	cmp	r3, #1
 8011962:	d020      	beq.n	80119a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011968:	2b00      	cmp	r3, #0
 801196a:	d006      	beq.n	801197a <tcp_pcb_remove+0xca>
 801196c:	4b13      	ldr	r3, [pc, #76]	; (80119bc <tcp_pcb_remove+0x10c>)
 801196e:	f640 0293 	movw	r2, #2195	; 0x893
 8011972:	4916      	ldr	r1, [pc, #88]	; (80119cc <tcp_pcb_remove+0x11c>)
 8011974:	4813      	ldr	r0, [pc, #76]	; (80119c4 <tcp_pcb_remove+0x114>)
 8011976:	f007 fd89 	bl	801948c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801197e:	2b00      	cmp	r3, #0
 8011980:	d006      	beq.n	8011990 <tcp_pcb_remove+0xe0>
 8011982:	4b0e      	ldr	r3, [pc, #56]	; (80119bc <tcp_pcb_remove+0x10c>)
 8011984:	f640 0294 	movw	r2, #2196	; 0x894
 8011988:	4911      	ldr	r1, [pc, #68]	; (80119d0 <tcp_pcb_remove+0x120>)
 801198a:	480e      	ldr	r0, [pc, #56]	; (80119c4 <tcp_pcb_remove+0x114>)
 801198c:	f007 fd7e 	bl	801948c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011994:	2b00      	cmp	r3, #0
 8011996:	d006      	beq.n	80119a6 <tcp_pcb_remove+0xf6>
 8011998:	4b08      	ldr	r3, [pc, #32]	; (80119bc <tcp_pcb_remove+0x10c>)
 801199a:	f640 0296 	movw	r2, #2198	; 0x896
 801199e:	490d      	ldr	r1, [pc, #52]	; (80119d4 <tcp_pcb_remove+0x124>)
 80119a0:	4808      	ldr	r0, [pc, #32]	; (80119c4 <tcp_pcb_remove+0x114>)
 80119a2:	f007 fd73 	bl	801948c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	2200      	movs	r2, #0
 80119aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	2200      	movs	r2, #0
 80119b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80119b2:	bf00      	nop
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	0801b7ec 	.word	0x0801b7ec
 80119c0:	0801be54 	.word	0x0801be54
 80119c4:	0801b830 	.word	0x0801b830
 80119c8:	0801be70 	.word	0x0801be70
 80119cc:	0801be90 	.word	0x0801be90
 80119d0:	0801bea8 	.word	0x0801bea8
 80119d4:	0801bec4 	.word	0x0801bec4

080119d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d106      	bne.n	80119f4 <tcp_next_iss+0x1c>
 80119e6:	4b0a      	ldr	r3, [pc, #40]	; (8011a10 <tcp_next_iss+0x38>)
 80119e8:	f640 02af 	movw	r2, #2223	; 0x8af
 80119ec:	4909      	ldr	r1, [pc, #36]	; (8011a14 <tcp_next_iss+0x3c>)
 80119ee:	480a      	ldr	r0, [pc, #40]	; (8011a18 <tcp_next_iss+0x40>)
 80119f0:	f007 fd4c 	bl	801948c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80119f4:	4b09      	ldr	r3, [pc, #36]	; (8011a1c <tcp_next_iss+0x44>)
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	4b09      	ldr	r3, [pc, #36]	; (8011a20 <tcp_next_iss+0x48>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4413      	add	r3, r2
 80119fe:	4a07      	ldr	r2, [pc, #28]	; (8011a1c <tcp_next_iss+0x44>)
 8011a00:	6013      	str	r3, [r2, #0]
  return iss;
 8011a02:	4b06      	ldr	r3, [pc, #24]	; (8011a1c <tcp_next_iss+0x44>)
 8011a04:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3708      	adds	r7, #8
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	0801b7ec 	.word	0x0801b7ec
 8011a14:	0801bedc 	.word	0x0801bedc
 8011a18:	0801b830 	.word	0x0801b830
 8011a1c:	20001a54 	.word	0x20001a54
 8011a20:	2004efc4 	.word	0x2004efc4

08011a24 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b086      	sub	sp, #24
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	60b9      	str	r1, [r7, #8]
 8011a2e:	607a      	str	r2, [r7, #4]
 8011a30:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d106      	bne.n	8011a46 <tcp_eff_send_mss_netif+0x22>
 8011a38:	4b14      	ldr	r3, [pc, #80]	; (8011a8c <tcp_eff_send_mss_netif+0x68>)
 8011a3a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011a3e:	4914      	ldr	r1, [pc, #80]	; (8011a90 <tcp_eff_send_mss_netif+0x6c>)
 8011a40:	4814      	ldr	r0, [pc, #80]	; (8011a94 <tcp_eff_send_mss_netif+0x70>)
 8011a42:	f007 fd23 	bl	801948c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d101      	bne.n	8011a50 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011a4c:	89fb      	ldrh	r3, [r7, #14]
 8011a4e:	e019      	b.n	8011a84 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011a54:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011a56:	8afb      	ldrh	r3, [r7, #22]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d012      	beq.n	8011a82 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011a5c:	2328      	movs	r3, #40	; 0x28
 8011a5e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011a60:	8afa      	ldrh	r2, [r7, #22]
 8011a62:	8abb      	ldrh	r3, [r7, #20]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d904      	bls.n	8011a72 <tcp_eff_send_mss_netif+0x4e>
 8011a68:	8afa      	ldrh	r2, [r7, #22]
 8011a6a:	8abb      	ldrh	r3, [r7, #20]
 8011a6c:	1ad3      	subs	r3, r2, r3
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	e000      	b.n	8011a74 <tcp_eff_send_mss_netif+0x50>
 8011a72:	2300      	movs	r3, #0
 8011a74:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011a76:	8a7a      	ldrh	r2, [r7, #18]
 8011a78:	89fb      	ldrh	r3, [r7, #14]
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	bf28      	it	cs
 8011a7e:	4613      	movcs	r3, r2
 8011a80:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011a82:	89fb      	ldrh	r3, [r7, #14]
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3718      	adds	r7, #24
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	0801b7ec 	.word	0x0801b7ec
 8011a90:	0801bef8 	.word	0x0801bef8
 8011a94:	0801b830 	.word	0x0801b830

08011a98 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b084      	sub	sp, #16
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d119      	bne.n	8011ae0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011aac:	4b10      	ldr	r3, [pc, #64]	; (8011af0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011aae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011ab2:	4910      	ldr	r1, [pc, #64]	; (8011af4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011ab4:	4810      	ldr	r0, [pc, #64]	; (8011af8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011ab6:	f007 fce9 	bl	801948c <iprintf>

  while (pcb != NULL) {
 8011aba:	e011      	b.n	8011ae0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d108      	bne.n	8011ada <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	68db      	ldr	r3, [r3, #12]
 8011acc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011ace:	68f8      	ldr	r0, [r7, #12]
 8011ad0:	f7fe fd50 	bl	8010574 <tcp_abort>
      pcb = next;
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	60fb      	str	r3, [r7, #12]
 8011ad8:	e002      	b.n	8011ae0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d1ea      	bne.n	8011abc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011ae6:	bf00      	nop
 8011ae8:	bf00      	nop
 8011aea:	3710      	adds	r7, #16
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}
 8011af0:	0801b7ec 	.word	0x0801b7ec
 8011af4:	0801bf20 	.word	0x0801bf20
 8011af8:	0801b830 	.word	0x0801b830

08011afc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d02a      	beq.n	8011b62 <tcp_netif_ip_addr_changed+0x66>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d026      	beq.n	8011b62 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011b14:	4b15      	ldr	r3, [pc, #84]	; (8011b6c <tcp_netif_ip_addr_changed+0x70>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4619      	mov	r1, r3
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f7ff ffbc 	bl	8011a98 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011b20:	4b13      	ldr	r3, [pc, #76]	; (8011b70 <tcp_netif_ip_addr_changed+0x74>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4619      	mov	r1, r3
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f7ff ffb6 	bl	8011a98 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d017      	beq.n	8011b62 <tcp_netif_ip_addr_changed+0x66>
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d013      	beq.n	8011b62 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b3a:	4b0e      	ldr	r3, [pc, #56]	; (8011b74 <tcp_netif_ip_addr_changed+0x78>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	60fb      	str	r3, [r7, #12]
 8011b40:	e00c      	b.n	8011b5c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	681a      	ldr	r2, [r3, #0]
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d103      	bne.n	8011b56 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	60fb      	str	r3, [r7, #12]
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d1ef      	bne.n	8011b42 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011b62:	bf00      	nop
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	2004efd0 	.word	0x2004efd0
 8011b70:	2004efc8 	.word	0x2004efc8
 8011b74:	2004efcc 	.word	0x2004efcc

08011b78 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d007      	beq.n	8011b98 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7ff fb6f 	bl	8011270 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011b98:	bf00      	nop
 8011b9a:	3708      	adds	r7, #8
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}

08011ba0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011ba0:	b590      	push	{r4, r7, lr}
 8011ba2:	b08d      	sub	sp, #52	; 0x34
 8011ba4:	af04      	add	r7, sp, #16
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d105      	bne.n	8011bbc <tcp_input+0x1c>
 8011bb0:	4b9b      	ldr	r3, [pc, #620]	; (8011e20 <tcp_input+0x280>)
 8011bb2:	2283      	movs	r2, #131	; 0x83
 8011bb4:	499b      	ldr	r1, [pc, #620]	; (8011e24 <tcp_input+0x284>)
 8011bb6:	489c      	ldr	r0, [pc, #624]	; (8011e28 <tcp_input+0x288>)
 8011bb8:	f007 fc68 	bl	801948c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	4a9a      	ldr	r2, [pc, #616]	; (8011e2c <tcp_input+0x28c>)
 8011bc2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	895b      	ldrh	r3, [r3, #10]
 8011bc8:	2b13      	cmp	r3, #19
 8011bca:	f240 83d1 	bls.w	8012370 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011bce:	4b98      	ldr	r3, [pc, #608]	; (8011e30 <tcp_input+0x290>)
 8011bd0:	695b      	ldr	r3, [r3, #20]
 8011bd2:	4a97      	ldr	r2, [pc, #604]	; (8011e30 <tcp_input+0x290>)
 8011bd4:	6812      	ldr	r2, [r2, #0]
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f006 f9a3 	bl	8017f24 <ip4_addr_isbroadcast_u32>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f040 83c7 	bne.w	8012374 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011be6:	4b92      	ldr	r3, [pc, #584]	; (8011e30 <tcp_input+0x290>)
 8011be8:	695b      	ldr	r3, [r3, #20]
 8011bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011bee:	2be0      	cmp	r3, #224	; 0xe0
 8011bf0:	f000 83c0 	beq.w	8012374 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011bf4:	4b8d      	ldr	r3, [pc, #564]	; (8011e2c <tcp_input+0x28c>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	899b      	ldrh	r3, [r3, #12]
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7fc fad7 	bl	800e1b0 <lwip_htons>
 8011c02:	4603      	mov	r3, r0
 8011c04:	0b1b      	lsrs	r3, r3, #12
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011c0e:	7cbb      	ldrb	r3, [r7, #18]
 8011c10:	2b13      	cmp	r3, #19
 8011c12:	f240 83b1 	bls.w	8012378 <tcp_input+0x7d8>
 8011c16:	7cbb      	ldrb	r3, [r7, #18]
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	891b      	ldrh	r3, [r3, #8]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	f200 83aa 	bhi.w	8012378 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011c24:	7cbb      	ldrb	r3, [r7, #18]
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	3b14      	subs	r3, #20
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	4b81      	ldr	r3, [pc, #516]	; (8011e34 <tcp_input+0x294>)
 8011c2e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011c30:	4b81      	ldr	r3, [pc, #516]	; (8011e38 <tcp_input+0x298>)
 8011c32:	2200      	movs	r2, #0
 8011c34:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	895a      	ldrh	r2, [r3, #10]
 8011c3a:	7cbb      	ldrb	r3, [r7, #18]
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d309      	bcc.n	8011c56 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011c42:	4b7c      	ldr	r3, [pc, #496]	; (8011e34 <tcp_input+0x294>)
 8011c44:	881a      	ldrh	r2, [r3, #0]
 8011c46:	4b7d      	ldr	r3, [pc, #500]	; (8011e3c <tcp_input+0x29c>)
 8011c48:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011c4a:	7cbb      	ldrb	r3, [r7, #18]
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f7fd fe1a 	bl	800f888 <pbuf_remove_header>
 8011c54:	e04e      	b.n	8011cf4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d105      	bne.n	8011c6a <tcp_input+0xca>
 8011c5e:	4b70      	ldr	r3, [pc, #448]	; (8011e20 <tcp_input+0x280>)
 8011c60:	22c2      	movs	r2, #194	; 0xc2
 8011c62:	4977      	ldr	r1, [pc, #476]	; (8011e40 <tcp_input+0x2a0>)
 8011c64:	4870      	ldr	r0, [pc, #448]	; (8011e28 <tcp_input+0x288>)
 8011c66:	f007 fc11 	bl	801948c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011c6a:	2114      	movs	r1, #20
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f7fd fe0b 	bl	800f888 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	895a      	ldrh	r2, [r3, #10]
 8011c76:	4b71      	ldr	r3, [pc, #452]	; (8011e3c <tcp_input+0x29c>)
 8011c78:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011c7a:	4b6e      	ldr	r3, [pc, #440]	; (8011e34 <tcp_input+0x294>)
 8011c7c:	881a      	ldrh	r2, [r3, #0]
 8011c7e:	4b6f      	ldr	r3, [pc, #444]	; (8011e3c <tcp_input+0x29c>)
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	1ad3      	subs	r3, r2, r3
 8011c84:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011c86:	4b6d      	ldr	r3, [pc, #436]	; (8011e3c <tcp_input+0x29c>)
 8011c88:	881b      	ldrh	r3, [r3, #0]
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7fd fdfb 	bl	800f888 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	895b      	ldrh	r3, [r3, #10]
 8011c98:	8a3a      	ldrh	r2, [r7, #16]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	f200 836e 	bhi.w	801237c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	4a64      	ldr	r2, [pc, #400]	; (8011e38 <tcp_input+0x298>)
 8011ca8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	8a3a      	ldrh	r2, [r7, #16]
 8011cb0:	4611      	mov	r1, r2
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fd fde8 	bl	800f888 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	891a      	ldrh	r2, [r3, #8]
 8011cbc:	8a3b      	ldrh	r3, [r7, #16]
 8011cbe:	1ad3      	subs	r3, r2, r3
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	895b      	ldrh	r3, [r3, #10]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d005      	beq.n	8011cda <tcp_input+0x13a>
 8011cce:	4b54      	ldr	r3, [pc, #336]	; (8011e20 <tcp_input+0x280>)
 8011cd0:	22df      	movs	r2, #223	; 0xdf
 8011cd2:	495c      	ldr	r1, [pc, #368]	; (8011e44 <tcp_input+0x2a4>)
 8011cd4:	4854      	ldr	r0, [pc, #336]	; (8011e28 <tcp_input+0x288>)
 8011cd6:	f007 fbd9 	bl	801948c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	891a      	ldrh	r2, [r3, #8]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	891b      	ldrh	r3, [r3, #8]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d005      	beq.n	8011cf4 <tcp_input+0x154>
 8011ce8:	4b4d      	ldr	r3, [pc, #308]	; (8011e20 <tcp_input+0x280>)
 8011cea:	22e0      	movs	r2, #224	; 0xe0
 8011cec:	4956      	ldr	r1, [pc, #344]	; (8011e48 <tcp_input+0x2a8>)
 8011cee:	484e      	ldr	r0, [pc, #312]	; (8011e28 <tcp_input+0x288>)
 8011cf0:	f007 fbcc 	bl	801948c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011cf4:	4b4d      	ldr	r3, [pc, #308]	; (8011e2c <tcp_input+0x28c>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	4a4b      	ldr	r2, [pc, #300]	; (8011e2c <tcp_input+0x28c>)
 8011cfe:	6814      	ldr	r4, [r2, #0]
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7fc fa55 	bl	800e1b0 <lwip_htons>
 8011d06:	4603      	mov	r3, r0
 8011d08:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011d0a:	4b48      	ldr	r3, [pc, #288]	; (8011e2c <tcp_input+0x28c>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	885b      	ldrh	r3, [r3, #2]
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	4a46      	ldr	r2, [pc, #280]	; (8011e2c <tcp_input+0x28c>)
 8011d14:	6814      	ldr	r4, [r2, #0]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fc fa4a 	bl	800e1b0 <lwip_htons>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011d20:	4b42      	ldr	r3, [pc, #264]	; (8011e2c <tcp_input+0x28c>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	4a41      	ldr	r2, [pc, #260]	; (8011e2c <tcp_input+0x28c>)
 8011d28:	6814      	ldr	r4, [r2, #0]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7fc fa55 	bl	800e1da <lwip_htonl>
 8011d30:	4603      	mov	r3, r0
 8011d32:	6063      	str	r3, [r4, #4]
 8011d34:	6863      	ldr	r3, [r4, #4]
 8011d36:	4a45      	ldr	r2, [pc, #276]	; (8011e4c <tcp_input+0x2ac>)
 8011d38:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011d3a:	4b3c      	ldr	r3, [pc, #240]	; (8011e2c <tcp_input+0x28c>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	689b      	ldr	r3, [r3, #8]
 8011d40:	4a3a      	ldr	r2, [pc, #232]	; (8011e2c <tcp_input+0x28c>)
 8011d42:	6814      	ldr	r4, [r2, #0]
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7fc fa48 	bl	800e1da <lwip_htonl>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	60a3      	str	r3, [r4, #8]
 8011d4e:	68a3      	ldr	r3, [r4, #8]
 8011d50:	4a3f      	ldr	r2, [pc, #252]	; (8011e50 <tcp_input+0x2b0>)
 8011d52:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011d54:	4b35      	ldr	r3, [pc, #212]	; (8011e2c <tcp_input+0x28c>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	89db      	ldrh	r3, [r3, #14]
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	4a33      	ldr	r2, [pc, #204]	; (8011e2c <tcp_input+0x28c>)
 8011d5e:	6814      	ldr	r4, [r2, #0]
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fc fa25 	bl	800e1b0 <lwip_htons>
 8011d66:	4603      	mov	r3, r0
 8011d68:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011d6a:	4b30      	ldr	r3, [pc, #192]	; (8011e2c <tcp_input+0x28c>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	899b      	ldrh	r3, [r3, #12]
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7fc fa1c 	bl	800e1b0 <lwip_htons>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011d80:	b2da      	uxtb	r2, r3
 8011d82:	4b34      	ldr	r3, [pc, #208]	; (8011e54 <tcp_input+0x2b4>)
 8011d84:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	891a      	ldrh	r2, [r3, #8]
 8011d8a:	4b33      	ldr	r3, [pc, #204]	; (8011e58 <tcp_input+0x2b8>)
 8011d8c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011d8e:	4b31      	ldr	r3, [pc, #196]	; (8011e54 <tcp_input+0x2b4>)
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	f003 0303 	and.w	r3, r3, #3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d00c      	beq.n	8011db4 <tcp_input+0x214>
    tcplen++;
 8011d9a:	4b2f      	ldr	r3, [pc, #188]	; (8011e58 <tcp_input+0x2b8>)
 8011d9c:	881b      	ldrh	r3, [r3, #0]
 8011d9e:	3301      	adds	r3, #1
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	4b2d      	ldr	r3, [pc, #180]	; (8011e58 <tcp_input+0x2b8>)
 8011da4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	891a      	ldrh	r2, [r3, #8]
 8011daa:	4b2b      	ldr	r3, [pc, #172]	; (8011e58 <tcp_input+0x2b8>)
 8011dac:	881b      	ldrh	r3, [r3, #0]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	f200 82e6 	bhi.w	8012380 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011db4:	2300      	movs	r3, #0
 8011db6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011db8:	4b28      	ldr	r3, [pc, #160]	; (8011e5c <tcp_input+0x2bc>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	61fb      	str	r3, [r7, #28]
 8011dbe:	e09d      	b.n	8011efc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011dc0:	69fb      	ldr	r3, [r7, #28]
 8011dc2:	7d1b      	ldrb	r3, [r3, #20]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d105      	bne.n	8011dd4 <tcp_input+0x234>
 8011dc8:	4b15      	ldr	r3, [pc, #84]	; (8011e20 <tcp_input+0x280>)
 8011dca:	22fb      	movs	r2, #251	; 0xfb
 8011dcc:	4924      	ldr	r1, [pc, #144]	; (8011e60 <tcp_input+0x2c0>)
 8011dce:	4816      	ldr	r0, [pc, #88]	; (8011e28 <tcp_input+0x288>)
 8011dd0:	f007 fb5c 	bl	801948c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	7d1b      	ldrb	r3, [r3, #20]
 8011dd8:	2b0a      	cmp	r3, #10
 8011dda:	d105      	bne.n	8011de8 <tcp_input+0x248>
 8011ddc:	4b10      	ldr	r3, [pc, #64]	; (8011e20 <tcp_input+0x280>)
 8011dde:	22fc      	movs	r2, #252	; 0xfc
 8011de0:	4920      	ldr	r1, [pc, #128]	; (8011e64 <tcp_input+0x2c4>)
 8011de2:	4811      	ldr	r0, [pc, #68]	; (8011e28 <tcp_input+0x288>)
 8011de4:	f007 fb52 	bl	801948c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	7d1b      	ldrb	r3, [r3, #20]
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d105      	bne.n	8011dfc <tcp_input+0x25c>
 8011df0:	4b0b      	ldr	r3, [pc, #44]	; (8011e20 <tcp_input+0x280>)
 8011df2:	22fd      	movs	r2, #253	; 0xfd
 8011df4:	491c      	ldr	r1, [pc, #112]	; (8011e68 <tcp_input+0x2c8>)
 8011df6:	480c      	ldr	r0, [pc, #48]	; (8011e28 <tcp_input+0x288>)
 8011df8:	f007 fb48 	bl	801948c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011dfc:	69fb      	ldr	r3, [r7, #28]
 8011dfe:	7a1b      	ldrb	r3, [r3, #8]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d033      	beq.n	8011e6c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	7a1a      	ldrb	r2, [r3, #8]
 8011e08:	4b09      	ldr	r3, [pc, #36]	; (8011e30 <tcp_input+0x290>)
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011e10:	3301      	adds	r3, #1
 8011e12:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d029      	beq.n	8011e6c <tcp_input+0x2cc>
      prev = pcb;
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	61bb      	str	r3, [r7, #24]
      continue;
 8011e1c:	e06b      	b.n	8011ef6 <tcp_input+0x356>
 8011e1e:	bf00      	nop
 8011e20:	0801bf54 	.word	0x0801bf54
 8011e24:	0801bf88 	.word	0x0801bf88
 8011e28:	0801bfa0 	.word	0x0801bfa0
 8011e2c:	2004efec 	.word	0x2004efec
 8011e30:	2004aeb0 	.word	0x2004aeb0
 8011e34:	2004eff0 	.word	0x2004eff0
 8011e38:	2004eff4 	.word	0x2004eff4
 8011e3c:	2004eff2 	.word	0x2004eff2
 8011e40:	0801bfc8 	.word	0x0801bfc8
 8011e44:	0801bfd8 	.word	0x0801bfd8
 8011e48:	0801bfe4 	.word	0x0801bfe4
 8011e4c:	2004effc 	.word	0x2004effc
 8011e50:	2004f000 	.word	0x2004f000
 8011e54:	2004f008 	.word	0x2004f008
 8011e58:	2004f006 	.word	0x2004f006
 8011e5c:	2004efd0 	.word	0x2004efd0
 8011e60:	0801c004 	.word	0x0801c004
 8011e64:	0801c02c 	.word	0x0801c02c
 8011e68:	0801c058 	.word	0x0801c058
    }

    if (pcb->remote_port == tcphdr->src &&
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	8b1a      	ldrh	r2, [r3, #24]
 8011e70:	4b72      	ldr	r3, [pc, #456]	; (801203c <tcp_input+0x49c>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	881b      	ldrh	r3, [r3, #0]
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d13a      	bne.n	8011ef2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	8ada      	ldrh	r2, [r3, #22]
 8011e80:	4b6e      	ldr	r3, [pc, #440]	; (801203c <tcp_input+0x49c>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	885b      	ldrh	r3, [r3, #2]
 8011e86:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d132      	bne.n	8011ef2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	685a      	ldr	r2, [r3, #4]
 8011e90:	4b6b      	ldr	r3, [pc, #428]	; (8012040 <tcp_input+0x4a0>)
 8011e92:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d12c      	bne.n	8011ef2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	4b68      	ldr	r3, [pc, #416]	; (8012040 <tcp_input+0x4a0>)
 8011e9e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d126      	bne.n	8011ef2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	69fa      	ldr	r2, [r7, #28]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d106      	bne.n	8011ebc <tcp_input+0x31c>
 8011eae:	4b65      	ldr	r3, [pc, #404]	; (8012044 <tcp_input+0x4a4>)
 8011eb0:	f240 120d 	movw	r2, #269	; 0x10d
 8011eb4:	4964      	ldr	r1, [pc, #400]	; (8012048 <tcp_input+0x4a8>)
 8011eb6:	4865      	ldr	r0, [pc, #404]	; (801204c <tcp_input+0x4ac>)
 8011eb8:	f007 fae8 	bl	801948c <iprintf>
      if (prev != NULL) {
 8011ebc:	69bb      	ldr	r3, [r7, #24]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d00a      	beq.n	8011ed8 <tcp_input+0x338>
        prev->next = pcb->next;
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	68da      	ldr	r2, [r3, #12]
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011eca:	4b61      	ldr	r3, [pc, #388]	; (8012050 <tcp_input+0x4b0>)
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011ed2:	4a5f      	ldr	r2, [pc, #380]	; (8012050 <tcp_input+0x4b0>)
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	68db      	ldr	r3, [r3, #12]
 8011edc:	69fa      	ldr	r2, [r7, #28]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d111      	bne.n	8011f06 <tcp_input+0x366>
 8011ee2:	4b58      	ldr	r3, [pc, #352]	; (8012044 <tcp_input+0x4a4>)
 8011ee4:	f240 1215 	movw	r2, #277	; 0x115
 8011ee8:	495a      	ldr	r1, [pc, #360]	; (8012054 <tcp_input+0x4b4>)
 8011eea:	4858      	ldr	r0, [pc, #352]	; (801204c <tcp_input+0x4ac>)
 8011eec:	f007 face 	bl	801948c <iprintf>
      break;
 8011ef0:	e009      	b.n	8011f06 <tcp_input+0x366>
    }
    prev = pcb;
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	68db      	ldr	r3, [r3, #12]
 8011efa:	61fb      	str	r3, [r7, #28]
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	f47f af5e 	bne.w	8011dc0 <tcp_input+0x220>
 8011f04:	e000      	b.n	8011f08 <tcp_input+0x368>
      break;
 8011f06:	bf00      	nop
  }

  if (pcb == NULL) {
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	f040 80aa 	bne.w	8012064 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f10:	4b51      	ldr	r3, [pc, #324]	; (8012058 <tcp_input+0x4b8>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	61fb      	str	r3, [r7, #28]
 8011f16:	e03f      	b.n	8011f98 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011f18:	69fb      	ldr	r3, [r7, #28]
 8011f1a:	7d1b      	ldrb	r3, [r3, #20]
 8011f1c:	2b0a      	cmp	r3, #10
 8011f1e:	d006      	beq.n	8011f2e <tcp_input+0x38e>
 8011f20:	4b48      	ldr	r3, [pc, #288]	; (8012044 <tcp_input+0x4a4>)
 8011f22:	f240 121f 	movw	r2, #287	; 0x11f
 8011f26:	494d      	ldr	r1, [pc, #308]	; (801205c <tcp_input+0x4bc>)
 8011f28:	4848      	ldr	r0, [pc, #288]	; (801204c <tcp_input+0x4ac>)
 8011f2a:	f007 faaf 	bl	801948c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	7a1b      	ldrb	r3, [r3, #8]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d009      	beq.n	8011f4a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	7a1a      	ldrb	r2, [r3, #8]
 8011f3a:	4b41      	ldr	r3, [pc, #260]	; (8012040 <tcp_input+0x4a0>)
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011f42:	3301      	adds	r3, #1
 8011f44:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d122      	bne.n	8011f90 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011f4a:	69fb      	ldr	r3, [r7, #28]
 8011f4c:	8b1a      	ldrh	r2, [r3, #24]
 8011f4e:	4b3b      	ldr	r3, [pc, #236]	; (801203c <tcp_input+0x49c>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	881b      	ldrh	r3, [r3, #0]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d11b      	bne.n	8011f92 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	8ada      	ldrh	r2, [r3, #22]
 8011f5e:	4b37      	ldr	r3, [pc, #220]	; (801203c <tcp_input+0x49c>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	885b      	ldrh	r3, [r3, #2]
 8011f64:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d113      	bne.n	8011f92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	685a      	ldr	r2, [r3, #4]
 8011f6e:	4b34      	ldr	r3, [pc, #208]	; (8012040 <tcp_input+0x4a0>)
 8011f70:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d10d      	bne.n	8011f92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011f76:	69fb      	ldr	r3, [r7, #28]
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	4b31      	ldr	r3, [pc, #196]	; (8012040 <tcp_input+0x4a0>)
 8011f7c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d107      	bne.n	8011f92 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011f82:	69f8      	ldr	r0, [r7, #28]
 8011f84:	f000 fb56 	bl	8012634 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7fd fd03 	bl	800f994 <pbuf_free>
        return;
 8011f8e:	e1fd      	b.n	801238c <tcp_input+0x7ec>
        continue;
 8011f90:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	61fb      	str	r3, [r7, #28]
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d1bc      	bne.n	8011f18 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011fa2:	4b2f      	ldr	r3, [pc, #188]	; (8012060 <tcp_input+0x4c0>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	617b      	str	r3, [r7, #20]
 8011fa8:	e02a      	b.n	8012000 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	7a1b      	ldrb	r3, [r3, #8]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d00c      	beq.n	8011fcc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	7a1a      	ldrb	r2, [r3, #8]
 8011fb6:	4b22      	ldr	r3, [pc, #136]	; (8012040 <tcp_input+0x4a0>)
 8011fb8:	685b      	ldr	r3, [r3, #4]
 8011fba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d002      	beq.n	8011fcc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	61bb      	str	r3, [r7, #24]
        continue;
 8011fca:	e016      	b.n	8011ffa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	8ada      	ldrh	r2, [r3, #22]
 8011fd0:	4b1a      	ldr	r3, [pc, #104]	; (801203c <tcp_input+0x49c>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	885b      	ldrh	r3, [r3, #2]
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d10c      	bne.n	8011ff6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	4b17      	ldr	r3, [pc, #92]	; (8012040 <tcp_input+0x4a0>)
 8011fe2:	695b      	ldr	r3, [r3, #20]
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d00f      	beq.n	8012008 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d00d      	beq.n	801200a <tcp_input+0x46a>
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d009      	beq.n	801200a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	617b      	str	r3, [r7, #20]
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d1d1      	bne.n	8011faa <tcp_input+0x40a>
 8012006:	e000      	b.n	801200a <tcp_input+0x46a>
            break;
 8012008:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d029      	beq.n	8012064 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00a      	beq.n	801202c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	68da      	ldr	r2, [r3, #12]
 801201a:	69bb      	ldr	r3, [r7, #24]
 801201c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801201e:	4b10      	ldr	r3, [pc, #64]	; (8012060 <tcp_input+0x4c0>)
 8012020:	681a      	ldr	r2, [r3, #0]
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012026:	4a0e      	ldr	r2, [pc, #56]	; (8012060 <tcp_input+0x4c0>)
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801202c:	6978      	ldr	r0, [r7, #20]
 801202e:	f000 fa03 	bl	8012438 <tcp_listen_input>
      }
      pbuf_free(p);
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7fd fcae 	bl	800f994 <pbuf_free>
      return;
 8012038:	e1a8      	b.n	801238c <tcp_input+0x7ec>
 801203a:	bf00      	nop
 801203c:	2004efec 	.word	0x2004efec
 8012040:	2004aeb0 	.word	0x2004aeb0
 8012044:	0801bf54 	.word	0x0801bf54
 8012048:	0801c080 	.word	0x0801c080
 801204c:	0801bfa0 	.word	0x0801bfa0
 8012050:	2004efd0 	.word	0x2004efd0
 8012054:	0801c0ac 	.word	0x0801c0ac
 8012058:	2004efd4 	.word	0x2004efd4
 801205c:	0801c0d8 	.word	0x0801c0d8
 8012060:	2004efcc 	.word	0x2004efcc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	2b00      	cmp	r3, #0
 8012068:	f000 8158 	beq.w	801231c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801206c:	4b95      	ldr	r3, [pc, #596]	; (80122c4 <tcp_input+0x724>)
 801206e:	2200      	movs	r2, #0
 8012070:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	891a      	ldrh	r2, [r3, #8]
 8012076:	4b93      	ldr	r3, [pc, #588]	; (80122c4 <tcp_input+0x724>)
 8012078:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801207a:	4a92      	ldr	r2, [pc, #584]	; (80122c4 <tcp_input+0x724>)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012080:	4b91      	ldr	r3, [pc, #580]	; (80122c8 <tcp_input+0x728>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	4a8f      	ldr	r2, [pc, #572]	; (80122c4 <tcp_input+0x724>)
 8012086:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012088:	4b90      	ldr	r3, [pc, #576]	; (80122cc <tcp_input+0x72c>)
 801208a:	2200      	movs	r2, #0
 801208c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801208e:	4b90      	ldr	r3, [pc, #576]	; (80122d0 <tcp_input+0x730>)
 8012090:	2200      	movs	r2, #0
 8012092:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012094:	4b8f      	ldr	r3, [pc, #572]	; (80122d4 <tcp_input+0x734>)
 8012096:	2200      	movs	r2, #0
 8012098:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801209a:	4b8f      	ldr	r3, [pc, #572]	; (80122d8 <tcp_input+0x738>)
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	f003 0308 	and.w	r3, r3, #8
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d006      	beq.n	80120b4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	7b5b      	ldrb	r3, [r3, #13]
 80120aa:	f043 0301 	orr.w	r3, r3, #1
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d017      	beq.n	80120ec <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80120bc:	69f8      	ldr	r0, [r7, #28]
 80120be:	f7ff f85b 	bl	8011178 <tcp_process_refused_data>
 80120c2:	4603      	mov	r3, r0
 80120c4:	f113 0f0d 	cmn.w	r3, #13
 80120c8:	d007      	beq.n	80120da <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00c      	beq.n	80120ec <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80120d2:	4b82      	ldr	r3, [pc, #520]	; (80122dc <tcp_input+0x73c>)
 80120d4:	881b      	ldrh	r3, [r3, #0]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d008      	beq.n	80120ec <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f040 80e3 	bne.w	80122aa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80120e4:	69f8      	ldr	r0, [r7, #28]
 80120e6:	f003 fe05 	bl	8015cf4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80120ea:	e0de      	b.n	80122aa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80120ec:	4a7c      	ldr	r2, [pc, #496]	; (80122e0 <tcp_input+0x740>)
 80120ee:	69fb      	ldr	r3, [r7, #28]
 80120f0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80120f2:	69f8      	ldr	r0, [r7, #28]
 80120f4:	f000 fb18 	bl	8012728 <tcp_process>
 80120f8:	4603      	mov	r3, r0
 80120fa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80120fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012100:	f113 0f0d 	cmn.w	r3, #13
 8012104:	f000 80d3 	beq.w	80122ae <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012108:	4b71      	ldr	r3, [pc, #452]	; (80122d0 <tcp_input+0x730>)
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	f003 0308 	and.w	r3, r3, #8
 8012110:	2b00      	cmp	r3, #0
 8012112:	d015      	beq.n	8012140 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801211a:	2b00      	cmp	r3, #0
 801211c:	d008      	beq.n	8012130 <tcp_input+0x590>
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012124:	69fa      	ldr	r2, [r7, #28]
 8012126:	6912      	ldr	r2, [r2, #16]
 8012128:	f06f 010d 	mvn.w	r1, #13
 801212c:	4610      	mov	r0, r2
 801212e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012130:	69f9      	ldr	r1, [r7, #28]
 8012132:	486c      	ldr	r0, [pc, #432]	; (80122e4 <tcp_input+0x744>)
 8012134:	f7ff fbbc 	bl	80118b0 <tcp_pcb_remove>
        tcp_free(pcb);
 8012138:	69f8      	ldr	r0, [r7, #28]
 801213a:	f7fd fed7 	bl	800feec <tcp_free>
 801213e:	e0da      	b.n	80122f6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012140:	2300      	movs	r3, #0
 8012142:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012144:	4b63      	ldr	r3, [pc, #396]	; (80122d4 <tcp_input+0x734>)
 8012146:	881b      	ldrh	r3, [r3, #0]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d01d      	beq.n	8012188 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801214c:	4b61      	ldr	r3, [pc, #388]	; (80122d4 <tcp_input+0x734>)
 801214e:	881b      	ldrh	r3, [r3, #0]
 8012150:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012152:	69fb      	ldr	r3, [r7, #28]
 8012154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00a      	beq.n	8012172 <tcp_input+0x5d2>
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012162:	69fa      	ldr	r2, [r7, #28]
 8012164:	6910      	ldr	r0, [r2, #16]
 8012166:	89fa      	ldrh	r2, [r7, #14]
 8012168:	69f9      	ldr	r1, [r7, #28]
 801216a:	4798      	blx	r3
 801216c:	4603      	mov	r3, r0
 801216e:	74fb      	strb	r3, [r7, #19]
 8012170:	e001      	b.n	8012176 <tcp_input+0x5d6>
 8012172:	2300      	movs	r3, #0
 8012174:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012176:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801217a:	f113 0f0d 	cmn.w	r3, #13
 801217e:	f000 8098 	beq.w	80122b2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012182:	4b54      	ldr	r3, [pc, #336]	; (80122d4 <tcp_input+0x734>)
 8012184:	2200      	movs	r2, #0
 8012186:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012188:	69f8      	ldr	r0, [r7, #28]
 801218a:	f000 f915 	bl	80123b8 <tcp_input_delayed_close>
 801218e:	4603      	mov	r3, r0
 8012190:	2b00      	cmp	r3, #0
 8012192:	f040 8090 	bne.w	80122b6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012196:	4b4d      	ldr	r3, [pc, #308]	; (80122cc <tcp_input+0x72c>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d041      	beq.n	8012222 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801219e:	69fb      	ldr	r3, [r7, #28]
 80121a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d006      	beq.n	80121b4 <tcp_input+0x614>
 80121a6:	4b50      	ldr	r3, [pc, #320]	; (80122e8 <tcp_input+0x748>)
 80121a8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80121ac:	494f      	ldr	r1, [pc, #316]	; (80122ec <tcp_input+0x74c>)
 80121ae:	4850      	ldr	r0, [pc, #320]	; (80122f0 <tcp_input+0x750>)
 80121b0:	f007 f96c 	bl	801948c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	8b5b      	ldrh	r3, [r3, #26]
 80121b8:	f003 0310 	and.w	r3, r3, #16
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d008      	beq.n	80121d2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80121c0:	4b42      	ldr	r3, [pc, #264]	; (80122cc <tcp_input+0x72c>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7fd fbe5 	bl	800f994 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80121ca:	69f8      	ldr	r0, [r7, #28]
 80121cc:	f7fe f9d2 	bl	8010574 <tcp_abort>
            goto aborted;
 80121d0:	e091      	b.n	80122f6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80121d2:	69fb      	ldr	r3, [r7, #28]
 80121d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d00c      	beq.n	80121f6 <tcp_input+0x656>
 80121dc:	69fb      	ldr	r3, [r7, #28]
 80121de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80121e2:	69fb      	ldr	r3, [r7, #28]
 80121e4:	6918      	ldr	r0, [r3, #16]
 80121e6:	4b39      	ldr	r3, [pc, #228]	; (80122cc <tcp_input+0x72c>)
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	2300      	movs	r3, #0
 80121ec:	69f9      	ldr	r1, [r7, #28]
 80121ee:	47a0      	blx	r4
 80121f0:	4603      	mov	r3, r0
 80121f2:	74fb      	strb	r3, [r7, #19]
 80121f4:	e008      	b.n	8012208 <tcp_input+0x668>
 80121f6:	4b35      	ldr	r3, [pc, #212]	; (80122cc <tcp_input+0x72c>)
 80121f8:	681a      	ldr	r2, [r3, #0]
 80121fa:	2300      	movs	r3, #0
 80121fc:	69f9      	ldr	r1, [r7, #28]
 80121fe:	2000      	movs	r0, #0
 8012200:	f7ff f890 	bl	8011324 <tcp_recv_null>
 8012204:	4603      	mov	r3, r0
 8012206:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012208:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801220c:	f113 0f0d 	cmn.w	r3, #13
 8012210:	d053      	beq.n	80122ba <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012212:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d003      	beq.n	8012222 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801221a:	4b2c      	ldr	r3, [pc, #176]	; (80122cc <tcp_input+0x72c>)
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012222:	4b2b      	ldr	r3, [pc, #172]	; (80122d0 <tcp_input+0x730>)
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	f003 0320 	and.w	r3, r3, #32
 801222a:	2b00      	cmp	r3, #0
 801222c:	d030      	beq.n	8012290 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801222e:	69fb      	ldr	r3, [r7, #28]
 8012230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012232:	2b00      	cmp	r3, #0
 8012234:	d009      	beq.n	801224a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012236:	69fb      	ldr	r3, [r7, #28]
 8012238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801223a:	7b5a      	ldrb	r2, [r3, #13]
 801223c:	69fb      	ldr	r3, [r7, #28]
 801223e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012240:	f042 0220 	orr.w	r2, r2, #32
 8012244:	b2d2      	uxtb	r2, r2
 8012246:	735a      	strb	r2, [r3, #13]
 8012248:	e022      	b.n	8012290 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801224e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012252:	d005      	beq.n	8012260 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012258:	3301      	adds	r3, #1
 801225a:	b29a      	uxth	r2, r3
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012266:	2b00      	cmp	r3, #0
 8012268:	d00b      	beq.n	8012282 <tcp_input+0x6e2>
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	6918      	ldr	r0, [r3, #16]
 8012274:	2300      	movs	r3, #0
 8012276:	2200      	movs	r2, #0
 8012278:	69f9      	ldr	r1, [r7, #28]
 801227a:	47a0      	blx	r4
 801227c:	4603      	mov	r3, r0
 801227e:	74fb      	strb	r3, [r7, #19]
 8012280:	e001      	b.n	8012286 <tcp_input+0x6e6>
 8012282:	2300      	movs	r3, #0
 8012284:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012286:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801228a:	f113 0f0d 	cmn.w	r3, #13
 801228e:	d016      	beq.n	80122be <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012290:	4b13      	ldr	r3, [pc, #76]	; (80122e0 <tcp_input+0x740>)
 8012292:	2200      	movs	r2, #0
 8012294:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012296:	69f8      	ldr	r0, [r7, #28]
 8012298:	f000 f88e 	bl	80123b8 <tcp_input_delayed_close>
 801229c:	4603      	mov	r3, r0
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d128      	bne.n	80122f4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80122a2:	69f8      	ldr	r0, [r7, #28]
 80122a4:	f002 ff20 	bl	80150e8 <tcp_output>
 80122a8:	e025      	b.n	80122f6 <tcp_input+0x756>
        goto aborted;
 80122aa:	bf00      	nop
 80122ac:	e023      	b.n	80122f6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80122ae:	bf00      	nop
 80122b0:	e021      	b.n	80122f6 <tcp_input+0x756>
              goto aborted;
 80122b2:	bf00      	nop
 80122b4:	e01f      	b.n	80122f6 <tcp_input+0x756>
          goto aborted;
 80122b6:	bf00      	nop
 80122b8:	e01d      	b.n	80122f6 <tcp_input+0x756>
            goto aborted;
 80122ba:	bf00      	nop
 80122bc:	e01b      	b.n	80122f6 <tcp_input+0x756>
              goto aborted;
 80122be:	bf00      	nop
 80122c0:	e019      	b.n	80122f6 <tcp_input+0x756>
 80122c2:	bf00      	nop
 80122c4:	2004efdc 	.word	0x2004efdc
 80122c8:	2004efec 	.word	0x2004efec
 80122cc:	2004f00c 	.word	0x2004f00c
 80122d0:	2004f009 	.word	0x2004f009
 80122d4:	2004f004 	.word	0x2004f004
 80122d8:	2004f008 	.word	0x2004f008
 80122dc:	2004f006 	.word	0x2004f006
 80122e0:	2004f010 	.word	0x2004f010
 80122e4:	2004efd0 	.word	0x2004efd0
 80122e8:	0801bf54 	.word	0x0801bf54
 80122ec:	0801c108 	.word	0x0801c108
 80122f0:	0801bfa0 	.word	0x0801bfa0
          goto aborted;
 80122f4:	bf00      	nop
    tcp_input_pcb = NULL;
 80122f6:	4b27      	ldr	r3, [pc, #156]	; (8012394 <tcp_input+0x7f4>)
 80122f8:	2200      	movs	r2, #0
 80122fa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80122fc:	4b26      	ldr	r3, [pc, #152]	; (8012398 <tcp_input+0x7f8>)
 80122fe:	2200      	movs	r2, #0
 8012300:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012302:	4b26      	ldr	r3, [pc, #152]	; (801239c <tcp_input+0x7fc>)
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d03f      	beq.n	801238a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801230a:	4b24      	ldr	r3, [pc, #144]	; (801239c <tcp_input+0x7fc>)
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	4618      	mov	r0, r3
 8012310:	f7fd fb40 	bl	800f994 <pbuf_free>
      inseg.p = NULL;
 8012314:	4b21      	ldr	r3, [pc, #132]	; (801239c <tcp_input+0x7fc>)
 8012316:	2200      	movs	r2, #0
 8012318:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801231a:	e036      	b.n	801238a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801231c:	4b20      	ldr	r3, [pc, #128]	; (80123a0 <tcp_input+0x800>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	899b      	ldrh	r3, [r3, #12]
 8012322:	b29b      	uxth	r3, r3
 8012324:	4618      	mov	r0, r3
 8012326:	f7fb ff43 	bl	800e1b0 <lwip_htons>
 801232a:	4603      	mov	r3, r0
 801232c:	b2db      	uxtb	r3, r3
 801232e:	f003 0304 	and.w	r3, r3, #4
 8012332:	2b00      	cmp	r3, #0
 8012334:	d118      	bne.n	8012368 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012336:	4b1b      	ldr	r3, [pc, #108]	; (80123a4 <tcp_input+0x804>)
 8012338:	6819      	ldr	r1, [r3, #0]
 801233a:	4b1b      	ldr	r3, [pc, #108]	; (80123a8 <tcp_input+0x808>)
 801233c:	881b      	ldrh	r3, [r3, #0]
 801233e:	461a      	mov	r2, r3
 8012340:	4b1a      	ldr	r3, [pc, #104]	; (80123ac <tcp_input+0x80c>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012346:	4b16      	ldr	r3, [pc, #88]	; (80123a0 <tcp_input+0x800>)
 8012348:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801234a:	885b      	ldrh	r3, [r3, #2]
 801234c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801234e:	4a14      	ldr	r2, [pc, #80]	; (80123a0 <tcp_input+0x800>)
 8012350:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012352:	8812      	ldrh	r2, [r2, #0]
 8012354:	b292      	uxth	r2, r2
 8012356:	9202      	str	r2, [sp, #8]
 8012358:	9301      	str	r3, [sp, #4]
 801235a:	4b15      	ldr	r3, [pc, #84]	; (80123b0 <tcp_input+0x810>)
 801235c:	9300      	str	r3, [sp, #0]
 801235e:	4b15      	ldr	r3, [pc, #84]	; (80123b4 <tcp_input+0x814>)
 8012360:	4602      	mov	r2, r0
 8012362:	2000      	movs	r0, #0
 8012364:	f003 fc74 	bl	8015c50 <tcp_rst>
    pbuf_free(p);
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f7fd fb13 	bl	800f994 <pbuf_free>
  return;
 801236e:	e00c      	b.n	801238a <tcp_input+0x7ea>
    goto dropped;
 8012370:	bf00      	nop
 8012372:	e006      	b.n	8012382 <tcp_input+0x7e2>
    goto dropped;
 8012374:	bf00      	nop
 8012376:	e004      	b.n	8012382 <tcp_input+0x7e2>
    goto dropped;
 8012378:	bf00      	nop
 801237a:	e002      	b.n	8012382 <tcp_input+0x7e2>
      goto dropped;
 801237c:	bf00      	nop
 801237e:	e000      	b.n	8012382 <tcp_input+0x7e2>
      goto dropped;
 8012380:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f7fd fb06 	bl	800f994 <pbuf_free>
 8012388:	e000      	b.n	801238c <tcp_input+0x7ec>
  return;
 801238a:	bf00      	nop
}
 801238c:	3724      	adds	r7, #36	; 0x24
 801238e:	46bd      	mov	sp, r7
 8012390:	bd90      	pop	{r4, r7, pc}
 8012392:	bf00      	nop
 8012394:	2004f010 	.word	0x2004f010
 8012398:	2004f00c 	.word	0x2004f00c
 801239c:	2004efdc 	.word	0x2004efdc
 80123a0:	2004efec 	.word	0x2004efec
 80123a4:	2004f000 	.word	0x2004f000
 80123a8:	2004f006 	.word	0x2004f006
 80123ac:	2004effc 	.word	0x2004effc
 80123b0:	2004aec0 	.word	0x2004aec0
 80123b4:	2004aec4 	.word	0x2004aec4

080123b8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d106      	bne.n	80123d4 <tcp_input_delayed_close+0x1c>
 80123c6:	4b17      	ldr	r3, [pc, #92]	; (8012424 <tcp_input_delayed_close+0x6c>)
 80123c8:	f240 225a 	movw	r2, #602	; 0x25a
 80123cc:	4916      	ldr	r1, [pc, #88]	; (8012428 <tcp_input_delayed_close+0x70>)
 80123ce:	4817      	ldr	r0, [pc, #92]	; (801242c <tcp_input_delayed_close+0x74>)
 80123d0:	f007 f85c 	bl	801948c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80123d4:	4b16      	ldr	r3, [pc, #88]	; (8012430 <tcp_input_delayed_close+0x78>)
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	f003 0310 	and.w	r3, r3, #16
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d01c      	beq.n	801241a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	8b5b      	ldrh	r3, [r3, #26]
 80123e4:	f003 0310 	and.w	r3, r3, #16
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d10d      	bne.n	8012408 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d008      	beq.n	8012408 <tcp_input_delayed_close+0x50>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	6912      	ldr	r2, [r2, #16]
 8012400:	f06f 010e 	mvn.w	r1, #14
 8012404:	4610      	mov	r0, r2
 8012406:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012408:	6879      	ldr	r1, [r7, #4]
 801240a:	480a      	ldr	r0, [pc, #40]	; (8012434 <tcp_input_delayed_close+0x7c>)
 801240c:	f7ff fa50 	bl	80118b0 <tcp_pcb_remove>
    tcp_free(pcb);
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f7fd fd6b 	bl	800feec <tcp_free>
    return 1;
 8012416:	2301      	movs	r3, #1
 8012418:	e000      	b.n	801241c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801241a:	2300      	movs	r3, #0
}
 801241c:	4618      	mov	r0, r3
 801241e:	3708      	adds	r7, #8
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}
 8012424:	0801bf54 	.word	0x0801bf54
 8012428:	0801c124 	.word	0x0801c124
 801242c:	0801bfa0 	.word	0x0801bfa0
 8012430:	2004f009 	.word	0x2004f009
 8012434:	2004efd0 	.word	0x2004efd0

08012438 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012438:	b590      	push	{r4, r7, lr}
 801243a:	b08b      	sub	sp, #44	; 0x2c
 801243c:	af04      	add	r7, sp, #16
 801243e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012440:	4b6f      	ldr	r3, [pc, #444]	; (8012600 <tcp_listen_input+0x1c8>)
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	f003 0304 	and.w	r3, r3, #4
 8012448:	2b00      	cmp	r3, #0
 801244a:	f040 80d2 	bne.w	80125f2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d106      	bne.n	8012462 <tcp_listen_input+0x2a>
 8012454:	4b6b      	ldr	r3, [pc, #428]	; (8012604 <tcp_listen_input+0x1cc>)
 8012456:	f240 2281 	movw	r2, #641	; 0x281
 801245a:	496b      	ldr	r1, [pc, #428]	; (8012608 <tcp_listen_input+0x1d0>)
 801245c:	486b      	ldr	r0, [pc, #428]	; (801260c <tcp_listen_input+0x1d4>)
 801245e:	f007 f815 	bl	801948c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012462:	4b67      	ldr	r3, [pc, #412]	; (8012600 <tcp_listen_input+0x1c8>)
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	f003 0310 	and.w	r3, r3, #16
 801246a:	2b00      	cmp	r3, #0
 801246c:	d019      	beq.n	80124a2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801246e:	4b68      	ldr	r3, [pc, #416]	; (8012610 <tcp_listen_input+0x1d8>)
 8012470:	6819      	ldr	r1, [r3, #0]
 8012472:	4b68      	ldr	r3, [pc, #416]	; (8012614 <tcp_listen_input+0x1dc>)
 8012474:	881b      	ldrh	r3, [r3, #0]
 8012476:	461a      	mov	r2, r3
 8012478:	4b67      	ldr	r3, [pc, #412]	; (8012618 <tcp_listen_input+0x1e0>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801247e:	4b67      	ldr	r3, [pc, #412]	; (801261c <tcp_listen_input+0x1e4>)
 8012480:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012482:	885b      	ldrh	r3, [r3, #2]
 8012484:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012486:	4a65      	ldr	r2, [pc, #404]	; (801261c <tcp_listen_input+0x1e4>)
 8012488:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801248a:	8812      	ldrh	r2, [r2, #0]
 801248c:	b292      	uxth	r2, r2
 801248e:	9202      	str	r2, [sp, #8]
 8012490:	9301      	str	r3, [sp, #4]
 8012492:	4b63      	ldr	r3, [pc, #396]	; (8012620 <tcp_listen_input+0x1e8>)
 8012494:	9300      	str	r3, [sp, #0]
 8012496:	4b63      	ldr	r3, [pc, #396]	; (8012624 <tcp_listen_input+0x1ec>)
 8012498:	4602      	mov	r2, r0
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f003 fbd8 	bl	8015c50 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80124a0:	e0a9      	b.n	80125f6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80124a2:	4b57      	ldr	r3, [pc, #348]	; (8012600 <tcp_listen_input+0x1c8>)
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	f003 0302 	and.w	r3, r3, #2
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	f000 80a3 	beq.w	80125f6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	7d5b      	ldrb	r3, [r3, #21]
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7ff f859 	bl	801156c <tcp_alloc>
 80124ba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d111      	bne.n	80124e6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	699b      	ldr	r3, [r3, #24]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00a      	beq.n	80124e0 <tcp_listen_input+0xa8>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	699b      	ldr	r3, [r3, #24]
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	6910      	ldr	r0, [r2, #16]
 80124d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124d6:	2100      	movs	r1, #0
 80124d8:	4798      	blx	r3
 80124da:	4603      	mov	r3, r0
 80124dc:	73bb      	strb	r3, [r7, #14]
      return;
 80124de:	e08b      	b.n	80125f8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80124e0:	23f0      	movs	r3, #240	; 0xf0
 80124e2:	73bb      	strb	r3, [r7, #14]
      return;
 80124e4:	e088      	b.n	80125f8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80124e6:	4b50      	ldr	r3, [pc, #320]	; (8012628 <tcp_listen_input+0x1f0>)
 80124e8:	695a      	ldr	r2, [r3, #20]
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80124ee:	4b4e      	ldr	r3, [pc, #312]	; (8012628 <tcp_listen_input+0x1f0>)
 80124f0:	691a      	ldr	r2, [r3, #16]
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	8ada      	ldrh	r2, [r3, #22]
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80124fe:	4b47      	ldr	r3, [pc, #284]	; (801261c <tcp_listen_input+0x1e4>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	b29a      	uxth	r2, r3
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	2203      	movs	r2, #3
 801250e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012510:	4b41      	ldr	r3, [pc, #260]	; (8012618 <tcp_listen_input+0x1e0>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	1c5a      	adds	r2, r3, #1
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012522:	6978      	ldr	r0, [r7, #20]
 8012524:	f7ff fa58 	bl	80119d8 <tcp_next_iss>
 8012528:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	693a      	ldr	r2, [r7, #16]
 801252e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	693a      	ldr	r2, [r7, #16]
 8012534:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	693a      	ldr	r2, [r7, #16]
 801253a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	693a      	ldr	r2, [r7, #16]
 8012540:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012542:	4b35      	ldr	r3, [pc, #212]	; (8012618 <tcp_listen_input+0x1e0>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	1e5a      	subs	r2, r3, #1
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	691a      	ldr	r2, [r3, #16]
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	7a5b      	ldrb	r3, [r3, #9]
 801255e:	f003 030c 	and.w	r3, r3, #12
 8012562:	b2da      	uxtb	r2, r3
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	7a1a      	ldrb	r2, [r3, #8]
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012570:	4b2e      	ldr	r3, [pc, #184]	; (801262c <tcp_listen_input+0x1f4>)
 8012572:	681a      	ldr	r2, [r3, #0]
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	60da      	str	r2, [r3, #12]
 8012578:	4a2c      	ldr	r2, [pc, #176]	; (801262c <tcp_listen_input+0x1f4>)
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	6013      	str	r3, [r2, #0]
 801257e:	f003 fd29 	bl	8015fd4 <tcp_timer_needed>
 8012582:	4b2b      	ldr	r3, [pc, #172]	; (8012630 <tcp_listen_input+0x1f8>)
 8012584:	2201      	movs	r2, #1
 8012586:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012588:	6978      	ldr	r0, [r7, #20]
 801258a:	f001 fd8f 	bl	80140ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801258e:	4b23      	ldr	r3, [pc, #140]	; (801261c <tcp_listen_input+0x1e4>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	89db      	ldrh	r3, [r3, #14]
 8012594:	b29a      	uxth	r2, r3
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	3304      	adds	r3, #4
 80125b0:	4618      	mov	r0, r3
 80125b2:	f005 fa21 	bl	80179f8 <ip4_route>
 80125b6:	4601      	mov	r1, r0
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	3304      	adds	r3, #4
 80125bc:	461a      	mov	r2, r3
 80125be:	4620      	mov	r0, r4
 80125c0:	f7ff fa30 	bl	8011a24 <tcp_eff_send_mss_netif>
 80125c4:	4603      	mov	r3, r0
 80125c6:	461a      	mov	r2, r3
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80125cc:	2112      	movs	r1, #18
 80125ce:	6978      	ldr	r0, [r7, #20]
 80125d0:	f002 fc9c 	bl	8014f0c <tcp_enqueue_flags>
 80125d4:	4603      	mov	r3, r0
 80125d6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80125d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d004      	beq.n	80125ea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80125e0:	2100      	movs	r1, #0
 80125e2:	6978      	ldr	r0, [r7, #20]
 80125e4:	f7fd ff08 	bl	80103f8 <tcp_abandon>
      return;
 80125e8:	e006      	b.n	80125f8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80125ea:	6978      	ldr	r0, [r7, #20]
 80125ec:	f002 fd7c 	bl	80150e8 <tcp_output>
  return;
 80125f0:	e001      	b.n	80125f6 <tcp_listen_input+0x1be>
    return;
 80125f2:	bf00      	nop
 80125f4:	e000      	b.n	80125f8 <tcp_listen_input+0x1c0>
  return;
 80125f6:	bf00      	nop
}
 80125f8:	371c      	adds	r7, #28
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd90      	pop	{r4, r7, pc}
 80125fe:	bf00      	nop
 8012600:	2004f008 	.word	0x2004f008
 8012604:	0801bf54 	.word	0x0801bf54
 8012608:	0801c14c 	.word	0x0801c14c
 801260c:	0801bfa0 	.word	0x0801bfa0
 8012610:	2004f000 	.word	0x2004f000
 8012614:	2004f006 	.word	0x2004f006
 8012618:	2004effc 	.word	0x2004effc
 801261c:	2004efec 	.word	0x2004efec
 8012620:	2004aec0 	.word	0x2004aec0
 8012624:	2004aec4 	.word	0x2004aec4
 8012628:	2004aeb0 	.word	0x2004aeb0
 801262c:	2004efd0 	.word	0x2004efd0
 8012630:	2004efd8 	.word	0x2004efd8

08012634 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b086      	sub	sp, #24
 8012638:	af04      	add	r7, sp, #16
 801263a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801263c:	4b2f      	ldr	r3, [pc, #188]	; (80126fc <tcp_timewait_input+0xc8>)
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	f003 0304 	and.w	r3, r3, #4
 8012644:	2b00      	cmp	r3, #0
 8012646:	d153      	bne.n	80126f0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d106      	bne.n	801265c <tcp_timewait_input+0x28>
 801264e:	4b2c      	ldr	r3, [pc, #176]	; (8012700 <tcp_timewait_input+0xcc>)
 8012650:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012654:	492b      	ldr	r1, [pc, #172]	; (8012704 <tcp_timewait_input+0xd0>)
 8012656:	482c      	ldr	r0, [pc, #176]	; (8012708 <tcp_timewait_input+0xd4>)
 8012658:	f006 ff18 	bl	801948c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801265c:	4b27      	ldr	r3, [pc, #156]	; (80126fc <tcp_timewait_input+0xc8>)
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	f003 0302 	and.w	r3, r3, #2
 8012664:	2b00      	cmp	r3, #0
 8012666:	d02a      	beq.n	80126be <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012668:	4b28      	ldr	r3, [pc, #160]	; (801270c <tcp_timewait_input+0xd8>)
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012670:	1ad3      	subs	r3, r2, r3
 8012672:	2b00      	cmp	r3, #0
 8012674:	db2d      	blt.n	80126d2 <tcp_timewait_input+0x9e>
 8012676:	4b25      	ldr	r3, [pc, #148]	; (801270c <tcp_timewait_input+0xd8>)
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801267e:	6879      	ldr	r1, [r7, #4]
 8012680:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012682:	440b      	add	r3, r1
 8012684:	1ad3      	subs	r3, r2, r3
 8012686:	2b00      	cmp	r3, #0
 8012688:	dc23      	bgt.n	80126d2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801268a:	4b21      	ldr	r3, [pc, #132]	; (8012710 <tcp_timewait_input+0xdc>)
 801268c:	6819      	ldr	r1, [r3, #0]
 801268e:	4b21      	ldr	r3, [pc, #132]	; (8012714 <tcp_timewait_input+0xe0>)
 8012690:	881b      	ldrh	r3, [r3, #0]
 8012692:	461a      	mov	r2, r3
 8012694:	4b1d      	ldr	r3, [pc, #116]	; (801270c <tcp_timewait_input+0xd8>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801269a:	4b1f      	ldr	r3, [pc, #124]	; (8012718 <tcp_timewait_input+0xe4>)
 801269c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801269e:	885b      	ldrh	r3, [r3, #2]
 80126a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80126a2:	4a1d      	ldr	r2, [pc, #116]	; (8012718 <tcp_timewait_input+0xe4>)
 80126a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126a6:	8812      	ldrh	r2, [r2, #0]
 80126a8:	b292      	uxth	r2, r2
 80126aa:	9202      	str	r2, [sp, #8]
 80126ac:	9301      	str	r3, [sp, #4]
 80126ae:	4b1b      	ldr	r3, [pc, #108]	; (801271c <tcp_timewait_input+0xe8>)
 80126b0:	9300      	str	r3, [sp, #0]
 80126b2:	4b1b      	ldr	r3, [pc, #108]	; (8012720 <tcp_timewait_input+0xec>)
 80126b4:	4602      	mov	r2, r0
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f003 faca 	bl	8015c50 <tcp_rst>
      return;
 80126bc:	e01b      	b.n	80126f6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80126be:	4b0f      	ldr	r3, [pc, #60]	; (80126fc <tcp_timewait_input+0xc8>)
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	f003 0301 	and.w	r3, r3, #1
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d003      	beq.n	80126d2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80126ca:	4b16      	ldr	r3, [pc, #88]	; (8012724 <tcp_timewait_input+0xf0>)
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80126d2:	4b10      	ldr	r3, [pc, #64]	; (8012714 <tcp_timewait_input+0xe0>)
 80126d4:	881b      	ldrh	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00c      	beq.n	80126f4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	8b5b      	ldrh	r3, [r3, #26]
 80126de:	f043 0302 	orr.w	r3, r3, #2
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f002 fcfd 	bl	80150e8 <tcp_output>
  }
  return;
 80126ee:	e001      	b.n	80126f4 <tcp_timewait_input+0xc0>
    return;
 80126f0:	bf00      	nop
 80126f2:	e000      	b.n	80126f6 <tcp_timewait_input+0xc2>
  return;
 80126f4:	bf00      	nop
}
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	2004f008 	.word	0x2004f008
 8012700:	0801bf54 	.word	0x0801bf54
 8012704:	0801c16c 	.word	0x0801c16c
 8012708:	0801bfa0 	.word	0x0801bfa0
 801270c:	2004effc 	.word	0x2004effc
 8012710:	2004f000 	.word	0x2004f000
 8012714:	2004f006 	.word	0x2004f006
 8012718:	2004efec 	.word	0x2004efec
 801271c:	2004aec0 	.word	0x2004aec0
 8012720:	2004aec4 	.word	0x2004aec4
 8012724:	2004efc4 	.word	0x2004efc4

08012728 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012728:	b590      	push	{r4, r7, lr}
 801272a:	b08d      	sub	sp, #52	; 0x34
 801272c:	af04      	add	r7, sp, #16
 801272e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012730:	2300      	movs	r3, #0
 8012732:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012734:	2300      	movs	r3, #0
 8012736:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d106      	bne.n	801274c <tcp_process+0x24>
 801273e:	4b9d      	ldr	r3, [pc, #628]	; (80129b4 <tcp_process+0x28c>)
 8012740:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012744:	499c      	ldr	r1, [pc, #624]	; (80129b8 <tcp_process+0x290>)
 8012746:	489d      	ldr	r0, [pc, #628]	; (80129bc <tcp_process+0x294>)
 8012748:	f006 fea0 	bl	801948c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801274c:	4b9c      	ldr	r3, [pc, #624]	; (80129c0 <tcp_process+0x298>)
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	f003 0304 	and.w	r3, r3, #4
 8012754:	2b00      	cmp	r3, #0
 8012756:	d04e      	beq.n	80127f6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	7d1b      	ldrb	r3, [r3, #20]
 801275c:	2b02      	cmp	r3, #2
 801275e:	d108      	bne.n	8012772 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012764:	4b97      	ldr	r3, [pc, #604]	; (80129c4 <tcp_process+0x29c>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	429a      	cmp	r2, r3
 801276a:	d123      	bne.n	80127b4 <tcp_process+0x8c>
        acceptable = 1;
 801276c:	2301      	movs	r3, #1
 801276e:	76fb      	strb	r3, [r7, #27]
 8012770:	e020      	b.n	80127b4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012776:	4b94      	ldr	r3, [pc, #592]	; (80129c8 <tcp_process+0x2a0>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	429a      	cmp	r2, r3
 801277c:	d102      	bne.n	8012784 <tcp_process+0x5c>
        acceptable = 1;
 801277e:	2301      	movs	r3, #1
 8012780:	76fb      	strb	r3, [r7, #27]
 8012782:	e017      	b.n	80127b4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012784:	4b90      	ldr	r3, [pc, #576]	; (80129c8 <tcp_process+0x2a0>)
 8012786:	681a      	ldr	r2, [r3, #0]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	db10      	blt.n	80127b4 <tcp_process+0x8c>
 8012792:	4b8d      	ldr	r3, [pc, #564]	; (80129c8 <tcp_process+0x2a0>)
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801279a:	6879      	ldr	r1, [r7, #4]
 801279c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801279e:	440b      	add	r3, r1
 80127a0:	1ad3      	subs	r3, r2, r3
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	dc06      	bgt.n	80127b4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	8b5b      	ldrh	r3, [r3, #26]
 80127aa:	f043 0302 	orr.w	r3, r3, #2
 80127ae:	b29a      	uxth	r2, r3
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80127b4:	7efb      	ldrb	r3, [r7, #27]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d01b      	beq.n	80127f2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	7d1b      	ldrb	r3, [r3, #20]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d106      	bne.n	80127d0 <tcp_process+0xa8>
 80127c2:	4b7c      	ldr	r3, [pc, #496]	; (80129b4 <tcp_process+0x28c>)
 80127c4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80127c8:	4980      	ldr	r1, [pc, #512]	; (80129cc <tcp_process+0x2a4>)
 80127ca:	487c      	ldr	r0, [pc, #496]	; (80129bc <tcp_process+0x294>)
 80127cc:	f006 fe5e 	bl	801948c <iprintf>
      recv_flags |= TF_RESET;
 80127d0:	4b7f      	ldr	r3, [pc, #508]	; (80129d0 <tcp_process+0x2a8>)
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	f043 0308 	orr.w	r3, r3, #8
 80127d8:	b2da      	uxtb	r2, r3
 80127da:	4b7d      	ldr	r3, [pc, #500]	; (80129d0 <tcp_process+0x2a8>)
 80127dc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	8b5b      	ldrh	r3, [r3, #26]
 80127e2:	f023 0301 	bic.w	r3, r3, #1
 80127e6:	b29a      	uxth	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80127ec:	f06f 030d 	mvn.w	r3, #13
 80127f0:	e37a      	b.n	8012ee8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80127f2:	2300      	movs	r3, #0
 80127f4:	e378      	b.n	8012ee8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80127f6:	4b72      	ldr	r3, [pc, #456]	; (80129c0 <tcp_process+0x298>)
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	f003 0302 	and.w	r3, r3, #2
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d010      	beq.n	8012824 <tcp_process+0xfc>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	7d1b      	ldrb	r3, [r3, #20]
 8012806:	2b02      	cmp	r3, #2
 8012808:	d00c      	beq.n	8012824 <tcp_process+0xfc>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	7d1b      	ldrb	r3, [r3, #20]
 801280e:	2b03      	cmp	r3, #3
 8012810:	d008      	beq.n	8012824 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	8b5b      	ldrh	r3, [r3, #26]
 8012816:	f043 0302 	orr.w	r3, r3, #2
 801281a:	b29a      	uxth	r2, r3
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012820:	2300      	movs	r3, #0
 8012822:	e361      	b.n	8012ee8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	8b5b      	ldrh	r3, [r3, #26]
 8012828:	f003 0310 	and.w	r3, r3, #16
 801282c:	2b00      	cmp	r3, #0
 801282e:	d103      	bne.n	8012838 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012830:	4b68      	ldr	r3, [pc, #416]	; (80129d4 <tcp_process+0x2ac>)
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2200      	movs	r2, #0
 801283c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f001 fc2f 	bl	80140ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	7d1b      	ldrb	r3, [r3, #20]
 8012852:	3b02      	subs	r3, #2
 8012854:	2b07      	cmp	r3, #7
 8012856:	f200 8337 	bhi.w	8012ec8 <tcp_process+0x7a0>
 801285a:	a201      	add	r2, pc, #4	; (adr r2, 8012860 <tcp_process+0x138>)
 801285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012860:	08012881 	.word	0x08012881
 8012864:	08012ab1 	.word	0x08012ab1
 8012868:	08012c29 	.word	0x08012c29
 801286c:	08012c53 	.word	0x08012c53
 8012870:	08012d77 	.word	0x08012d77
 8012874:	08012c29 	.word	0x08012c29
 8012878:	08012e03 	.word	0x08012e03
 801287c:	08012e93 	.word	0x08012e93
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012880:	4b4f      	ldr	r3, [pc, #316]	; (80129c0 <tcp_process+0x298>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	f003 0310 	and.w	r3, r3, #16
 8012888:	2b00      	cmp	r3, #0
 801288a:	f000 80e4 	beq.w	8012a56 <tcp_process+0x32e>
 801288e:	4b4c      	ldr	r3, [pc, #304]	; (80129c0 <tcp_process+0x298>)
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	f003 0302 	and.w	r3, r3, #2
 8012896:	2b00      	cmp	r3, #0
 8012898:	f000 80dd 	beq.w	8012a56 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128a0:	1c5a      	adds	r2, r3, #1
 80128a2:	4b48      	ldr	r3, [pc, #288]	; (80129c4 <tcp_process+0x29c>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	429a      	cmp	r2, r3
 80128a8:	f040 80d5 	bne.w	8012a56 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80128ac:	4b46      	ldr	r3, [pc, #280]	; (80129c8 <tcp_process+0x2a0>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	1c5a      	adds	r2, r3, #1
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80128be:	4b41      	ldr	r3, [pc, #260]	; (80129c4 <tcp_process+0x29c>)
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80128c6:	4b44      	ldr	r3, [pc, #272]	; (80129d8 <tcp_process+0x2b0>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	89db      	ldrh	r3, [r3, #14]
 80128cc:	b29a      	uxth	r2, r3
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80128e0:	4b39      	ldr	r3, [pc, #228]	; (80129c8 <tcp_process+0x2a0>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	1e5a      	subs	r2, r3, #1
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2204      	movs	r2, #4
 80128ee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	3304      	adds	r3, #4
 80128f8:	4618      	mov	r0, r3
 80128fa:	f005 f87d 	bl	80179f8 <ip4_route>
 80128fe:	4601      	mov	r1, r0
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	3304      	adds	r3, #4
 8012904:	461a      	mov	r2, r3
 8012906:	4620      	mov	r0, r4
 8012908:	f7ff f88c 	bl	8011a24 <tcp_eff_send_mss_netif>
 801290c:	4603      	mov	r3, r0
 801290e:	461a      	mov	r2, r3
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012918:	009a      	lsls	r2, r3, #2
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	f241 111c 	movw	r1, #4380	; 0x111c
 8012924:	428b      	cmp	r3, r1
 8012926:	bf38      	it	cc
 8012928:	460b      	movcc	r3, r1
 801292a:	429a      	cmp	r2, r3
 801292c:	d204      	bcs.n	8012938 <tcp_process+0x210>
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	b29b      	uxth	r3, r3
 8012936:	e00d      	b.n	8012954 <tcp_process+0x22c>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801293c:	005b      	lsls	r3, r3, #1
 801293e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012942:	4293      	cmp	r3, r2
 8012944:	d904      	bls.n	8012950 <tcp_process+0x228>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801294a:	005b      	lsls	r3, r3, #1
 801294c:	b29b      	uxth	r3, r3
 801294e:	e001      	b.n	8012954 <tcp_process+0x22c>
 8012950:	f241 131c 	movw	r3, #4380	; 0x111c
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012960:	2b00      	cmp	r3, #0
 8012962:	d106      	bne.n	8012972 <tcp_process+0x24a>
 8012964:	4b13      	ldr	r3, [pc, #76]	; (80129b4 <tcp_process+0x28c>)
 8012966:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801296a:	491c      	ldr	r1, [pc, #112]	; (80129dc <tcp_process+0x2b4>)
 801296c:	4813      	ldr	r0, [pc, #76]	; (80129bc <tcp_process+0x294>)
 801296e:	f006 fd8d 	bl	801948c <iprintf>
        --pcb->snd_queuelen;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012978:	3b01      	subs	r3, #1
 801297a:	b29a      	uxth	r2, r3
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012986:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d12a      	bne.n	80129e4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012992:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d106      	bne.n	80129a8 <tcp_process+0x280>
 801299a:	4b06      	ldr	r3, [pc, #24]	; (80129b4 <tcp_process+0x28c>)
 801299c:	f44f 725d 	mov.w	r2, #884	; 0x374
 80129a0:	490f      	ldr	r1, [pc, #60]	; (80129e0 <tcp_process+0x2b8>)
 80129a2:	4806      	ldr	r0, [pc, #24]	; (80129bc <tcp_process+0x294>)
 80129a4:	f006 fd72 	bl	801948c <iprintf>
          pcb->unsent = rseg->next;
 80129a8:	69fb      	ldr	r3, [r7, #28]
 80129aa:	681a      	ldr	r2, [r3, #0]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80129b0:	e01c      	b.n	80129ec <tcp_process+0x2c4>
 80129b2:	bf00      	nop
 80129b4:	0801bf54 	.word	0x0801bf54
 80129b8:	0801c18c 	.word	0x0801c18c
 80129bc:	0801bfa0 	.word	0x0801bfa0
 80129c0:	2004f008 	.word	0x2004f008
 80129c4:	2004f000 	.word	0x2004f000
 80129c8:	2004effc 	.word	0x2004effc
 80129cc:	0801c1a8 	.word	0x0801c1a8
 80129d0:	2004f009 	.word	0x2004f009
 80129d4:	2004efc4 	.word	0x2004efc4
 80129d8:	2004efec 	.word	0x2004efec
 80129dc:	0801c1c8 	.word	0x0801c1c8
 80129e0:	0801c1e0 	.word	0x0801c1e0
        } else {
          pcb->unacked = rseg->next;
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80129ec:	69f8      	ldr	r0, [r7, #28]
 80129ee:	f7fe fc54 	bl	801129a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d104      	bne.n	8012a04 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a00:	861a      	strh	r2, [r3, #48]	; 0x30
 8012a02:	e006      	b.n	8012a12 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2200      	movs	r2, #0
 8012a08:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d00a      	beq.n	8012a32 <tcp_process+0x30a>
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a22:	687a      	ldr	r2, [r7, #4]
 8012a24:	6910      	ldr	r0, [r2, #16]
 8012a26:	2200      	movs	r2, #0
 8012a28:	6879      	ldr	r1, [r7, #4]
 8012a2a:	4798      	blx	r3
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	76bb      	strb	r3, [r7, #26]
 8012a30:	e001      	b.n	8012a36 <tcp_process+0x30e>
 8012a32:	2300      	movs	r3, #0
 8012a34:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012a36:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012a3a:	f113 0f0d 	cmn.w	r3, #13
 8012a3e:	d102      	bne.n	8012a46 <tcp_process+0x31e>
          return ERR_ABRT;
 8012a40:	f06f 030c 	mvn.w	r3, #12
 8012a44:	e250      	b.n	8012ee8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	8b5b      	ldrh	r3, [r3, #26]
 8012a4a:	f043 0302 	orr.w	r3, r3, #2
 8012a4e:	b29a      	uxth	r2, r3
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012a54:	e23a      	b.n	8012ecc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012a56:	4b98      	ldr	r3, [pc, #608]	; (8012cb8 <tcp_process+0x590>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	f003 0310 	and.w	r3, r3, #16
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 8234 	beq.w	8012ecc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a64:	4b95      	ldr	r3, [pc, #596]	; (8012cbc <tcp_process+0x594>)
 8012a66:	6819      	ldr	r1, [r3, #0]
 8012a68:	4b95      	ldr	r3, [pc, #596]	; (8012cc0 <tcp_process+0x598>)
 8012a6a:	881b      	ldrh	r3, [r3, #0]
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	4b95      	ldr	r3, [pc, #596]	; (8012cc4 <tcp_process+0x59c>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a74:	4b94      	ldr	r3, [pc, #592]	; (8012cc8 <tcp_process+0x5a0>)
 8012a76:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a78:	885b      	ldrh	r3, [r3, #2]
 8012a7a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a7c:	4a92      	ldr	r2, [pc, #584]	; (8012cc8 <tcp_process+0x5a0>)
 8012a7e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a80:	8812      	ldrh	r2, [r2, #0]
 8012a82:	b292      	uxth	r2, r2
 8012a84:	9202      	str	r2, [sp, #8]
 8012a86:	9301      	str	r3, [sp, #4]
 8012a88:	4b90      	ldr	r3, [pc, #576]	; (8012ccc <tcp_process+0x5a4>)
 8012a8a:	9300      	str	r3, [sp, #0]
 8012a8c:	4b90      	ldr	r3, [pc, #576]	; (8012cd0 <tcp_process+0x5a8>)
 8012a8e:	4602      	mov	r2, r0
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f003 f8dd 	bl	8015c50 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a9c:	2b05      	cmp	r3, #5
 8012a9e:	f200 8215 	bhi.w	8012ecc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f002 fea7 	bl	80157fc <tcp_rexmit_rto>
      break;
 8012aae:	e20d      	b.n	8012ecc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012ab0:	4b81      	ldr	r3, [pc, #516]	; (8012cb8 <tcp_process+0x590>)
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	f003 0310 	and.w	r3, r3, #16
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	f000 80a1 	beq.w	8012c00 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012abe:	4b7f      	ldr	r3, [pc, #508]	; (8012cbc <tcp_process+0x594>)
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ac6:	1ad3      	subs	r3, r2, r3
 8012ac8:	3b01      	subs	r3, #1
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	db7e      	blt.n	8012bcc <tcp_process+0x4a4>
 8012ace:	4b7b      	ldr	r3, [pc, #492]	; (8012cbc <tcp_process+0x594>)
 8012ad0:	681a      	ldr	r2, [r3, #0]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ad6:	1ad3      	subs	r3, r2, r3
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	dc77      	bgt.n	8012bcc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2204      	movs	r2, #4
 8012ae0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d102      	bne.n	8012af0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012aea:	23fa      	movs	r3, #250	; 0xfa
 8012aec:	76bb      	strb	r3, [r7, #26]
 8012aee:	e01d      	b.n	8012b2c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012af4:	699b      	ldr	r3, [r3, #24]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d106      	bne.n	8012b08 <tcp_process+0x3e0>
 8012afa:	4b76      	ldr	r3, [pc, #472]	; (8012cd4 <tcp_process+0x5ac>)
 8012afc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012b00:	4975      	ldr	r1, [pc, #468]	; (8012cd8 <tcp_process+0x5b0>)
 8012b02:	4876      	ldr	r0, [pc, #472]	; (8012cdc <tcp_process+0x5b4>)
 8012b04:	f006 fcc2 	bl	801948c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b0c:	699b      	ldr	r3, [r3, #24]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d00a      	beq.n	8012b28 <tcp_process+0x400>
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b16:	699b      	ldr	r3, [r3, #24]
 8012b18:	687a      	ldr	r2, [r7, #4]
 8012b1a:	6910      	ldr	r0, [r2, #16]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	6879      	ldr	r1, [r7, #4]
 8012b20:	4798      	blx	r3
 8012b22:	4603      	mov	r3, r0
 8012b24:	76bb      	strb	r3, [r7, #26]
 8012b26:	e001      	b.n	8012b2c <tcp_process+0x404>
 8012b28:	23f0      	movs	r3, #240	; 0xf0
 8012b2a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012b2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d00a      	beq.n	8012b4a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012b34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012b38:	f113 0f0d 	cmn.w	r3, #13
 8012b3c:	d002      	beq.n	8012b44 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f7fd fd18 	bl	8010574 <tcp_abort>
            }
            return ERR_ABRT;
 8012b44:	f06f 030c 	mvn.w	r3, #12
 8012b48:	e1ce      	b.n	8012ee8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f000 fae0 	bl	8013110 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012b50:	4b63      	ldr	r3, [pc, #396]	; (8012ce0 <tcp_process+0x5b8>)
 8012b52:	881b      	ldrh	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d005      	beq.n	8012b64 <tcp_process+0x43c>
            recv_acked--;
 8012b58:	4b61      	ldr	r3, [pc, #388]	; (8012ce0 <tcp_process+0x5b8>)
 8012b5a:	881b      	ldrh	r3, [r3, #0]
 8012b5c:	3b01      	subs	r3, #1
 8012b5e:	b29a      	uxth	r2, r3
 8012b60:	4b5f      	ldr	r3, [pc, #380]	; (8012ce0 <tcp_process+0x5b8>)
 8012b62:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b68:	009a      	lsls	r2, r3, #2
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b6e:	005b      	lsls	r3, r3, #1
 8012b70:	f241 111c 	movw	r1, #4380	; 0x111c
 8012b74:	428b      	cmp	r3, r1
 8012b76:	bf38      	it	cc
 8012b78:	460b      	movcc	r3, r1
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d204      	bcs.n	8012b88 <tcp_process+0x460>
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b82:	009b      	lsls	r3, r3, #2
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	e00d      	b.n	8012ba4 <tcp_process+0x47c>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b8c:	005b      	lsls	r3, r3, #1
 8012b8e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012b92:	4293      	cmp	r3, r2
 8012b94:	d904      	bls.n	8012ba0 <tcp_process+0x478>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b9a:	005b      	lsls	r3, r3, #1
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	e001      	b.n	8012ba4 <tcp_process+0x47c>
 8012ba0:	f241 131c 	movw	r3, #4380	; 0x111c
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012baa:	4b4e      	ldr	r3, [pc, #312]	; (8012ce4 <tcp_process+0x5bc>)
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	f003 0320 	and.w	r3, r3, #32
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d037      	beq.n	8012c26 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	8b5b      	ldrh	r3, [r3, #26]
 8012bba:	f043 0302 	orr.w	r3, r3, #2
 8012bbe:	b29a      	uxth	r2, r3
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2207      	movs	r2, #7
 8012bc8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012bca:	e02c      	b.n	8012c26 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bcc:	4b3b      	ldr	r3, [pc, #236]	; (8012cbc <tcp_process+0x594>)
 8012bce:	6819      	ldr	r1, [r3, #0]
 8012bd0:	4b3b      	ldr	r3, [pc, #236]	; (8012cc0 <tcp_process+0x598>)
 8012bd2:	881b      	ldrh	r3, [r3, #0]
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	4b3b      	ldr	r3, [pc, #236]	; (8012cc4 <tcp_process+0x59c>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012bdc:	4b3a      	ldr	r3, [pc, #232]	; (8012cc8 <tcp_process+0x5a0>)
 8012bde:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012be0:	885b      	ldrh	r3, [r3, #2]
 8012be2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012be4:	4a38      	ldr	r2, [pc, #224]	; (8012cc8 <tcp_process+0x5a0>)
 8012be6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012be8:	8812      	ldrh	r2, [r2, #0]
 8012bea:	b292      	uxth	r2, r2
 8012bec:	9202      	str	r2, [sp, #8]
 8012bee:	9301      	str	r3, [sp, #4]
 8012bf0:	4b36      	ldr	r3, [pc, #216]	; (8012ccc <tcp_process+0x5a4>)
 8012bf2:	9300      	str	r3, [sp, #0]
 8012bf4:	4b36      	ldr	r3, [pc, #216]	; (8012cd0 <tcp_process+0x5a8>)
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f003 f829 	bl	8015c50 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012bfe:	e167      	b.n	8012ed0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012c00:	4b2d      	ldr	r3, [pc, #180]	; (8012cb8 <tcp_process+0x590>)
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	f003 0302 	and.w	r3, r3, #2
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f000 8161 	beq.w	8012ed0 <tcp_process+0x7a8>
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c12:	1e5a      	subs	r2, r3, #1
 8012c14:	4b2b      	ldr	r3, [pc, #172]	; (8012cc4 <tcp_process+0x59c>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	f040 8159 	bne.w	8012ed0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f002 fe0e 	bl	8015840 <tcp_rexmit>
      break;
 8012c24:	e154      	b.n	8012ed0 <tcp_process+0x7a8>
 8012c26:	e153      	b.n	8012ed0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f000 fa71 	bl	8013110 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012c2e:	4b2d      	ldr	r3, [pc, #180]	; (8012ce4 <tcp_process+0x5bc>)
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	f003 0320 	and.w	r3, r3, #32
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	f000 814c 	beq.w	8012ed4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	8b5b      	ldrh	r3, [r3, #26]
 8012c40:	f043 0302 	orr.w	r3, r3, #2
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2207      	movs	r2, #7
 8012c4e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012c50:	e140      	b.n	8012ed4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f000 fa5c 	bl	8013110 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012c58:	4b22      	ldr	r3, [pc, #136]	; (8012ce4 <tcp_process+0x5bc>)
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	f003 0320 	and.w	r3, r3, #32
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d071      	beq.n	8012d48 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012c64:	4b14      	ldr	r3, [pc, #80]	; (8012cb8 <tcp_process+0x590>)
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	f003 0310 	and.w	r3, r3, #16
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d060      	beq.n	8012d32 <tcp_process+0x60a>
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c74:	4b11      	ldr	r3, [pc, #68]	; (8012cbc <tcp_process+0x594>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d15a      	bne.n	8012d32 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d156      	bne.n	8012d32 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	8b5b      	ldrh	r3, [r3, #26]
 8012c88:	f043 0302 	orr.w	r3, r3, #2
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f7fe fdbc 	bl	8011810 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012c98:	4b13      	ldr	r3, [pc, #76]	; (8012ce8 <tcp_process+0x5c0>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d105      	bne.n	8012cae <tcp_process+0x586>
 8012ca2:	4b11      	ldr	r3, [pc, #68]	; (8012ce8 <tcp_process+0x5c0>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	68db      	ldr	r3, [r3, #12]
 8012ca8:	4a0f      	ldr	r2, [pc, #60]	; (8012ce8 <tcp_process+0x5c0>)
 8012caa:	6013      	str	r3, [r2, #0]
 8012cac:	e02e      	b.n	8012d0c <tcp_process+0x5e4>
 8012cae:	4b0e      	ldr	r3, [pc, #56]	; (8012ce8 <tcp_process+0x5c0>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	617b      	str	r3, [r7, #20]
 8012cb4:	e027      	b.n	8012d06 <tcp_process+0x5de>
 8012cb6:	bf00      	nop
 8012cb8:	2004f008 	.word	0x2004f008
 8012cbc:	2004f000 	.word	0x2004f000
 8012cc0:	2004f006 	.word	0x2004f006
 8012cc4:	2004effc 	.word	0x2004effc
 8012cc8:	2004efec 	.word	0x2004efec
 8012ccc:	2004aec0 	.word	0x2004aec0
 8012cd0:	2004aec4 	.word	0x2004aec4
 8012cd4:	0801bf54 	.word	0x0801bf54
 8012cd8:	0801c1f4 	.word	0x0801c1f4
 8012cdc:	0801bfa0 	.word	0x0801bfa0
 8012ce0:	2004f004 	.word	0x2004f004
 8012ce4:	2004f009 	.word	0x2004f009
 8012ce8:	2004efd0 	.word	0x2004efd0
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d104      	bne.n	8012d00 <tcp_process+0x5d8>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	68da      	ldr	r2, [r3, #12]
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	60da      	str	r2, [r3, #12]
 8012cfe:	e005      	b.n	8012d0c <tcp_process+0x5e4>
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	68db      	ldr	r3, [r3, #12]
 8012d04:	617b      	str	r3, [r7, #20]
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d1ef      	bne.n	8012cec <tcp_process+0x5c4>
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	60da      	str	r2, [r3, #12]
 8012d12:	4b77      	ldr	r3, [pc, #476]	; (8012ef0 <tcp_process+0x7c8>)
 8012d14:	2201      	movs	r2, #1
 8012d16:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	220a      	movs	r2, #10
 8012d1c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012d1e:	4b75      	ldr	r3, [pc, #468]	; (8012ef4 <tcp_process+0x7cc>)
 8012d20:	681a      	ldr	r2, [r3, #0]
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	60da      	str	r2, [r3, #12]
 8012d26:	4a73      	ldr	r2, [pc, #460]	; (8012ef4 <tcp_process+0x7cc>)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6013      	str	r3, [r2, #0]
 8012d2c:	f003 f952 	bl	8015fd4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012d30:	e0d2      	b.n	8012ed8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	8b5b      	ldrh	r3, [r3, #26]
 8012d36:	f043 0302 	orr.w	r3, r3, #2
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2208      	movs	r2, #8
 8012d44:	751a      	strb	r2, [r3, #20]
      break;
 8012d46:	e0c7      	b.n	8012ed8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012d48:	4b6b      	ldr	r3, [pc, #428]	; (8012ef8 <tcp_process+0x7d0>)
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	f003 0310 	and.w	r3, r3, #16
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f000 80c1 	beq.w	8012ed8 <tcp_process+0x7b0>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d5a:	4b68      	ldr	r3, [pc, #416]	; (8012efc <tcp_process+0x7d4>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	f040 80ba 	bne.w	8012ed8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f040 80b5 	bne.w	8012ed8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2206      	movs	r2, #6
 8012d72:	751a      	strb	r2, [r3, #20]
      break;
 8012d74:	e0b0      	b.n	8012ed8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f000 f9ca 	bl	8013110 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012d7c:	4b60      	ldr	r3, [pc, #384]	; (8012f00 <tcp_process+0x7d8>)
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	f003 0320 	and.w	r3, r3, #32
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f000 80a9 	beq.w	8012edc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	8b5b      	ldrh	r3, [r3, #26]
 8012d8e:	f043 0302 	orr.w	r3, r3, #2
 8012d92:	b29a      	uxth	r2, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f7fe fd39 	bl	8011810 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012d9e:	4b59      	ldr	r3, [pc, #356]	; (8012f04 <tcp_process+0x7dc>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	687a      	ldr	r2, [r7, #4]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d105      	bne.n	8012db4 <tcp_process+0x68c>
 8012da8:	4b56      	ldr	r3, [pc, #344]	; (8012f04 <tcp_process+0x7dc>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	4a55      	ldr	r2, [pc, #340]	; (8012f04 <tcp_process+0x7dc>)
 8012db0:	6013      	str	r3, [r2, #0]
 8012db2:	e013      	b.n	8012ddc <tcp_process+0x6b4>
 8012db4:	4b53      	ldr	r3, [pc, #332]	; (8012f04 <tcp_process+0x7dc>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	613b      	str	r3, [r7, #16]
 8012dba:	e00c      	b.n	8012dd6 <tcp_process+0x6ae>
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d104      	bne.n	8012dd0 <tcp_process+0x6a8>
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	68da      	ldr	r2, [r3, #12]
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	60da      	str	r2, [r3, #12]
 8012dce:	e005      	b.n	8012ddc <tcp_process+0x6b4>
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	613b      	str	r3, [r7, #16]
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d1ef      	bne.n	8012dbc <tcp_process+0x694>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2200      	movs	r2, #0
 8012de0:	60da      	str	r2, [r3, #12]
 8012de2:	4b43      	ldr	r3, [pc, #268]	; (8012ef0 <tcp_process+0x7c8>)
 8012de4:	2201      	movs	r2, #1
 8012de6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	220a      	movs	r2, #10
 8012dec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012dee:	4b41      	ldr	r3, [pc, #260]	; (8012ef4 <tcp_process+0x7cc>)
 8012df0:	681a      	ldr	r2, [r3, #0]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	60da      	str	r2, [r3, #12]
 8012df6:	4a3f      	ldr	r2, [pc, #252]	; (8012ef4 <tcp_process+0x7cc>)
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6013      	str	r3, [r2, #0]
 8012dfc:	f003 f8ea 	bl	8015fd4 <tcp_timer_needed>
      }
      break;
 8012e00:	e06c      	b.n	8012edc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f000 f984 	bl	8013110 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012e08:	4b3b      	ldr	r3, [pc, #236]	; (8012ef8 <tcp_process+0x7d0>)
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	f003 0310 	and.w	r3, r3, #16
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d065      	beq.n	8012ee0 <tcp_process+0x7b8>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e18:	4b38      	ldr	r3, [pc, #224]	; (8012efc <tcp_process+0x7d4>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d15f      	bne.n	8012ee0 <tcp_process+0x7b8>
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d15b      	bne.n	8012ee0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7fe fcf1 	bl	8011810 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012e2e:	4b35      	ldr	r3, [pc, #212]	; (8012f04 <tcp_process+0x7dc>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d105      	bne.n	8012e44 <tcp_process+0x71c>
 8012e38:	4b32      	ldr	r3, [pc, #200]	; (8012f04 <tcp_process+0x7dc>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	4a31      	ldr	r2, [pc, #196]	; (8012f04 <tcp_process+0x7dc>)
 8012e40:	6013      	str	r3, [r2, #0]
 8012e42:	e013      	b.n	8012e6c <tcp_process+0x744>
 8012e44:	4b2f      	ldr	r3, [pc, #188]	; (8012f04 <tcp_process+0x7dc>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	60fb      	str	r3, [r7, #12]
 8012e4a:	e00c      	b.n	8012e66 <tcp_process+0x73e>
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	687a      	ldr	r2, [r7, #4]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d104      	bne.n	8012e60 <tcp_process+0x738>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	68da      	ldr	r2, [r3, #12]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	60da      	str	r2, [r3, #12]
 8012e5e:	e005      	b.n	8012e6c <tcp_process+0x744>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	68db      	ldr	r3, [r3, #12]
 8012e64:	60fb      	str	r3, [r7, #12]
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d1ef      	bne.n	8012e4c <tcp_process+0x724>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	60da      	str	r2, [r3, #12]
 8012e72:	4b1f      	ldr	r3, [pc, #124]	; (8012ef0 <tcp_process+0x7c8>)
 8012e74:	2201      	movs	r2, #1
 8012e76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	220a      	movs	r2, #10
 8012e7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012e7e:	4b1d      	ldr	r3, [pc, #116]	; (8012ef4 <tcp_process+0x7cc>)
 8012e80:	681a      	ldr	r2, [r3, #0]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	60da      	str	r2, [r3, #12]
 8012e86:	4a1b      	ldr	r2, [pc, #108]	; (8012ef4 <tcp_process+0x7cc>)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6013      	str	r3, [r2, #0]
 8012e8c:	f003 f8a2 	bl	8015fd4 <tcp_timer_needed>
      }
      break;
 8012e90:	e026      	b.n	8012ee0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f000 f93c 	bl	8013110 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012e98:	4b17      	ldr	r3, [pc, #92]	; (8012ef8 <tcp_process+0x7d0>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	f003 0310 	and.w	r3, r3, #16
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d01f      	beq.n	8012ee4 <tcp_process+0x7bc>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ea8:	4b14      	ldr	r3, [pc, #80]	; (8012efc <tcp_process+0x7d4>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d119      	bne.n	8012ee4 <tcp_process+0x7bc>
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d115      	bne.n	8012ee4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012eb8:	4b11      	ldr	r3, [pc, #68]	; (8012f00 <tcp_process+0x7d8>)
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	f043 0310 	orr.w	r3, r3, #16
 8012ec0:	b2da      	uxtb	r2, r3
 8012ec2:	4b0f      	ldr	r3, [pc, #60]	; (8012f00 <tcp_process+0x7d8>)
 8012ec4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012ec6:	e00d      	b.n	8012ee4 <tcp_process+0x7bc>
    default:
      break;
 8012ec8:	bf00      	nop
 8012eca:	e00c      	b.n	8012ee6 <tcp_process+0x7be>
      break;
 8012ecc:	bf00      	nop
 8012ece:	e00a      	b.n	8012ee6 <tcp_process+0x7be>
      break;
 8012ed0:	bf00      	nop
 8012ed2:	e008      	b.n	8012ee6 <tcp_process+0x7be>
      break;
 8012ed4:	bf00      	nop
 8012ed6:	e006      	b.n	8012ee6 <tcp_process+0x7be>
      break;
 8012ed8:	bf00      	nop
 8012eda:	e004      	b.n	8012ee6 <tcp_process+0x7be>
      break;
 8012edc:	bf00      	nop
 8012ede:	e002      	b.n	8012ee6 <tcp_process+0x7be>
      break;
 8012ee0:	bf00      	nop
 8012ee2:	e000      	b.n	8012ee6 <tcp_process+0x7be>
      break;
 8012ee4:	bf00      	nop
  }
  return ERR_OK;
 8012ee6:	2300      	movs	r3, #0
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3724      	adds	r7, #36	; 0x24
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd90      	pop	{r4, r7, pc}
 8012ef0:	2004efd8 	.word	0x2004efd8
 8012ef4:	2004efd4 	.word	0x2004efd4
 8012ef8:	2004f008 	.word	0x2004f008
 8012efc:	2004f000 	.word	0x2004f000
 8012f00:	2004f009 	.word	0x2004f009
 8012f04:	2004efd0 	.word	0x2004efd0

08012f08 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012f08:	b590      	push	{r4, r7, lr}
 8012f0a:	b085      	sub	sp, #20
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d106      	bne.n	8012f26 <tcp_oos_insert_segment+0x1e>
 8012f18:	4b3b      	ldr	r3, [pc, #236]	; (8013008 <tcp_oos_insert_segment+0x100>)
 8012f1a:	f240 421f 	movw	r2, #1055	; 0x41f
 8012f1e:	493b      	ldr	r1, [pc, #236]	; (801300c <tcp_oos_insert_segment+0x104>)
 8012f20:	483b      	ldr	r0, [pc, #236]	; (8013010 <tcp_oos_insert_segment+0x108>)
 8012f22:	f006 fab3 	bl	801948c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	68db      	ldr	r3, [r3, #12]
 8012f2a:	899b      	ldrh	r3, [r3, #12]
 8012f2c:	b29b      	uxth	r3, r3
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fb f93e 	bl	800e1b0 <lwip_htons>
 8012f34:	4603      	mov	r3, r0
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	f003 0301 	and.w	r3, r3, #1
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d028      	beq.n	8012f92 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012f40:	6838      	ldr	r0, [r7, #0]
 8012f42:	f7fe f995 	bl	8011270 <tcp_segs_free>
    next = NULL;
 8012f46:	2300      	movs	r3, #0
 8012f48:	603b      	str	r3, [r7, #0]
 8012f4a:	e056      	b.n	8012ffa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	68db      	ldr	r3, [r3, #12]
 8012f50:	899b      	ldrh	r3, [r3, #12]
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7fb f92b 	bl	800e1b0 <lwip_htons>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	f003 0301 	and.w	r3, r3, #1
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00d      	beq.n	8012f82 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	68db      	ldr	r3, [r3, #12]
 8012f6a:	899b      	ldrh	r3, [r3, #12]
 8012f6c:	b29c      	uxth	r4, r3
 8012f6e:	2001      	movs	r0, #1
 8012f70:	f7fb f91e 	bl	800e1b0 <lwip_htons>
 8012f74:	4603      	mov	r3, r0
 8012f76:	461a      	mov	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	68db      	ldr	r3, [r3, #12]
 8012f7c:	4322      	orrs	r2, r4
 8012f7e:	b292      	uxth	r2, r2
 8012f80:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012f8c:	68f8      	ldr	r0, [r7, #12]
 8012f8e:	f7fe f984 	bl	801129a <tcp_seg_free>
    while (next &&
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00e      	beq.n	8012fb6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	891b      	ldrh	r3, [r3, #8]
 8012f9c:	461a      	mov	r2, r3
 8012f9e:	4b1d      	ldr	r3, [pc, #116]	; (8013014 <tcp_oos_insert_segment+0x10c>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	441a      	add	r2, r3
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	6839      	ldr	r1, [r7, #0]
 8012fac:	8909      	ldrh	r1, [r1, #8]
 8012fae:	440b      	add	r3, r1
 8012fb0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	daca      	bge.n	8012f4c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d01e      	beq.n	8012ffa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	891b      	ldrh	r3, [r3, #8]
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	4b14      	ldr	r3, [pc, #80]	; (8013014 <tcp_oos_insert_segment+0x10c>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	441a      	add	r2, r3
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	dd12      	ble.n	8012ffa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	685b      	ldr	r3, [r3, #4]
 8012fda:	b29a      	uxth	r2, r3
 8012fdc:	4b0d      	ldr	r3, [pc, #52]	; (8013014 <tcp_oos_insert_segment+0x10c>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	b29b      	uxth	r3, r3
 8012fe2:	1ad3      	subs	r3, r2, r3
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	685a      	ldr	r2, [r3, #4]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	891b      	ldrh	r3, [r3, #8]
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	4610      	mov	r0, r2
 8012ff6:	f7fc fb47 	bl	800f688 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	683a      	ldr	r2, [r7, #0]
 8012ffe:	601a      	str	r2, [r3, #0]
}
 8013000:	bf00      	nop
 8013002:	3714      	adds	r7, #20
 8013004:	46bd      	mov	sp, r7
 8013006:	bd90      	pop	{r4, r7, pc}
 8013008:	0801bf54 	.word	0x0801bf54
 801300c:	0801c214 	.word	0x0801c214
 8013010:	0801bfa0 	.word	0x0801bfa0
 8013014:	2004effc 	.word	0x2004effc

08013018 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013018:	b5b0      	push	{r4, r5, r7, lr}
 801301a:	b086      	sub	sp, #24
 801301c:	af00      	add	r7, sp, #0
 801301e:	60f8      	str	r0, [r7, #12]
 8013020:	60b9      	str	r1, [r7, #8]
 8013022:	607a      	str	r2, [r7, #4]
 8013024:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013026:	e03e      	b.n	80130a6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	4618      	mov	r0, r3
 8013038:	f7fc fd3a 	bl	800fab0 <pbuf_clen>
 801303c:	4603      	mov	r3, r0
 801303e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013046:	8a7a      	ldrh	r2, [r7, #18]
 8013048:	429a      	cmp	r2, r3
 801304a:	d906      	bls.n	801305a <tcp_free_acked_segments+0x42>
 801304c:	4b2a      	ldr	r3, [pc, #168]	; (80130f8 <tcp_free_acked_segments+0xe0>)
 801304e:	f240 4257 	movw	r2, #1111	; 0x457
 8013052:	492a      	ldr	r1, [pc, #168]	; (80130fc <tcp_free_acked_segments+0xe4>)
 8013054:	482a      	ldr	r0, [pc, #168]	; (8013100 <tcp_free_acked_segments+0xe8>)
 8013056:	f006 fa19 	bl	801948c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013060:	8a7b      	ldrh	r3, [r7, #18]
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	b29a      	uxth	r2, r3
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	891a      	ldrh	r2, [r3, #8]
 8013070:	4b24      	ldr	r3, [pc, #144]	; (8013104 <tcp_free_acked_segments+0xec>)
 8013072:	881b      	ldrh	r3, [r3, #0]
 8013074:	4413      	add	r3, r2
 8013076:	b29a      	uxth	r2, r3
 8013078:	4b22      	ldr	r3, [pc, #136]	; (8013104 <tcp_free_acked_segments+0xec>)
 801307a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801307c:	6978      	ldr	r0, [r7, #20]
 801307e:	f7fe f90c 	bl	801129a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013088:	2b00      	cmp	r3, #0
 801308a:	d00c      	beq.n	80130a6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d109      	bne.n	80130a6 <tcp_free_acked_segments+0x8e>
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d106      	bne.n	80130a6 <tcp_free_acked_segments+0x8e>
 8013098:	4b17      	ldr	r3, [pc, #92]	; (80130f8 <tcp_free_acked_segments+0xe0>)
 801309a:	f240 4261 	movw	r2, #1121	; 0x461
 801309e:	491a      	ldr	r1, [pc, #104]	; (8013108 <tcp_free_acked_segments+0xf0>)
 80130a0:	4817      	ldr	r0, [pc, #92]	; (8013100 <tcp_free_acked_segments+0xe8>)
 80130a2:	f006 f9f3 	bl	801948c <iprintf>
  while (seg_list != NULL &&
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d020      	beq.n	80130ee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	68db      	ldr	r3, [r3, #12]
 80130b0:	685b      	ldr	r3, [r3, #4]
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7fb f891 	bl	800e1da <lwip_htonl>
 80130b8:	4604      	mov	r4, r0
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	891b      	ldrh	r3, [r3, #8]
 80130be:	461d      	mov	r5, r3
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	899b      	ldrh	r3, [r3, #12]
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7fb f871 	bl	800e1b0 <lwip_htons>
 80130ce:	4603      	mov	r3, r0
 80130d0:	b2db      	uxtb	r3, r3
 80130d2:	f003 0303 	and.w	r3, r3, #3
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d001      	beq.n	80130de <tcp_free_acked_segments+0xc6>
 80130da:	2301      	movs	r3, #1
 80130dc:	e000      	b.n	80130e0 <tcp_free_acked_segments+0xc8>
 80130de:	2300      	movs	r3, #0
 80130e0:	442b      	add	r3, r5
 80130e2:	18e2      	adds	r2, r4, r3
 80130e4:	4b09      	ldr	r3, [pc, #36]	; (801310c <tcp_free_acked_segments+0xf4>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	dd9c      	ble.n	8013028 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80130ee:	68bb      	ldr	r3, [r7, #8]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3718      	adds	r7, #24
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bdb0      	pop	{r4, r5, r7, pc}
 80130f8:	0801bf54 	.word	0x0801bf54
 80130fc:	0801c23c 	.word	0x0801c23c
 8013100:	0801bfa0 	.word	0x0801bfa0
 8013104:	2004f004 	.word	0x2004f004
 8013108:	0801c264 	.word	0x0801c264
 801310c:	2004f000 	.word	0x2004f000

08013110 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013110:	b5b0      	push	{r4, r5, r7, lr}
 8013112:	b094      	sub	sp, #80	; 0x50
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013118:	2300      	movs	r3, #0
 801311a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d106      	bne.n	8013130 <tcp_receive+0x20>
 8013122:	4b91      	ldr	r3, [pc, #580]	; (8013368 <tcp_receive+0x258>)
 8013124:	f240 427b 	movw	r2, #1147	; 0x47b
 8013128:	4990      	ldr	r1, [pc, #576]	; (801336c <tcp_receive+0x25c>)
 801312a:	4891      	ldr	r0, [pc, #580]	; (8013370 <tcp_receive+0x260>)
 801312c:	f006 f9ae 	bl	801948c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	7d1b      	ldrb	r3, [r3, #20]
 8013134:	2b03      	cmp	r3, #3
 8013136:	d806      	bhi.n	8013146 <tcp_receive+0x36>
 8013138:	4b8b      	ldr	r3, [pc, #556]	; (8013368 <tcp_receive+0x258>)
 801313a:	f240 427c 	movw	r2, #1148	; 0x47c
 801313e:	498d      	ldr	r1, [pc, #564]	; (8013374 <tcp_receive+0x264>)
 8013140:	488b      	ldr	r0, [pc, #556]	; (8013370 <tcp_receive+0x260>)
 8013142:	f006 f9a3 	bl	801948c <iprintf>

  if (flags & TCP_ACK) {
 8013146:	4b8c      	ldr	r3, [pc, #560]	; (8013378 <tcp_receive+0x268>)
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	f003 0310 	and.w	r3, r3, #16
 801314e:	2b00      	cmp	r3, #0
 8013150:	f000 8264 	beq.w	801361c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801315a:	461a      	mov	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013160:	4413      	add	r3, r2
 8013162:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013168:	4b84      	ldr	r3, [pc, #528]	; (801337c <tcp_receive+0x26c>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	1ad3      	subs	r3, r2, r3
 801316e:	2b00      	cmp	r3, #0
 8013170:	db1b      	blt.n	80131aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013176:	4b81      	ldr	r3, [pc, #516]	; (801337c <tcp_receive+0x26c>)
 8013178:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801317a:	429a      	cmp	r2, r3
 801317c:	d106      	bne.n	801318c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013182:	4b7f      	ldr	r3, [pc, #508]	; (8013380 <tcp_receive+0x270>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	1ad3      	subs	r3, r2, r3
 8013188:	2b00      	cmp	r3, #0
 801318a:	db0e      	blt.n	80131aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013190:	4b7b      	ldr	r3, [pc, #492]	; (8013380 <tcp_receive+0x270>)
 8013192:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013194:	429a      	cmp	r2, r3
 8013196:	d125      	bne.n	80131e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013198:	4b7a      	ldr	r3, [pc, #488]	; (8013384 <tcp_receive+0x274>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	89db      	ldrh	r3, [r3, #14]
 801319e:	b29a      	uxth	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d91c      	bls.n	80131e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80131aa:	4b76      	ldr	r3, [pc, #472]	; (8013384 <tcp_receive+0x274>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	89db      	ldrh	r3, [r3, #14]
 80131b0:	b29a      	uxth	r2, r3
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d205      	bcs.n	80131d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80131d4:	4b69      	ldr	r3, [pc, #420]	; (801337c <tcp_receive+0x26c>)
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80131dc:	4b68      	ldr	r3, [pc, #416]	; (8013380 <tcp_receive+0x270>)
 80131de:	681a      	ldr	r2, [r3, #0]
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80131e4:	4b66      	ldr	r3, [pc, #408]	; (8013380 <tcp_receive+0x270>)
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131ec:	1ad3      	subs	r3, r2, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	dc58      	bgt.n	80132a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80131f2:	4b65      	ldr	r3, [pc, #404]	; (8013388 <tcp_receive+0x278>)
 80131f4:	881b      	ldrh	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d14b      	bne.n	8013292 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013204:	4413      	add	r3, r2
 8013206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013208:	429a      	cmp	r2, r3
 801320a:	d142      	bne.n	8013292 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013212:	2b00      	cmp	r3, #0
 8013214:	db3d      	blt.n	8013292 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801321a:	4b59      	ldr	r3, [pc, #356]	; (8013380 <tcp_receive+0x270>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	429a      	cmp	r2, r3
 8013220:	d137      	bne.n	8013292 <tcp_receive+0x182>
              found_dupack = 1;
 8013222:	2301      	movs	r3, #1
 8013224:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801322c:	2bff      	cmp	r3, #255	; 0xff
 801322e:	d007      	beq.n	8013240 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013236:	3301      	adds	r3, #1
 8013238:	b2da      	uxtb	r2, r3
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013246:	2b03      	cmp	r3, #3
 8013248:	d91b      	bls.n	8013282 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013254:	4413      	add	r3, r2
 8013256:	b29a      	uxth	r2, r3
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801325e:	429a      	cmp	r2, r3
 8013260:	d30a      	bcc.n	8013278 <tcp_receive+0x168>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801326c:	4413      	add	r3, r2
 801326e:	b29a      	uxth	r2, r3
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013276:	e004      	b.n	8013282 <tcp_receive+0x172>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801327e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013288:	2b02      	cmp	r3, #2
 801328a:	d902      	bls.n	8013292 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f002 fb43 	bl	8015918 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013294:	2b00      	cmp	r3, #0
 8013296:	f040 8161 	bne.w	801355c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2200      	movs	r2, #0
 801329e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80132a2:	e15b      	b.n	801355c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80132a4:	4b36      	ldr	r3, [pc, #216]	; (8013380 <tcp_receive+0x270>)
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132ac:	1ad3      	subs	r3, r2, r3
 80132ae:	3b01      	subs	r3, #1
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	f2c0 814e 	blt.w	8013552 <tcp_receive+0x442>
 80132b6:	4b32      	ldr	r3, [pc, #200]	; (8013380 <tcp_receive+0x270>)
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132be:	1ad3      	subs	r3, r2, r3
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	f300 8146 	bgt.w	8013552 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	8b5b      	ldrh	r3, [r3, #26]
 80132ca:	f003 0304 	and.w	r3, r3, #4
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d010      	beq.n	80132f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	8b5b      	ldrh	r3, [r3, #26]
 80132d6:	f023 0304 	bic.w	r3, r3, #4
 80132da:	b29a      	uxth	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2200      	movs	r2, #0
 80132f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2200      	movs	r2, #0
 80132f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013302:	10db      	asrs	r3, r3, #3
 8013304:	b21b      	sxth	r3, r3
 8013306:	b29a      	uxth	r2, r3
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801330e:	b29b      	uxth	r3, r3
 8013310:	4413      	add	r3, r2
 8013312:	b29b      	uxth	r3, r3
 8013314:	b21a      	sxth	r2, r3
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801331c:	4b18      	ldr	r3, [pc, #96]	; (8013380 <tcp_receive+0x270>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	b29a      	uxth	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013326:	b29b      	uxth	r3, r3
 8013328:	1ad3      	subs	r3, r2, r3
 801332a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2200      	movs	r2, #0
 8013330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013334:	4b12      	ldr	r3, [pc, #72]	; (8013380 <tcp_receive+0x270>)
 8013336:	681a      	ldr	r2, [r3, #0]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	7d1b      	ldrb	r3, [r3, #20]
 8013340:	2b03      	cmp	r3, #3
 8013342:	f240 8097 	bls.w	8013474 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013352:	429a      	cmp	r2, r3
 8013354:	d245      	bcs.n	80133e2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	8b5b      	ldrh	r3, [r3, #26]
 801335a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801335e:	2b00      	cmp	r3, #0
 8013360:	d014      	beq.n	801338c <tcp_receive+0x27c>
 8013362:	2301      	movs	r3, #1
 8013364:	e013      	b.n	801338e <tcp_receive+0x27e>
 8013366:	bf00      	nop
 8013368:	0801bf54 	.word	0x0801bf54
 801336c:	0801c284 	.word	0x0801c284
 8013370:	0801bfa0 	.word	0x0801bfa0
 8013374:	0801c2a0 	.word	0x0801c2a0
 8013378:	2004f008 	.word	0x2004f008
 801337c:	2004effc 	.word	0x2004effc
 8013380:	2004f000 	.word	0x2004f000
 8013384:	2004efec 	.word	0x2004efec
 8013388:	2004f006 	.word	0x2004f006
 801338c:	2302      	movs	r3, #2
 801338e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013392:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013396:	b29a      	uxth	r2, r3
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801339c:	fb12 f303 	smulbb	r3, r2, r3
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80133a4:	4293      	cmp	r3, r2
 80133a6:	bf28      	it	cs
 80133a8:	4613      	movcs	r3, r2
 80133aa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80133b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80133b4:	4413      	add	r3, r2
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80133be:	429a      	cmp	r2, r3
 80133c0:	d309      	bcc.n	80133d6 <tcp_receive+0x2c6>
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80133c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80133ca:	4413      	add	r3, r2
 80133cc:	b29a      	uxth	r2, r3
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80133d4:	e04e      	b.n	8013474 <tcp_receive+0x364>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80133e0:	e048      	b.n	8013474 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80133e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80133ea:	4413      	add	r3, r2
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d309      	bcc.n	801340c <tcp_receive+0x2fc>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80133fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013400:	4413      	add	r3, r2
 8013402:	b29a      	uxth	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801340a:	e004      	b.n	8013416 <tcp_receive+0x306>
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013412:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013422:	429a      	cmp	r2, r3
 8013424:	d326      	bcc.n	8013474 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013432:	1ad3      	subs	r3, r2, r3
 8013434:	b29a      	uxth	r2, r3
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013446:	4413      	add	r3, r2
 8013448:	b29a      	uxth	r2, r3
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013450:	429a      	cmp	r2, r3
 8013452:	d30a      	bcc.n	801346a <tcp_receive+0x35a>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801345e:	4413      	add	r3, r2
 8013460:	b29a      	uxth	r2, r3
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013468:	e004      	b.n	8013474 <tcp_receive+0x364>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013470:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801347c:	4a98      	ldr	r2, [pc, #608]	; (80136e0 <tcp_receive+0x5d0>)
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f7ff fdca 	bl	8013018 <tcp_free_acked_segments>
 8013484:	4602      	mov	r2, r0
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013492:	4a94      	ldr	r2, [pc, #592]	; (80136e4 <tcp_receive+0x5d4>)
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f7ff fdbf 	bl	8013018 <tcp_free_acked_segments>
 801349a:	4602      	mov	r2, r0
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d104      	bne.n	80134b2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134ae:	861a      	strh	r2, [r3, #48]	; 0x30
 80134b0:	e002      	b.n	80134b8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2200      	movs	r2, #0
 80134b6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2200      	movs	r2, #0
 80134bc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d103      	bne.n	80134ce <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2200      	movs	r2, #0
 80134ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80134d4:	4b84      	ldr	r3, [pc, #528]	; (80136e8 <tcp_receive+0x5d8>)
 80134d6:	881b      	ldrh	r3, [r3, #0]
 80134d8:	4413      	add	r3, r2
 80134da:	b29a      	uxth	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	8b5b      	ldrh	r3, [r3, #26]
 80134e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d035      	beq.n	801355a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d118      	bne.n	8013528 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00c      	beq.n	8013518 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	4618      	mov	r0, r3
 801350c:	f7fa fe65 	bl	800e1da <lwip_htonl>
 8013510:	4603      	mov	r3, r0
 8013512:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013514:	2b00      	cmp	r3, #0
 8013516:	dc20      	bgt.n	801355a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	8b5b      	ldrh	r3, [r3, #26]
 801351c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013520:	b29a      	uxth	r2, r3
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013526:	e018      	b.n	801355a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013530:	68db      	ldr	r3, [r3, #12]
 8013532:	685b      	ldr	r3, [r3, #4]
 8013534:	4618      	mov	r0, r3
 8013536:	f7fa fe50 	bl	800e1da <lwip_htonl>
 801353a:	4603      	mov	r3, r0
 801353c:	1ae3      	subs	r3, r4, r3
 801353e:	2b00      	cmp	r3, #0
 8013540:	dc0b      	bgt.n	801355a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	8b5b      	ldrh	r3, [r3, #26]
 8013546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801354a:	b29a      	uxth	r2, r3
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013550:	e003      	b.n	801355a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f002 fbce 	bl	8015cf4 <tcp_send_empty_ack>
 8013558:	e000      	b.n	801355c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801355a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013560:	2b00      	cmp	r3, #0
 8013562:	d05b      	beq.n	801361c <tcp_receive+0x50c>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013568:	4b60      	ldr	r3, [pc, #384]	; (80136ec <tcp_receive+0x5dc>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	1ad3      	subs	r3, r2, r3
 801356e:	2b00      	cmp	r3, #0
 8013570:	da54      	bge.n	801361c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013572:	4b5f      	ldr	r3, [pc, #380]	; (80136f0 <tcp_receive+0x5e0>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	b29a      	uxth	r2, r3
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801357c:	b29b      	uxth	r3, r3
 801357e:	1ad3      	subs	r3, r2, r3
 8013580:	b29b      	uxth	r3, r3
 8013582:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013586:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013590:	10db      	asrs	r3, r3, #3
 8013592:	b21b      	sxth	r3, r3
 8013594:	b29b      	uxth	r3, r3
 8013596:	1ad3      	subs	r3, r2, r3
 8013598:	b29b      	uxth	r3, r3
 801359a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80135aa:	4413      	add	r3, r2
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	b21a      	sxth	r2, r3
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80135b4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	da05      	bge.n	80135c8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80135bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80135c0:	425b      	negs	r3, r3
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80135c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80135d2:	109b      	asrs	r3, r3, #2
 80135d4:	b21b      	sxth	r3, r3
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	b29b      	uxth	r3, r3
 80135dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80135e6:	b29a      	uxth	r2, r3
 80135e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80135ec:	4413      	add	r3, r2
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	b21a      	sxth	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80135fc:	10db      	asrs	r3, r3, #3
 80135fe:	b21b      	sxth	r3, r3
 8013600:	b29a      	uxth	r2, r3
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013608:	b29b      	uxth	r3, r3
 801360a:	4413      	add	r3, r2
 801360c:	b29b      	uxth	r3, r3
 801360e:	b21a      	sxth	r2, r3
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2200      	movs	r2, #0
 801361a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801361c:	4b35      	ldr	r3, [pc, #212]	; (80136f4 <tcp_receive+0x5e4>)
 801361e:	881b      	ldrh	r3, [r3, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	f000 84e2 	beq.w	8013fea <tcp_receive+0xeda>
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	7d1b      	ldrb	r3, [r3, #20]
 801362a:	2b06      	cmp	r3, #6
 801362c:	f200 84dd 	bhi.w	8013fea <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013634:	4b30      	ldr	r3, [pc, #192]	; (80136f8 <tcp_receive+0x5e8>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	3b01      	subs	r3, #1
 801363c:	2b00      	cmp	r3, #0
 801363e:	f2c0 808f 	blt.w	8013760 <tcp_receive+0x650>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013646:	4b2b      	ldr	r3, [pc, #172]	; (80136f4 <tcp_receive+0x5e4>)
 8013648:	881b      	ldrh	r3, [r3, #0]
 801364a:	4619      	mov	r1, r3
 801364c:	4b2a      	ldr	r3, [pc, #168]	; (80136f8 <tcp_receive+0x5e8>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	440b      	add	r3, r1
 8013652:	1ad3      	subs	r3, r2, r3
 8013654:	3301      	adds	r3, #1
 8013656:	2b00      	cmp	r3, #0
 8013658:	f300 8082 	bgt.w	8013760 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801365c:	4b27      	ldr	r3, [pc, #156]	; (80136fc <tcp_receive+0x5ec>)
 801365e:	685b      	ldr	r3, [r3, #4]
 8013660:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013666:	4b24      	ldr	r3, [pc, #144]	; (80136f8 <tcp_receive+0x5e8>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801366e:	4b23      	ldr	r3, [pc, #140]	; (80136fc <tcp_receive+0x5ec>)
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d106      	bne.n	8013684 <tcp_receive+0x574>
 8013676:	4b22      	ldr	r3, [pc, #136]	; (8013700 <tcp_receive+0x5f0>)
 8013678:	f240 5294 	movw	r2, #1428	; 0x594
 801367c:	4921      	ldr	r1, [pc, #132]	; (8013704 <tcp_receive+0x5f4>)
 801367e:	4822      	ldr	r0, [pc, #136]	; (8013708 <tcp_receive+0x5f8>)
 8013680:	f005 ff04 	bl	801948c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013686:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801368a:	4293      	cmp	r3, r2
 801368c:	d906      	bls.n	801369c <tcp_receive+0x58c>
 801368e:	4b1c      	ldr	r3, [pc, #112]	; (8013700 <tcp_receive+0x5f0>)
 8013690:	f240 5295 	movw	r2, #1429	; 0x595
 8013694:	491d      	ldr	r1, [pc, #116]	; (801370c <tcp_receive+0x5fc>)
 8013696:	481c      	ldr	r0, [pc, #112]	; (8013708 <tcp_receive+0x5f8>)
 8013698:	f005 fef8 	bl	801948c <iprintf>
      off = (u16_t)off32;
 801369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80136a2:	4b16      	ldr	r3, [pc, #88]	; (80136fc <tcp_receive+0x5ec>)
 80136a4:	685b      	ldr	r3, [r3, #4]
 80136a6:	891b      	ldrh	r3, [r3, #8]
 80136a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d906      	bls.n	80136be <tcp_receive+0x5ae>
 80136b0:	4b13      	ldr	r3, [pc, #76]	; (8013700 <tcp_receive+0x5f0>)
 80136b2:	f240 5297 	movw	r2, #1431	; 0x597
 80136b6:	4916      	ldr	r1, [pc, #88]	; (8013710 <tcp_receive+0x600>)
 80136b8:	4813      	ldr	r0, [pc, #76]	; (8013708 <tcp_receive+0x5f8>)
 80136ba:	f005 fee7 	bl	801948c <iprintf>
      inseg.len -= off;
 80136be:	4b0f      	ldr	r3, [pc, #60]	; (80136fc <tcp_receive+0x5ec>)
 80136c0:	891a      	ldrh	r2, [r3, #8]
 80136c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136c6:	1ad3      	subs	r3, r2, r3
 80136c8:	b29a      	uxth	r2, r3
 80136ca:	4b0c      	ldr	r3, [pc, #48]	; (80136fc <tcp_receive+0x5ec>)
 80136cc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80136ce:	4b0b      	ldr	r3, [pc, #44]	; (80136fc <tcp_receive+0x5ec>)
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	891a      	ldrh	r2, [r3, #8]
 80136d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136d8:	1ad3      	subs	r3, r2, r3
 80136da:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80136dc:	e02a      	b.n	8013734 <tcp_receive+0x624>
 80136de:	bf00      	nop
 80136e0:	0801c2bc 	.word	0x0801c2bc
 80136e4:	0801c2c4 	.word	0x0801c2c4
 80136e8:	2004f004 	.word	0x2004f004
 80136ec:	2004f000 	.word	0x2004f000
 80136f0:	2004efc4 	.word	0x2004efc4
 80136f4:	2004f006 	.word	0x2004f006
 80136f8:	2004effc 	.word	0x2004effc
 80136fc:	2004efdc 	.word	0x2004efdc
 8013700:	0801bf54 	.word	0x0801bf54
 8013704:	0801c2cc 	.word	0x0801c2cc
 8013708:	0801bfa0 	.word	0x0801bfa0
 801370c:	0801c2dc 	.word	0x0801c2dc
 8013710:	0801c2ec 	.word	0x0801c2ec
        off -= p->len;
 8013714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013716:	895b      	ldrh	r3, [r3, #10]
 8013718:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801371c:	1ad3      	subs	r3, r2, r3
 801371e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013724:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013726:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801372a:	2200      	movs	r2, #0
 801372c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801372e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013736:	895b      	ldrh	r3, [r3, #10]
 8013738:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801373c:	429a      	cmp	r2, r3
 801373e:	d8e9      	bhi.n	8013714 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013740:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013744:	4619      	mov	r1, r3
 8013746:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013748:	f7fc f89e 	bl	800f888 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013750:	4a91      	ldr	r2, [pc, #580]	; (8013998 <tcp_receive+0x888>)
 8013752:	6013      	str	r3, [r2, #0]
 8013754:	4b91      	ldr	r3, [pc, #580]	; (801399c <tcp_receive+0x88c>)
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	4a8f      	ldr	r2, [pc, #572]	; (8013998 <tcp_receive+0x888>)
 801375a:	6812      	ldr	r2, [r2, #0]
 801375c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801375e:	e00d      	b.n	801377c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013760:	4b8d      	ldr	r3, [pc, #564]	; (8013998 <tcp_receive+0x888>)
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013768:	1ad3      	subs	r3, r2, r3
 801376a:	2b00      	cmp	r3, #0
 801376c:	da06      	bge.n	801377c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	8b5b      	ldrh	r3, [r3, #26]
 8013772:	f043 0302 	orr.w	r3, r3, #2
 8013776:	b29a      	uxth	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801377c:	4b86      	ldr	r3, [pc, #536]	; (8013998 <tcp_receive+0x888>)
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013784:	1ad3      	subs	r3, r2, r3
 8013786:	2b00      	cmp	r3, #0
 8013788:	f2c0 842a 	blt.w	8013fe0 <tcp_receive+0xed0>
 801378c:	4b82      	ldr	r3, [pc, #520]	; (8013998 <tcp_receive+0x888>)
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013794:	6879      	ldr	r1, [r7, #4]
 8013796:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013798:	440b      	add	r3, r1
 801379a:	1ad3      	subs	r3, r2, r3
 801379c:	3301      	adds	r3, #1
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f300 841e 	bgt.w	8013fe0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137a8:	4b7b      	ldr	r3, [pc, #492]	; (8013998 <tcp_receive+0x888>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	429a      	cmp	r2, r3
 80137ae:	f040 829a 	bne.w	8013ce6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80137b2:	4b7a      	ldr	r3, [pc, #488]	; (801399c <tcp_receive+0x88c>)
 80137b4:	891c      	ldrh	r4, [r3, #8]
 80137b6:	4b79      	ldr	r3, [pc, #484]	; (801399c <tcp_receive+0x88c>)
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	899b      	ldrh	r3, [r3, #12]
 80137bc:	b29b      	uxth	r3, r3
 80137be:	4618      	mov	r0, r3
 80137c0:	f7fa fcf6 	bl	800e1b0 <lwip_htons>
 80137c4:	4603      	mov	r3, r0
 80137c6:	b2db      	uxtb	r3, r3
 80137c8:	f003 0303 	and.w	r3, r3, #3
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d001      	beq.n	80137d4 <tcp_receive+0x6c4>
 80137d0:	2301      	movs	r3, #1
 80137d2:	e000      	b.n	80137d6 <tcp_receive+0x6c6>
 80137d4:	2300      	movs	r3, #0
 80137d6:	4423      	add	r3, r4
 80137d8:	b29a      	uxth	r2, r3
 80137da:	4b71      	ldr	r3, [pc, #452]	; (80139a0 <tcp_receive+0x890>)
 80137dc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80137e2:	4b6f      	ldr	r3, [pc, #444]	; (80139a0 <tcp_receive+0x890>)
 80137e4:	881b      	ldrh	r3, [r3, #0]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d275      	bcs.n	80138d6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80137ea:	4b6c      	ldr	r3, [pc, #432]	; (801399c <tcp_receive+0x88c>)
 80137ec:	68db      	ldr	r3, [r3, #12]
 80137ee:	899b      	ldrh	r3, [r3, #12]
 80137f0:	b29b      	uxth	r3, r3
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fa fcdc 	bl	800e1b0 <lwip_htons>
 80137f8:	4603      	mov	r3, r0
 80137fa:	b2db      	uxtb	r3, r3
 80137fc:	f003 0301 	and.w	r3, r3, #1
 8013800:	2b00      	cmp	r3, #0
 8013802:	d01f      	beq.n	8013844 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013804:	4b65      	ldr	r3, [pc, #404]	; (801399c <tcp_receive+0x88c>)
 8013806:	68db      	ldr	r3, [r3, #12]
 8013808:	899b      	ldrh	r3, [r3, #12]
 801380a:	b29b      	uxth	r3, r3
 801380c:	b21b      	sxth	r3, r3
 801380e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013812:	b21c      	sxth	r4, r3
 8013814:	4b61      	ldr	r3, [pc, #388]	; (801399c <tcp_receive+0x88c>)
 8013816:	68db      	ldr	r3, [r3, #12]
 8013818:	899b      	ldrh	r3, [r3, #12]
 801381a:	b29b      	uxth	r3, r3
 801381c:	4618      	mov	r0, r3
 801381e:	f7fa fcc7 	bl	800e1b0 <lwip_htons>
 8013822:	4603      	mov	r3, r0
 8013824:	b2db      	uxtb	r3, r3
 8013826:	b29b      	uxth	r3, r3
 8013828:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801382c:	b29b      	uxth	r3, r3
 801382e:	4618      	mov	r0, r3
 8013830:	f7fa fcbe 	bl	800e1b0 <lwip_htons>
 8013834:	4603      	mov	r3, r0
 8013836:	b21b      	sxth	r3, r3
 8013838:	4323      	orrs	r3, r4
 801383a:	b21a      	sxth	r2, r3
 801383c:	4b57      	ldr	r3, [pc, #348]	; (801399c <tcp_receive+0x88c>)
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	b292      	uxth	r2, r2
 8013842:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013848:	4b54      	ldr	r3, [pc, #336]	; (801399c <tcp_receive+0x88c>)
 801384a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801384c:	4b53      	ldr	r3, [pc, #332]	; (801399c <tcp_receive+0x88c>)
 801384e:	68db      	ldr	r3, [r3, #12]
 8013850:	899b      	ldrh	r3, [r3, #12]
 8013852:	b29b      	uxth	r3, r3
 8013854:	4618      	mov	r0, r3
 8013856:	f7fa fcab 	bl	800e1b0 <lwip_htons>
 801385a:	4603      	mov	r3, r0
 801385c:	b2db      	uxtb	r3, r3
 801385e:	f003 0302 	and.w	r3, r3, #2
 8013862:	2b00      	cmp	r3, #0
 8013864:	d005      	beq.n	8013872 <tcp_receive+0x762>
            inseg.len -= 1;
 8013866:	4b4d      	ldr	r3, [pc, #308]	; (801399c <tcp_receive+0x88c>)
 8013868:	891b      	ldrh	r3, [r3, #8]
 801386a:	3b01      	subs	r3, #1
 801386c:	b29a      	uxth	r2, r3
 801386e:	4b4b      	ldr	r3, [pc, #300]	; (801399c <tcp_receive+0x88c>)
 8013870:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013872:	4b4a      	ldr	r3, [pc, #296]	; (801399c <tcp_receive+0x88c>)
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	4a49      	ldr	r2, [pc, #292]	; (801399c <tcp_receive+0x88c>)
 8013878:	8912      	ldrh	r2, [r2, #8]
 801387a:	4611      	mov	r1, r2
 801387c:	4618      	mov	r0, r3
 801387e:	f7fb ff03 	bl	800f688 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013882:	4b46      	ldr	r3, [pc, #280]	; (801399c <tcp_receive+0x88c>)
 8013884:	891c      	ldrh	r4, [r3, #8]
 8013886:	4b45      	ldr	r3, [pc, #276]	; (801399c <tcp_receive+0x88c>)
 8013888:	68db      	ldr	r3, [r3, #12]
 801388a:	899b      	ldrh	r3, [r3, #12]
 801388c:	b29b      	uxth	r3, r3
 801388e:	4618      	mov	r0, r3
 8013890:	f7fa fc8e 	bl	800e1b0 <lwip_htons>
 8013894:	4603      	mov	r3, r0
 8013896:	b2db      	uxtb	r3, r3
 8013898:	f003 0303 	and.w	r3, r3, #3
 801389c:	2b00      	cmp	r3, #0
 801389e:	d001      	beq.n	80138a4 <tcp_receive+0x794>
 80138a0:	2301      	movs	r3, #1
 80138a2:	e000      	b.n	80138a6 <tcp_receive+0x796>
 80138a4:	2300      	movs	r3, #0
 80138a6:	4423      	add	r3, r4
 80138a8:	b29a      	uxth	r2, r3
 80138aa:	4b3d      	ldr	r3, [pc, #244]	; (80139a0 <tcp_receive+0x890>)
 80138ac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80138ae:	4b3c      	ldr	r3, [pc, #240]	; (80139a0 <tcp_receive+0x890>)
 80138b0:	881b      	ldrh	r3, [r3, #0]
 80138b2:	461a      	mov	r2, r3
 80138b4:	4b38      	ldr	r3, [pc, #224]	; (8013998 <tcp_receive+0x888>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	441a      	add	r2, r3
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138be:	6879      	ldr	r1, [r7, #4]
 80138c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80138c2:	440b      	add	r3, r1
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d006      	beq.n	80138d6 <tcp_receive+0x7c6>
 80138c8:	4b36      	ldr	r3, [pc, #216]	; (80139a4 <tcp_receive+0x894>)
 80138ca:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80138ce:	4936      	ldr	r1, [pc, #216]	; (80139a8 <tcp_receive+0x898>)
 80138d0:	4836      	ldr	r0, [pc, #216]	; (80139ac <tcp_receive+0x89c>)
 80138d2:	f005 fddb 	bl	801948c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80138da:	2b00      	cmp	r3, #0
 80138dc:	f000 80e7 	beq.w	8013aae <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80138e0:	4b2e      	ldr	r3, [pc, #184]	; (801399c <tcp_receive+0x88c>)
 80138e2:	68db      	ldr	r3, [r3, #12]
 80138e4:	899b      	ldrh	r3, [r3, #12]
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fa fc61 	bl	800e1b0 <lwip_htons>
 80138ee:	4603      	mov	r3, r0
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	f003 0301 	and.w	r3, r3, #1
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d010      	beq.n	801391c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80138fa:	e00a      	b.n	8013912 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013900:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013906:	681a      	ldr	r2, [r3, #0]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f7fd fcc4 	bl	801129a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1f0      	bne.n	80138fc <tcp_receive+0x7ec>
 801391a:	e0c8      	b.n	8013aae <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013920:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013922:	e052      	b.n	80139ca <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	899b      	ldrh	r3, [r3, #12]
 801392a:	b29b      	uxth	r3, r3
 801392c:	4618      	mov	r0, r3
 801392e:	f7fa fc3f 	bl	800e1b0 <lwip_htons>
 8013932:	4603      	mov	r3, r0
 8013934:	b2db      	uxtb	r3, r3
 8013936:	f003 0301 	and.w	r3, r3, #1
 801393a:	2b00      	cmp	r3, #0
 801393c:	d03d      	beq.n	80139ba <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801393e:	4b17      	ldr	r3, [pc, #92]	; (801399c <tcp_receive+0x88c>)
 8013940:	68db      	ldr	r3, [r3, #12]
 8013942:	899b      	ldrh	r3, [r3, #12]
 8013944:	b29b      	uxth	r3, r3
 8013946:	4618      	mov	r0, r3
 8013948:	f7fa fc32 	bl	800e1b0 <lwip_htons>
 801394c:	4603      	mov	r3, r0
 801394e:	b2db      	uxtb	r3, r3
 8013950:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013954:	2b00      	cmp	r3, #0
 8013956:	d130      	bne.n	80139ba <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013958:	4b10      	ldr	r3, [pc, #64]	; (801399c <tcp_receive+0x88c>)
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	899b      	ldrh	r3, [r3, #12]
 801395e:	b29c      	uxth	r4, r3
 8013960:	2001      	movs	r0, #1
 8013962:	f7fa fc25 	bl	800e1b0 <lwip_htons>
 8013966:	4603      	mov	r3, r0
 8013968:	461a      	mov	r2, r3
 801396a:	4b0c      	ldr	r3, [pc, #48]	; (801399c <tcp_receive+0x88c>)
 801396c:	68db      	ldr	r3, [r3, #12]
 801396e:	4322      	orrs	r2, r4
 8013970:	b292      	uxth	r2, r2
 8013972:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013974:	4b09      	ldr	r3, [pc, #36]	; (801399c <tcp_receive+0x88c>)
 8013976:	891c      	ldrh	r4, [r3, #8]
 8013978:	4b08      	ldr	r3, [pc, #32]	; (801399c <tcp_receive+0x88c>)
 801397a:	68db      	ldr	r3, [r3, #12]
 801397c:	899b      	ldrh	r3, [r3, #12]
 801397e:	b29b      	uxth	r3, r3
 8013980:	4618      	mov	r0, r3
 8013982:	f7fa fc15 	bl	800e1b0 <lwip_htons>
 8013986:	4603      	mov	r3, r0
 8013988:	b2db      	uxtb	r3, r3
 801398a:	f003 0303 	and.w	r3, r3, #3
 801398e:	2b00      	cmp	r3, #0
 8013990:	d00e      	beq.n	80139b0 <tcp_receive+0x8a0>
 8013992:	2301      	movs	r3, #1
 8013994:	e00d      	b.n	80139b2 <tcp_receive+0x8a2>
 8013996:	bf00      	nop
 8013998:	2004effc 	.word	0x2004effc
 801399c:	2004efdc 	.word	0x2004efdc
 80139a0:	2004f006 	.word	0x2004f006
 80139a4:	0801bf54 	.word	0x0801bf54
 80139a8:	0801c2fc 	.word	0x0801c2fc
 80139ac:	0801bfa0 	.word	0x0801bfa0
 80139b0:	2300      	movs	r3, #0
 80139b2:	4423      	add	r3, r4
 80139b4:	b29a      	uxth	r2, r3
 80139b6:	4b98      	ldr	r3, [pc, #608]	; (8013c18 <tcp_receive+0xb08>)
 80139b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80139ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80139be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80139c4:	6938      	ldr	r0, [r7, #16]
 80139c6:	f7fd fc68 	bl	801129a <tcp_seg_free>
            while (next &&
 80139ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d00e      	beq.n	80139ee <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80139d0:	4b91      	ldr	r3, [pc, #580]	; (8013c18 <tcp_receive+0xb08>)
 80139d2:	881b      	ldrh	r3, [r3, #0]
 80139d4:	461a      	mov	r2, r3
 80139d6:	4b91      	ldr	r3, [pc, #580]	; (8013c1c <tcp_receive+0xb0c>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	441a      	add	r2, r3
 80139dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139de:	68db      	ldr	r3, [r3, #12]
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80139e4:	8909      	ldrh	r1, [r1, #8]
 80139e6:	440b      	add	r3, r1
 80139e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	da9a      	bge.n	8013924 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80139ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d059      	beq.n	8013aa8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80139f4:	4b88      	ldr	r3, [pc, #544]	; (8013c18 <tcp_receive+0xb08>)
 80139f6:	881b      	ldrh	r3, [r3, #0]
 80139f8:	461a      	mov	r2, r3
 80139fa:	4b88      	ldr	r3, [pc, #544]	; (8013c1c <tcp_receive+0xb0c>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	441a      	add	r2, r3
 8013a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a02:	68db      	ldr	r3, [r3, #12]
 8013a04:	685b      	ldr	r3, [r3, #4]
 8013a06:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	dd4d      	ble.n	8013aa8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a0e:	68db      	ldr	r3, [r3, #12]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	4b81      	ldr	r3, [pc, #516]	; (8013c1c <tcp_receive+0xb0c>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	1ad3      	subs	r3, r2, r3
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	4b80      	ldr	r3, [pc, #512]	; (8013c20 <tcp_receive+0xb10>)
 8013a20:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013a22:	4b7f      	ldr	r3, [pc, #508]	; (8013c20 <tcp_receive+0xb10>)
 8013a24:	68db      	ldr	r3, [r3, #12]
 8013a26:	899b      	ldrh	r3, [r3, #12]
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7fa fbc0 	bl	800e1b0 <lwip_htons>
 8013a30:	4603      	mov	r3, r0
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	f003 0302 	and.w	r3, r3, #2
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d005      	beq.n	8013a48 <tcp_receive+0x938>
                inseg.len -= 1;
 8013a3c:	4b78      	ldr	r3, [pc, #480]	; (8013c20 <tcp_receive+0xb10>)
 8013a3e:	891b      	ldrh	r3, [r3, #8]
 8013a40:	3b01      	subs	r3, #1
 8013a42:	b29a      	uxth	r2, r3
 8013a44:	4b76      	ldr	r3, [pc, #472]	; (8013c20 <tcp_receive+0xb10>)
 8013a46:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013a48:	4b75      	ldr	r3, [pc, #468]	; (8013c20 <tcp_receive+0xb10>)
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	4a74      	ldr	r2, [pc, #464]	; (8013c20 <tcp_receive+0xb10>)
 8013a4e:	8912      	ldrh	r2, [r2, #8]
 8013a50:	4611      	mov	r1, r2
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fb fe18 	bl	800f688 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013a58:	4b71      	ldr	r3, [pc, #452]	; (8013c20 <tcp_receive+0xb10>)
 8013a5a:	891c      	ldrh	r4, [r3, #8]
 8013a5c:	4b70      	ldr	r3, [pc, #448]	; (8013c20 <tcp_receive+0xb10>)
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	899b      	ldrh	r3, [r3, #12]
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7fa fba3 	bl	800e1b0 <lwip_htons>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	f003 0303 	and.w	r3, r3, #3
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d001      	beq.n	8013a7a <tcp_receive+0x96a>
 8013a76:	2301      	movs	r3, #1
 8013a78:	e000      	b.n	8013a7c <tcp_receive+0x96c>
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	4423      	add	r3, r4
 8013a7e:	b29a      	uxth	r2, r3
 8013a80:	4b65      	ldr	r3, [pc, #404]	; (8013c18 <tcp_receive+0xb08>)
 8013a82:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013a84:	4b64      	ldr	r3, [pc, #400]	; (8013c18 <tcp_receive+0xb08>)
 8013a86:	881b      	ldrh	r3, [r3, #0]
 8013a88:	461a      	mov	r2, r3
 8013a8a:	4b64      	ldr	r3, [pc, #400]	; (8013c1c <tcp_receive+0xb0c>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	441a      	add	r2, r3
 8013a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d006      	beq.n	8013aa8 <tcp_receive+0x998>
 8013a9a:	4b62      	ldr	r3, [pc, #392]	; (8013c24 <tcp_receive+0xb14>)
 8013a9c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013aa0:	4961      	ldr	r1, [pc, #388]	; (8013c28 <tcp_receive+0xb18>)
 8013aa2:	4862      	ldr	r0, [pc, #392]	; (8013c2c <tcp_receive+0xb1c>)
 8013aa4:	f005 fcf2 	bl	801948c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013aac:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013aae:	4b5a      	ldr	r3, [pc, #360]	; (8013c18 <tcp_receive+0xb08>)
 8013ab0:	881b      	ldrh	r3, [r3, #0]
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	4b59      	ldr	r3, [pc, #356]	; (8013c1c <tcp_receive+0xb0c>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	441a      	add	r2, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ac2:	4b55      	ldr	r3, [pc, #340]	; (8013c18 <tcp_receive+0xb08>)
 8013ac4:	881b      	ldrh	r3, [r3, #0]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d206      	bcs.n	8013ad8 <tcp_receive+0x9c8>
 8013aca:	4b56      	ldr	r3, [pc, #344]	; (8013c24 <tcp_receive+0xb14>)
 8013acc:	f240 6207 	movw	r2, #1543	; 0x607
 8013ad0:	4957      	ldr	r1, [pc, #348]	; (8013c30 <tcp_receive+0xb20>)
 8013ad2:	4856      	ldr	r0, [pc, #344]	; (8013c2c <tcp_receive+0xb1c>)
 8013ad4:	f005 fcda 	bl	801948c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013adc:	4b4e      	ldr	r3, [pc, #312]	; (8013c18 <tcp_receive+0xb08>)
 8013ade:	881b      	ldrh	r3, [r3, #0]
 8013ae0:	1ad3      	subs	r3, r2, r3
 8013ae2:	b29a      	uxth	r2, r3
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013ae8:	6878      	ldr	r0, [r7, #4]
 8013aea:	f7fc feb1 	bl	8010850 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013aee:	4b4c      	ldr	r3, [pc, #304]	; (8013c20 <tcp_receive+0xb10>)
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	891b      	ldrh	r3, [r3, #8]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d006      	beq.n	8013b06 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013af8:	4b49      	ldr	r3, [pc, #292]	; (8013c20 <tcp_receive+0xb10>)
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	4a4d      	ldr	r2, [pc, #308]	; (8013c34 <tcp_receive+0xb24>)
 8013afe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013b00:	4b47      	ldr	r3, [pc, #284]	; (8013c20 <tcp_receive+0xb10>)
 8013b02:	2200      	movs	r2, #0
 8013b04:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013b06:	4b46      	ldr	r3, [pc, #280]	; (8013c20 <tcp_receive+0xb10>)
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	899b      	ldrh	r3, [r3, #12]
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7fa fb4e 	bl	800e1b0 <lwip_htons>
 8013b14:	4603      	mov	r3, r0
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	f003 0301 	and.w	r3, r3, #1
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f000 80b8 	beq.w	8013c92 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013b22:	4b45      	ldr	r3, [pc, #276]	; (8013c38 <tcp_receive+0xb28>)
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	f043 0320 	orr.w	r3, r3, #32
 8013b2a:	b2da      	uxtb	r2, r3
 8013b2c:	4b42      	ldr	r3, [pc, #264]	; (8013c38 <tcp_receive+0xb28>)
 8013b2e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013b30:	e0af      	b.n	8013c92 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b36:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b3c:	68db      	ldr	r3, [r3, #12]
 8013b3e:	685b      	ldr	r3, [r3, #4]
 8013b40:	4a36      	ldr	r2, [pc, #216]	; (8013c1c <tcp_receive+0xb0c>)
 8013b42:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	891b      	ldrh	r3, [r3, #8]
 8013b48:	461c      	mov	r4, r3
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	68db      	ldr	r3, [r3, #12]
 8013b4e:	899b      	ldrh	r3, [r3, #12]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	4618      	mov	r0, r3
 8013b54:	f7fa fb2c 	bl	800e1b0 <lwip_htons>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	b2db      	uxtb	r3, r3
 8013b5c:	f003 0303 	and.w	r3, r3, #3
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d001      	beq.n	8013b68 <tcp_receive+0xa58>
 8013b64:	2301      	movs	r3, #1
 8013b66:	e000      	b.n	8013b6a <tcp_receive+0xa5a>
 8013b68:	2300      	movs	r3, #0
 8013b6a:	191a      	adds	r2, r3, r4
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b70:	441a      	add	r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b7a:	461c      	mov	r4, r3
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	891b      	ldrh	r3, [r3, #8]
 8013b80:	461d      	mov	r5, r3
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	68db      	ldr	r3, [r3, #12]
 8013b86:	899b      	ldrh	r3, [r3, #12]
 8013b88:	b29b      	uxth	r3, r3
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fa fb10 	bl	800e1b0 <lwip_htons>
 8013b90:	4603      	mov	r3, r0
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	f003 0303 	and.w	r3, r3, #3
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d001      	beq.n	8013ba0 <tcp_receive+0xa90>
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	e000      	b.n	8013ba2 <tcp_receive+0xa92>
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	442b      	add	r3, r5
 8013ba4:	429c      	cmp	r4, r3
 8013ba6:	d206      	bcs.n	8013bb6 <tcp_receive+0xaa6>
 8013ba8:	4b1e      	ldr	r3, [pc, #120]	; (8013c24 <tcp_receive+0xb14>)
 8013baa:	f240 622b 	movw	r2, #1579	; 0x62b
 8013bae:	4923      	ldr	r1, [pc, #140]	; (8013c3c <tcp_receive+0xb2c>)
 8013bb0:	481e      	ldr	r0, [pc, #120]	; (8013c2c <tcp_receive+0xb1c>)
 8013bb2:	f005 fc6b 	bl	801948c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013bb6:	68bb      	ldr	r3, [r7, #8]
 8013bb8:	891b      	ldrh	r3, [r3, #8]
 8013bba:	461c      	mov	r4, r3
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	899b      	ldrh	r3, [r3, #12]
 8013bc2:	b29b      	uxth	r3, r3
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fa faf3 	bl	800e1b0 <lwip_htons>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	b2db      	uxtb	r3, r3
 8013bce:	f003 0303 	and.w	r3, r3, #3
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d001      	beq.n	8013bda <tcp_receive+0xaca>
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	e000      	b.n	8013bdc <tcp_receive+0xacc>
 8013bda:	2300      	movs	r3, #0
 8013bdc:	1919      	adds	r1, r3, r4
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013be2:	b28b      	uxth	r3, r1
 8013be4:	1ad3      	subs	r3, r2, r3
 8013be6:	b29a      	uxth	r2, r3
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7fc fe2f 	bl	8010850 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	891b      	ldrh	r3, [r3, #8]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d028      	beq.n	8013c4e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013bfc:	4b0d      	ldr	r3, [pc, #52]	; (8013c34 <tcp_receive+0xb24>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d01d      	beq.n	8013c40 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8013c04:	4b0b      	ldr	r3, [pc, #44]	; (8013c34 <tcp_receive+0xb24>)
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	4610      	mov	r0, r2
 8013c10:	f7fb ff8e 	bl	800fb30 <pbuf_cat>
 8013c14:	e018      	b.n	8013c48 <tcp_receive+0xb38>
 8013c16:	bf00      	nop
 8013c18:	2004f006 	.word	0x2004f006
 8013c1c:	2004effc 	.word	0x2004effc
 8013c20:	2004efdc 	.word	0x2004efdc
 8013c24:	0801bf54 	.word	0x0801bf54
 8013c28:	0801c334 	.word	0x0801c334
 8013c2c:	0801bfa0 	.word	0x0801bfa0
 8013c30:	0801c370 	.word	0x0801c370
 8013c34:	2004f00c 	.word	0x2004f00c
 8013c38:	2004f009 	.word	0x2004f009
 8013c3c:	0801c390 	.word	0x0801c390
            } else {
              recv_data = cseg->p;
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	4a70      	ldr	r2, [pc, #448]	; (8013e08 <tcp_receive+0xcf8>)
 8013c46:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	68db      	ldr	r3, [r3, #12]
 8013c52:	899b      	ldrh	r3, [r3, #12]
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7fa faaa 	bl	800e1b0 <lwip_htons>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	f003 0301 	and.w	r3, r3, #1
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d00d      	beq.n	8013c84 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013c68:	4b68      	ldr	r3, [pc, #416]	; (8013e0c <tcp_receive+0xcfc>)
 8013c6a:	781b      	ldrb	r3, [r3, #0]
 8013c6c:	f043 0320 	orr.w	r3, r3, #32
 8013c70:	b2da      	uxtb	r2, r3
 8013c72:	4b66      	ldr	r3, [pc, #408]	; (8013e0c <tcp_receive+0xcfc>)
 8013c74:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	7d1b      	ldrb	r3, [r3, #20]
 8013c7a:	2b04      	cmp	r3, #4
 8013c7c:	d102      	bne.n	8013c84 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2207      	movs	r2, #7
 8013c82:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	681a      	ldr	r2, [r3, #0]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013c8c:	68b8      	ldr	r0, [r7, #8]
 8013c8e:	f7fd fb04 	bl	801129a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d008      	beq.n	8013cac <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	685a      	ldr	r2, [r3, #4]
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	f43f af43 	beq.w	8013b32 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	8b5b      	ldrh	r3, [r3, #26]
 8013cb0:	f003 0301 	and.w	r3, r3, #1
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d00e      	beq.n	8013cd6 <tcp_receive+0xbc6>
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	8b5b      	ldrh	r3, [r3, #26]
 8013cbc:	f023 0301 	bic.w	r3, r3, #1
 8013cc0:	b29a      	uxth	r2, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	835a      	strh	r2, [r3, #26]
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	8b5b      	ldrh	r3, [r3, #26]
 8013cca:	f043 0302 	orr.w	r3, r3, #2
 8013cce:	b29a      	uxth	r2, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013cd4:	e188      	b.n	8013fe8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	8b5b      	ldrh	r3, [r3, #26]
 8013cda:	f043 0301 	orr.w	r3, r3, #1
 8013cde:	b29a      	uxth	r2, r3
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013ce4:	e180      	b.n	8013fe8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d106      	bne.n	8013cfc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013cee:	4848      	ldr	r0, [pc, #288]	; (8013e10 <tcp_receive+0xd00>)
 8013cf0:	f7fd faec 	bl	80112cc <tcp_seg_copy>
 8013cf4:	4602      	mov	r2, r0
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	675a      	str	r2, [r3, #116]	; 0x74
 8013cfa:	e16d      	b.n	8013fd8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d06:	e157      	b.n	8013fb8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8013d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	685a      	ldr	r2, [r3, #4]
 8013d0e:	4b41      	ldr	r3, [pc, #260]	; (8013e14 <tcp_receive+0xd04>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d11d      	bne.n	8013d52 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013d16:	4b3e      	ldr	r3, [pc, #248]	; (8013e10 <tcp_receive+0xd00>)
 8013d18:	891a      	ldrh	r2, [r3, #8]
 8013d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d1c:	891b      	ldrh	r3, [r3, #8]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	f240 814f 	bls.w	8013fc2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013d24:	483a      	ldr	r0, [pc, #232]	; (8013e10 <tcp_receive+0xd00>)
 8013d26:	f7fd fad1 	bl	80112cc <tcp_seg_copy>
 8013d2a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	f000 8149 	beq.w	8013fc6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8013d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d003      	beq.n	8013d42 <tcp_receive+0xc32>
                    prev->next = cseg;
 8013d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d3c:	697a      	ldr	r2, [r7, #20]
 8013d3e:	601a      	str	r2, [r3, #0]
 8013d40:	e002      	b.n	8013d48 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	697a      	ldr	r2, [r7, #20]
 8013d46:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013d48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d4a:	6978      	ldr	r0, [r7, #20]
 8013d4c:	f7ff f8dc 	bl	8012f08 <tcp_oos_insert_segment>
                }
                break;
 8013d50:	e139      	b.n	8013fc6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d117      	bne.n	8013d88 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013d58:	4b2e      	ldr	r3, [pc, #184]	; (8013e14 <tcp_receive+0xd04>)
 8013d5a:	681a      	ldr	r2, [r3, #0]
 8013d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	1ad3      	subs	r3, r2, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	da57      	bge.n	8013e18 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013d68:	4829      	ldr	r0, [pc, #164]	; (8013e10 <tcp_receive+0xd00>)
 8013d6a:	f7fd faaf 	bl	80112cc <tcp_seg_copy>
 8013d6e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013d70:	69bb      	ldr	r3, [r7, #24]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	f000 8129 	beq.w	8013fca <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	69ba      	ldr	r2, [r7, #24]
 8013d7c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d80:	69b8      	ldr	r0, [r7, #24]
 8013d82:	f7ff f8c1 	bl	8012f08 <tcp_oos_insert_segment>
                  }
                  break;
 8013d86:	e120      	b.n	8013fca <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013d88:	4b22      	ldr	r3, [pc, #136]	; (8013e14 <tcp_receive+0xd04>)
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d8e:	68db      	ldr	r3, [r3, #12]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	1ad3      	subs	r3, r2, r3
 8013d94:	3b01      	subs	r3, #1
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	db3e      	blt.n	8013e18 <tcp_receive+0xd08>
 8013d9a:	4b1e      	ldr	r3, [pc, #120]	; (8013e14 <tcp_receive+0xd04>)
 8013d9c:	681a      	ldr	r2, [r3, #0]
 8013d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	1ad3      	subs	r3, r2, r3
 8013da6:	3301      	adds	r3, #1
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	dc35      	bgt.n	8013e18 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013dac:	4818      	ldr	r0, [pc, #96]	; (8013e10 <tcp_receive+0xd00>)
 8013dae:	f7fd fa8d 	bl	80112cc <tcp_seg_copy>
 8013db2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013db4:	69fb      	ldr	r3, [r7, #28]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	f000 8109 	beq.w	8013fce <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dbe:	68db      	ldr	r3, [r3, #12]
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dc4:	8912      	ldrh	r2, [r2, #8]
 8013dc6:	441a      	add	r2, r3
 8013dc8:	4b12      	ldr	r3, [pc, #72]	; (8013e14 <tcp_receive+0xd04>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	1ad3      	subs	r3, r2, r3
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	dd12      	ble.n	8013df8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013dd2:	4b10      	ldr	r3, [pc, #64]	; (8013e14 <tcp_receive+0xd04>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	b29a      	uxth	r2, r3
 8013dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dda:	68db      	ldr	r3, [r3, #12]
 8013ddc:	685b      	ldr	r3, [r3, #4]
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	1ad3      	subs	r3, r2, r3
 8013de2:	b29a      	uxth	r2, r3
 8013de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013de6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dea:	685a      	ldr	r2, [r3, #4]
 8013dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dee:	891b      	ldrh	r3, [r3, #8]
 8013df0:	4619      	mov	r1, r3
 8013df2:	4610      	mov	r0, r2
 8013df4:	f7fb fc48 	bl	800f688 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dfa:	69fa      	ldr	r2, [r7, #28]
 8013dfc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013dfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013e00:	69f8      	ldr	r0, [r7, #28]
 8013e02:	f7ff f881 	bl	8012f08 <tcp_oos_insert_segment>
                  }
                  break;
 8013e06:	e0e2      	b.n	8013fce <tcp_receive+0xebe>
 8013e08:	2004f00c 	.word	0x2004f00c
 8013e0c:	2004f009 	.word	0x2004f009
 8013e10:	2004efdc 	.word	0x2004efdc
 8013e14:	2004effc 	.word	0x2004effc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e1a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	f040 80c6 	bne.w	8013fb2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013e26:	4b80      	ldr	r3, [pc, #512]	; (8014028 <tcp_receive+0xf18>)
 8013e28:	681a      	ldr	r2, [r3, #0]
 8013e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2c:	68db      	ldr	r3, [r3, #12]
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	f340 80bd 	ble.w	8013fb2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e3a:	68db      	ldr	r3, [r3, #12]
 8013e3c:	899b      	ldrh	r3, [r3, #12]
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7fa f9b5 	bl	800e1b0 <lwip_htons>
 8013e46:	4603      	mov	r3, r0
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	f003 0301 	and.w	r3, r3, #1
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	f040 80bf 	bne.w	8013fd2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013e54:	4875      	ldr	r0, [pc, #468]	; (801402c <tcp_receive+0xf1c>)
 8013e56:	f7fd fa39 	bl	80112cc <tcp_seg_copy>
 8013e5a:	4602      	mov	r2, r0
 8013e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e5e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	f000 80b6 	beq.w	8013fd6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e6c:	68db      	ldr	r3, [r3, #12]
 8013e6e:	685b      	ldr	r3, [r3, #4]
 8013e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e72:	8912      	ldrh	r2, [r2, #8]
 8013e74:	441a      	add	r2, r3
 8013e76:	4b6c      	ldr	r3, [pc, #432]	; (8014028 <tcp_receive+0xf18>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	1ad3      	subs	r3, r2, r3
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	dd12      	ble.n	8013ea6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013e80:	4b69      	ldr	r3, [pc, #420]	; (8014028 <tcp_receive+0xf18>)
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	b29a      	uxth	r2, r3
 8013e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	685b      	ldr	r3, [r3, #4]
 8013e8c:	b29b      	uxth	r3, r3
 8013e8e:	1ad3      	subs	r3, r2, r3
 8013e90:	b29a      	uxth	r2, r3
 8013e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e98:	685a      	ldr	r2, [r3, #4]
 8013e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9c:	891b      	ldrh	r3, [r3, #8]
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	4610      	mov	r0, r2
 8013ea2:	f7fb fbf1 	bl	800f688 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013ea6:	4b62      	ldr	r3, [pc, #392]	; (8014030 <tcp_receive+0xf20>)
 8013ea8:	881b      	ldrh	r3, [r3, #0]
 8013eaa:	461a      	mov	r2, r3
 8013eac:	4b5e      	ldr	r3, [pc, #376]	; (8014028 <tcp_receive+0xf18>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	441a      	add	r2, r3
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eb6:	6879      	ldr	r1, [r7, #4]
 8013eb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013eba:	440b      	add	r3, r1
 8013ebc:	1ad3      	subs	r3, r2, r3
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	f340 8089 	ble.w	8013fd6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	68db      	ldr	r3, [r3, #12]
 8013eca:	899b      	ldrh	r3, [r3, #12]
 8013ecc:	b29b      	uxth	r3, r3
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7fa f96e 	bl	800e1b0 <lwip_htons>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	f003 0301 	and.w	r3, r3, #1
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d022      	beq.n	8013f26 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	68db      	ldr	r3, [r3, #12]
 8013ee6:	899b      	ldrh	r3, [r3, #12]
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	b21b      	sxth	r3, r3
 8013eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013ef0:	b21c      	sxth	r4, r3
 8013ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	899b      	ldrh	r3, [r3, #12]
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7fa f957 	bl	800e1b0 <lwip_htons>
 8013f02:	4603      	mov	r3, r0
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	b29b      	uxth	r3, r3
 8013f08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7fa f94e 	bl	800e1b0 <lwip_htons>
 8013f14:	4603      	mov	r3, r0
 8013f16:	b21b      	sxth	r3, r3
 8013f18:	4323      	orrs	r3, r4
 8013f1a:	b21a      	sxth	r2, r3
 8013f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	68db      	ldr	r3, [r3, #12]
 8013f22:	b292      	uxth	r2, r2
 8013f24:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f2a:	b29a      	uxth	r2, r3
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013f30:	4413      	add	r3, r2
 8013f32:	b299      	uxth	r1, r3
 8013f34:	4b3c      	ldr	r3, [pc, #240]	; (8014028 <tcp_receive+0xf18>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	1a8a      	subs	r2, r1, r2
 8013f40:	b292      	uxth	r2, r2
 8013f42:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	685a      	ldr	r2, [r3, #4]
 8013f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	891b      	ldrh	r3, [r3, #8]
 8013f50:	4619      	mov	r1, r3
 8013f52:	4610      	mov	r0, r2
 8013f54:	f7fb fb98 	bl	800f688 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	891c      	ldrh	r4, [r3, #8]
 8013f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	68db      	ldr	r3, [r3, #12]
 8013f64:	899b      	ldrh	r3, [r3, #12]
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7fa f921 	bl	800e1b0 <lwip_htons>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	b2db      	uxtb	r3, r3
 8013f72:	f003 0303 	and.w	r3, r3, #3
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d001      	beq.n	8013f7e <tcp_receive+0xe6e>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	e000      	b.n	8013f80 <tcp_receive+0xe70>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	4423      	add	r3, r4
 8013f82:	b29a      	uxth	r2, r3
 8013f84:	4b2a      	ldr	r3, [pc, #168]	; (8014030 <tcp_receive+0xf20>)
 8013f86:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013f88:	4b29      	ldr	r3, [pc, #164]	; (8014030 <tcp_receive+0xf20>)
 8013f8a:	881b      	ldrh	r3, [r3, #0]
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	4b26      	ldr	r3, [pc, #152]	; (8014028 <tcp_receive+0xf18>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	441a      	add	r2, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f98:	6879      	ldr	r1, [r7, #4]
 8013f9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013f9c:	440b      	add	r3, r1
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d019      	beq.n	8013fd6 <tcp_receive+0xec6>
 8013fa2:	4b24      	ldr	r3, [pc, #144]	; (8014034 <tcp_receive+0xf24>)
 8013fa4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013fa8:	4923      	ldr	r1, [pc, #140]	; (8014038 <tcp_receive+0xf28>)
 8013faa:	4824      	ldr	r0, [pc, #144]	; (801403c <tcp_receive+0xf2c>)
 8013fac:	f005 fa6e 	bl	801948c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013fb0:	e011      	b.n	8013fd6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8013fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	f47f aea4 	bne.w	8013d08 <tcp_receive+0xbf8>
 8013fc0:	e00a      	b.n	8013fd8 <tcp_receive+0xec8>
                break;
 8013fc2:	bf00      	nop
 8013fc4:	e008      	b.n	8013fd8 <tcp_receive+0xec8>
                break;
 8013fc6:	bf00      	nop
 8013fc8:	e006      	b.n	8013fd8 <tcp_receive+0xec8>
                  break;
 8013fca:	bf00      	nop
 8013fcc:	e004      	b.n	8013fd8 <tcp_receive+0xec8>
                  break;
 8013fce:	bf00      	nop
 8013fd0:	e002      	b.n	8013fd8 <tcp_receive+0xec8>
                  break;
 8013fd2:	bf00      	nop
 8013fd4:	e000      	b.n	8013fd8 <tcp_receive+0xec8>
                break;
 8013fd6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f001 fe8b 	bl	8015cf4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013fde:	e003      	b.n	8013fe8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f001 fe87 	bl	8015cf4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013fe6:	e01a      	b.n	801401e <tcp_receive+0xf0e>
 8013fe8:	e019      	b.n	801401e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013fea:	4b0f      	ldr	r3, [pc, #60]	; (8014028 <tcp_receive+0xf18>)
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ff2:	1ad3      	subs	r3, r2, r3
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	db0a      	blt.n	801400e <tcp_receive+0xefe>
 8013ff8:	4b0b      	ldr	r3, [pc, #44]	; (8014028 <tcp_receive+0xf18>)
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014000:	6879      	ldr	r1, [r7, #4]
 8014002:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014004:	440b      	add	r3, r1
 8014006:	1ad3      	subs	r3, r2, r3
 8014008:	3301      	adds	r3, #1
 801400a:	2b00      	cmp	r3, #0
 801400c:	dd07      	ble.n	801401e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	8b5b      	ldrh	r3, [r3, #26]
 8014012:	f043 0302 	orr.w	r3, r3, #2
 8014016:	b29a      	uxth	r2, r3
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801401c:	e7ff      	b.n	801401e <tcp_receive+0xf0e>
 801401e:	bf00      	nop
 8014020:	3750      	adds	r7, #80	; 0x50
 8014022:	46bd      	mov	sp, r7
 8014024:	bdb0      	pop	{r4, r5, r7, pc}
 8014026:	bf00      	nop
 8014028:	2004effc 	.word	0x2004effc
 801402c:	2004efdc 	.word	0x2004efdc
 8014030:	2004f006 	.word	0x2004f006
 8014034:	0801bf54 	.word	0x0801bf54
 8014038:	0801c2fc 	.word	0x0801c2fc
 801403c:	0801bfa0 	.word	0x0801bfa0

08014040 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014040:	b480      	push	{r7}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014046:	4b15      	ldr	r3, [pc, #84]	; (801409c <tcp_get_next_optbyte+0x5c>)
 8014048:	881b      	ldrh	r3, [r3, #0]
 801404a:	1c5a      	adds	r2, r3, #1
 801404c:	b291      	uxth	r1, r2
 801404e:	4a13      	ldr	r2, [pc, #76]	; (801409c <tcp_get_next_optbyte+0x5c>)
 8014050:	8011      	strh	r1, [r2, #0]
 8014052:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014054:	4b12      	ldr	r3, [pc, #72]	; (80140a0 <tcp_get_next_optbyte+0x60>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d004      	beq.n	8014066 <tcp_get_next_optbyte+0x26>
 801405c:	4b11      	ldr	r3, [pc, #68]	; (80140a4 <tcp_get_next_optbyte+0x64>)
 801405e:	881b      	ldrh	r3, [r3, #0]
 8014060:	88fa      	ldrh	r2, [r7, #6]
 8014062:	429a      	cmp	r2, r3
 8014064:	d208      	bcs.n	8014078 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014066:	4b10      	ldr	r3, [pc, #64]	; (80140a8 <tcp_get_next_optbyte+0x68>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	3314      	adds	r3, #20
 801406c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801406e:	88fb      	ldrh	r3, [r7, #6]
 8014070:	683a      	ldr	r2, [r7, #0]
 8014072:	4413      	add	r3, r2
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	e00b      	b.n	8014090 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014078:	88fb      	ldrh	r3, [r7, #6]
 801407a:	b2da      	uxtb	r2, r3
 801407c:	4b09      	ldr	r3, [pc, #36]	; (80140a4 <tcp_get_next_optbyte+0x64>)
 801407e:	881b      	ldrh	r3, [r3, #0]
 8014080:	b2db      	uxtb	r3, r3
 8014082:	1ad3      	subs	r3, r2, r3
 8014084:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014086:	4b06      	ldr	r3, [pc, #24]	; (80140a0 <tcp_get_next_optbyte+0x60>)
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	797b      	ldrb	r3, [r7, #5]
 801408c:	4413      	add	r3, r2
 801408e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014090:	4618      	mov	r0, r3
 8014092:	370c      	adds	r7, #12
 8014094:	46bd      	mov	sp, r7
 8014096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409a:	4770      	bx	lr
 801409c:	2004eff8 	.word	0x2004eff8
 80140a0:	2004eff4 	.word	0x2004eff4
 80140a4:	2004eff2 	.word	0x2004eff2
 80140a8:	2004efec 	.word	0x2004efec

080140ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b084      	sub	sp, #16
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d106      	bne.n	80140c8 <tcp_parseopt+0x1c>
 80140ba:	4b32      	ldr	r3, [pc, #200]	; (8014184 <tcp_parseopt+0xd8>)
 80140bc:	f240 727d 	movw	r2, #1917	; 0x77d
 80140c0:	4931      	ldr	r1, [pc, #196]	; (8014188 <tcp_parseopt+0xdc>)
 80140c2:	4832      	ldr	r0, [pc, #200]	; (801418c <tcp_parseopt+0xe0>)
 80140c4:	f005 f9e2 	bl	801948c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80140c8:	4b31      	ldr	r3, [pc, #196]	; (8014190 <tcp_parseopt+0xe4>)
 80140ca:	881b      	ldrh	r3, [r3, #0]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d055      	beq.n	801417c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80140d0:	4b30      	ldr	r3, [pc, #192]	; (8014194 <tcp_parseopt+0xe8>)
 80140d2:	2200      	movs	r2, #0
 80140d4:	801a      	strh	r2, [r3, #0]
 80140d6:	e045      	b.n	8014164 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80140d8:	f7ff ffb2 	bl	8014040 <tcp_get_next_optbyte>
 80140dc:	4603      	mov	r3, r0
 80140de:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80140e0:	7bfb      	ldrb	r3, [r7, #15]
 80140e2:	2b02      	cmp	r3, #2
 80140e4:	d006      	beq.n	80140f4 <tcp_parseopt+0x48>
 80140e6:	2b02      	cmp	r3, #2
 80140e8:	dc2b      	bgt.n	8014142 <tcp_parseopt+0x96>
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d041      	beq.n	8014172 <tcp_parseopt+0xc6>
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d127      	bne.n	8014142 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80140f2:	e037      	b.n	8014164 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80140f4:	f7ff ffa4 	bl	8014040 <tcp_get_next_optbyte>
 80140f8:	4603      	mov	r3, r0
 80140fa:	2b04      	cmp	r3, #4
 80140fc:	d13b      	bne.n	8014176 <tcp_parseopt+0xca>
 80140fe:	4b25      	ldr	r3, [pc, #148]	; (8014194 <tcp_parseopt+0xe8>)
 8014100:	881b      	ldrh	r3, [r3, #0]
 8014102:	3301      	adds	r3, #1
 8014104:	4a22      	ldr	r2, [pc, #136]	; (8014190 <tcp_parseopt+0xe4>)
 8014106:	8812      	ldrh	r2, [r2, #0]
 8014108:	4293      	cmp	r3, r2
 801410a:	da34      	bge.n	8014176 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801410c:	f7ff ff98 	bl	8014040 <tcp_get_next_optbyte>
 8014110:	4603      	mov	r3, r0
 8014112:	b29b      	uxth	r3, r3
 8014114:	021b      	lsls	r3, r3, #8
 8014116:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014118:	f7ff ff92 	bl	8014040 <tcp_get_next_optbyte>
 801411c:	4603      	mov	r3, r0
 801411e:	b29a      	uxth	r2, r3
 8014120:	89bb      	ldrh	r3, [r7, #12]
 8014122:	4313      	orrs	r3, r2
 8014124:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014126:	89bb      	ldrh	r3, [r7, #12]
 8014128:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801412c:	d804      	bhi.n	8014138 <tcp_parseopt+0x8c>
 801412e:	89bb      	ldrh	r3, [r7, #12]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d001      	beq.n	8014138 <tcp_parseopt+0x8c>
 8014134:	89ba      	ldrh	r2, [r7, #12]
 8014136:	e001      	b.n	801413c <tcp_parseopt+0x90>
 8014138:	f44f 7206 	mov.w	r2, #536	; 0x218
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014140:	e010      	b.n	8014164 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014142:	f7ff ff7d 	bl	8014040 <tcp_get_next_optbyte>
 8014146:	4603      	mov	r3, r0
 8014148:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801414a:	7afb      	ldrb	r3, [r7, #11]
 801414c:	2b01      	cmp	r3, #1
 801414e:	d914      	bls.n	801417a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014150:	7afb      	ldrb	r3, [r7, #11]
 8014152:	b29a      	uxth	r2, r3
 8014154:	4b0f      	ldr	r3, [pc, #60]	; (8014194 <tcp_parseopt+0xe8>)
 8014156:	881b      	ldrh	r3, [r3, #0]
 8014158:	4413      	add	r3, r2
 801415a:	b29b      	uxth	r3, r3
 801415c:	3b02      	subs	r3, #2
 801415e:	b29a      	uxth	r2, r3
 8014160:	4b0c      	ldr	r3, [pc, #48]	; (8014194 <tcp_parseopt+0xe8>)
 8014162:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014164:	4b0b      	ldr	r3, [pc, #44]	; (8014194 <tcp_parseopt+0xe8>)
 8014166:	881a      	ldrh	r2, [r3, #0]
 8014168:	4b09      	ldr	r3, [pc, #36]	; (8014190 <tcp_parseopt+0xe4>)
 801416a:	881b      	ldrh	r3, [r3, #0]
 801416c:	429a      	cmp	r2, r3
 801416e:	d3b3      	bcc.n	80140d8 <tcp_parseopt+0x2c>
 8014170:	e004      	b.n	801417c <tcp_parseopt+0xd0>
          return;
 8014172:	bf00      	nop
 8014174:	e002      	b.n	801417c <tcp_parseopt+0xd0>
            return;
 8014176:	bf00      	nop
 8014178:	e000      	b.n	801417c <tcp_parseopt+0xd0>
            return;
 801417a:	bf00      	nop
      }
    }
  }
}
 801417c:	3710      	adds	r7, #16
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
 8014182:	bf00      	nop
 8014184:	0801bf54 	.word	0x0801bf54
 8014188:	0801c3b8 	.word	0x0801c3b8
 801418c:	0801bfa0 	.word	0x0801bfa0
 8014190:	2004eff0 	.word	0x2004eff0
 8014194:	2004eff8 	.word	0x2004eff8

08014198 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014198:	b480      	push	{r7}
 801419a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801419c:	4b05      	ldr	r3, [pc, #20]	; (80141b4 <tcp_trigger_input_pcb_close+0x1c>)
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	f043 0310 	orr.w	r3, r3, #16
 80141a4:	b2da      	uxtb	r2, r3
 80141a6:	4b03      	ldr	r3, [pc, #12]	; (80141b4 <tcp_trigger_input_pcb_close+0x1c>)
 80141a8:	701a      	strb	r2, [r3, #0]
}
 80141aa:	bf00      	nop
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr
 80141b4:	2004f009 	.word	0x2004f009

080141b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b084      	sub	sp, #16
 80141bc:	af00      	add	r7, sp, #0
 80141be:	60f8      	str	r0, [r7, #12]
 80141c0:	60b9      	str	r1, [r7, #8]
 80141c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d00a      	beq.n	80141e0 <tcp_route+0x28>
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	7a1b      	ldrb	r3, [r3, #8]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d006      	beq.n	80141e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	7a1b      	ldrb	r3, [r3, #8]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fb f84e 	bl	800f278 <netif_get_by_index>
 80141dc:	4603      	mov	r3, r0
 80141de:	e003      	b.n	80141e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f003 fc09 	bl	80179f8 <ip4_route>
 80141e6:	4603      	mov	r3, r0
  }
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3710      	adds	r7, #16
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80141f0:	b590      	push	{r4, r7, lr}
 80141f2:	b087      	sub	sp, #28
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	603b      	str	r3, [r7, #0]
 80141fc:	4613      	mov	r3, r2
 80141fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d105      	bne.n	8014212 <tcp_create_segment+0x22>
 8014206:	4b44      	ldr	r3, [pc, #272]	; (8014318 <tcp_create_segment+0x128>)
 8014208:	22a3      	movs	r2, #163	; 0xa3
 801420a:	4944      	ldr	r1, [pc, #272]	; (801431c <tcp_create_segment+0x12c>)
 801420c:	4844      	ldr	r0, [pc, #272]	; (8014320 <tcp_create_segment+0x130>)
 801420e:	f005 f93d 	bl	801948c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d105      	bne.n	8014224 <tcp_create_segment+0x34>
 8014218:	4b3f      	ldr	r3, [pc, #252]	; (8014318 <tcp_create_segment+0x128>)
 801421a:	22a4      	movs	r2, #164	; 0xa4
 801421c:	4941      	ldr	r1, [pc, #260]	; (8014324 <tcp_create_segment+0x134>)
 801421e:	4840      	ldr	r0, [pc, #256]	; (8014320 <tcp_create_segment+0x130>)
 8014220:	f005 f934 	bl	801948c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014224:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014228:	009b      	lsls	r3, r3, #2
 801422a:	b2db      	uxtb	r3, r3
 801422c:	f003 0304 	and.w	r3, r3, #4
 8014230:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014232:	2003      	movs	r0, #3
 8014234:	f7fa fc94 	bl	800eb60 <memp_malloc>
 8014238:	6138      	str	r0, [r7, #16]
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d104      	bne.n	801424a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014240:	68b8      	ldr	r0, [r7, #8]
 8014242:	f7fb fba7 	bl	800f994 <pbuf_free>
    return NULL;
 8014246:	2300      	movs	r3, #0
 8014248:	e061      	b.n	801430e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801424a:	693b      	ldr	r3, [r7, #16]
 801424c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014250:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014252:	693b      	ldr	r3, [r7, #16]
 8014254:	2200      	movs	r2, #0
 8014256:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	68ba      	ldr	r2, [r7, #8]
 801425c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	891a      	ldrh	r2, [r3, #8]
 8014262:	7dfb      	ldrb	r3, [r7, #23]
 8014264:	b29b      	uxth	r3, r3
 8014266:	429a      	cmp	r2, r3
 8014268:	d205      	bcs.n	8014276 <tcp_create_segment+0x86>
 801426a:	4b2b      	ldr	r3, [pc, #172]	; (8014318 <tcp_create_segment+0x128>)
 801426c:	22b0      	movs	r2, #176	; 0xb0
 801426e:	492e      	ldr	r1, [pc, #184]	; (8014328 <tcp_create_segment+0x138>)
 8014270:	482b      	ldr	r0, [pc, #172]	; (8014320 <tcp_create_segment+0x130>)
 8014272:	f005 f90b 	bl	801948c <iprintf>
  seg->len = p->tot_len - optlen;
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	891a      	ldrh	r2, [r3, #8]
 801427a:	7dfb      	ldrb	r3, [r7, #23]
 801427c:	b29b      	uxth	r3, r3
 801427e:	1ad3      	subs	r3, r2, r3
 8014280:	b29a      	uxth	r2, r3
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014286:	2114      	movs	r1, #20
 8014288:	68b8      	ldr	r0, [r7, #8]
 801428a:	f7fb faed 	bl	800f868 <pbuf_add_header>
 801428e:	4603      	mov	r3, r0
 8014290:	2b00      	cmp	r3, #0
 8014292:	d004      	beq.n	801429e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014294:	6938      	ldr	r0, [r7, #16]
 8014296:	f7fd f800 	bl	801129a <tcp_seg_free>
    return NULL;
 801429a:	2300      	movs	r3, #0
 801429c:	e037      	b.n	801430e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801429e:	693b      	ldr	r3, [r7, #16]
 80142a0:	685b      	ldr	r3, [r3, #4]
 80142a2:	685a      	ldr	r2, [r3, #4]
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	8ada      	ldrh	r2, [r3, #22]
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	68dc      	ldr	r4, [r3, #12]
 80142b0:	4610      	mov	r0, r2
 80142b2:	f7f9 ff7d 	bl	800e1b0 <lwip_htons>
 80142b6:	4603      	mov	r3, r0
 80142b8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	8b1a      	ldrh	r2, [r3, #24]
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	68dc      	ldr	r4, [r3, #12]
 80142c2:	4610      	mov	r0, r2
 80142c4:	f7f9 ff74 	bl	800e1b0 <lwip_htons>
 80142c8:	4603      	mov	r3, r0
 80142ca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80142cc:	693b      	ldr	r3, [r7, #16]
 80142ce:	68dc      	ldr	r4, [r3, #12]
 80142d0:	6838      	ldr	r0, [r7, #0]
 80142d2:	f7f9 ff82 	bl	800e1da <lwip_htonl>
 80142d6:	4603      	mov	r3, r0
 80142d8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80142da:	7dfb      	ldrb	r3, [r7, #23]
 80142dc:	089b      	lsrs	r3, r3, #2
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	3305      	adds	r3, #5
 80142e4:	b29b      	uxth	r3, r3
 80142e6:	031b      	lsls	r3, r3, #12
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	79fb      	ldrb	r3, [r7, #7]
 80142ec:	b29b      	uxth	r3, r3
 80142ee:	4313      	orrs	r3, r2
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	693b      	ldr	r3, [r7, #16]
 80142f4:	68dc      	ldr	r4, [r3, #12]
 80142f6:	4610      	mov	r0, r2
 80142f8:	f7f9 ff5a 	bl	800e1b0 <lwip_htons>
 80142fc:	4603      	mov	r3, r0
 80142fe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014300:	693b      	ldr	r3, [r7, #16]
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	2200      	movs	r2, #0
 8014306:	749a      	strb	r2, [r3, #18]
 8014308:	2200      	movs	r2, #0
 801430a:	74da      	strb	r2, [r3, #19]
  return seg;
 801430c:	693b      	ldr	r3, [r7, #16]
}
 801430e:	4618      	mov	r0, r3
 8014310:	371c      	adds	r7, #28
 8014312:	46bd      	mov	sp, r7
 8014314:	bd90      	pop	{r4, r7, pc}
 8014316:	bf00      	nop
 8014318:	0801c3d4 	.word	0x0801c3d4
 801431c:	0801c408 	.word	0x0801c408
 8014320:	0801c428 	.word	0x0801c428
 8014324:	0801c450 	.word	0x0801c450
 8014328:	0801c474 	.word	0x0801c474

0801432c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b086      	sub	sp, #24
 8014330:	af00      	add	r7, sp, #0
 8014332:	607b      	str	r3, [r7, #4]
 8014334:	4603      	mov	r3, r0
 8014336:	73fb      	strb	r3, [r7, #15]
 8014338:	460b      	mov	r3, r1
 801433a:	81bb      	strh	r3, [r7, #12]
 801433c:	4613      	mov	r3, r2
 801433e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014340:	89bb      	ldrh	r3, [r7, #12]
 8014342:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d105      	bne.n	8014356 <tcp_pbuf_prealloc+0x2a>
 801434a:	4b30      	ldr	r3, [pc, #192]	; (801440c <tcp_pbuf_prealloc+0xe0>)
 801434c:	22e8      	movs	r2, #232	; 0xe8
 801434e:	4930      	ldr	r1, [pc, #192]	; (8014410 <tcp_pbuf_prealloc+0xe4>)
 8014350:	4830      	ldr	r0, [pc, #192]	; (8014414 <tcp_pbuf_prealloc+0xe8>)
 8014352:	f005 f89b 	bl	801948c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8014356:	6a3b      	ldr	r3, [r7, #32]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d105      	bne.n	8014368 <tcp_pbuf_prealloc+0x3c>
 801435c:	4b2b      	ldr	r3, [pc, #172]	; (801440c <tcp_pbuf_prealloc+0xe0>)
 801435e:	22e9      	movs	r2, #233	; 0xe9
 8014360:	492d      	ldr	r1, [pc, #180]	; (8014418 <tcp_pbuf_prealloc+0xec>)
 8014362:	482c      	ldr	r0, [pc, #176]	; (8014414 <tcp_pbuf_prealloc+0xe8>)
 8014364:	f005 f892 	bl	801948c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014368:	89ba      	ldrh	r2, [r7, #12]
 801436a:	897b      	ldrh	r3, [r7, #10]
 801436c:	429a      	cmp	r2, r3
 801436e:	d221      	bcs.n	80143b4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014374:	f003 0302 	and.w	r3, r3, #2
 8014378:	2b00      	cmp	r3, #0
 801437a:	d111      	bne.n	80143a0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801437c:	6a3b      	ldr	r3, [r7, #32]
 801437e:	8b5b      	ldrh	r3, [r3, #26]
 8014380:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014384:	2b00      	cmp	r3, #0
 8014386:	d115      	bne.n	80143b4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014388:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801438c:	2b00      	cmp	r3, #0
 801438e:	d007      	beq.n	80143a0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014390:	6a3b      	ldr	r3, [r7, #32]
 8014392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014394:	2b00      	cmp	r3, #0
 8014396:	d103      	bne.n	80143a0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014398:	6a3b      	ldr	r3, [r7, #32]
 801439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801439c:	2b00      	cmp	r3, #0
 801439e:	d009      	beq.n	80143b4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80143a0:	89bb      	ldrh	r3, [r7, #12]
 80143a2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80143a6:	f023 0203 	bic.w	r2, r3, #3
 80143aa:	897b      	ldrh	r3, [r7, #10]
 80143ac:	4293      	cmp	r3, r2
 80143ae:	bf28      	it	cs
 80143b0:	4613      	movcs	r3, r2
 80143b2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80143b4:	8af9      	ldrh	r1, [r7, #22]
 80143b6:	7bfb      	ldrb	r3, [r7, #15]
 80143b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143bc:	4618      	mov	r0, r3
 80143be:	f7fb f805 	bl	800f3cc <pbuf_alloc>
 80143c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d101      	bne.n	80143ce <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80143ca:	2300      	movs	r3, #0
 80143cc:	e019      	b.n	8014402 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d006      	beq.n	80143e4 <tcp_pbuf_prealloc+0xb8>
 80143d6:	4b0d      	ldr	r3, [pc, #52]	; (801440c <tcp_pbuf_prealloc+0xe0>)
 80143d8:	f240 120b 	movw	r2, #267	; 0x10b
 80143dc:	490f      	ldr	r1, [pc, #60]	; (801441c <tcp_pbuf_prealloc+0xf0>)
 80143de:	480d      	ldr	r0, [pc, #52]	; (8014414 <tcp_pbuf_prealloc+0xe8>)
 80143e0:	f005 f854 	bl	801948c <iprintf>
  *oversize = p->len - length;
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	895a      	ldrh	r2, [r3, #10]
 80143e8:	89bb      	ldrh	r3, [r7, #12]
 80143ea:	1ad3      	subs	r3, r2, r3
 80143ec:	b29a      	uxth	r2, r3
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	89ba      	ldrh	r2, [r7, #12]
 80143f6:	811a      	strh	r2, [r3, #8]
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	891a      	ldrh	r2, [r3, #8]
 80143fc:	693b      	ldr	r3, [r7, #16]
 80143fe:	815a      	strh	r2, [r3, #10]
  return p;
 8014400:	693b      	ldr	r3, [r7, #16]
}
 8014402:	4618      	mov	r0, r3
 8014404:	3718      	adds	r7, #24
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	0801c3d4 	.word	0x0801c3d4
 8014410:	0801c48c 	.word	0x0801c48c
 8014414:	0801c428 	.word	0x0801c428
 8014418:	0801c4b0 	.word	0x0801c4b0
 801441c:	0801c4d0 	.word	0x0801c4d0

08014420 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	460b      	mov	r3, r1
 801442a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d106      	bne.n	8014440 <tcp_write_checks+0x20>
 8014432:	4b33      	ldr	r3, [pc, #204]	; (8014500 <tcp_write_checks+0xe0>)
 8014434:	f240 1233 	movw	r2, #307	; 0x133
 8014438:	4932      	ldr	r1, [pc, #200]	; (8014504 <tcp_write_checks+0xe4>)
 801443a:	4833      	ldr	r0, [pc, #204]	; (8014508 <tcp_write_checks+0xe8>)
 801443c:	f005 f826 	bl	801948c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	7d1b      	ldrb	r3, [r3, #20]
 8014444:	2b04      	cmp	r3, #4
 8014446:	d00e      	beq.n	8014466 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801444c:	2b07      	cmp	r3, #7
 801444e:	d00a      	beq.n	8014466 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014454:	2b02      	cmp	r3, #2
 8014456:	d006      	beq.n	8014466 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801445c:	2b03      	cmp	r3, #3
 801445e:	d002      	beq.n	8014466 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014460:	f06f 030a 	mvn.w	r3, #10
 8014464:	e048      	b.n	80144f8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8014466:	887b      	ldrh	r3, [r7, #2]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d101      	bne.n	8014470 <tcp_write_checks+0x50>
    return ERR_OK;
 801446c:	2300      	movs	r3, #0
 801446e:	e043      	b.n	80144f8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014476:	887a      	ldrh	r2, [r7, #2]
 8014478:	429a      	cmp	r2, r3
 801447a:	d909      	bls.n	8014490 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	8b5b      	ldrh	r3, [r3, #26]
 8014480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014484:	b29a      	uxth	r2, r3
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801448a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801448e:	e033      	b.n	80144f8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014496:	2b08      	cmp	r3, #8
 8014498:	d909      	bls.n	80144ae <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	8b5b      	ldrh	r3, [r3, #26]
 801449e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144a2:	b29a      	uxth	r2, r3
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80144a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144ac:	e024      	b.n	80144f8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d00f      	beq.n	80144d8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d11a      	bne.n	80144f6 <tcp_write_checks+0xd6>
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d116      	bne.n	80144f6 <tcp_write_checks+0xd6>
 80144c8:	4b0d      	ldr	r3, [pc, #52]	; (8014500 <tcp_write_checks+0xe0>)
 80144ca:	f240 1255 	movw	r2, #341	; 0x155
 80144ce:	490f      	ldr	r1, [pc, #60]	; (801450c <tcp_write_checks+0xec>)
 80144d0:	480d      	ldr	r0, [pc, #52]	; (8014508 <tcp_write_checks+0xe8>)
 80144d2:	f004 ffdb 	bl	801948c <iprintf>
 80144d6:	e00e      	b.n	80144f6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d103      	bne.n	80144e8 <tcp_write_checks+0xc8>
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d006      	beq.n	80144f6 <tcp_write_checks+0xd6>
 80144e8:	4b05      	ldr	r3, [pc, #20]	; (8014500 <tcp_write_checks+0xe0>)
 80144ea:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80144ee:	4908      	ldr	r1, [pc, #32]	; (8014510 <tcp_write_checks+0xf0>)
 80144f0:	4805      	ldr	r0, [pc, #20]	; (8014508 <tcp_write_checks+0xe8>)
 80144f2:	f004 ffcb 	bl	801948c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80144f6:	2300      	movs	r3, #0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	0801c3d4 	.word	0x0801c3d4
 8014504:	0801c4e4 	.word	0x0801c4e4
 8014508:	0801c428 	.word	0x0801c428
 801450c:	0801c504 	.word	0x0801c504
 8014510:	0801c540 	.word	0x0801c540

08014514 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014514:	b590      	push	{r4, r7, lr}
 8014516:	b09b      	sub	sp, #108	; 0x6c
 8014518:	af04      	add	r7, sp, #16
 801451a:	60f8      	str	r0, [r7, #12]
 801451c:	60b9      	str	r1, [r7, #8]
 801451e:	4611      	mov	r1, r2
 8014520:	461a      	mov	r2, r3
 8014522:	460b      	mov	r3, r1
 8014524:	80fb      	strh	r3, [r7, #6]
 8014526:	4613      	mov	r3, r2
 8014528:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801452a:	2300      	movs	r3, #0
 801452c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801452e:	2300      	movs	r3, #0
 8014530:	653b      	str	r3, [r7, #80]	; 0x50
 8014532:	2300      	movs	r3, #0
 8014534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014536:	2300      	movs	r3, #0
 8014538:	64bb      	str	r3, [r7, #72]	; 0x48
 801453a:	2300      	movs	r3, #0
 801453c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801453e:	2300      	movs	r3, #0
 8014540:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014544:	2300      	movs	r3, #0
 8014546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801454a:	2300      	movs	r3, #0
 801454c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801454e:	2300      	movs	r3, #0
 8014550:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014552:	2300      	movs	r3, #0
 8014554:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d109      	bne.n	8014570 <tcp_write+0x5c>
 801455c:	4ba4      	ldr	r3, [pc, #656]	; (80147f0 <tcp_write+0x2dc>)
 801455e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8014562:	49a4      	ldr	r1, [pc, #656]	; (80147f4 <tcp_write+0x2e0>)
 8014564:	48a4      	ldr	r0, [pc, #656]	; (80147f8 <tcp_write+0x2e4>)
 8014566:	f004 ff91 	bl	801948c <iprintf>
 801456a:	f06f 030f 	mvn.w	r3, #15
 801456e:	e32a      	b.n	8014bc6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014576:	085b      	lsrs	r3, r3, #1
 8014578:	b29a      	uxth	r2, r3
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801457e:	4293      	cmp	r3, r2
 8014580:	bf28      	it	cs
 8014582:	4613      	movcs	r3, r2
 8014584:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014588:	2b00      	cmp	r3, #0
 801458a:	d102      	bne.n	8014592 <tcp_write+0x7e>
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014590:	e000      	b.n	8014594 <tcp_write+0x80>
 8014592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014594:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d109      	bne.n	80145b0 <tcp_write+0x9c>
 801459c:	4b94      	ldr	r3, [pc, #592]	; (80147f0 <tcp_write+0x2dc>)
 801459e:	f240 12ad 	movw	r2, #429	; 0x1ad
 80145a2:	4996      	ldr	r1, [pc, #600]	; (80147fc <tcp_write+0x2e8>)
 80145a4:	4894      	ldr	r0, [pc, #592]	; (80147f8 <tcp_write+0x2e4>)
 80145a6:	f004 ff71 	bl	801948c <iprintf>
 80145aa:	f06f 030f 	mvn.w	r3, #15
 80145ae:	e30a      	b.n	8014bc6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80145b0:	88fb      	ldrh	r3, [r7, #6]
 80145b2:	4619      	mov	r1, r3
 80145b4:	68f8      	ldr	r0, [r7, #12]
 80145b6:	f7ff ff33 	bl	8014420 <tcp_write_checks>
 80145ba:	4603      	mov	r3, r0
 80145bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80145c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d002      	beq.n	80145ce <tcp_write+0xba>
    return err;
 80145c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80145cc:	e2fb      	b.n	8014bc6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80145d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80145d8:	2300      	movs	r3, #0
 80145da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	f000 80f6 	beq.w	80147d4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145ec:	653b      	str	r3, [r7, #80]	; 0x50
 80145ee:	e002      	b.n	80145f6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80145f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80145f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d1f8      	bne.n	80145f0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80145fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014600:	7a9b      	ldrb	r3, [r3, #10]
 8014602:	009b      	lsls	r3, r3, #2
 8014604:	b29b      	uxth	r3, r3
 8014606:	f003 0304 	and.w	r3, r3, #4
 801460a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801460c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801460e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014610:	891b      	ldrh	r3, [r3, #8]
 8014612:	4619      	mov	r1, r3
 8014614:	8c3b      	ldrh	r3, [r7, #32]
 8014616:	440b      	add	r3, r1
 8014618:	429a      	cmp	r2, r3
 801461a:	da06      	bge.n	801462a <tcp_write+0x116>
 801461c:	4b74      	ldr	r3, [pc, #464]	; (80147f0 <tcp_write+0x2dc>)
 801461e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014622:	4977      	ldr	r1, [pc, #476]	; (8014800 <tcp_write+0x2ec>)
 8014624:	4874      	ldr	r0, [pc, #464]	; (80147f8 <tcp_write+0x2e4>)
 8014626:	f004 ff31 	bl	801948c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801462a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801462c:	891a      	ldrh	r2, [r3, #8]
 801462e:	8c3b      	ldrh	r3, [r7, #32]
 8014630:	4413      	add	r3, r2
 8014632:	b29b      	uxth	r3, r3
 8014634:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014636:	1ad3      	subs	r3, r2, r3
 8014638:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014640:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014642:	8a7b      	ldrh	r3, [r7, #18]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d026      	beq.n	8014696 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014648:	8a7b      	ldrh	r3, [r7, #18]
 801464a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801464c:	429a      	cmp	r2, r3
 801464e:	d206      	bcs.n	801465e <tcp_write+0x14a>
 8014650:	4b67      	ldr	r3, [pc, #412]	; (80147f0 <tcp_write+0x2dc>)
 8014652:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8014656:	496b      	ldr	r1, [pc, #428]	; (8014804 <tcp_write+0x2f0>)
 8014658:	4867      	ldr	r0, [pc, #412]	; (80147f8 <tcp_write+0x2e4>)
 801465a:	f004 ff17 	bl	801948c <iprintf>
      seg = last_unsent;
 801465e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014660:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014662:	8a7b      	ldrh	r3, [r7, #18]
 8014664:	88fa      	ldrh	r2, [r7, #6]
 8014666:	4293      	cmp	r3, r2
 8014668:	bf28      	it	cs
 801466a:	4613      	movcs	r3, r2
 801466c:	b29b      	uxth	r3, r3
 801466e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014670:	4293      	cmp	r3, r2
 8014672:	bf28      	it	cs
 8014674:	4613      	movcs	r3, r2
 8014676:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014678:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801467c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801467e:	4413      	add	r3, r2
 8014680:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014684:	8a7a      	ldrh	r2, [r7, #18]
 8014686:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014688:	1ad3      	subs	r3, r2, r3
 801468a:	b29b      	uxth	r3, r3
 801468c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801468e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014690:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014692:	1ad3      	subs	r3, r2, r3
 8014694:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014696:	8a7b      	ldrh	r3, [r7, #18]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d00b      	beq.n	80146b4 <tcp_write+0x1a0>
 801469c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146a0:	88fb      	ldrh	r3, [r7, #6]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d006      	beq.n	80146b4 <tcp_write+0x1a0>
 80146a6:	4b52      	ldr	r3, [pc, #328]	; (80147f0 <tcp_write+0x2dc>)
 80146a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80146ac:	4956      	ldr	r1, [pc, #344]	; (8014808 <tcp_write+0x2f4>)
 80146ae:	4852      	ldr	r0, [pc, #328]	; (80147f8 <tcp_write+0x2e4>)
 80146b0:	f004 feec 	bl	801948c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80146b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146b8:	88fb      	ldrh	r3, [r7, #6]
 80146ba:	429a      	cmp	r2, r3
 80146bc:	f080 8167 	bcs.w	801498e <tcp_write+0x47a>
 80146c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	f000 8163 	beq.w	801498e <tcp_write+0x47a>
 80146c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146ca:	891b      	ldrh	r3, [r3, #8]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	f000 815e 	beq.w	801498e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80146d2:	88fa      	ldrh	r2, [r7, #6]
 80146d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146d8:	1ad2      	subs	r2, r2, r3
 80146da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80146dc:	4293      	cmp	r3, r2
 80146de:	bfa8      	it	ge
 80146e0:	4613      	movge	r3, r2
 80146e2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80146e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146e6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80146e8:	797b      	ldrb	r3, [r7, #5]
 80146ea:	f003 0301 	and.w	r3, r3, #1
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d027      	beq.n	8014742 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80146f2:	f107 0012 	add.w	r0, r7, #18
 80146f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80146f8:	8bf9      	ldrh	r1, [r7, #30]
 80146fa:	2301      	movs	r3, #1
 80146fc:	9302      	str	r3, [sp, #8]
 80146fe:	797b      	ldrb	r3, [r7, #5]
 8014700:	9301      	str	r3, [sp, #4]
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	9300      	str	r3, [sp, #0]
 8014706:	4603      	mov	r3, r0
 8014708:	2000      	movs	r0, #0
 801470a:	f7ff fe0f 	bl	801432c <tcp_pbuf_prealloc>
 801470e:	6578      	str	r0, [r7, #84]	; 0x54
 8014710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014712:	2b00      	cmp	r3, #0
 8014714:	f000 8225 	beq.w	8014b62 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801471a:	6858      	ldr	r0, [r3, #4]
 801471c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014720:	68ba      	ldr	r2, [r7, #8]
 8014722:	4413      	add	r3, r2
 8014724:	8bfa      	ldrh	r2, [r7, #30]
 8014726:	4619      	mov	r1, r3
 8014728:	f004 fe05 	bl	8019336 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801472c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801472e:	f7fb f9bf 	bl	800fab0 <pbuf_clen>
 8014732:	4603      	mov	r3, r0
 8014734:	461a      	mov	r2, r3
 8014736:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801473a:	4413      	add	r3, r2
 801473c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014740:	e041      	b.n	80147c6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	637b      	str	r3, [r7, #52]	; 0x34
 8014748:	e002      	b.n	8014750 <tcp_write+0x23c>
 801474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	637b      	str	r3, [r7, #52]	; 0x34
 8014750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d1f8      	bne.n	801474a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801475a:	7b1b      	ldrb	r3, [r3, #12]
 801475c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014760:	2b00      	cmp	r3, #0
 8014762:	d115      	bne.n	8014790 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801476a:	8952      	ldrh	r2, [r2, #10]
 801476c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801476e:	68ba      	ldr	r2, [r7, #8]
 8014770:	429a      	cmp	r2, r3
 8014772:	d10d      	bne.n	8014790 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014774:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014778:	2b00      	cmp	r3, #0
 801477a:	d006      	beq.n	801478a <tcp_write+0x276>
 801477c:	4b1c      	ldr	r3, [pc, #112]	; (80147f0 <tcp_write+0x2dc>)
 801477e:	f240 2231 	movw	r2, #561	; 0x231
 8014782:	4922      	ldr	r1, [pc, #136]	; (801480c <tcp_write+0x2f8>)
 8014784:	481c      	ldr	r0, [pc, #112]	; (80147f8 <tcp_write+0x2e4>)
 8014786:	f004 fe81 	bl	801948c <iprintf>
          extendlen = seglen;
 801478a:	8bfb      	ldrh	r3, [r7, #30]
 801478c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801478e:	e01a      	b.n	80147c6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014790:	8bfb      	ldrh	r3, [r7, #30]
 8014792:	2201      	movs	r2, #1
 8014794:	4619      	mov	r1, r3
 8014796:	2000      	movs	r0, #0
 8014798:	f7fa fe18 	bl	800f3cc <pbuf_alloc>
 801479c:	6578      	str	r0, [r7, #84]	; 0x54
 801479e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	f000 81e0 	beq.w	8014b66 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80147a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147aa:	68ba      	ldr	r2, [r7, #8]
 80147ac:	441a      	add	r2, r3
 80147ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147b0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80147b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80147b4:	f7fb f97c 	bl	800fab0 <pbuf_clen>
 80147b8:	4603      	mov	r3, r0
 80147ba:	461a      	mov	r2, r3
 80147bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80147c0:	4413      	add	r3, r2
 80147c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80147c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80147ca:	8bfb      	ldrh	r3, [r7, #30]
 80147cc:	4413      	add	r3, r2
 80147ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80147d2:	e0dc      	b.n	801498e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80147da:	2b00      	cmp	r3, #0
 80147dc:	f000 80d7 	beq.w	801498e <tcp_write+0x47a>
 80147e0:	4b03      	ldr	r3, [pc, #12]	; (80147f0 <tcp_write+0x2dc>)
 80147e2:	f240 224a 	movw	r2, #586	; 0x24a
 80147e6:	490a      	ldr	r1, [pc, #40]	; (8014810 <tcp_write+0x2fc>)
 80147e8:	4803      	ldr	r0, [pc, #12]	; (80147f8 <tcp_write+0x2e4>)
 80147ea:	f004 fe4f 	bl	801948c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80147ee:	e0ce      	b.n	801498e <tcp_write+0x47a>
 80147f0:	0801c3d4 	.word	0x0801c3d4
 80147f4:	0801c574 	.word	0x0801c574
 80147f8:	0801c428 	.word	0x0801c428
 80147fc:	0801c58c 	.word	0x0801c58c
 8014800:	0801c5c0 	.word	0x0801c5c0
 8014804:	0801c5d8 	.word	0x0801c5d8
 8014808:	0801c5f8 	.word	0x0801c5f8
 801480c:	0801c618 	.word	0x0801c618
 8014810:	0801c644 	.word	0x0801c644
    struct pbuf *p;
    u16_t left = len - pos;
 8014814:	88fa      	ldrh	r2, [r7, #6]
 8014816:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801481a:	1ad3      	subs	r3, r2, r3
 801481c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801481e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014822:	b29b      	uxth	r3, r3
 8014824:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014826:	1ad3      	subs	r3, r2, r3
 8014828:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801482a:	8b7a      	ldrh	r2, [r7, #26]
 801482c:	8bbb      	ldrh	r3, [r7, #28]
 801482e:	4293      	cmp	r3, r2
 8014830:	bf28      	it	cs
 8014832:	4613      	movcs	r3, r2
 8014834:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014836:	797b      	ldrb	r3, [r7, #5]
 8014838:	f003 0301 	and.w	r3, r3, #1
 801483c:	2b00      	cmp	r3, #0
 801483e:	d036      	beq.n	80148ae <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014840:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014844:	b29a      	uxth	r2, r3
 8014846:	8b3b      	ldrh	r3, [r7, #24]
 8014848:	4413      	add	r3, r2
 801484a:	b299      	uxth	r1, r3
 801484c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801484e:	2b00      	cmp	r3, #0
 8014850:	bf0c      	ite	eq
 8014852:	2301      	moveq	r3, #1
 8014854:	2300      	movne	r3, #0
 8014856:	b2db      	uxtb	r3, r3
 8014858:	f107 0012 	add.w	r0, r7, #18
 801485c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801485e:	9302      	str	r3, [sp, #8]
 8014860:	797b      	ldrb	r3, [r7, #5]
 8014862:	9301      	str	r3, [sp, #4]
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	9300      	str	r3, [sp, #0]
 8014868:	4603      	mov	r3, r0
 801486a:	2036      	movs	r0, #54	; 0x36
 801486c:	f7ff fd5e 	bl	801432c <tcp_pbuf_prealloc>
 8014870:	6338      	str	r0, [r7, #48]	; 0x30
 8014872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014874:	2b00      	cmp	r3, #0
 8014876:	f000 8178 	beq.w	8014b6a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801487c:	895b      	ldrh	r3, [r3, #10]
 801487e:	8b3a      	ldrh	r2, [r7, #24]
 8014880:	429a      	cmp	r2, r3
 8014882:	d906      	bls.n	8014892 <tcp_write+0x37e>
 8014884:	4b8c      	ldr	r3, [pc, #560]	; (8014ab8 <tcp_write+0x5a4>)
 8014886:	f240 2266 	movw	r2, #614	; 0x266
 801488a:	498c      	ldr	r1, [pc, #560]	; (8014abc <tcp_write+0x5a8>)
 801488c:	488c      	ldr	r0, [pc, #560]	; (8014ac0 <tcp_write+0x5ac>)
 801488e:	f004 fdfd 	bl	801948c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014894:	685a      	ldr	r2, [r3, #4]
 8014896:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801489a:	18d0      	adds	r0, r2, r3
 801489c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80148a0:	68ba      	ldr	r2, [r7, #8]
 80148a2:	4413      	add	r3, r2
 80148a4:	8b3a      	ldrh	r2, [r7, #24]
 80148a6:	4619      	mov	r1, r3
 80148a8:	f004 fd45 	bl	8019336 <memcpy>
 80148ac:	e02f      	b.n	801490e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80148ae:	8a7b      	ldrh	r3, [r7, #18]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d006      	beq.n	80148c2 <tcp_write+0x3ae>
 80148b4:	4b80      	ldr	r3, [pc, #512]	; (8014ab8 <tcp_write+0x5a4>)
 80148b6:	f240 2271 	movw	r2, #625	; 0x271
 80148ba:	4982      	ldr	r1, [pc, #520]	; (8014ac4 <tcp_write+0x5b0>)
 80148bc:	4880      	ldr	r0, [pc, #512]	; (8014ac0 <tcp_write+0x5ac>)
 80148be:	f004 fde5 	bl	801948c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80148c2:	8b3b      	ldrh	r3, [r7, #24]
 80148c4:	2201      	movs	r2, #1
 80148c6:	4619      	mov	r1, r3
 80148c8:	2036      	movs	r0, #54	; 0x36
 80148ca:	f7fa fd7f 	bl	800f3cc <pbuf_alloc>
 80148ce:	6178      	str	r0, [r7, #20]
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	f000 814b 	beq.w	8014b6e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80148d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80148dc:	68ba      	ldr	r2, [r7, #8]
 80148de:	441a      	add	r2, r3
 80148e0:	697b      	ldr	r3, [r7, #20]
 80148e2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80148e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80148ee:	4619      	mov	r1, r3
 80148f0:	2036      	movs	r0, #54	; 0x36
 80148f2:	f7fa fd6b 	bl	800f3cc <pbuf_alloc>
 80148f6:	6338      	str	r0, [r7, #48]	; 0x30
 80148f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d103      	bne.n	8014906 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80148fe:	6978      	ldr	r0, [r7, #20]
 8014900:	f7fb f848 	bl	800f994 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014904:	e136      	b.n	8014b74 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014906:	6979      	ldr	r1, [r7, #20]
 8014908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801490a:	f7fb f911 	bl	800fb30 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801490e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014910:	f7fb f8ce 	bl	800fab0 <pbuf_clen>
 8014914:	4603      	mov	r3, r0
 8014916:	461a      	mov	r2, r3
 8014918:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801491c:	4413      	add	r3, r2
 801491e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014922:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014926:	2b09      	cmp	r3, #9
 8014928:	d903      	bls.n	8014932 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801492a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801492c:	f7fb f832 	bl	800f994 <pbuf_free>
      goto memerr;
 8014930:	e120      	b.n	8014b74 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014936:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801493a:	441a      	add	r2, r3
 801493c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014940:	9300      	str	r3, [sp, #0]
 8014942:	4613      	mov	r3, r2
 8014944:	2200      	movs	r2, #0
 8014946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014948:	68f8      	ldr	r0, [r7, #12]
 801494a:	f7ff fc51 	bl	80141f0 <tcp_create_segment>
 801494e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014952:	2b00      	cmp	r3, #0
 8014954:	f000 810d 	beq.w	8014b72 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801495a:	2b00      	cmp	r3, #0
 801495c:	d102      	bne.n	8014964 <tcp_write+0x450>
      queue = seg;
 801495e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014960:	647b      	str	r3, [r7, #68]	; 0x44
 8014962:	e00c      	b.n	801497e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014966:	2b00      	cmp	r3, #0
 8014968:	d106      	bne.n	8014978 <tcp_write+0x464>
 801496a:	4b53      	ldr	r3, [pc, #332]	; (8014ab8 <tcp_write+0x5a4>)
 801496c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014970:	4955      	ldr	r1, [pc, #340]	; (8014ac8 <tcp_write+0x5b4>)
 8014972:	4853      	ldr	r0, [pc, #332]	; (8014ac0 <tcp_write+0x5ac>)
 8014974:	f004 fd8a 	bl	801948c <iprintf>
      prev_seg->next = seg;
 8014978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801497a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801497c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014980:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014982:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014986:	8b3b      	ldrh	r3, [r7, #24]
 8014988:	4413      	add	r3, r2
 801498a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801498e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014992:	88fb      	ldrh	r3, [r7, #6]
 8014994:	429a      	cmp	r2, r3
 8014996:	f4ff af3d 	bcc.w	8014814 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801499a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801499c:	2b00      	cmp	r3, #0
 801499e:	d02c      	beq.n	80149fa <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80149a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149a6:	e01e      	b.n	80149e6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80149a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149aa:	891a      	ldrh	r2, [r3, #8]
 80149ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149ae:	4413      	add	r3, r2
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80149b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d110      	bne.n	80149e0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80149be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c0:	685b      	ldr	r3, [r3, #4]
 80149c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149c4:	8952      	ldrh	r2, [r2, #10]
 80149c6:	4413      	add	r3, r2
 80149c8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80149ca:	68b9      	ldr	r1, [r7, #8]
 80149cc:	4618      	mov	r0, r3
 80149ce:	f004 fcb2 	bl	8019336 <memcpy>
        p->len += oversize_used;
 80149d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d4:	895a      	ldrh	r2, [r3, #10]
 80149d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149d8:	4413      	add	r3, r2
 80149da:	b29a      	uxth	r2, r3
 80149dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149de:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80149e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d1dd      	bne.n	80149a8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80149ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149ee:	891a      	ldrh	r2, [r3, #8]
 80149f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149f2:	4413      	add	r3, r2
 80149f4:	b29a      	uxth	r2, r3
 80149f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149f8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80149fa:	8a7a      	ldrh	r2, [r7, #18]
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d018      	beq.n	8014a3a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d106      	bne.n	8014a1c <tcp_write+0x508>
 8014a0e:	4b2a      	ldr	r3, [pc, #168]	; (8014ab8 <tcp_write+0x5a4>)
 8014a10:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8014a14:	492d      	ldr	r1, [pc, #180]	; (8014acc <tcp_write+0x5b8>)
 8014a16:	482a      	ldr	r0, [pc, #168]	; (8014ac0 <tcp_write+0x5ac>)
 8014a18:	f004 fd38 	bl	801948c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a1e:	685b      	ldr	r3, [r3, #4]
 8014a20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7fb f884 	bl	800fb30 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a2a:	891a      	ldrh	r2, [r3, #8]
 8014a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a2e:	891b      	ldrh	r3, [r3, #8]
 8014a30:	4413      	add	r3, r2
 8014a32:	b29a      	uxth	r2, r3
 8014a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a36:	811a      	strh	r2, [r3, #8]
 8014a38:	e037      	b.n	8014aaa <tcp_write+0x596>
  } else if (extendlen > 0) {
 8014a3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d034      	beq.n	8014aaa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d003      	beq.n	8014a4e <tcp_write+0x53a>
 8014a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d106      	bne.n	8014a5c <tcp_write+0x548>
 8014a4e:	4b1a      	ldr	r3, [pc, #104]	; (8014ab8 <tcp_write+0x5a4>)
 8014a50:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014a54:	491e      	ldr	r1, [pc, #120]	; (8014ad0 <tcp_write+0x5bc>)
 8014a56:	481a      	ldr	r0, [pc, #104]	; (8014ac0 <tcp_write+0x5ac>)
 8014a58:	f004 fd18 	bl	801948c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a5e:	685b      	ldr	r3, [r3, #4]
 8014a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8014a62:	e009      	b.n	8014a78 <tcp_write+0x564>
      p->tot_len += extendlen;
 8014a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a66:	891a      	ldrh	r2, [r3, #8]
 8014a68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014a6a:	4413      	add	r3, r2
 8014a6c:	b29a      	uxth	r2, r3
 8014a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a70:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8014a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d1f1      	bne.n	8014a64 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a82:	891a      	ldrh	r2, [r3, #8]
 8014a84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014a86:	4413      	add	r3, r2
 8014a88:	b29a      	uxth	r2, r3
 8014a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a90:	895a      	ldrh	r2, [r3, #10]
 8014a92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014a94:	4413      	add	r3, r2
 8014a96:	b29a      	uxth	r2, r3
 8014a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a9e:	891a      	ldrh	r2, [r3, #8]
 8014aa0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014aa2:	4413      	add	r3, r2
 8014aa4:	b29a      	uxth	r2, r3
 8014aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014aa8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8014aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d111      	bne.n	8014ad4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014ab4:	66da      	str	r2, [r3, #108]	; 0x6c
 8014ab6:	e010      	b.n	8014ada <tcp_write+0x5c6>
 8014ab8:	0801c3d4 	.word	0x0801c3d4
 8014abc:	0801c674 	.word	0x0801c674
 8014ac0:	0801c428 	.word	0x0801c428
 8014ac4:	0801c6b4 	.word	0x0801c6b4
 8014ac8:	0801c6c4 	.word	0x0801c6c4
 8014acc:	0801c6d8 	.word	0x0801c6d8
 8014ad0:	0801c710 	.word	0x0801c710
  } else {
    last_unsent->next = queue;
 8014ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014ad8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014ade:	88fb      	ldrh	r3, [r7, #6]
 8014ae0:	441a      	add	r2, r3
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014aec:	88fb      	ldrh	r3, [r7, #6]
 8014aee:	1ad3      	subs	r3, r2, r3
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014afe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d00e      	beq.n	8014b2a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d10a      	bne.n	8014b2a <tcp_write+0x616>
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d106      	bne.n	8014b2a <tcp_write+0x616>
 8014b1c:	4b2c      	ldr	r3, [pc, #176]	; (8014bd0 <tcp_write+0x6bc>)
 8014b1e:	f240 3212 	movw	r2, #786	; 0x312
 8014b22:	492c      	ldr	r1, [pc, #176]	; (8014bd4 <tcp_write+0x6c0>)
 8014b24:	482c      	ldr	r0, [pc, #176]	; (8014bd8 <tcp_write+0x6c4>)
 8014b26:	f004 fcb1 	bl	801948c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8014b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d016      	beq.n	8014b5e <tcp_write+0x64a>
 8014b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d012      	beq.n	8014b5e <tcp_write+0x64a>
 8014b38:	797b      	ldrb	r3, [r7, #5]
 8014b3a:	f003 0302 	and.w	r3, r3, #2
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d10d      	bne.n	8014b5e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b44:	68db      	ldr	r3, [r3, #12]
 8014b46:	899b      	ldrh	r3, [r3, #12]
 8014b48:	b29c      	uxth	r4, r3
 8014b4a:	2008      	movs	r0, #8
 8014b4c:	f7f9 fb30 	bl	800e1b0 <lwip_htons>
 8014b50:	4603      	mov	r3, r0
 8014b52:	461a      	mov	r2, r3
 8014b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b56:	68db      	ldr	r3, [r3, #12]
 8014b58:	4322      	orrs	r2, r4
 8014b5a:	b292      	uxth	r2, r2
 8014b5c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	e031      	b.n	8014bc6 <tcp_write+0x6b2>
          goto memerr;
 8014b62:	bf00      	nop
 8014b64:	e006      	b.n	8014b74 <tcp_write+0x660>
            goto memerr;
 8014b66:	bf00      	nop
 8014b68:	e004      	b.n	8014b74 <tcp_write+0x660>
        goto memerr;
 8014b6a:	bf00      	nop
 8014b6c:	e002      	b.n	8014b74 <tcp_write+0x660>
        goto memerr;
 8014b6e:	bf00      	nop
 8014b70:	e000      	b.n	8014b74 <tcp_write+0x660>
      goto memerr;
 8014b72:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	8b5b      	ldrh	r3, [r3, #26]
 8014b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d002      	beq.n	8014b8e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8014b88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014b8a:	f7fa ff03 	bl	800f994 <pbuf_free>
  }
  if (queue != NULL) {
 8014b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d002      	beq.n	8014b9a <tcp_write+0x686>
    tcp_segs_free(queue);
 8014b94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014b96:	f7fc fb6b 	bl	8011270 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d00e      	beq.n	8014bc2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d10a      	bne.n	8014bc2 <tcp_write+0x6ae>
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d106      	bne.n	8014bc2 <tcp_write+0x6ae>
 8014bb4:	4b06      	ldr	r3, [pc, #24]	; (8014bd0 <tcp_write+0x6bc>)
 8014bb6:	f240 3227 	movw	r2, #807	; 0x327
 8014bba:	4906      	ldr	r1, [pc, #24]	; (8014bd4 <tcp_write+0x6c0>)
 8014bbc:	4806      	ldr	r0, [pc, #24]	; (8014bd8 <tcp_write+0x6c4>)
 8014bbe:	f004 fc65 	bl	801948c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	375c      	adds	r7, #92	; 0x5c
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bd90      	pop	{r4, r7, pc}
 8014bce:	bf00      	nop
 8014bd0:	0801c3d4 	.word	0x0801c3d4
 8014bd4:	0801c748 	.word	0x0801c748
 8014bd8:	0801c428 	.word	0x0801c428

08014bdc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014bdc:	b590      	push	{r4, r7, lr}
 8014bde:	b08b      	sub	sp, #44	; 0x2c
 8014be0:	af02      	add	r7, sp, #8
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	460b      	mov	r3, r1
 8014be6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014be8:	2300      	movs	r3, #0
 8014bea:	61fb      	str	r3, [r7, #28]
 8014bec:	2300      	movs	r3, #0
 8014bee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d106      	bne.n	8014c08 <tcp_split_unsent_seg+0x2c>
 8014bfa:	4b95      	ldr	r3, [pc, #596]	; (8014e50 <tcp_split_unsent_seg+0x274>)
 8014bfc:	f240 324b 	movw	r2, #843	; 0x34b
 8014c00:	4994      	ldr	r1, [pc, #592]	; (8014e54 <tcp_split_unsent_seg+0x278>)
 8014c02:	4895      	ldr	r0, [pc, #596]	; (8014e58 <tcp_split_unsent_seg+0x27c>)
 8014c04:	f004 fc42 	bl	801948c <iprintf>

  useg = pcb->unsent;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c0c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d102      	bne.n	8014c1a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c18:	e116      	b.n	8014e48 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014c1a:	887b      	ldrh	r3, [r7, #2]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d109      	bne.n	8014c34 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014c20:	4b8b      	ldr	r3, [pc, #556]	; (8014e50 <tcp_split_unsent_seg+0x274>)
 8014c22:	f240 3253 	movw	r2, #851	; 0x353
 8014c26:	498d      	ldr	r1, [pc, #564]	; (8014e5c <tcp_split_unsent_seg+0x280>)
 8014c28:	488b      	ldr	r0, [pc, #556]	; (8014e58 <tcp_split_unsent_seg+0x27c>)
 8014c2a:	f004 fc2f 	bl	801948c <iprintf>
    return ERR_VAL;
 8014c2e:	f06f 0305 	mvn.w	r3, #5
 8014c32:	e109      	b.n	8014e48 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	891b      	ldrh	r3, [r3, #8]
 8014c38:	887a      	ldrh	r2, [r7, #2]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	d301      	bcc.n	8014c42 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	e102      	b.n	8014e48 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c46:	887a      	ldrh	r2, [r7, #2]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d906      	bls.n	8014c5a <tcp_split_unsent_seg+0x7e>
 8014c4c:	4b80      	ldr	r3, [pc, #512]	; (8014e50 <tcp_split_unsent_seg+0x274>)
 8014c4e:	f240 325b 	movw	r2, #859	; 0x35b
 8014c52:	4983      	ldr	r1, [pc, #524]	; (8014e60 <tcp_split_unsent_seg+0x284>)
 8014c54:	4880      	ldr	r0, [pc, #512]	; (8014e58 <tcp_split_unsent_seg+0x27c>)
 8014c56:	f004 fc19 	bl	801948c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	891b      	ldrh	r3, [r3, #8]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d106      	bne.n	8014c70 <tcp_split_unsent_seg+0x94>
 8014c62:	4b7b      	ldr	r3, [pc, #492]	; (8014e50 <tcp_split_unsent_seg+0x274>)
 8014c64:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014c68:	497e      	ldr	r1, [pc, #504]	; (8014e64 <tcp_split_unsent_seg+0x288>)
 8014c6a:	487b      	ldr	r0, [pc, #492]	; (8014e58 <tcp_split_unsent_seg+0x27c>)
 8014c6c:	f004 fc0e 	bl	801948c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	7a9b      	ldrb	r3, [r3, #10]
 8014c74:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014c76:	7bfb      	ldrb	r3, [r7, #15]
 8014c78:	009b      	lsls	r3, r3, #2
 8014c7a:	b2db      	uxtb	r3, r3
 8014c7c:	f003 0304 	and.w	r3, r3, #4
 8014c80:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014c82:	697b      	ldr	r3, [r7, #20]
 8014c84:	891a      	ldrh	r2, [r3, #8]
 8014c86:	887b      	ldrh	r3, [r7, #2]
 8014c88:	1ad3      	subs	r3, r2, r3
 8014c8a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014c8c:	7bbb      	ldrb	r3, [r7, #14]
 8014c8e:	b29a      	uxth	r2, r3
 8014c90:	89bb      	ldrh	r3, [r7, #12]
 8014c92:	4413      	add	r3, r2
 8014c94:	b29b      	uxth	r3, r3
 8014c96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	2036      	movs	r0, #54	; 0x36
 8014c9e:	f7fa fb95 	bl	800f3cc <pbuf_alloc>
 8014ca2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	f000 80b7 	beq.w	8014e1a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	891a      	ldrh	r2, [r3, #8]
 8014cb2:	697b      	ldr	r3, [r7, #20]
 8014cb4:	891b      	ldrh	r3, [r3, #8]
 8014cb6:	1ad3      	subs	r3, r2, r3
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	887b      	ldrh	r3, [r7, #2]
 8014cbc:	4413      	add	r3, r2
 8014cbe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	6858      	ldr	r0, [r3, #4]
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	685a      	ldr	r2, [r3, #4]
 8014cc8:	7bbb      	ldrb	r3, [r7, #14]
 8014cca:	18d1      	adds	r1, r2, r3
 8014ccc:	897b      	ldrh	r3, [r7, #10]
 8014cce:	89ba      	ldrh	r2, [r7, #12]
 8014cd0:	f7fb f856 	bl	800fd80 <pbuf_copy_partial>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	89bb      	ldrh	r3, [r7, #12]
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	f040 809f 	bne.w	8014e1e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014ce0:	697b      	ldr	r3, [r7, #20]
 8014ce2:	68db      	ldr	r3, [r3, #12]
 8014ce4:	899b      	ldrh	r3, [r3, #12]
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f7f9 fa61 	bl	800e1b0 <lwip_htons>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	b2db      	uxtb	r3, r3
 8014cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014cf6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014cfc:	7efb      	ldrb	r3, [r7, #27]
 8014cfe:	f003 0308 	and.w	r3, r3, #8
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d007      	beq.n	8014d16 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014d06:	7efb      	ldrb	r3, [r7, #27]
 8014d08:	f023 0308 	bic.w	r3, r3, #8
 8014d0c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014d0e:	7ebb      	ldrb	r3, [r7, #26]
 8014d10:	f043 0308 	orr.w	r3, r3, #8
 8014d14:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014d16:	7efb      	ldrb	r3, [r7, #27]
 8014d18:	f003 0301 	and.w	r3, r3, #1
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d007      	beq.n	8014d30 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014d20:	7efb      	ldrb	r3, [r7, #27]
 8014d22:	f023 0301 	bic.w	r3, r3, #1
 8014d26:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014d28:	7ebb      	ldrb	r3, [r7, #26]
 8014d2a:	f043 0301 	orr.w	r3, r3, #1
 8014d2e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	68db      	ldr	r3, [r3, #12]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7f9 fa4f 	bl	800e1da <lwip_htonl>
 8014d3c:	4602      	mov	r2, r0
 8014d3e:	887b      	ldrh	r3, [r7, #2]
 8014d40:	18d1      	adds	r1, r2, r3
 8014d42:	7eba      	ldrb	r2, [r7, #26]
 8014d44:	7bfb      	ldrb	r3, [r7, #15]
 8014d46:	9300      	str	r3, [sp, #0]
 8014d48:	460b      	mov	r3, r1
 8014d4a:	6939      	ldr	r1, [r7, #16]
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f7ff fa4f 	bl	80141f0 <tcp_create_segment>
 8014d52:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014d54:	69fb      	ldr	r3, [r7, #28]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d063      	beq.n	8014e22 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7fa fea6 	bl	800fab0 <pbuf_clen>
 8014d64:	4603      	mov	r3, r0
 8014d66:	461a      	mov	r2, r3
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d6e:	1a9b      	subs	r3, r3, r2
 8014d70:	b29a      	uxth	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	6858      	ldr	r0, [r3, #4]
 8014d7c:	697b      	ldr	r3, [r7, #20]
 8014d7e:	685b      	ldr	r3, [r3, #4]
 8014d80:	891a      	ldrh	r2, [r3, #8]
 8014d82:	89bb      	ldrh	r3, [r7, #12]
 8014d84:	1ad3      	subs	r3, r2, r3
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	4619      	mov	r1, r3
 8014d8a:	f7fa fc7d 	bl	800f688 <pbuf_realloc>
  useg->len -= remainder;
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	891a      	ldrh	r2, [r3, #8]
 8014d92:	89bb      	ldrh	r3, [r7, #12]
 8014d94:	1ad3      	subs	r3, r2, r3
 8014d96:	b29a      	uxth	r2, r3
 8014d98:	697b      	ldr	r3, [r7, #20]
 8014d9a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	68db      	ldr	r3, [r3, #12]
 8014da0:	899b      	ldrh	r3, [r3, #12]
 8014da2:	b29c      	uxth	r4, r3
 8014da4:	7efb      	ldrb	r3, [r7, #27]
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	4618      	mov	r0, r3
 8014daa:	f7f9 fa01 	bl	800e1b0 <lwip_htons>
 8014dae:	4603      	mov	r3, r0
 8014db0:	461a      	mov	r2, r3
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	4322      	orrs	r2, r4
 8014db8:	b292      	uxth	r2, r2
 8014dba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	685b      	ldr	r3, [r3, #4]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7fa fe75 	bl	800fab0 <pbuf_clen>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	461a      	mov	r2, r3
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014dd0:	4413      	add	r3, r2
 8014dd2:	b29a      	uxth	r2, r3
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	685b      	ldr	r3, [r3, #4]
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7fa fe66 	bl	800fab0 <pbuf_clen>
 8014de4:	4603      	mov	r3, r0
 8014de6:	461a      	mov	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014dee:	4413      	add	r3, r2
 8014df0:	b29a      	uxth	r2, r3
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	69fa      	ldr	r2, [r7, #28]
 8014e04:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d103      	bne.n	8014e16 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014e16:	2300      	movs	r3, #0
 8014e18:	e016      	b.n	8014e48 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014e1a:	bf00      	nop
 8014e1c:	e002      	b.n	8014e24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014e1e:	bf00      	nop
 8014e20:	e000      	b.n	8014e24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014e22:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014e24:	69fb      	ldr	r3, [r7, #28]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d006      	beq.n	8014e38 <tcp_split_unsent_seg+0x25c>
 8014e2a:	4b09      	ldr	r3, [pc, #36]	; (8014e50 <tcp_split_unsent_seg+0x274>)
 8014e2c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014e30:	490d      	ldr	r1, [pc, #52]	; (8014e68 <tcp_split_unsent_seg+0x28c>)
 8014e32:	4809      	ldr	r0, [pc, #36]	; (8014e58 <tcp_split_unsent_seg+0x27c>)
 8014e34:	f004 fb2a 	bl	801948c <iprintf>
  if (p != NULL) {
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d002      	beq.n	8014e44 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014e3e:	6938      	ldr	r0, [r7, #16]
 8014e40:	f7fa fda8 	bl	800f994 <pbuf_free>
  }

  return ERR_MEM;
 8014e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3724      	adds	r7, #36	; 0x24
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd90      	pop	{r4, r7, pc}
 8014e50:	0801c3d4 	.word	0x0801c3d4
 8014e54:	0801c768 	.word	0x0801c768
 8014e58:	0801c428 	.word	0x0801c428
 8014e5c:	0801c78c 	.word	0x0801c78c
 8014e60:	0801c7b0 	.word	0x0801c7b0
 8014e64:	0801c7c0 	.word	0x0801c7c0
 8014e68:	0801c7d0 	.word	0x0801c7d0

08014e6c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014e6c:	b590      	push	{r4, r7, lr}
 8014e6e:	b085      	sub	sp, #20
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d106      	bne.n	8014e88 <tcp_send_fin+0x1c>
 8014e7a:	4b21      	ldr	r3, [pc, #132]	; (8014f00 <tcp_send_fin+0x94>)
 8014e7c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014e80:	4920      	ldr	r1, [pc, #128]	; (8014f04 <tcp_send_fin+0x98>)
 8014e82:	4821      	ldr	r0, [pc, #132]	; (8014f08 <tcp_send_fin+0x9c>)
 8014e84:	f004 fb02 	bl	801948c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d02e      	beq.n	8014eee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e94:	60fb      	str	r3, [r7, #12]
 8014e96:	e002      	b.n	8014e9e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d1f8      	bne.n	8014e98 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	68db      	ldr	r3, [r3, #12]
 8014eaa:	899b      	ldrh	r3, [r3, #12]
 8014eac:	b29b      	uxth	r3, r3
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7f9 f97e 	bl	800e1b0 <lwip_htons>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	b2db      	uxtb	r3, r3
 8014eb8:	f003 0307 	and.w	r3, r3, #7
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d116      	bne.n	8014eee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	899b      	ldrh	r3, [r3, #12]
 8014ec6:	b29c      	uxth	r4, r3
 8014ec8:	2001      	movs	r0, #1
 8014eca:	f7f9 f971 	bl	800e1b0 <lwip_htons>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	68db      	ldr	r3, [r3, #12]
 8014ed6:	4322      	orrs	r2, r4
 8014ed8:	b292      	uxth	r2, r2
 8014eda:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	8b5b      	ldrh	r3, [r3, #26]
 8014ee0:	f043 0320 	orr.w	r3, r3, #32
 8014ee4:	b29a      	uxth	r2, r3
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014eea:	2300      	movs	r3, #0
 8014eec:	e004      	b.n	8014ef8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014eee:	2101      	movs	r1, #1
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f000 f80b 	bl	8014f0c <tcp_enqueue_flags>
 8014ef6:	4603      	mov	r3, r0
}
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3714      	adds	r7, #20
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd90      	pop	{r4, r7, pc}
 8014f00:	0801c3d4 	.word	0x0801c3d4
 8014f04:	0801c7dc 	.word	0x0801c7dc
 8014f08:	0801c428 	.word	0x0801c428

08014f0c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b08a      	sub	sp, #40	; 0x28
 8014f10:	af02      	add	r7, sp, #8
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	460b      	mov	r3, r1
 8014f16:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014f18:	2300      	movs	r3, #0
 8014f1a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014f20:	78fb      	ldrb	r3, [r7, #3]
 8014f22:	f003 0303 	and.w	r3, r3, #3
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d106      	bne.n	8014f38 <tcp_enqueue_flags+0x2c>
 8014f2a:	4b67      	ldr	r3, [pc, #412]	; (80150c8 <tcp_enqueue_flags+0x1bc>)
 8014f2c:	f240 4211 	movw	r2, #1041	; 0x411
 8014f30:	4966      	ldr	r1, [pc, #408]	; (80150cc <tcp_enqueue_flags+0x1c0>)
 8014f32:	4867      	ldr	r0, [pc, #412]	; (80150d0 <tcp_enqueue_flags+0x1c4>)
 8014f34:	f004 faaa 	bl	801948c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d106      	bne.n	8014f4c <tcp_enqueue_flags+0x40>
 8014f3e:	4b62      	ldr	r3, [pc, #392]	; (80150c8 <tcp_enqueue_flags+0x1bc>)
 8014f40:	f240 4213 	movw	r2, #1043	; 0x413
 8014f44:	4963      	ldr	r1, [pc, #396]	; (80150d4 <tcp_enqueue_flags+0x1c8>)
 8014f46:	4862      	ldr	r0, [pc, #392]	; (80150d0 <tcp_enqueue_flags+0x1c4>)
 8014f48:	f004 faa0 	bl	801948c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014f4c:	78fb      	ldrb	r3, [r7, #3]
 8014f4e:	f003 0302 	and.w	r3, r3, #2
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d001      	beq.n	8014f5a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014f56:	2301      	movs	r3, #1
 8014f58:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014f5a:	7ffb      	ldrb	r3, [r7, #31]
 8014f5c:	009b      	lsls	r3, r3, #2
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	f003 0304 	and.w	r3, r3, #4
 8014f64:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014f66:	7dfb      	ldrb	r3, [r7, #23]
 8014f68:	b29b      	uxth	r3, r3
 8014f6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f6e:	4619      	mov	r1, r3
 8014f70:	2036      	movs	r0, #54	; 0x36
 8014f72:	f7fa fa2b 	bl	800f3cc <pbuf_alloc>
 8014f76:	6138      	str	r0, [r7, #16]
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d109      	bne.n	8014f92 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	8b5b      	ldrh	r3, [r3, #26]
 8014f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f86:	b29a      	uxth	r2, r3
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f90:	e095      	b.n	80150be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	895a      	ldrh	r2, [r3, #10]
 8014f96:	7dfb      	ldrb	r3, [r7, #23]
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d206      	bcs.n	8014fac <tcp_enqueue_flags+0xa0>
 8014f9e:	4b4a      	ldr	r3, [pc, #296]	; (80150c8 <tcp_enqueue_flags+0x1bc>)
 8014fa0:	f240 4239 	movw	r2, #1081	; 0x439
 8014fa4:	494c      	ldr	r1, [pc, #304]	; (80150d8 <tcp_enqueue_flags+0x1cc>)
 8014fa6:	484a      	ldr	r0, [pc, #296]	; (80150d0 <tcp_enqueue_flags+0x1c4>)
 8014fa8:	f004 fa70 	bl	801948c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014fb0:	78fa      	ldrb	r2, [r7, #3]
 8014fb2:	7ffb      	ldrb	r3, [r7, #31]
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	460b      	mov	r3, r1
 8014fb8:	6939      	ldr	r1, [r7, #16]
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f7ff f918 	bl	80141f0 <tcp_create_segment>
 8014fc0:	60f8      	str	r0, [r7, #12]
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d109      	bne.n	8014fdc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	8b5b      	ldrh	r3, [r3, #26]
 8014fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fd0:	b29a      	uxth	r2, r3
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fda:	e070      	b.n	80150be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	f003 0303 	and.w	r3, r3, #3
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d006      	beq.n	8014ff6 <tcp_enqueue_flags+0xea>
 8014fe8:	4b37      	ldr	r3, [pc, #220]	; (80150c8 <tcp_enqueue_flags+0x1bc>)
 8014fea:	f240 4242 	movw	r2, #1090	; 0x442
 8014fee:	493b      	ldr	r1, [pc, #236]	; (80150dc <tcp_enqueue_flags+0x1d0>)
 8014ff0:	4837      	ldr	r0, [pc, #220]	; (80150d0 <tcp_enqueue_flags+0x1c4>)
 8014ff2:	f004 fa4b 	bl	801948c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	891b      	ldrh	r3, [r3, #8]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d006      	beq.n	801500c <tcp_enqueue_flags+0x100>
 8014ffe:	4b32      	ldr	r3, [pc, #200]	; (80150c8 <tcp_enqueue_flags+0x1bc>)
 8015000:	f240 4243 	movw	r2, #1091	; 0x443
 8015004:	4936      	ldr	r1, [pc, #216]	; (80150e0 <tcp_enqueue_flags+0x1d4>)
 8015006:	4832      	ldr	r0, [pc, #200]	; (80150d0 <tcp_enqueue_flags+0x1c4>)
 8015008:	f004 fa40 	bl	801948c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015010:	2b00      	cmp	r3, #0
 8015012:	d103      	bne.n	801501c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	68fa      	ldr	r2, [r7, #12]
 8015018:	66da      	str	r2, [r3, #108]	; 0x6c
 801501a:	e00d      	b.n	8015038 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015020:	61bb      	str	r3, [r7, #24]
 8015022:	e002      	b.n	801502a <tcp_enqueue_flags+0x11e>
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	61bb      	str	r3, [r7, #24]
 801502a:	69bb      	ldr	r3, [r7, #24]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d1f8      	bne.n	8015024 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015032:	69bb      	ldr	r3, [r7, #24]
 8015034:	68fa      	ldr	r2, [r7, #12]
 8015036:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2200      	movs	r2, #0
 801503c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015040:	78fb      	ldrb	r3, [r7, #3]
 8015042:	f003 0302 	and.w	r3, r3, #2
 8015046:	2b00      	cmp	r3, #0
 8015048:	d104      	bne.n	8015054 <tcp_enqueue_flags+0x148>
 801504a:	78fb      	ldrb	r3, [r7, #3]
 801504c:	f003 0301 	and.w	r3, r3, #1
 8015050:	2b00      	cmp	r3, #0
 8015052:	d004      	beq.n	801505e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015058:	1c5a      	adds	r2, r3, #1
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801505e:	78fb      	ldrb	r3, [r7, #3]
 8015060:	f003 0301 	and.w	r3, r3, #1
 8015064:	2b00      	cmp	r3, #0
 8015066:	d006      	beq.n	8015076 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	8b5b      	ldrh	r3, [r3, #26]
 801506c:	f043 0320 	orr.w	r3, r3, #32
 8015070:	b29a      	uxth	r2, r3
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	685b      	ldr	r3, [r3, #4]
 801507a:	4618      	mov	r0, r3
 801507c:	f7fa fd18 	bl	800fab0 <pbuf_clen>
 8015080:	4603      	mov	r3, r0
 8015082:	461a      	mov	r2, r3
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801508a:	4413      	add	r3, r2
 801508c:	b29a      	uxth	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801509a:	2b00      	cmp	r3, #0
 801509c:	d00e      	beq.n	80150bc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d10a      	bne.n	80150bc <tcp_enqueue_flags+0x1b0>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d106      	bne.n	80150bc <tcp_enqueue_flags+0x1b0>
 80150ae:	4b06      	ldr	r3, [pc, #24]	; (80150c8 <tcp_enqueue_flags+0x1bc>)
 80150b0:	f240 4265 	movw	r2, #1125	; 0x465
 80150b4:	490b      	ldr	r1, [pc, #44]	; (80150e4 <tcp_enqueue_flags+0x1d8>)
 80150b6:	4806      	ldr	r0, [pc, #24]	; (80150d0 <tcp_enqueue_flags+0x1c4>)
 80150b8:	f004 f9e8 	bl	801948c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80150bc:	2300      	movs	r3, #0
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3720      	adds	r7, #32
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	0801c3d4 	.word	0x0801c3d4
 80150cc:	0801c7f8 	.word	0x0801c7f8
 80150d0:	0801c428 	.word	0x0801c428
 80150d4:	0801c850 	.word	0x0801c850
 80150d8:	0801c870 	.word	0x0801c870
 80150dc:	0801c8ac 	.word	0x0801c8ac
 80150e0:	0801c8c4 	.word	0x0801c8c4
 80150e4:	0801c8f0 	.word	0x0801c8f0

080150e8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80150e8:	b5b0      	push	{r4, r5, r7, lr}
 80150ea:	b08a      	sub	sp, #40	; 0x28
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d106      	bne.n	8015104 <tcp_output+0x1c>
 80150f6:	4b8a      	ldr	r3, [pc, #552]	; (8015320 <tcp_output+0x238>)
 80150f8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80150fc:	4989      	ldr	r1, [pc, #548]	; (8015324 <tcp_output+0x23c>)
 80150fe:	488a      	ldr	r0, [pc, #552]	; (8015328 <tcp_output+0x240>)
 8015100:	f004 f9c4 	bl	801948c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	7d1b      	ldrb	r3, [r3, #20]
 8015108:	2b01      	cmp	r3, #1
 801510a:	d106      	bne.n	801511a <tcp_output+0x32>
 801510c:	4b84      	ldr	r3, [pc, #528]	; (8015320 <tcp_output+0x238>)
 801510e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015112:	4986      	ldr	r1, [pc, #536]	; (801532c <tcp_output+0x244>)
 8015114:	4884      	ldr	r0, [pc, #528]	; (8015328 <tcp_output+0x240>)
 8015116:	f004 f9b9 	bl	801948c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801511a:	4b85      	ldr	r3, [pc, #532]	; (8015330 <tcp_output+0x248>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	429a      	cmp	r2, r3
 8015122:	d101      	bne.n	8015128 <tcp_output+0x40>
    return ERR_OK;
 8015124:	2300      	movs	r3, #0
 8015126:	e1ce      	b.n	80154c6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015134:	4293      	cmp	r3, r2
 8015136:	bf28      	it	cs
 8015138:	4613      	movcs	r3, r2
 801513a:	b29b      	uxth	r3, r3
 801513c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015142:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015146:	2b00      	cmp	r3, #0
 8015148:	d10b      	bne.n	8015162 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	8b5b      	ldrh	r3, [r3, #26]
 801514e:	f003 0302 	and.w	r3, r3, #2
 8015152:	2b00      	cmp	r3, #0
 8015154:	f000 81aa 	beq.w	80154ac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f000 fdcb 	bl	8015cf4 <tcp_send_empty_ack>
 801515e:	4603      	mov	r3, r0
 8015160:	e1b1      	b.n	80154c6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015162:	6879      	ldr	r1, [r7, #4]
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	3304      	adds	r3, #4
 8015168:	461a      	mov	r2, r3
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f7ff f824 	bl	80141b8 <tcp_route>
 8015170:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015172:	697b      	ldr	r3, [r7, #20]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d102      	bne.n	801517e <tcp_output+0x96>
    return ERR_RTE;
 8015178:	f06f 0303 	mvn.w	r3, #3
 801517c:	e1a3      	b.n	80154c6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d003      	beq.n	801518c <tcp_output+0xa4>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d111      	bne.n	80151b0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d002      	beq.n	8015198 <tcp_output+0xb0>
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	3304      	adds	r3, #4
 8015196:	e000      	b.n	801519a <tcp_output+0xb2>
 8015198:	2300      	movs	r3, #0
 801519a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d102      	bne.n	80151a8 <tcp_output+0xc0>
      return ERR_RTE;
 80151a2:	f06f 0303 	mvn.w	r3, #3
 80151a6:	e18e      	b.n	80154c6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80151b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b2:	68db      	ldr	r3, [r3, #12]
 80151b4:	685b      	ldr	r3, [r3, #4]
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7f9 f80f 	bl	800e1da <lwip_htonl>
 80151bc:	4602      	mov	r2, r0
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151c2:	1ad3      	subs	r3, r2, r3
 80151c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151c6:	8912      	ldrh	r2, [r2, #8]
 80151c8:	4413      	add	r3, r2
 80151ca:	69ba      	ldr	r2, [r7, #24]
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d227      	bcs.n	8015220 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80151d6:	461a      	mov	r2, r3
 80151d8:	69bb      	ldr	r3, [r7, #24]
 80151da:	4293      	cmp	r3, r2
 80151dc:	d114      	bne.n	8015208 <tcp_output+0x120>
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d110      	bne.n	8015208 <tcp_output+0x120>
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d10b      	bne.n	8015208 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2200      	movs	r2, #0
 80151f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2201      	movs	r2, #1
 80151fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2200      	movs	r2, #0
 8015204:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	8b5b      	ldrh	r3, [r3, #26]
 801520c:	f003 0302 	and.w	r3, r3, #2
 8015210:	2b00      	cmp	r3, #0
 8015212:	f000 814d 	beq.w	80154b0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f000 fd6c 	bl	8015cf4 <tcp_send_empty_ack>
 801521c:	4603      	mov	r3, r0
 801521e:	e152      	b.n	80154c6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2200      	movs	r2, #0
 8015224:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801522c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801522e:	6a3b      	ldr	r3, [r7, #32]
 8015230:	2b00      	cmp	r3, #0
 8015232:	f000 811c 	beq.w	801546e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015236:	e002      	b.n	801523e <tcp_output+0x156>
 8015238:	6a3b      	ldr	r3, [r7, #32]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	623b      	str	r3, [r7, #32]
 801523e:	6a3b      	ldr	r3, [r7, #32]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d1f8      	bne.n	8015238 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015246:	e112      	b.n	801546e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801524a:	68db      	ldr	r3, [r3, #12]
 801524c:	899b      	ldrh	r3, [r3, #12]
 801524e:	b29b      	uxth	r3, r3
 8015250:	4618      	mov	r0, r3
 8015252:	f7f8 ffad 	bl	800e1b0 <lwip_htons>
 8015256:	4603      	mov	r3, r0
 8015258:	b2db      	uxtb	r3, r3
 801525a:	f003 0304 	and.w	r3, r3, #4
 801525e:	2b00      	cmp	r3, #0
 8015260:	d006      	beq.n	8015270 <tcp_output+0x188>
 8015262:	4b2f      	ldr	r3, [pc, #188]	; (8015320 <tcp_output+0x238>)
 8015264:	f240 5236 	movw	r2, #1334	; 0x536
 8015268:	4932      	ldr	r1, [pc, #200]	; (8015334 <tcp_output+0x24c>)
 801526a:	482f      	ldr	r0, [pc, #188]	; (8015328 <tcp_output+0x240>)
 801526c:	f004 f90e 	bl	801948c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015274:	2b00      	cmp	r3, #0
 8015276:	d01f      	beq.n	80152b8 <tcp_output+0x1d0>
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	8b5b      	ldrh	r3, [r3, #26]
 801527c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015280:	2b00      	cmp	r3, #0
 8015282:	d119      	bne.n	80152b8 <tcp_output+0x1d0>
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015288:	2b00      	cmp	r3, #0
 801528a:	d00b      	beq.n	80152a4 <tcp_output+0x1bc>
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d110      	bne.n	80152b8 <tcp_output+0x1d0>
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801529a:	891a      	ldrh	r2, [r3, #8]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d209      	bcs.n	80152b8 <tcp_output+0x1d0>
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d004      	beq.n	80152b8 <tcp_output+0x1d0>
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152b4:	2b08      	cmp	r3, #8
 80152b6:	d901      	bls.n	80152bc <tcp_output+0x1d4>
 80152b8:	2301      	movs	r3, #1
 80152ba:	e000      	b.n	80152be <tcp_output+0x1d6>
 80152bc:	2300      	movs	r3, #0
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d106      	bne.n	80152d0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	8b5b      	ldrh	r3, [r3, #26]
 80152c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	f000 80e4 	beq.w	8015498 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	7d1b      	ldrb	r3, [r3, #20]
 80152d4:	2b02      	cmp	r3, #2
 80152d6:	d00d      	beq.n	80152f4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80152d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152da:	68db      	ldr	r3, [r3, #12]
 80152dc:	899b      	ldrh	r3, [r3, #12]
 80152de:	b29c      	uxth	r4, r3
 80152e0:	2010      	movs	r0, #16
 80152e2:	f7f8 ff65 	bl	800e1b0 <lwip_htons>
 80152e6:	4603      	mov	r3, r0
 80152e8:	461a      	mov	r2, r3
 80152ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ec:	68db      	ldr	r3, [r3, #12]
 80152ee:	4322      	orrs	r2, r4
 80152f0:	b292      	uxth	r2, r2
 80152f2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80152f4:	697a      	ldr	r2, [r7, #20]
 80152f6:	6879      	ldr	r1, [r7, #4]
 80152f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152fa:	f000 f909 	bl	8015510 <tcp_output_segment>
 80152fe:	4603      	mov	r3, r0
 8015300:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d016      	beq.n	8015338 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	8b5b      	ldrh	r3, [r3, #26]
 801530e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015312:	b29a      	uxth	r2, r3
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	835a      	strh	r2, [r3, #26]
      return err;
 8015318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801531c:	e0d3      	b.n	80154c6 <tcp_output+0x3de>
 801531e:	bf00      	nop
 8015320:	0801c3d4 	.word	0x0801c3d4
 8015324:	0801c918 	.word	0x0801c918
 8015328:	0801c428 	.word	0x0801c428
 801532c:	0801c930 	.word	0x0801c930
 8015330:	2004f010 	.word	0x2004f010
 8015334:	0801c958 	.word	0x0801c958
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801533a:	681a      	ldr	r2, [r3, #0]
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	7d1b      	ldrb	r3, [r3, #20]
 8015344:	2b02      	cmp	r3, #2
 8015346:	d006      	beq.n	8015356 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	8b5b      	ldrh	r3, [r3, #26]
 801534c:	f023 0303 	bic.w	r3, r3, #3
 8015350:	b29a      	uxth	r2, r3
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015358:	68db      	ldr	r3, [r3, #12]
 801535a:	685b      	ldr	r3, [r3, #4]
 801535c:	4618      	mov	r0, r3
 801535e:	f7f8 ff3c 	bl	800e1da <lwip_htonl>
 8015362:	4604      	mov	r4, r0
 8015364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015366:	891b      	ldrh	r3, [r3, #8]
 8015368:	461d      	mov	r5, r3
 801536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801536c:	68db      	ldr	r3, [r3, #12]
 801536e:	899b      	ldrh	r3, [r3, #12]
 8015370:	b29b      	uxth	r3, r3
 8015372:	4618      	mov	r0, r3
 8015374:	f7f8 ff1c 	bl	800e1b0 <lwip_htons>
 8015378:	4603      	mov	r3, r0
 801537a:	b2db      	uxtb	r3, r3
 801537c:	f003 0303 	and.w	r3, r3, #3
 8015380:	2b00      	cmp	r3, #0
 8015382:	d001      	beq.n	8015388 <tcp_output+0x2a0>
 8015384:	2301      	movs	r3, #1
 8015386:	e000      	b.n	801538a <tcp_output+0x2a2>
 8015388:	2300      	movs	r3, #0
 801538a:	442b      	add	r3, r5
 801538c:	4423      	add	r3, r4
 801538e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	1ad3      	subs	r3, r2, r3
 8015398:	2b00      	cmp	r3, #0
 801539a:	da02      	bge.n	80153a2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	68ba      	ldr	r2, [r7, #8]
 80153a0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80153a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a4:	891b      	ldrh	r3, [r3, #8]
 80153a6:	461c      	mov	r4, r3
 80153a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153aa:	68db      	ldr	r3, [r3, #12]
 80153ac:	899b      	ldrh	r3, [r3, #12]
 80153ae:	b29b      	uxth	r3, r3
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7f8 fefd 	bl	800e1b0 <lwip_htons>
 80153b6:	4603      	mov	r3, r0
 80153b8:	b2db      	uxtb	r3, r3
 80153ba:	f003 0303 	and.w	r3, r3, #3
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d001      	beq.n	80153c6 <tcp_output+0x2de>
 80153c2:	2301      	movs	r3, #1
 80153c4:	e000      	b.n	80153c8 <tcp_output+0x2e0>
 80153c6:	2300      	movs	r3, #0
 80153c8:	4423      	add	r3, r4
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d049      	beq.n	8015462 <tcp_output+0x37a>
      seg->next = NULL;
 80153ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d0:	2200      	movs	r2, #0
 80153d2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d105      	bne.n	80153e8 <tcp_output+0x300>
        pcb->unacked = seg;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153e0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80153e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e4:	623b      	str	r3, [r7, #32]
 80153e6:	e03f      	b.n	8015468 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80153e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7f8 fef3 	bl	800e1da <lwip_htonl>
 80153f4:	4604      	mov	r4, r0
 80153f6:	6a3b      	ldr	r3, [r7, #32]
 80153f8:	68db      	ldr	r3, [r3, #12]
 80153fa:	685b      	ldr	r3, [r3, #4]
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7f8 feec 	bl	800e1da <lwip_htonl>
 8015402:	4603      	mov	r3, r0
 8015404:	1ae3      	subs	r3, r4, r3
 8015406:	2b00      	cmp	r3, #0
 8015408:	da24      	bge.n	8015454 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	3370      	adds	r3, #112	; 0x70
 801540e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015410:	e002      	b.n	8015418 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015412:	69fb      	ldr	r3, [r7, #28]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d011      	beq.n	8015444 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	68db      	ldr	r3, [r3, #12]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	4618      	mov	r0, r3
 801542a:	f7f8 fed6 	bl	800e1da <lwip_htonl>
 801542e:	4604      	mov	r4, r0
 8015430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	4618      	mov	r0, r3
 8015438:	f7f8 fecf 	bl	800e1da <lwip_htonl>
 801543c:	4603      	mov	r3, r0
 801543e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015440:	2b00      	cmp	r3, #0
 8015442:	dbe6      	blt.n	8015412 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015450:	601a      	str	r2, [r3, #0]
 8015452:	e009      	b.n	8015468 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015454:	6a3b      	ldr	r3, [r7, #32]
 8015456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015458:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801545a:	6a3b      	ldr	r3, [r7, #32]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	623b      	str	r3, [r7, #32]
 8015460:	e002      	b.n	8015468 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015462:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015464:	f7fb ff19 	bl	801129a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801546c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015470:	2b00      	cmp	r3, #0
 8015472:	d012      	beq.n	801549a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	4618      	mov	r0, r3
 801547c:	f7f8 fead 	bl	800e1da <lwip_htonl>
 8015480:	4602      	mov	r2, r0
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015486:	1ad3      	subs	r3, r2, r3
 8015488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801548a:	8912      	ldrh	r2, [r2, #8]
 801548c:	4413      	add	r3, r2
  while (seg != NULL &&
 801548e:	69ba      	ldr	r2, [r7, #24]
 8015490:	429a      	cmp	r2, r3
 8015492:	f4bf aed9 	bcs.w	8015248 <tcp_output+0x160>
 8015496:	e000      	b.n	801549a <tcp_output+0x3b2>
      break;
 8015498:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d108      	bne.n	80154b4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2200      	movs	r2, #0
 80154a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80154aa:	e004      	b.n	80154b6 <tcp_output+0x3ce>
    goto output_done;
 80154ac:	bf00      	nop
 80154ae:	e002      	b.n	80154b6 <tcp_output+0x3ce>
    goto output_done;
 80154b0:	bf00      	nop
 80154b2:	e000      	b.n	80154b6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80154b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	8b5b      	ldrh	r3, [r3, #26]
 80154ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80154be:	b29a      	uxth	r2, r3
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80154c4:	2300      	movs	r3, #0
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	3728      	adds	r7, #40	; 0x28
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bdb0      	pop	{r4, r5, r7, pc}
 80154ce:	bf00      	nop

080154d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b082      	sub	sp, #8
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d106      	bne.n	80154ec <tcp_output_segment_busy+0x1c>
 80154de:	4b09      	ldr	r3, [pc, #36]	; (8015504 <tcp_output_segment_busy+0x34>)
 80154e0:	f240 529a 	movw	r2, #1434	; 0x59a
 80154e4:	4908      	ldr	r1, [pc, #32]	; (8015508 <tcp_output_segment_busy+0x38>)
 80154e6:	4809      	ldr	r0, [pc, #36]	; (801550c <tcp_output_segment_busy+0x3c>)
 80154e8:	f003 ffd0 	bl	801948c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	7b9b      	ldrb	r3, [r3, #14]
 80154f2:	2b01      	cmp	r3, #1
 80154f4:	d001      	beq.n	80154fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80154f6:	2301      	movs	r3, #1
 80154f8:	e000      	b.n	80154fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80154fa:	2300      	movs	r3, #0
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	3708      	adds	r7, #8
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}
 8015504:	0801c3d4 	.word	0x0801c3d4
 8015508:	0801c970 	.word	0x0801c970
 801550c:	0801c428 	.word	0x0801c428

08015510 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015510:	b5b0      	push	{r4, r5, r7, lr}
 8015512:	b08c      	sub	sp, #48	; 0x30
 8015514:	af04      	add	r7, sp, #16
 8015516:	60f8      	str	r0, [r7, #12]
 8015518:	60b9      	str	r1, [r7, #8]
 801551a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d106      	bne.n	8015530 <tcp_output_segment+0x20>
 8015522:	4b63      	ldr	r3, [pc, #396]	; (80156b0 <tcp_output_segment+0x1a0>)
 8015524:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015528:	4962      	ldr	r1, [pc, #392]	; (80156b4 <tcp_output_segment+0x1a4>)
 801552a:	4863      	ldr	r0, [pc, #396]	; (80156b8 <tcp_output_segment+0x1a8>)
 801552c:	f003 ffae 	bl	801948c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d106      	bne.n	8015544 <tcp_output_segment+0x34>
 8015536:	4b5e      	ldr	r3, [pc, #376]	; (80156b0 <tcp_output_segment+0x1a0>)
 8015538:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801553c:	495f      	ldr	r1, [pc, #380]	; (80156bc <tcp_output_segment+0x1ac>)
 801553e:	485e      	ldr	r0, [pc, #376]	; (80156b8 <tcp_output_segment+0x1a8>)
 8015540:	f003 ffa4 	bl	801948c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d106      	bne.n	8015558 <tcp_output_segment+0x48>
 801554a:	4b59      	ldr	r3, [pc, #356]	; (80156b0 <tcp_output_segment+0x1a0>)
 801554c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015550:	495b      	ldr	r1, [pc, #364]	; (80156c0 <tcp_output_segment+0x1b0>)
 8015552:	4859      	ldr	r0, [pc, #356]	; (80156b8 <tcp_output_segment+0x1a8>)
 8015554:	f003 ff9a 	bl	801948c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015558:	68f8      	ldr	r0, [r7, #12]
 801555a:	f7ff ffb9 	bl	80154d0 <tcp_output_segment_busy>
 801555e:	4603      	mov	r3, r0
 8015560:	2b00      	cmp	r3, #0
 8015562:	d001      	beq.n	8015568 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015564:	2300      	movs	r3, #0
 8015566:	e09f      	b.n	80156a8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	68dc      	ldr	r4, [r3, #12]
 8015570:	4610      	mov	r0, r2
 8015572:	f7f8 fe32 	bl	800e1da <lwip_htonl>
 8015576:	4603      	mov	r3, r0
 8015578:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	68dc      	ldr	r4, [r3, #12]
 8015582:	4610      	mov	r0, r2
 8015584:	f7f8 fe14 	bl	800e1b0 <lwip_htons>
 8015588:	4603      	mov	r3, r0
 801558a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015590:	68ba      	ldr	r2, [r7, #8]
 8015592:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015594:	441a      	add	r2, r3
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	68db      	ldr	r3, [r3, #12]
 801559e:	3314      	adds	r3, #20
 80155a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	7a9b      	ldrb	r3, [r3, #10]
 80155a6:	f003 0301 	and.w	r3, r3, #1
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d015      	beq.n	80155da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	3304      	adds	r3, #4
 80155b2:	461a      	mov	r2, r3
 80155b4:	6879      	ldr	r1, [r7, #4]
 80155b6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80155ba:	f7fc fa33 	bl	8011a24 <tcp_eff_send_mss_netif>
 80155be:	4603      	mov	r3, r0
 80155c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80155c2:	8b7b      	ldrh	r3, [r7, #26]
 80155c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7f8 fe06 	bl	800e1da <lwip_htonl>
 80155ce:	4602      	mov	r2, r0
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	3304      	adds	r3, #4
 80155d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	da02      	bge.n	80155ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	2200      	movs	r2, #0
 80155e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d10c      	bne.n	801560c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80155f2:	4b34      	ldr	r3, [pc, #208]	; (80156c4 <tcp_output_segment+0x1b4>)
 80155f4:	681a      	ldr	r2, [r3, #0]
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	68db      	ldr	r3, [r3, #12]
 80155fe:	685b      	ldr	r3, [r3, #4]
 8015600:	4618      	mov	r0, r3
 8015602:	f7f8 fdea 	bl	800e1da <lwip_htonl>
 8015606:	4602      	mov	r2, r0
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	68da      	ldr	r2, [r3, #12]
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	1ad3      	subs	r3, r2, r3
 8015618:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	8959      	ldrh	r1, [r3, #10]
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	8b3a      	ldrh	r2, [r7, #24]
 8015626:	1a8a      	subs	r2, r1, r2
 8015628:	b292      	uxth	r2, r2
 801562a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	685b      	ldr	r3, [r3, #4]
 8015630:	8919      	ldrh	r1, [r3, #8]
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	8b3a      	ldrh	r2, [r7, #24]
 8015638:	1a8a      	subs	r2, r1, r2
 801563a:	b292      	uxth	r2, r2
 801563c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	68fa      	ldr	r2, [r7, #12]
 8015644:	68d2      	ldr	r2, [r2, #12]
 8015646:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	68db      	ldr	r3, [r3, #12]
 801564c:	2200      	movs	r2, #0
 801564e:	741a      	strb	r2, [r3, #16]
 8015650:	2200      	movs	r2, #0
 8015652:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	68db      	ldr	r3, [r3, #12]
 8015658:	f103 0214 	add.w	r2, r3, #20
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	7a9b      	ldrb	r3, [r3, #10]
 8015660:	009b      	lsls	r3, r3, #2
 8015662:	f003 0304 	and.w	r3, r3, #4
 8015666:	4413      	add	r3, r2
 8015668:	69fa      	ldr	r2, [r7, #28]
 801566a:	429a      	cmp	r2, r3
 801566c:	d006      	beq.n	801567c <tcp_output_segment+0x16c>
 801566e:	4b10      	ldr	r3, [pc, #64]	; (80156b0 <tcp_output_segment+0x1a0>)
 8015670:	f240 621c 	movw	r2, #1564	; 0x61c
 8015674:	4914      	ldr	r1, [pc, #80]	; (80156c8 <tcp_output_segment+0x1b8>)
 8015676:	4810      	ldr	r0, [pc, #64]	; (80156b8 <tcp_output_segment+0x1a8>)
 8015678:	f003 ff08 	bl	801948c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	6858      	ldr	r0, [r3, #4]
 8015680:	68b9      	ldr	r1, [r7, #8]
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	1d1c      	adds	r4, r3, #4
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	7add      	ldrb	r5, [r3, #11]
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	7a9b      	ldrb	r3, [r3, #10]
 801568e:	687a      	ldr	r2, [r7, #4]
 8015690:	9202      	str	r2, [sp, #8]
 8015692:	2206      	movs	r2, #6
 8015694:	9201      	str	r2, [sp, #4]
 8015696:	9300      	str	r3, [sp, #0]
 8015698:	462b      	mov	r3, r5
 801569a:	4622      	mov	r2, r4
 801569c:	f002 fb6a 	bl	8017d74 <ip4_output_if>
 80156a0:	4603      	mov	r3, r0
 80156a2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80156a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3720      	adds	r7, #32
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bdb0      	pop	{r4, r5, r7, pc}
 80156b0:	0801c3d4 	.word	0x0801c3d4
 80156b4:	0801c998 	.word	0x0801c998
 80156b8:	0801c428 	.word	0x0801c428
 80156bc:	0801c9b8 	.word	0x0801c9b8
 80156c0:	0801c9d8 	.word	0x0801c9d8
 80156c4:	2004efc4 	.word	0x2004efc4
 80156c8:	0801c9fc 	.word	0x0801c9fc

080156cc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80156cc:	b5b0      	push	{r4, r5, r7, lr}
 80156ce:	b084      	sub	sp, #16
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d106      	bne.n	80156e8 <tcp_rexmit_rto_prepare+0x1c>
 80156da:	4b31      	ldr	r3, [pc, #196]	; (80157a0 <tcp_rexmit_rto_prepare+0xd4>)
 80156dc:	f240 6263 	movw	r2, #1635	; 0x663
 80156e0:	4930      	ldr	r1, [pc, #192]	; (80157a4 <tcp_rexmit_rto_prepare+0xd8>)
 80156e2:	4831      	ldr	r0, [pc, #196]	; (80157a8 <tcp_rexmit_rto_prepare+0xdc>)
 80156e4:	f003 fed2 	bl	801948c <iprintf>

  if (pcb->unacked == NULL) {
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d102      	bne.n	80156f6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80156f0:	f06f 0305 	mvn.w	r3, #5
 80156f4:	e050      	b.n	8015798 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156fa:	60fb      	str	r3, [r7, #12]
 80156fc:	e00b      	b.n	8015716 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80156fe:	68f8      	ldr	r0, [r7, #12]
 8015700:	f7ff fee6 	bl	80154d0 <tcp_output_segment_busy>
 8015704:	4603      	mov	r3, r0
 8015706:	2b00      	cmp	r3, #0
 8015708:	d002      	beq.n	8015710 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801570a:	f06f 0305 	mvn.w	r3, #5
 801570e:	e043      	b.n	8015798 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	60fb      	str	r3, [r7, #12]
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d1ef      	bne.n	80156fe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801571e:	68f8      	ldr	r0, [r7, #12]
 8015720:	f7ff fed6 	bl	80154d0 <tcp_output_segment_busy>
 8015724:	4603      	mov	r3, r0
 8015726:	2b00      	cmp	r3, #0
 8015728:	d002      	beq.n	8015730 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801572a:	f06f 0305 	mvn.w	r3, #5
 801572e:	e033      	b.n	8015798 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2200      	movs	r2, #0
 8015744:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	8b5b      	ldrh	r3, [r3, #26]
 801574a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801574e:	b29a      	uxth	r2, r3
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	68db      	ldr	r3, [r3, #12]
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	4618      	mov	r0, r3
 801575c:	f7f8 fd3d 	bl	800e1da <lwip_htonl>
 8015760:	4604      	mov	r4, r0
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	891b      	ldrh	r3, [r3, #8]
 8015766:	461d      	mov	r5, r3
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	68db      	ldr	r3, [r3, #12]
 801576c:	899b      	ldrh	r3, [r3, #12]
 801576e:	b29b      	uxth	r3, r3
 8015770:	4618      	mov	r0, r3
 8015772:	f7f8 fd1d 	bl	800e1b0 <lwip_htons>
 8015776:	4603      	mov	r3, r0
 8015778:	b2db      	uxtb	r3, r3
 801577a:	f003 0303 	and.w	r3, r3, #3
 801577e:	2b00      	cmp	r3, #0
 8015780:	d001      	beq.n	8015786 <tcp_rexmit_rto_prepare+0xba>
 8015782:	2301      	movs	r3, #1
 8015784:	e000      	b.n	8015788 <tcp_rexmit_rto_prepare+0xbc>
 8015786:	2300      	movs	r3, #0
 8015788:	442b      	add	r3, r5
 801578a:	18e2      	adds	r2, r4, r3
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2200      	movs	r2, #0
 8015794:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	3710      	adds	r7, #16
 801579c:	46bd      	mov	sp, r7
 801579e:	bdb0      	pop	{r4, r5, r7, pc}
 80157a0:	0801c3d4 	.word	0x0801c3d4
 80157a4:	0801ca10 	.word	0x0801ca10
 80157a8:	0801c428 	.word	0x0801c428

080157ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d106      	bne.n	80157c8 <tcp_rexmit_rto_commit+0x1c>
 80157ba:	4b0d      	ldr	r3, [pc, #52]	; (80157f0 <tcp_rexmit_rto_commit+0x44>)
 80157bc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80157c0:	490c      	ldr	r1, [pc, #48]	; (80157f4 <tcp_rexmit_rto_commit+0x48>)
 80157c2:	480d      	ldr	r0, [pc, #52]	; (80157f8 <tcp_rexmit_rto_commit+0x4c>)
 80157c4:	f003 fe62 	bl	801948c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80157ce:	2bff      	cmp	r3, #255	; 0xff
 80157d0:	d007      	beq.n	80157e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80157d8:	3301      	adds	r3, #1
 80157da:	b2da      	uxtb	r2, r3
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f7ff fc80 	bl	80150e8 <tcp_output>
}
 80157e8:	bf00      	nop
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	0801c3d4 	.word	0x0801c3d4
 80157f4:	0801ca34 	.word	0x0801ca34
 80157f8:	0801c428 	.word	0x0801c428

080157fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b082      	sub	sp, #8
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d106      	bne.n	8015818 <tcp_rexmit_rto+0x1c>
 801580a:	4b0a      	ldr	r3, [pc, #40]	; (8015834 <tcp_rexmit_rto+0x38>)
 801580c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015810:	4909      	ldr	r1, [pc, #36]	; (8015838 <tcp_rexmit_rto+0x3c>)
 8015812:	480a      	ldr	r0, [pc, #40]	; (801583c <tcp_rexmit_rto+0x40>)
 8015814:	f003 fe3a 	bl	801948c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f7ff ff57 	bl	80156cc <tcp_rexmit_rto_prepare>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d102      	bne.n	801582a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f7ff ffc1 	bl	80157ac <tcp_rexmit_rto_commit>
  }
}
 801582a:	bf00      	nop
 801582c:	3708      	adds	r7, #8
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	0801c3d4 	.word	0x0801c3d4
 8015838:	0801ca58 	.word	0x0801ca58
 801583c:	0801c428 	.word	0x0801c428

08015840 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015840:	b590      	push	{r4, r7, lr}
 8015842:	b085      	sub	sp, #20
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d106      	bne.n	801585c <tcp_rexmit+0x1c>
 801584e:	4b2f      	ldr	r3, [pc, #188]	; (801590c <tcp_rexmit+0xcc>)
 8015850:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015854:	492e      	ldr	r1, [pc, #184]	; (8015910 <tcp_rexmit+0xd0>)
 8015856:	482f      	ldr	r0, [pc, #188]	; (8015914 <tcp_rexmit+0xd4>)
 8015858:	f003 fe18 	bl	801948c <iprintf>

  if (pcb->unacked == NULL) {
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015860:	2b00      	cmp	r3, #0
 8015862:	d102      	bne.n	801586a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015864:	f06f 0305 	mvn.w	r3, #5
 8015868:	e04c      	b.n	8015904 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801586e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015870:	68b8      	ldr	r0, [r7, #8]
 8015872:	f7ff fe2d 	bl	80154d0 <tcp_output_segment_busy>
 8015876:	4603      	mov	r3, r0
 8015878:	2b00      	cmp	r3, #0
 801587a:	d002      	beq.n	8015882 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801587c:	f06f 0305 	mvn.w	r3, #5
 8015880:	e040      	b.n	8015904 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	681a      	ldr	r2, [r3, #0]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	336c      	adds	r3, #108	; 0x6c
 801588e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015890:	e002      	b.n	8015898 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d011      	beq.n	80158c4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	68db      	ldr	r3, [r3, #12]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7f8 fc96 	bl	800e1da <lwip_htonl>
 80158ae:	4604      	mov	r4, r0
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	4618      	mov	r0, r3
 80158b8:	f7f8 fc8f 	bl	800e1da <lwip_htonl>
 80158bc:	4603      	mov	r3, r0
 80158be:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	dbe6      	blt.n	8015892 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	681a      	ldr	r2, [r3, #0]
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	68ba      	ldr	r2, [r7, #8]
 80158d0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d103      	bne.n	80158e2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2200      	movs	r2, #0
 80158de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80158e8:	2bff      	cmp	r3, #255	; 0xff
 80158ea:	d007      	beq.n	80158fc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80158f2:	3301      	adds	r3, #1
 80158f4:	b2da      	uxtb	r2, r3
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2200      	movs	r2, #0
 8015900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015902:	2300      	movs	r3, #0
}
 8015904:	4618      	mov	r0, r3
 8015906:	3714      	adds	r7, #20
 8015908:	46bd      	mov	sp, r7
 801590a:	bd90      	pop	{r4, r7, pc}
 801590c:	0801c3d4 	.word	0x0801c3d4
 8015910:	0801ca74 	.word	0x0801ca74
 8015914:	0801c428 	.word	0x0801c428

08015918 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d106      	bne.n	8015934 <tcp_rexmit_fast+0x1c>
 8015926:	4b2a      	ldr	r3, [pc, #168]	; (80159d0 <tcp_rexmit_fast+0xb8>)
 8015928:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801592c:	4929      	ldr	r1, [pc, #164]	; (80159d4 <tcp_rexmit_fast+0xbc>)
 801592e:	482a      	ldr	r0, [pc, #168]	; (80159d8 <tcp_rexmit_fast+0xc0>)
 8015930:	f003 fdac 	bl	801948c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015938:	2b00      	cmp	r3, #0
 801593a:	d045      	beq.n	80159c8 <tcp_rexmit_fast+0xb0>
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	8b5b      	ldrh	r3, [r3, #26]
 8015940:	f003 0304 	and.w	r3, r3, #4
 8015944:	2b00      	cmp	r3, #0
 8015946:	d13f      	bne.n	80159c8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f7ff ff79 	bl	8015840 <tcp_rexmit>
 801594e:	4603      	mov	r3, r0
 8015950:	2b00      	cmp	r3, #0
 8015952:	d139      	bne.n	80159c8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015960:	4293      	cmp	r3, r2
 8015962:	bf28      	it	cs
 8015964:	4613      	movcs	r3, r2
 8015966:	b29b      	uxth	r3, r3
 8015968:	2b00      	cmp	r3, #0
 801596a:	da00      	bge.n	801596e <tcp_rexmit_fast+0x56>
 801596c:	3301      	adds	r3, #1
 801596e:	105b      	asrs	r3, r3, #1
 8015970:	b29a      	uxth	r2, r3
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801597e:	461a      	mov	r2, r3
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015984:	005b      	lsls	r3, r3, #1
 8015986:	429a      	cmp	r2, r3
 8015988:	d206      	bcs.n	8015998 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801598e:	005b      	lsls	r3, r3, #1
 8015990:	b29a      	uxth	r2, r3
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159a2:	4619      	mov	r1, r3
 80159a4:	0049      	lsls	r1, r1, #1
 80159a6:	440b      	add	r3, r1
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	4413      	add	r3, r2
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	8b5b      	ldrh	r3, [r3, #26]
 80159b8:	f043 0304 	orr.w	r3, r3, #4
 80159bc:	b29a      	uxth	r2, r3
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	2200      	movs	r2, #0
 80159c6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80159c8:	bf00      	nop
 80159ca:	3708      	adds	r7, #8
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	0801c3d4 	.word	0x0801c3d4
 80159d4:	0801ca8c 	.word	0x0801ca8c
 80159d8:	0801c428 	.word	0x0801c428

080159dc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b086      	sub	sp, #24
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	60f8      	str	r0, [r7, #12]
 80159e4:	607b      	str	r3, [r7, #4]
 80159e6:	460b      	mov	r3, r1
 80159e8:	817b      	strh	r3, [r7, #10]
 80159ea:	4613      	mov	r3, r2
 80159ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80159ee:	897a      	ldrh	r2, [r7, #10]
 80159f0:	893b      	ldrh	r3, [r7, #8]
 80159f2:	4413      	add	r3, r2
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	3314      	adds	r3, #20
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80159fe:	4619      	mov	r1, r3
 8015a00:	2022      	movs	r0, #34	; 0x22
 8015a02:	f7f9 fce3 	bl	800f3cc <pbuf_alloc>
 8015a06:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d04d      	beq.n	8015aaa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015a0e:	897b      	ldrh	r3, [r7, #10]
 8015a10:	3313      	adds	r3, #19
 8015a12:	697a      	ldr	r2, [r7, #20]
 8015a14:	8952      	ldrh	r2, [r2, #10]
 8015a16:	4293      	cmp	r3, r2
 8015a18:	db06      	blt.n	8015a28 <tcp_output_alloc_header_common+0x4c>
 8015a1a:	4b26      	ldr	r3, [pc, #152]	; (8015ab4 <tcp_output_alloc_header_common+0xd8>)
 8015a1c:	f240 7223 	movw	r2, #1827	; 0x723
 8015a20:	4925      	ldr	r1, [pc, #148]	; (8015ab8 <tcp_output_alloc_header_common+0xdc>)
 8015a22:	4826      	ldr	r0, [pc, #152]	; (8015abc <tcp_output_alloc_header_common+0xe0>)
 8015a24:	f003 fd32 	bl	801948c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	685b      	ldr	r3, [r3, #4]
 8015a2c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015a2e:	8c3b      	ldrh	r3, [r7, #32]
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7f8 fbbd 	bl	800e1b0 <lwip_htons>
 8015a36:	4603      	mov	r3, r0
 8015a38:	461a      	mov	r2, r3
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7f8 fbb5 	bl	800e1b0 <lwip_htons>
 8015a46:	4603      	mov	r3, r0
 8015a48:	461a      	mov	r2, r3
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015a54:	68f8      	ldr	r0, [r7, #12]
 8015a56:	f7f8 fbc0 	bl	800e1da <lwip_htonl>
 8015a5a:	4602      	mov	r2, r0
 8015a5c:	693b      	ldr	r3, [r7, #16]
 8015a5e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015a60:	897b      	ldrh	r3, [r7, #10]
 8015a62:	089b      	lsrs	r3, r3, #2
 8015a64:	b29b      	uxth	r3, r3
 8015a66:	3305      	adds	r3, #5
 8015a68:	b29b      	uxth	r3, r3
 8015a6a:	031b      	lsls	r3, r3, #12
 8015a6c:	b29a      	uxth	r2, r3
 8015a6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015a72:	b29b      	uxth	r3, r3
 8015a74:	4313      	orrs	r3, r2
 8015a76:	b29b      	uxth	r3, r3
 8015a78:	4618      	mov	r0, r3
 8015a7a:	f7f8 fb99 	bl	800e1b0 <lwip_htons>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	461a      	mov	r2, r3
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015a86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f7f8 fb91 	bl	800e1b0 <lwip_htons>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	461a      	mov	r2, r3
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	741a      	strb	r2, [r3, #16]
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015aa0:	693b      	ldr	r3, [r7, #16]
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	749a      	strb	r2, [r3, #18]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015aaa:	697b      	ldr	r3, [r7, #20]
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3718      	adds	r7, #24
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	0801c3d4 	.word	0x0801c3d4
 8015ab8:	0801caac 	.word	0x0801caac
 8015abc:	0801c428 	.word	0x0801c428

08015ac0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015ac0:	b5b0      	push	{r4, r5, r7, lr}
 8015ac2:	b08a      	sub	sp, #40	; 0x28
 8015ac4:	af04      	add	r7, sp, #16
 8015ac6:	60f8      	str	r0, [r7, #12]
 8015ac8:	607b      	str	r3, [r7, #4]
 8015aca:	460b      	mov	r3, r1
 8015acc:	817b      	strh	r3, [r7, #10]
 8015ace:	4613      	mov	r3, r2
 8015ad0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d106      	bne.n	8015ae6 <tcp_output_alloc_header+0x26>
 8015ad8:	4b15      	ldr	r3, [pc, #84]	; (8015b30 <tcp_output_alloc_header+0x70>)
 8015ada:	f240 7242 	movw	r2, #1858	; 0x742
 8015ade:	4915      	ldr	r1, [pc, #84]	; (8015b34 <tcp_output_alloc_header+0x74>)
 8015ae0:	4815      	ldr	r0, [pc, #84]	; (8015b38 <tcp_output_alloc_header+0x78>)
 8015ae2:	f003 fcd3 	bl	801948c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	8adb      	ldrh	r3, [r3, #22]
 8015aee:	68fa      	ldr	r2, [r7, #12]
 8015af0:	8b12      	ldrh	r2, [r2, #24]
 8015af2:	68f9      	ldr	r1, [r7, #12]
 8015af4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015af6:	893d      	ldrh	r5, [r7, #8]
 8015af8:	897c      	ldrh	r4, [r7, #10]
 8015afa:	9103      	str	r1, [sp, #12]
 8015afc:	2110      	movs	r1, #16
 8015afe:	9102      	str	r1, [sp, #8]
 8015b00:	9201      	str	r2, [sp, #4]
 8015b02:	9300      	str	r3, [sp, #0]
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	462a      	mov	r2, r5
 8015b08:	4621      	mov	r1, r4
 8015b0a:	f7ff ff67 	bl	80159dc <tcp_output_alloc_header_common>
 8015b0e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015b10:	697b      	ldr	r3, [r7, #20]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d006      	beq.n	8015b24 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b1a:	68fa      	ldr	r2, [r7, #12]
 8015b1c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015b1e:	441a      	add	r2, r3
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015b24:	697b      	ldr	r3, [r7, #20]
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3718      	adds	r7, #24
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8015b2e:	bf00      	nop
 8015b30:	0801c3d4 	.word	0x0801c3d4
 8015b34:	0801cadc 	.word	0x0801cadc
 8015b38:	0801c428 	.word	0x0801c428

08015b3c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b088      	sub	sp, #32
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	60f8      	str	r0, [r7, #12]
 8015b44:	60b9      	str	r1, [r7, #8]
 8015b46:	4611      	mov	r1, r2
 8015b48:	461a      	mov	r2, r3
 8015b4a:	460b      	mov	r3, r1
 8015b4c:	71fb      	strb	r3, [r7, #7]
 8015b4e:	4613      	mov	r3, r2
 8015b50:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015b52:	2300      	movs	r3, #0
 8015b54:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d106      	bne.n	8015b6a <tcp_output_fill_options+0x2e>
 8015b5c:	4b13      	ldr	r3, [pc, #76]	; (8015bac <tcp_output_fill_options+0x70>)
 8015b5e:	f240 7256 	movw	r2, #1878	; 0x756
 8015b62:	4913      	ldr	r1, [pc, #76]	; (8015bb0 <tcp_output_fill_options+0x74>)
 8015b64:	4813      	ldr	r0, [pc, #76]	; (8015bb4 <tcp_output_fill_options+0x78>)
 8015b66:	f003 fc91 	bl	801948c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015b6a:	68bb      	ldr	r3, [r7, #8]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015b70:	69bb      	ldr	r3, [r7, #24]
 8015b72:	3314      	adds	r3, #20
 8015b74:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015b76:	69bb      	ldr	r3, [r7, #24]
 8015b78:	f103 0214 	add.w	r2, r3, #20
 8015b7c:	8bfb      	ldrh	r3, [r7, #30]
 8015b7e:	009b      	lsls	r3, r3, #2
 8015b80:	4619      	mov	r1, r3
 8015b82:	79fb      	ldrb	r3, [r7, #7]
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	f003 0304 	and.w	r3, r3, #4
 8015b8a:	440b      	add	r3, r1
 8015b8c:	4413      	add	r3, r2
 8015b8e:	697a      	ldr	r2, [r7, #20]
 8015b90:	429a      	cmp	r2, r3
 8015b92:	d006      	beq.n	8015ba2 <tcp_output_fill_options+0x66>
 8015b94:	4b05      	ldr	r3, [pc, #20]	; (8015bac <tcp_output_fill_options+0x70>)
 8015b96:	f240 7275 	movw	r2, #1909	; 0x775
 8015b9a:	4907      	ldr	r1, [pc, #28]	; (8015bb8 <tcp_output_fill_options+0x7c>)
 8015b9c:	4805      	ldr	r0, [pc, #20]	; (8015bb4 <tcp_output_fill_options+0x78>)
 8015b9e:	f003 fc75 	bl	801948c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015ba2:	bf00      	nop
 8015ba4:	3720      	adds	r7, #32
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}
 8015baa:	bf00      	nop
 8015bac:	0801c3d4 	.word	0x0801c3d4
 8015bb0:	0801cb04 	.word	0x0801cb04
 8015bb4:	0801c428 	.word	0x0801c428
 8015bb8:	0801c9fc 	.word	0x0801c9fc

08015bbc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b08a      	sub	sp, #40	; 0x28
 8015bc0:	af04      	add	r7, sp, #16
 8015bc2:	60f8      	str	r0, [r7, #12]
 8015bc4:	60b9      	str	r1, [r7, #8]
 8015bc6:	607a      	str	r2, [r7, #4]
 8015bc8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d106      	bne.n	8015bde <tcp_output_control_segment+0x22>
 8015bd0:	4b1c      	ldr	r3, [pc, #112]	; (8015c44 <tcp_output_control_segment+0x88>)
 8015bd2:	f240 7287 	movw	r2, #1927	; 0x787
 8015bd6:	491c      	ldr	r1, [pc, #112]	; (8015c48 <tcp_output_control_segment+0x8c>)
 8015bd8:	481c      	ldr	r0, [pc, #112]	; (8015c4c <tcp_output_control_segment+0x90>)
 8015bda:	f003 fc57 	bl	801948c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015bde:	683a      	ldr	r2, [r7, #0]
 8015be0:	6879      	ldr	r1, [r7, #4]
 8015be2:	68f8      	ldr	r0, [r7, #12]
 8015be4:	f7fe fae8 	bl	80141b8 <tcp_route>
 8015be8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d102      	bne.n	8015bf6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015bf0:	23fc      	movs	r3, #252	; 0xfc
 8015bf2:	75fb      	strb	r3, [r7, #23]
 8015bf4:	e01c      	b.n	8015c30 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d006      	beq.n	8015c0a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	7adb      	ldrb	r3, [r3, #11]
 8015c00:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	7a9b      	ldrb	r3, [r3, #10]
 8015c06:	757b      	strb	r3, [r7, #21]
 8015c08:	e003      	b.n	8015c12 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015c0a:	23ff      	movs	r3, #255	; 0xff
 8015c0c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015c12:	7dba      	ldrb	r2, [r7, #22]
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	9302      	str	r3, [sp, #8]
 8015c18:	2306      	movs	r3, #6
 8015c1a:	9301      	str	r3, [sp, #4]
 8015c1c:	7d7b      	ldrb	r3, [r7, #21]
 8015c1e:	9300      	str	r3, [sp, #0]
 8015c20:	4613      	mov	r3, r2
 8015c22:	683a      	ldr	r2, [r7, #0]
 8015c24:	6879      	ldr	r1, [r7, #4]
 8015c26:	68b8      	ldr	r0, [r7, #8]
 8015c28:	f002 f8a4 	bl	8017d74 <ip4_output_if>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015c30:	68b8      	ldr	r0, [r7, #8]
 8015c32:	f7f9 feaf 	bl	800f994 <pbuf_free>
  return err;
 8015c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3718      	adds	r7, #24
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop
 8015c44:	0801c3d4 	.word	0x0801c3d4
 8015c48:	0801cb2c 	.word	0x0801cb2c
 8015c4c:	0801c428 	.word	0x0801c428

08015c50 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015c50:	b590      	push	{r4, r7, lr}
 8015c52:	b08b      	sub	sp, #44	; 0x2c
 8015c54:	af04      	add	r7, sp, #16
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	607a      	str	r2, [r7, #4]
 8015c5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d106      	bne.n	8015c72 <tcp_rst+0x22>
 8015c64:	4b1f      	ldr	r3, [pc, #124]	; (8015ce4 <tcp_rst+0x94>)
 8015c66:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015c6a:	491f      	ldr	r1, [pc, #124]	; (8015ce8 <tcp_rst+0x98>)
 8015c6c:	481f      	ldr	r0, [pc, #124]	; (8015cec <tcp_rst+0x9c>)
 8015c6e:	f003 fc0d 	bl	801948c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d106      	bne.n	8015c86 <tcp_rst+0x36>
 8015c78:	4b1a      	ldr	r3, [pc, #104]	; (8015ce4 <tcp_rst+0x94>)
 8015c7a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015c7e:	491c      	ldr	r1, [pc, #112]	; (8015cf0 <tcp_rst+0xa0>)
 8015c80:	481a      	ldr	r0, [pc, #104]	; (8015cec <tcp_rst+0x9c>)
 8015c82:	f003 fc03 	bl	801948c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015c86:	2300      	movs	r3, #0
 8015c88:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015c8a:	f246 0308 	movw	r3, #24584	; 0x6008
 8015c8e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015c90:	7dfb      	ldrb	r3, [r7, #23]
 8015c92:	b29c      	uxth	r4, r3
 8015c94:	68b8      	ldr	r0, [r7, #8]
 8015c96:	f7f8 faa0 	bl	800e1da <lwip_htonl>
 8015c9a:	4602      	mov	r2, r0
 8015c9c:	8abb      	ldrh	r3, [r7, #20]
 8015c9e:	9303      	str	r3, [sp, #12]
 8015ca0:	2314      	movs	r3, #20
 8015ca2:	9302      	str	r3, [sp, #8]
 8015ca4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015ca6:	9301      	str	r3, [sp, #4]
 8015ca8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015caa:	9300      	str	r3, [sp, #0]
 8015cac:	4613      	mov	r3, r2
 8015cae:	2200      	movs	r2, #0
 8015cb0:	4621      	mov	r1, r4
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f7ff fe92 	bl	80159dc <tcp_output_alloc_header_common>
 8015cb8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015cba:	693b      	ldr	r3, [r7, #16]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d00c      	beq.n	8015cda <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015cc0:	7dfb      	ldrb	r3, [r7, #23]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	6939      	ldr	r1, [r7, #16]
 8015cc6:	68f8      	ldr	r0, [r7, #12]
 8015cc8:	f7ff ff38 	bl	8015b3c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cce:	683a      	ldr	r2, [r7, #0]
 8015cd0:	6939      	ldr	r1, [r7, #16]
 8015cd2:	68f8      	ldr	r0, [r7, #12]
 8015cd4:	f7ff ff72 	bl	8015bbc <tcp_output_control_segment>
 8015cd8:	e000      	b.n	8015cdc <tcp_rst+0x8c>
    return;
 8015cda:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015cdc:	371c      	adds	r7, #28
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd90      	pop	{r4, r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	0801c3d4 	.word	0x0801c3d4
 8015ce8:	0801cb58 	.word	0x0801cb58
 8015cec:	0801c428 	.word	0x0801c428
 8015cf0:	0801cb74 	.word	0x0801cb74

08015cf4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015cf4:	b590      	push	{r4, r7, lr}
 8015cf6:	b087      	sub	sp, #28
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015d00:	2300      	movs	r3, #0
 8015d02:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d106      	bne.n	8015d18 <tcp_send_empty_ack+0x24>
 8015d0a:	4b28      	ldr	r3, [pc, #160]	; (8015dac <tcp_send_empty_ack+0xb8>)
 8015d0c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015d10:	4927      	ldr	r1, [pc, #156]	; (8015db0 <tcp_send_empty_ack+0xbc>)
 8015d12:	4828      	ldr	r0, [pc, #160]	; (8015db4 <tcp_send_empty_ack+0xc0>)
 8015d14:	f003 fbba 	bl	801948c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015d18:	7dfb      	ldrb	r3, [r7, #23]
 8015d1a:	009b      	lsls	r3, r3, #2
 8015d1c:	b2db      	uxtb	r3, r3
 8015d1e:	f003 0304 	and.w	r3, r3, #4
 8015d22:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015d24:	7d7b      	ldrb	r3, [r7, #21]
 8015d26:	b29c      	uxth	r4, r3
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7f8 fa54 	bl	800e1da <lwip_htonl>
 8015d32:	4603      	mov	r3, r0
 8015d34:	2200      	movs	r2, #0
 8015d36:	4621      	mov	r1, r4
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	f7ff fec1 	bl	8015ac0 <tcp_output_alloc_header>
 8015d3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d109      	bne.n	8015d5a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	8b5b      	ldrh	r3, [r3, #26]
 8015d4a:	f043 0303 	orr.w	r3, r3, #3
 8015d4e:	b29a      	uxth	r2, r3
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015d54:	f06f 0301 	mvn.w	r3, #1
 8015d58:	e023      	b.n	8015da2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015d5a:	7dbb      	ldrb	r3, [r7, #22]
 8015d5c:	7dfa      	ldrb	r2, [r7, #23]
 8015d5e:	6939      	ldr	r1, [r7, #16]
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f7ff feeb 	bl	8015b3c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	3304      	adds	r3, #4
 8015d6c:	6939      	ldr	r1, [r7, #16]
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f7ff ff24 	bl	8015bbc <tcp_output_control_segment>
 8015d74:	4603      	mov	r3, r0
 8015d76:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d007      	beq.n	8015d90 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	8b5b      	ldrh	r3, [r3, #26]
 8015d84:	f043 0303 	orr.w	r3, r3, #3
 8015d88:	b29a      	uxth	r2, r3
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	835a      	strh	r2, [r3, #26]
 8015d8e:	e006      	b.n	8015d9e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	8b5b      	ldrh	r3, [r3, #26]
 8015d94:	f023 0303 	bic.w	r3, r3, #3
 8015d98:	b29a      	uxth	r2, r3
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	371c      	adds	r7, #28
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd90      	pop	{r4, r7, pc}
 8015daa:	bf00      	nop
 8015dac:	0801c3d4 	.word	0x0801c3d4
 8015db0:	0801cb90 	.word	0x0801cb90
 8015db4:	0801c428 	.word	0x0801c428

08015db8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015db8:	b590      	push	{r4, r7, lr}
 8015dba:	b087      	sub	sp, #28
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d106      	bne.n	8015dd8 <tcp_keepalive+0x20>
 8015dca:	4b18      	ldr	r3, [pc, #96]	; (8015e2c <tcp_keepalive+0x74>)
 8015dcc:	f640 0224 	movw	r2, #2084	; 0x824
 8015dd0:	4917      	ldr	r1, [pc, #92]	; (8015e30 <tcp_keepalive+0x78>)
 8015dd2:	4818      	ldr	r0, [pc, #96]	; (8015e34 <tcp_keepalive+0x7c>)
 8015dd4:	f003 fb5a 	bl	801948c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015dd8:	7dfb      	ldrb	r3, [r7, #23]
 8015dda:	b29c      	uxth	r4, r3
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015de0:	3b01      	subs	r3, #1
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7f8 f9f9 	bl	800e1da <lwip_htonl>
 8015de8:	4603      	mov	r3, r0
 8015dea:	2200      	movs	r2, #0
 8015dec:	4621      	mov	r1, r4
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f7ff fe66 	bl	8015ac0 <tcp_output_alloc_header>
 8015df4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d102      	bne.n	8015e02 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e00:	e010      	b.n	8015e24 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015e02:	7dfb      	ldrb	r3, [r7, #23]
 8015e04:	2200      	movs	r2, #0
 8015e06:	6939      	ldr	r1, [r7, #16]
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f7ff fe97 	bl	8015b3c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015e0e:	687a      	ldr	r2, [r7, #4]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	3304      	adds	r3, #4
 8015e14:	6939      	ldr	r1, [r7, #16]
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f7ff fed0 	bl	8015bbc <tcp_output_control_segment>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	371c      	adds	r7, #28
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd90      	pop	{r4, r7, pc}
 8015e2c:	0801c3d4 	.word	0x0801c3d4
 8015e30:	0801cbb0 	.word	0x0801cbb0
 8015e34:	0801c428 	.word	0x0801c428

08015e38 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015e38:	b590      	push	{r4, r7, lr}
 8015e3a:	b08b      	sub	sp, #44	; 0x2c
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015e40:	2300      	movs	r3, #0
 8015e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d106      	bne.n	8015e5a <tcp_zero_window_probe+0x22>
 8015e4c:	4b4c      	ldr	r3, [pc, #304]	; (8015f80 <tcp_zero_window_probe+0x148>)
 8015e4e:	f640 024f 	movw	r2, #2127	; 0x84f
 8015e52:	494c      	ldr	r1, [pc, #304]	; (8015f84 <tcp_zero_window_probe+0x14c>)
 8015e54:	484c      	ldr	r0, [pc, #304]	; (8015f88 <tcp_zero_window_probe+0x150>)
 8015e56:	f003 fb19 	bl	801948c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e5e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015e60:	6a3b      	ldr	r3, [r7, #32]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d101      	bne.n	8015e6a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015e66:	2300      	movs	r3, #0
 8015e68:	e086      	b.n	8015f78 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015e70:	2bff      	cmp	r3, #255	; 0xff
 8015e72:	d007      	beq.n	8015e84 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	b2da      	uxtb	r2, r3
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015e84:	6a3b      	ldr	r3, [r7, #32]
 8015e86:	68db      	ldr	r3, [r3, #12]
 8015e88:	899b      	ldrh	r3, [r3, #12]
 8015e8a:	b29b      	uxth	r3, r3
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7f8 f98f 	bl	800e1b0 <lwip_htons>
 8015e92:	4603      	mov	r3, r0
 8015e94:	b2db      	uxtb	r3, r3
 8015e96:	f003 0301 	and.w	r3, r3, #1
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d005      	beq.n	8015eaa <tcp_zero_window_probe+0x72>
 8015e9e:	6a3b      	ldr	r3, [r7, #32]
 8015ea0:	891b      	ldrh	r3, [r3, #8]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d101      	bne.n	8015eaa <tcp_zero_window_probe+0x72>
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	e000      	b.n	8015eac <tcp_zero_window_probe+0x74>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015eae:	7ffb      	ldrb	r3, [r7, #31]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	bf0c      	ite	eq
 8015eb4:	2301      	moveq	r3, #1
 8015eb6:	2300      	movne	r3, #0
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ec0:	b299      	uxth	r1, r3
 8015ec2:	6a3b      	ldr	r3, [r7, #32]
 8015ec4:	68db      	ldr	r3, [r3, #12]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	8bba      	ldrh	r2, [r7, #28]
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	f7ff fdf8 	bl	8015ac0 <tcp_output_alloc_header>
 8015ed0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015ed2:	69bb      	ldr	r3, [r7, #24]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d102      	bne.n	8015ede <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015edc:	e04c      	b.n	8015f78 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015ede:	69bb      	ldr	r3, [r7, #24]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015ee4:	7ffb      	ldrb	r3, [r7, #31]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d011      	beq.n	8015f0e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015eea:	697b      	ldr	r3, [r7, #20]
 8015eec:	899b      	ldrh	r3, [r3, #12]
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	b21b      	sxth	r3, r3
 8015ef2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015ef6:	b21c      	sxth	r4, r3
 8015ef8:	2011      	movs	r0, #17
 8015efa:	f7f8 f959 	bl	800e1b0 <lwip_htons>
 8015efe:	4603      	mov	r3, r0
 8015f00:	b21b      	sxth	r3, r3
 8015f02:	4323      	orrs	r3, r4
 8015f04:	b21b      	sxth	r3, r3
 8015f06:	b29a      	uxth	r2, r3
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	819a      	strh	r2, [r3, #12]
 8015f0c:	e010      	b.n	8015f30 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015f0e:	69bb      	ldr	r3, [r7, #24]
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	3314      	adds	r3, #20
 8015f14:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015f16:	6a3b      	ldr	r3, [r7, #32]
 8015f18:	6858      	ldr	r0, [r3, #4]
 8015f1a:	6a3b      	ldr	r3, [r7, #32]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	891a      	ldrh	r2, [r3, #8]
 8015f20:	6a3b      	ldr	r3, [r7, #32]
 8015f22:	891b      	ldrh	r3, [r3, #8]
 8015f24:	1ad3      	subs	r3, r2, r3
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	2201      	movs	r2, #1
 8015f2a:	6939      	ldr	r1, [r7, #16]
 8015f2c:	f7f9 ff28 	bl	800fd80 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015f30:	6a3b      	ldr	r3, [r7, #32]
 8015f32:	68db      	ldr	r3, [r3, #12]
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7f8 f94f 	bl	800e1da <lwip_htonl>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	3301      	adds	r3, #1
 8015f40:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	1ad3      	subs	r3, r2, r3
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	da02      	bge.n	8015f54 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	68fa      	ldr	r2, [r7, #12]
 8015f52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f58:	2200      	movs	r2, #0
 8015f5a:	69b9      	ldr	r1, [r7, #24]
 8015f5c:	6878      	ldr	r0, [r7, #4]
 8015f5e:	f7ff fded 	bl	8015b3c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015f62:	687a      	ldr	r2, [r7, #4]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	3304      	adds	r3, #4
 8015f68:	69b9      	ldr	r1, [r7, #24]
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f7ff fe26 	bl	8015bbc <tcp_output_control_segment>
 8015f70:	4603      	mov	r3, r0
 8015f72:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015f74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	372c      	adds	r7, #44	; 0x2c
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd90      	pop	{r4, r7, pc}
 8015f80:	0801c3d4 	.word	0x0801c3d4
 8015f84:	0801cbcc 	.word	0x0801cbcc
 8015f88:	0801c428 	.word	0x0801c428

08015f8c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b082      	sub	sp, #8
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015f94:	f7f9 ffe2 	bl	800ff5c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015f98:	4b0a      	ldr	r3, [pc, #40]	; (8015fc4 <tcpip_tcp_timer+0x38>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d103      	bne.n	8015fa8 <tcpip_tcp_timer+0x1c>
 8015fa0:	4b09      	ldr	r3, [pc, #36]	; (8015fc8 <tcpip_tcp_timer+0x3c>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d005      	beq.n	8015fb4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015fa8:	2200      	movs	r2, #0
 8015faa:	4908      	ldr	r1, [pc, #32]	; (8015fcc <tcpip_tcp_timer+0x40>)
 8015fac:	20fa      	movs	r0, #250	; 0xfa
 8015fae:	f000 f8f3 	bl	8016198 <sys_timeout>
 8015fb2:	e003      	b.n	8015fbc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015fb4:	4b06      	ldr	r3, [pc, #24]	; (8015fd0 <tcpip_tcp_timer+0x44>)
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	601a      	str	r2, [r3, #0]
  }
}
 8015fba:	bf00      	nop
 8015fbc:	bf00      	nop
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}
 8015fc4:	2004efd0 	.word	0x2004efd0
 8015fc8:	2004efd4 	.word	0x2004efd4
 8015fcc:	08015f8d 	.word	0x08015f8d
 8015fd0:	2004f01c 	.word	0x2004f01c

08015fd4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015fd8:	4b0a      	ldr	r3, [pc, #40]	; (8016004 <tcp_timer_needed+0x30>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d10f      	bne.n	8016000 <tcp_timer_needed+0x2c>
 8015fe0:	4b09      	ldr	r3, [pc, #36]	; (8016008 <tcp_timer_needed+0x34>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d103      	bne.n	8015ff0 <tcp_timer_needed+0x1c>
 8015fe8:	4b08      	ldr	r3, [pc, #32]	; (801600c <tcp_timer_needed+0x38>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d007      	beq.n	8016000 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015ff0:	4b04      	ldr	r3, [pc, #16]	; (8016004 <tcp_timer_needed+0x30>)
 8015ff2:	2201      	movs	r2, #1
 8015ff4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	4905      	ldr	r1, [pc, #20]	; (8016010 <tcp_timer_needed+0x3c>)
 8015ffa:	20fa      	movs	r0, #250	; 0xfa
 8015ffc:	f000 f8cc 	bl	8016198 <sys_timeout>
  }
}
 8016000:	bf00      	nop
 8016002:	bd80      	pop	{r7, pc}
 8016004:	2004f01c 	.word	0x2004f01c
 8016008:	2004efd0 	.word	0x2004efd0
 801600c:	2004efd4 	.word	0x2004efd4
 8016010:	08015f8d 	.word	0x08015f8d

08016014 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b086      	sub	sp, #24
 8016018:	af00      	add	r7, sp, #0
 801601a:	60f8      	str	r0, [r7, #12]
 801601c:	60b9      	str	r1, [r7, #8]
 801601e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016020:	200a      	movs	r0, #10
 8016022:	f7f8 fd9d 	bl	800eb60 <memp_malloc>
 8016026:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d109      	bne.n	8016042 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d151      	bne.n	80160d8 <sys_timeout_abs+0xc4>
 8016034:	4b2a      	ldr	r3, [pc, #168]	; (80160e0 <sys_timeout_abs+0xcc>)
 8016036:	22be      	movs	r2, #190	; 0xbe
 8016038:	492a      	ldr	r1, [pc, #168]	; (80160e4 <sys_timeout_abs+0xd0>)
 801603a:	482b      	ldr	r0, [pc, #172]	; (80160e8 <sys_timeout_abs+0xd4>)
 801603c:	f003 fa26 	bl	801948c <iprintf>
    return;
 8016040:	e04a      	b.n	80160d8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	2200      	movs	r2, #0
 8016046:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	68ba      	ldr	r2, [r7, #8]
 801604c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801604e:	693b      	ldr	r3, [r7, #16]
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	68fa      	ldr	r2, [r7, #12]
 8016058:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801605a:	4b24      	ldr	r3, [pc, #144]	; (80160ec <sys_timeout_abs+0xd8>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d103      	bne.n	801606a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016062:	4a22      	ldr	r2, [pc, #136]	; (80160ec <sys_timeout_abs+0xd8>)
 8016064:	693b      	ldr	r3, [r7, #16]
 8016066:	6013      	str	r3, [r2, #0]
    return;
 8016068:	e037      	b.n	80160da <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	685a      	ldr	r2, [r3, #4]
 801606e:	4b1f      	ldr	r3, [pc, #124]	; (80160ec <sys_timeout_abs+0xd8>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	685b      	ldr	r3, [r3, #4]
 8016074:	1ad3      	subs	r3, r2, r3
 8016076:	0fdb      	lsrs	r3, r3, #31
 8016078:	f003 0301 	and.w	r3, r3, #1
 801607c:	b2db      	uxtb	r3, r3
 801607e:	2b00      	cmp	r3, #0
 8016080:	d007      	beq.n	8016092 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016082:	4b1a      	ldr	r3, [pc, #104]	; (80160ec <sys_timeout_abs+0xd8>)
 8016084:	681a      	ldr	r2, [r3, #0]
 8016086:	693b      	ldr	r3, [r7, #16]
 8016088:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801608a:	4a18      	ldr	r2, [pc, #96]	; (80160ec <sys_timeout_abs+0xd8>)
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	6013      	str	r3, [r2, #0]
 8016090:	e023      	b.n	80160da <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016092:	4b16      	ldr	r3, [pc, #88]	; (80160ec <sys_timeout_abs+0xd8>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	617b      	str	r3, [r7, #20]
 8016098:	e01a      	b.n	80160d0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d00b      	beq.n	80160ba <sys_timeout_abs+0xa6>
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	685a      	ldr	r2, [r3, #4]
 80160a6:	697b      	ldr	r3, [r7, #20]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	1ad3      	subs	r3, r2, r3
 80160ae:	0fdb      	lsrs	r3, r3, #31
 80160b0:	f003 0301 	and.w	r3, r3, #1
 80160b4:	b2db      	uxtb	r3, r3
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d007      	beq.n	80160ca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80160ba:	697b      	ldr	r3, [r7, #20]
 80160bc:	681a      	ldr	r2, [r3, #0]
 80160be:	693b      	ldr	r3, [r7, #16]
 80160c0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80160c2:	697b      	ldr	r3, [r7, #20]
 80160c4:	693a      	ldr	r2, [r7, #16]
 80160c6:	601a      	str	r2, [r3, #0]
        break;
 80160c8:	e007      	b.n	80160da <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80160ca:	697b      	ldr	r3, [r7, #20]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	617b      	str	r3, [r7, #20]
 80160d0:	697b      	ldr	r3, [r7, #20]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d1e1      	bne.n	801609a <sys_timeout_abs+0x86>
 80160d6:	e000      	b.n	80160da <sys_timeout_abs+0xc6>
    return;
 80160d8:	bf00      	nop
      }
    }
  }
}
 80160da:	3718      	adds	r7, #24
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}
 80160e0:	0801cbf0 	.word	0x0801cbf0
 80160e4:	0801cc24 	.word	0x0801cc24
 80160e8:	0801cc64 	.word	0x0801cc64
 80160ec:	2004f014 	.word	0x2004f014

080160f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b086      	sub	sp, #24
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	4798      	blx	r3

  now = sys_now();
 8016102:	f7f2 f977 	bl	80083f4 <sys_now>
 8016106:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016108:	697b      	ldr	r3, [r7, #20]
 801610a:	681a      	ldr	r2, [r3, #0]
 801610c:	4b0f      	ldr	r3, [pc, #60]	; (801614c <lwip_cyclic_timer+0x5c>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	4413      	add	r3, r2
 8016112:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016114:	68fa      	ldr	r2, [r7, #12]
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	1ad3      	subs	r3, r2, r3
 801611a:	0fdb      	lsrs	r3, r3, #31
 801611c:	f003 0301 	and.w	r3, r3, #1
 8016120:	b2db      	uxtb	r3, r3
 8016122:	2b00      	cmp	r3, #0
 8016124:	d009      	beq.n	801613a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016126:	697b      	ldr	r3, [r7, #20]
 8016128:	681a      	ldr	r2, [r3, #0]
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	4413      	add	r3, r2
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	4907      	ldr	r1, [pc, #28]	; (8016150 <lwip_cyclic_timer+0x60>)
 8016132:	4618      	mov	r0, r3
 8016134:	f7ff ff6e 	bl	8016014 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016138:	e004      	b.n	8016144 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801613a:	687a      	ldr	r2, [r7, #4]
 801613c:	4904      	ldr	r1, [pc, #16]	; (8016150 <lwip_cyclic_timer+0x60>)
 801613e:	68f8      	ldr	r0, [r7, #12]
 8016140:	f7ff ff68 	bl	8016014 <sys_timeout_abs>
}
 8016144:	bf00      	nop
 8016146:	3718      	adds	r7, #24
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}
 801614c:	2004f018 	.word	0x2004f018
 8016150:	080160f1 	.word	0x080160f1

08016154 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801615a:	2301      	movs	r3, #1
 801615c:	607b      	str	r3, [r7, #4]
 801615e:	e00e      	b.n	801617e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016160:	4a0b      	ldr	r2, [pc, #44]	; (8016190 <sys_timeouts_init+0x3c>)
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	00db      	lsls	r3, r3, #3
 801616c:	4a08      	ldr	r2, [pc, #32]	; (8016190 <sys_timeouts_init+0x3c>)
 801616e:	4413      	add	r3, r2
 8016170:	461a      	mov	r2, r3
 8016172:	4908      	ldr	r1, [pc, #32]	; (8016194 <sys_timeouts_init+0x40>)
 8016174:	f000 f810 	bl	8016198 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	3301      	adds	r3, #1
 801617c:	607b      	str	r3, [r7, #4]
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	2b02      	cmp	r3, #2
 8016182:	d9ed      	bls.n	8016160 <sys_timeouts_init+0xc>
  }
}
 8016184:	bf00      	nop
 8016186:	bf00      	nop
 8016188:	3708      	adds	r7, #8
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}
 801618e:	bf00      	nop
 8016190:	0801d868 	.word	0x0801d868
 8016194:	080160f1 	.word	0x080160f1

08016198 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b086      	sub	sp, #24
 801619c:	af00      	add	r7, sp, #0
 801619e:	60f8      	str	r0, [r7, #12]
 80161a0:	60b9      	str	r1, [r7, #8]
 80161a2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80161aa:	d306      	bcc.n	80161ba <sys_timeout+0x22>
 80161ac:	4b0a      	ldr	r3, [pc, #40]	; (80161d8 <sys_timeout+0x40>)
 80161ae:	f240 1229 	movw	r2, #297	; 0x129
 80161b2:	490a      	ldr	r1, [pc, #40]	; (80161dc <sys_timeout+0x44>)
 80161b4:	480a      	ldr	r0, [pc, #40]	; (80161e0 <sys_timeout+0x48>)
 80161b6:	f003 f969 	bl	801948c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80161ba:	f7f2 f91b 	bl	80083f4 <sys_now>
 80161be:	4602      	mov	r2, r0
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	4413      	add	r3, r2
 80161c4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	68b9      	ldr	r1, [r7, #8]
 80161ca:	6978      	ldr	r0, [r7, #20]
 80161cc:	f7ff ff22 	bl	8016014 <sys_timeout_abs>
#endif
}
 80161d0:	bf00      	nop
 80161d2:	3718      	adds	r7, #24
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	0801cbf0 	.word	0x0801cbf0
 80161dc:	0801cc8c 	.word	0x0801cc8c
 80161e0:	0801cc64 	.word	0x0801cc64

080161e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80161ea:	f7f2 f903 	bl	80083f4 <sys_now>
 80161ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80161f0:	4b17      	ldr	r3, [pc, #92]	; (8016250 <sys_check_timeouts+0x6c>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80161f6:	68bb      	ldr	r3, [r7, #8]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d022      	beq.n	8016242 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	68fa      	ldr	r2, [r7, #12]
 8016202:	1ad3      	subs	r3, r2, r3
 8016204:	0fdb      	lsrs	r3, r3, #31
 8016206:	f003 0301 	and.w	r3, r3, #1
 801620a:	b2db      	uxtb	r3, r3
 801620c:	2b00      	cmp	r3, #0
 801620e:	d11a      	bne.n	8016246 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	4a0e      	ldr	r2, [pc, #56]	; (8016250 <sys_check_timeouts+0x6c>)
 8016216:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	689b      	ldr	r3, [r3, #8]
 801621c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	685b      	ldr	r3, [r3, #4]
 8016228:	4a0a      	ldr	r2, [pc, #40]	; (8016254 <sys_check_timeouts+0x70>)
 801622a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801622c:	68b9      	ldr	r1, [r7, #8]
 801622e:	200a      	movs	r0, #10
 8016230:	f7f8 fd0c 	bl	800ec4c <memp_free>
    if (handler != NULL) {
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d0da      	beq.n	80161f0 <sys_check_timeouts+0xc>
      handler(arg);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	6838      	ldr	r0, [r7, #0]
 801623e:	4798      	blx	r3
  do {
 8016240:	e7d6      	b.n	80161f0 <sys_check_timeouts+0xc>
      return;
 8016242:	bf00      	nop
 8016244:	e000      	b.n	8016248 <sys_check_timeouts+0x64>
      return;
 8016246:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016248:	3710      	adds	r7, #16
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	2004f014 	.word	0x2004f014
 8016254:	2004f018 	.word	0x2004f018

08016258 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b082      	sub	sp, #8
 801625c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801625e:	4b16      	ldr	r3, [pc, #88]	; (80162b8 <sys_timeouts_sleeptime+0x60>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d102      	bne.n	801626c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801626a:	e020      	b.n	80162ae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801626c:	f7f2 f8c2 	bl	80083f4 <sys_now>
 8016270:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016272:	4b11      	ldr	r3, [pc, #68]	; (80162b8 <sys_timeouts_sleeptime+0x60>)
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	685a      	ldr	r2, [r3, #4]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	1ad3      	subs	r3, r2, r3
 801627c:	0fdb      	lsrs	r3, r3, #31
 801627e:	f003 0301 	and.w	r3, r3, #1
 8016282:	b2db      	uxtb	r3, r3
 8016284:	2b00      	cmp	r3, #0
 8016286:	d001      	beq.n	801628c <sys_timeouts_sleeptime+0x34>
    return 0;
 8016288:	2300      	movs	r3, #0
 801628a:	e010      	b.n	80162ae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801628c:	4b0a      	ldr	r3, [pc, #40]	; (80162b8 <sys_timeouts_sleeptime+0x60>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	685a      	ldr	r2, [r3, #4]
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	1ad3      	subs	r3, r2, r3
 8016296:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	da06      	bge.n	80162ac <sys_timeouts_sleeptime+0x54>
 801629e:	4b07      	ldr	r3, [pc, #28]	; (80162bc <sys_timeouts_sleeptime+0x64>)
 80162a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80162a4:	4906      	ldr	r1, [pc, #24]	; (80162c0 <sys_timeouts_sleeptime+0x68>)
 80162a6:	4807      	ldr	r0, [pc, #28]	; (80162c4 <sys_timeouts_sleeptime+0x6c>)
 80162a8:	f003 f8f0 	bl	801948c <iprintf>
    return ret;
 80162ac:	683b      	ldr	r3, [r7, #0]
  }
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3708      	adds	r7, #8
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	2004f014 	.word	0x2004f014
 80162bc:	0801cbf0 	.word	0x0801cbf0
 80162c0:	0801ccc4 	.word	0x0801ccc4
 80162c4:	0801cc64 	.word	0x0801cc64

080162c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80162cc:	f003 f8f6 	bl	80194bc <rand>
 80162d0:	4603      	mov	r3, r0
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80162d8:	b29b      	uxth	r3, r3
 80162da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80162de:	b29a      	uxth	r2, r3
 80162e0:	4b01      	ldr	r3, [pc, #4]	; (80162e8 <udp_init+0x20>)
 80162e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80162e4:	bf00      	nop
 80162e6:	bd80      	pop	{r7, pc}
 80162e8:	20001a58 	.word	0x20001a58

080162ec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80162ec:	b480      	push	{r7}
 80162ee:	b083      	sub	sp, #12
 80162f0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80162f2:	2300      	movs	r3, #0
 80162f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80162f6:	4b17      	ldr	r3, [pc, #92]	; (8016354 <udp_new_port+0x68>)
 80162f8:	881b      	ldrh	r3, [r3, #0]
 80162fa:	1c5a      	adds	r2, r3, #1
 80162fc:	b291      	uxth	r1, r2
 80162fe:	4a15      	ldr	r2, [pc, #84]	; (8016354 <udp_new_port+0x68>)
 8016300:	8011      	strh	r1, [r2, #0]
 8016302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016306:	4293      	cmp	r3, r2
 8016308:	d103      	bne.n	8016312 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801630a:	4b12      	ldr	r3, [pc, #72]	; (8016354 <udp_new_port+0x68>)
 801630c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016310:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016312:	4b11      	ldr	r3, [pc, #68]	; (8016358 <udp_new_port+0x6c>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	603b      	str	r3, [r7, #0]
 8016318:	e011      	b.n	801633e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	8a5a      	ldrh	r2, [r3, #18]
 801631e:	4b0d      	ldr	r3, [pc, #52]	; (8016354 <udp_new_port+0x68>)
 8016320:	881b      	ldrh	r3, [r3, #0]
 8016322:	429a      	cmp	r2, r3
 8016324:	d108      	bne.n	8016338 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016326:	88fb      	ldrh	r3, [r7, #6]
 8016328:	3301      	adds	r3, #1
 801632a:	80fb      	strh	r3, [r7, #6]
 801632c:	88fb      	ldrh	r3, [r7, #6]
 801632e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016332:	d3e0      	bcc.n	80162f6 <udp_new_port+0xa>
        return 0;
 8016334:	2300      	movs	r3, #0
 8016336:	e007      	b.n	8016348 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	68db      	ldr	r3, [r3, #12]
 801633c:	603b      	str	r3, [r7, #0]
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d1ea      	bne.n	801631a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016344:	4b03      	ldr	r3, [pc, #12]	; (8016354 <udp_new_port+0x68>)
 8016346:	881b      	ldrh	r3, [r3, #0]
}
 8016348:	4618      	mov	r0, r3
 801634a:	370c      	adds	r7, #12
 801634c:	46bd      	mov	sp, r7
 801634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016352:	4770      	bx	lr
 8016354:	20001a58 	.word	0x20001a58
 8016358:	2004f020 	.word	0x2004f020

0801635c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b084      	sub	sp, #16
 8016360:	af00      	add	r7, sp, #0
 8016362:	60f8      	str	r0, [r7, #12]
 8016364:	60b9      	str	r1, [r7, #8]
 8016366:	4613      	mov	r3, r2
 8016368:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d105      	bne.n	801637c <udp_input_local_match+0x20>
 8016370:	4b27      	ldr	r3, [pc, #156]	; (8016410 <udp_input_local_match+0xb4>)
 8016372:	2287      	movs	r2, #135	; 0x87
 8016374:	4927      	ldr	r1, [pc, #156]	; (8016414 <udp_input_local_match+0xb8>)
 8016376:	4828      	ldr	r0, [pc, #160]	; (8016418 <udp_input_local_match+0xbc>)
 8016378:	f003 f888 	bl	801948c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d105      	bne.n	801638e <udp_input_local_match+0x32>
 8016382:	4b23      	ldr	r3, [pc, #140]	; (8016410 <udp_input_local_match+0xb4>)
 8016384:	2288      	movs	r2, #136	; 0x88
 8016386:	4925      	ldr	r1, [pc, #148]	; (801641c <udp_input_local_match+0xc0>)
 8016388:	4823      	ldr	r0, [pc, #140]	; (8016418 <udp_input_local_match+0xbc>)
 801638a:	f003 f87f 	bl	801948c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	7a1b      	ldrb	r3, [r3, #8]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d00b      	beq.n	80163ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	7a1a      	ldrb	r2, [r3, #8]
 801639a:	4b21      	ldr	r3, [pc, #132]	; (8016420 <udp_input_local_match+0xc4>)
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80163a2:	3301      	adds	r3, #1
 80163a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80163a6:	429a      	cmp	r2, r3
 80163a8:	d001      	beq.n	80163ae <udp_input_local_match+0x52>
    return 0;
 80163aa:	2300      	movs	r3, #0
 80163ac:	e02b      	b.n	8016406 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80163ae:	79fb      	ldrb	r3, [r7, #7]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d018      	beq.n	80163e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d013      	beq.n	80163e2 <udp_input_local_match+0x86>
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d00f      	beq.n	80163e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80163c2:	4b17      	ldr	r3, [pc, #92]	; (8016420 <udp_input_local_match+0xc4>)
 80163c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80163c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80163ca:	d00a      	beq.n	80163e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	681a      	ldr	r2, [r3, #0]
 80163d0:	4b13      	ldr	r3, [pc, #76]	; (8016420 <udp_input_local_match+0xc4>)
 80163d2:	695b      	ldr	r3, [r3, #20]
 80163d4:	405a      	eors	r2, r3
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	3308      	adds	r3, #8
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d110      	bne.n	8016404 <udp_input_local_match+0xa8>
          return 1;
 80163e2:	2301      	movs	r3, #1
 80163e4:	e00f      	b.n	8016406 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d009      	beq.n	8016400 <udp_input_local_match+0xa4>
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d005      	beq.n	8016400 <udp_input_local_match+0xa4>
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	4b09      	ldr	r3, [pc, #36]	; (8016420 <udp_input_local_match+0xc4>)
 80163fa:	695b      	ldr	r3, [r3, #20]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d101      	bne.n	8016404 <udp_input_local_match+0xa8>
        return 1;
 8016400:	2301      	movs	r3, #1
 8016402:	e000      	b.n	8016406 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016404:	2300      	movs	r3, #0
}
 8016406:	4618      	mov	r0, r3
 8016408:	3710      	adds	r7, #16
 801640a:	46bd      	mov	sp, r7
 801640c:	bd80      	pop	{r7, pc}
 801640e:	bf00      	nop
 8016410:	0801ccd8 	.word	0x0801ccd8
 8016414:	0801cd08 	.word	0x0801cd08
 8016418:	0801cd2c 	.word	0x0801cd2c
 801641c:	0801cd54 	.word	0x0801cd54
 8016420:	2004aeb0 	.word	0x2004aeb0

08016424 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016424:	b590      	push	{r4, r7, lr}
 8016426:	b08d      	sub	sp, #52	; 0x34
 8016428:	af02      	add	r7, sp, #8
 801642a:	6078      	str	r0, [r7, #4]
 801642c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801642e:	2300      	movs	r3, #0
 8016430:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d105      	bne.n	8016444 <udp_input+0x20>
 8016438:	4b7c      	ldr	r3, [pc, #496]	; (801662c <udp_input+0x208>)
 801643a:	22cf      	movs	r2, #207	; 0xcf
 801643c:	497c      	ldr	r1, [pc, #496]	; (8016630 <udp_input+0x20c>)
 801643e:	487d      	ldr	r0, [pc, #500]	; (8016634 <udp_input+0x210>)
 8016440:	f003 f824 	bl	801948c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d105      	bne.n	8016456 <udp_input+0x32>
 801644a:	4b78      	ldr	r3, [pc, #480]	; (801662c <udp_input+0x208>)
 801644c:	22d0      	movs	r2, #208	; 0xd0
 801644e:	497a      	ldr	r1, [pc, #488]	; (8016638 <udp_input+0x214>)
 8016450:	4878      	ldr	r0, [pc, #480]	; (8016634 <udp_input+0x210>)
 8016452:	f003 f81b 	bl	801948c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	895b      	ldrh	r3, [r3, #10]
 801645a:	2b07      	cmp	r3, #7
 801645c:	d803      	bhi.n	8016466 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f7f9 fa98 	bl	800f994 <pbuf_free>
    goto end;
 8016464:	e0de      	b.n	8016624 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	685b      	ldr	r3, [r3, #4]
 801646a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801646c:	4b73      	ldr	r3, [pc, #460]	; (801663c <udp_input+0x218>)
 801646e:	695b      	ldr	r3, [r3, #20]
 8016470:	4a72      	ldr	r2, [pc, #456]	; (801663c <udp_input+0x218>)
 8016472:	6812      	ldr	r2, [r2, #0]
 8016474:	4611      	mov	r1, r2
 8016476:	4618      	mov	r0, r3
 8016478:	f001 fd54 	bl	8017f24 <ip4_addr_isbroadcast_u32>
 801647c:	4603      	mov	r3, r0
 801647e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016480:	697b      	ldr	r3, [r7, #20]
 8016482:	881b      	ldrh	r3, [r3, #0]
 8016484:	b29b      	uxth	r3, r3
 8016486:	4618      	mov	r0, r3
 8016488:	f7f7 fe92 	bl	800e1b0 <lwip_htons>
 801648c:	4603      	mov	r3, r0
 801648e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016490:	697b      	ldr	r3, [r7, #20]
 8016492:	885b      	ldrh	r3, [r3, #2]
 8016494:	b29b      	uxth	r3, r3
 8016496:	4618      	mov	r0, r3
 8016498:	f7f7 fe8a 	bl	800e1b0 <lwip_htons>
 801649c:	4603      	mov	r3, r0
 801649e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80164a0:	2300      	movs	r3, #0
 80164a2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80164a4:	2300      	movs	r3, #0
 80164a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80164a8:	2300      	movs	r3, #0
 80164aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80164ac:	4b64      	ldr	r3, [pc, #400]	; (8016640 <udp_input+0x21c>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	627b      	str	r3, [r7, #36]	; 0x24
 80164b2:	e054      	b.n	801655e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80164b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b6:	8a5b      	ldrh	r3, [r3, #18]
 80164b8:	89fa      	ldrh	r2, [r7, #14]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d14a      	bne.n	8016554 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80164be:	7cfb      	ldrb	r3, [r7, #19]
 80164c0:	461a      	mov	r2, r3
 80164c2:	6839      	ldr	r1, [r7, #0]
 80164c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164c6:	f7ff ff49 	bl	801635c <udp_input_local_match>
 80164ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d041      	beq.n	8016554 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80164d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d2:	7c1b      	ldrb	r3, [r3, #16]
 80164d4:	f003 0304 	and.w	r3, r3, #4
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d11d      	bne.n	8016518 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d102      	bne.n	80164e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80164e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e4:	61fb      	str	r3, [r7, #28]
 80164e6:	e017      	b.n	8016518 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80164e8:	7cfb      	ldrb	r3, [r7, #19]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d014      	beq.n	8016518 <udp_input+0xf4>
 80164ee:	4b53      	ldr	r3, [pc, #332]	; (801663c <udp_input+0x218>)
 80164f0:	695b      	ldr	r3, [r3, #20]
 80164f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164f6:	d10f      	bne.n	8016518 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80164f8:	69fb      	ldr	r3, [r7, #28]
 80164fa:	681a      	ldr	r2, [r3, #0]
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	3304      	adds	r3, #4
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	429a      	cmp	r2, r3
 8016504:	d008      	beq.n	8016518 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016508:	681a      	ldr	r2, [r3, #0]
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	3304      	adds	r3, #4
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	429a      	cmp	r2, r3
 8016512:	d101      	bne.n	8016518 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016516:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651a:	8a9b      	ldrh	r3, [r3, #20]
 801651c:	8a3a      	ldrh	r2, [r7, #16]
 801651e:	429a      	cmp	r2, r3
 8016520:	d118      	bne.n	8016554 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016524:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016526:	2b00      	cmp	r3, #0
 8016528:	d005      	beq.n	8016536 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652c:	685a      	ldr	r2, [r3, #4]
 801652e:	4b43      	ldr	r3, [pc, #268]	; (801663c <udp_input+0x218>)
 8016530:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016532:	429a      	cmp	r2, r3
 8016534:	d10e      	bne.n	8016554 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016536:	6a3b      	ldr	r3, [r7, #32]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d014      	beq.n	8016566 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801653e:	68da      	ldr	r2, [r3, #12]
 8016540:	6a3b      	ldr	r3, [r7, #32]
 8016542:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016544:	4b3e      	ldr	r3, [pc, #248]	; (8016640 <udp_input+0x21c>)
 8016546:	681a      	ldr	r2, [r3, #0]
 8016548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801654c:	4a3c      	ldr	r2, [pc, #240]	; (8016640 <udp_input+0x21c>)
 801654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016550:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016552:	e008      	b.n	8016566 <udp_input+0x142>
      }
    }

    prev = pcb;
 8016554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016556:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	627b      	str	r3, [r7, #36]	; 0x24
 801655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016560:	2b00      	cmp	r3, #0
 8016562:	d1a7      	bne.n	80164b4 <udp_input+0x90>
 8016564:	e000      	b.n	8016568 <udp_input+0x144>
        break;
 8016566:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801656a:	2b00      	cmp	r3, #0
 801656c:	d101      	bne.n	8016572 <udp_input+0x14e>
    pcb = uncon_pcb;
 801656e:	69fb      	ldr	r3, [r7, #28]
 8016570:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016574:	2b00      	cmp	r3, #0
 8016576:	d002      	beq.n	801657e <udp_input+0x15a>
    for_us = 1;
 8016578:	2301      	movs	r3, #1
 801657a:	76fb      	strb	r3, [r7, #27]
 801657c:	e00a      	b.n	8016594 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	3304      	adds	r3, #4
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	4b2d      	ldr	r3, [pc, #180]	; (801663c <udp_input+0x218>)
 8016586:	695b      	ldr	r3, [r3, #20]
 8016588:	429a      	cmp	r2, r3
 801658a:	bf0c      	ite	eq
 801658c:	2301      	moveq	r3, #1
 801658e:	2300      	movne	r3, #0
 8016590:	b2db      	uxtb	r3, r3
 8016592:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016594:	7efb      	ldrb	r3, [r7, #27]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d041      	beq.n	801661e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801659a:	2108      	movs	r1, #8
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f7f9 f973 	bl	800f888 <pbuf_remove_header>
 80165a2:	4603      	mov	r3, r0
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d00a      	beq.n	80165be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80165a8:	4b20      	ldr	r3, [pc, #128]	; (801662c <udp_input+0x208>)
 80165aa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80165ae:	4925      	ldr	r1, [pc, #148]	; (8016644 <udp_input+0x220>)
 80165b0:	4820      	ldr	r0, [pc, #128]	; (8016634 <udp_input+0x210>)
 80165b2:	f002 ff6b 	bl	801948c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80165b6:	6878      	ldr	r0, [r7, #4]
 80165b8:	f7f9 f9ec 	bl	800f994 <pbuf_free>
      goto end;
 80165bc:	e032      	b.n	8016624 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80165be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d012      	beq.n	80165ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80165c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c6:	699b      	ldr	r3, [r3, #24]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d00a      	beq.n	80165e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80165cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ce:	699c      	ldr	r4, [r3, #24]
 80165d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d2:	69d8      	ldr	r0, [r3, #28]
 80165d4:	8a3b      	ldrh	r3, [r7, #16]
 80165d6:	9300      	str	r3, [sp, #0]
 80165d8:	4b1b      	ldr	r3, [pc, #108]	; (8016648 <udp_input+0x224>)
 80165da:	687a      	ldr	r2, [r7, #4]
 80165dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80165e0:	e021      	b.n	8016626 <udp_input+0x202>
        pbuf_free(p);
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f7f9 f9d6 	bl	800f994 <pbuf_free>
        goto end;
 80165e8:	e01c      	b.n	8016624 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80165ea:	7cfb      	ldrb	r3, [r7, #19]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d112      	bne.n	8016616 <udp_input+0x1f2>
 80165f0:	4b12      	ldr	r3, [pc, #72]	; (801663c <udp_input+0x218>)
 80165f2:	695b      	ldr	r3, [r3, #20]
 80165f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80165f8:	2be0      	cmp	r3, #224	; 0xe0
 80165fa:	d00c      	beq.n	8016616 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80165fc:	4b0f      	ldr	r3, [pc, #60]	; (801663c <udp_input+0x218>)
 80165fe:	899b      	ldrh	r3, [r3, #12]
 8016600:	3308      	adds	r3, #8
 8016602:	b29b      	uxth	r3, r3
 8016604:	b21b      	sxth	r3, r3
 8016606:	4619      	mov	r1, r3
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f7f9 f9b0 	bl	800f96e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801660e:	2103      	movs	r1, #3
 8016610:	6878      	ldr	r0, [r7, #4]
 8016612:	f001 f967 	bl	80178e4 <icmp_dest_unreach>
      pbuf_free(p);
 8016616:	6878      	ldr	r0, [r7, #4]
 8016618:	f7f9 f9bc 	bl	800f994 <pbuf_free>
  return;
 801661c:	e003      	b.n	8016626 <udp_input+0x202>
    pbuf_free(p);
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f7f9 f9b8 	bl	800f994 <pbuf_free>
  return;
 8016624:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016626:	372c      	adds	r7, #44	; 0x2c
 8016628:	46bd      	mov	sp, r7
 801662a:	bd90      	pop	{r4, r7, pc}
 801662c:	0801ccd8 	.word	0x0801ccd8
 8016630:	0801cd7c 	.word	0x0801cd7c
 8016634:	0801cd2c 	.word	0x0801cd2c
 8016638:	0801cd94 	.word	0x0801cd94
 801663c:	2004aeb0 	.word	0x2004aeb0
 8016640:	2004f020 	.word	0x2004f020
 8016644:	0801cdb0 	.word	0x0801cdb0
 8016648:	2004aec0 	.word	0x2004aec0

0801664c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b086      	sub	sp, #24
 8016650:	af00      	add	r7, sp, #0
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	60b9      	str	r1, [r7, #8]
 8016656:	4613      	mov	r3, r2
 8016658:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801665a:	68bb      	ldr	r3, [r7, #8]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d101      	bne.n	8016664 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016660:	4b39      	ldr	r3, [pc, #228]	; (8016748 <udp_bind+0xfc>)
 8016662:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d109      	bne.n	801667e <udp_bind+0x32>
 801666a:	4b38      	ldr	r3, [pc, #224]	; (801674c <udp_bind+0x100>)
 801666c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016670:	4937      	ldr	r1, [pc, #220]	; (8016750 <udp_bind+0x104>)
 8016672:	4838      	ldr	r0, [pc, #224]	; (8016754 <udp_bind+0x108>)
 8016674:	f002 ff0a 	bl	801948c <iprintf>
 8016678:	f06f 030f 	mvn.w	r3, #15
 801667c:	e060      	b.n	8016740 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801667e:	2300      	movs	r3, #0
 8016680:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016682:	4b35      	ldr	r3, [pc, #212]	; (8016758 <udp_bind+0x10c>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	617b      	str	r3, [r7, #20]
 8016688:	e009      	b.n	801669e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801668a:	68fa      	ldr	r2, [r7, #12]
 801668c:	697b      	ldr	r3, [r7, #20]
 801668e:	429a      	cmp	r2, r3
 8016690:	d102      	bne.n	8016698 <udp_bind+0x4c>
      rebind = 1;
 8016692:	2301      	movs	r3, #1
 8016694:	74fb      	strb	r3, [r7, #19]
      break;
 8016696:	e005      	b.n	80166a4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016698:	697b      	ldr	r3, [r7, #20]
 801669a:	68db      	ldr	r3, [r3, #12]
 801669c:	617b      	str	r3, [r7, #20]
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d1f2      	bne.n	801668a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80166a4:	88fb      	ldrh	r3, [r7, #6]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d109      	bne.n	80166be <udp_bind+0x72>
    port = udp_new_port();
 80166aa:	f7ff fe1f 	bl	80162ec <udp_new_port>
 80166ae:	4603      	mov	r3, r0
 80166b0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80166b2:	88fb      	ldrh	r3, [r7, #6]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d12c      	bne.n	8016712 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80166b8:	f06f 0307 	mvn.w	r3, #7
 80166bc:	e040      	b.n	8016740 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80166be:	4b26      	ldr	r3, [pc, #152]	; (8016758 <udp_bind+0x10c>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	617b      	str	r3, [r7, #20]
 80166c4:	e022      	b.n	801670c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80166c6:	68fa      	ldr	r2, [r7, #12]
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	429a      	cmp	r2, r3
 80166cc:	d01b      	beq.n	8016706 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	8a5b      	ldrh	r3, [r3, #18]
 80166d2:	88fa      	ldrh	r2, [r7, #6]
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d116      	bne.n	8016706 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	68bb      	ldr	r3, [r7, #8]
 80166de:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80166e0:	429a      	cmp	r2, r3
 80166e2:	d00d      	beq.n	8016700 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80166e4:	68bb      	ldr	r3, [r7, #8]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d00a      	beq.n	8016700 <udp_bind+0xb4>
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d006      	beq.n	8016700 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80166f2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d003      	beq.n	8016700 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80166f8:	697b      	ldr	r3, [r7, #20]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d102      	bne.n	8016706 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016700:	f06f 0307 	mvn.w	r3, #7
 8016704:	e01c      	b.n	8016740 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	68db      	ldr	r3, [r3, #12]
 801670a:	617b      	str	r3, [r7, #20]
 801670c:	697b      	ldr	r3, [r7, #20]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d1d9      	bne.n	80166c6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016712:	68bb      	ldr	r3, [r7, #8]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d002      	beq.n	801671e <udp_bind+0xd2>
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	e000      	b.n	8016720 <udp_bind+0xd4>
 801671e:	2300      	movs	r3, #0
 8016720:	68fa      	ldr	r2, [r7, #12]
 8016722:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	88fa      	ldrh	r2, [r7, #6]
 8016728:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801672a:	7cfb      	ldrb	r3, [r7, #19]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d106      	bne.n	801673e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016730:	4b09      	ldr	r3, [pc, #36]	; (8016758 <udp_bind+0x10c>)
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016738:	4a07      	ldr	r2, [pc, #28]	; (8016758 <udp_bind+0x10c>)
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801673e:	2300      	movs	r3, #0
}
 8016740:	4618      	mov	r0, r3
 8016742:	3718      	adds	r7, #24
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}
 8016748:	0801d880 	.word	0x0801d880
 801674c:	0801ccd8 	.word	0x0801ccd8
 8016750:	0801cfa0 	.word	0x0801cfa0
 8016754:	0801cd2c 	.word	0x0801cd2c
 8016758:	2004f020 	.word	0x2004f020

0801675c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b084      	sub	sp, #16
 8016760:	af00      	add	r7, sp, #0
 8016762:	60f8      	str	r0, [r7, #12]
 8016764:	60b9      	str	r1, [r7, #8]
 8016766:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d107      	bne.n	801677e <udp_recv+0x22>
 801676e:	4b08      	ldr	r3, [pc, #32]	; (8016790 <udp_recv+0x34>)
 8016770:	f240 428a 	movw	r2, #1162	; 0x48a
 8016774:	4907      	ldr	r1, [pc, #28]	; (8016794 <udp_recv+0x38>)
 8016776:	4808      	ldr	r0, [pc, #32]	; (8016798 <udp_recv+0x3c>)
 8016778:	f002 fe88 	bl	801948c <iprintf>
 801677c:	e005      	b.n	801678a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	68ba      	ldr	r2, [r7, #8]
 8016782:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	687a      	ldr	r2, [r7, #4]
 8016788:	61da      	str	r2, [r3, #28]
}
 801678a:	3710      	adds	r7, #16
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}
 8016790:	0801ccd8 	.word	0x0801ccd8
 8016794:	0801d00c 	.word	0x0801d00c
 8016798:	0801cd2c 	.word	0x0801cd2c

0801679c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80167a2:	2000      	movs	r0, #0
 80167a4:	f7f8 f9dc 	bl	800eb60 <memp_malloc>
 80167a8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d007      	beq.n	80167c0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80167b0:	2220      	movs	r2, #32
 80167b2:	2100      	movs	r1, #0
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f002 fdcc 	bl	8019352 <memset>
    pcb->ttl = UDP_TTL;
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	22ff      	movs	r2, #255	; 0xff
 80167be:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80167c0:	687b      	ldr	r3, [r7, #4]
}
 80167c2:	4618      	mov	r0, r3
 80167c4:	3708      	adds	r7, #8
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}

080167ca <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80167ca:	b580      	push	{r7, lr}
 80167cc:	b084      	sub	sp, #16
 80167ce:	af00      	add	r7, sp, #0
 80167d0:	4603      	mov	r3, r0
 80167d2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80167d4:	f7ff ffe2 	bl	801679c <udp_new>
 80167d8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80167da:	68fb      	ldr	r3, [r7, #12]
}
 80167dc:	4618      	mov	r0, r3
 80167de:	3710      	adds	r7, #16
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}

080167e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80167e4:	b480      	push	{r7}
 80167e6:	b085      	sub	sp, #20
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
 80167ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d01e      	beq.n	8016832 <udp_netif_ip_addr_changed+0x4e>
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d01a      	beq.n	8016832 <udp_netif_ip_addr_changed+0x4e>
 80167fc:	683b      	ldr	r3, [r7, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d017      	beq.n	8016832 <udp_netif_ip_addr_changed+0x4e>
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d013      	beq.n	8016832 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801680a:	4b0d      	ldr	r3, [pc, #52]	; (8016840 <udp_netif_ip_addr_changed+0x5c>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	60fb      	str	r3, [r7, #12]
 8016810:	e00c      	b.n	801682c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	681a      	ldr	r2, [r3, #0]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	429a      	cmp	r2, r3
 801681c:	d103      	bne.n	8016826 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	68db      	ldr	r3, [r3, #12]
 801682a:	60fb      	str	r3, [r7, #12]
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d1ef      	bne.n	8016812 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016832:	bf00      	nop
 8016834:	3714      	adds	r7, #20
 8016836:	46bd      	mov	sp, r7
 8016838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop
 8016840:	2004f020 	.word	0x2004f020

08016844 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801684c:	4915      	ldr	r1, [pc, #84]	; (80168a4 <etharp_free_entry+0x60>)
 801684e:	687a      	ldr	r2, [r7, #4]
 8016850:	4613      	mov	r3, r2
 8016852:	005b      	lsls	r3, r3, #1
 8016854:	4413      	add	r3, r2
 8016856:	00db      	lsls	r3, r3, #3
 8016858:	440b      	add	r3, r1
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d013      	beq.n	8016888 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016860:	4910      	ldr	r1, [pc, #64]	; (80168a4 <etharp_free_entry+0x60>)
 8016862:	687a      	ldr	r2, [r7, #4]
 8016864:	4613      	mov	r3, r2
 8016866:	005b      	lsls	r3, r3, #1
 8016868:	4413      	add	r3, r2
 801686a:	00db      	lsls	r3, r3, #3
 801686c:	440b      	add	r3, r1
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4618      	mov	r0, r3
 8016872:	f7f9 f88f 	bl	800f994 <pbuf_free>
    arp_table[i].q = NULL;
 8016876:	490b      	ldr	r1, [pc, #44]	; (80168a4 <etharp_free_entry+0x60>)
 8016878:	687a      	ldr	r2, [r7, #4]
 801687a:	4613      	mov	r3, r2
 801687c:	005b      	lsls	r3, r3, #1
 801687e:	4413      	add	r3, r2
 8016880:	00db      	lsls	r3, r3, #3
 8016882:	440b      	add	r3, r1
 8016884:	2200      	movs	r2, #0
 8016886:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016888:	4906      	ldr	r1, [pc, #24]	; (80168a4 <etharp_free_entry+0x60>)
 801688a:	687a      	ldr	r2, [r7, #4]
 801688c:	4613      	mov	r3, r2
 801688e:	005b      	lsls	r3, r3, #1
 8016890:	4413      	add	r3, r2
 8016892:	00db      	lsls	r3, r3, #3
 8016894:	440b      	add	r3, r1
 8016896:	3314      	adds	r3, #20
 8016898:	2200      	movs	r2, #0
 801689a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801689c:	bf00      	nop
 801689e:	3708      	adds	r7, #8
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	2004f024 	.word	0x2004f024

080168a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168ae:	2300      	movs	r3, #0
 80168b0:	607b      	str	r3, [r7, #4]
 80168b2:	e096      	b.n	80169e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80168b4:	494f      	ldr	r1, [pc, #316]	; (80169f4 <etharp_tmr+0x14c>)
 80168b6:	687a      	ldr	r2, [r7, #4]
 80168b8:	4613      	mov	r3, r2
 80168ba:	005b      	lsls	r3, r3, #1
 80168bc:	4413      	add	r3, r2
 80168be:	00db      	lsls	r3, r3, #3
 80168c0:	440b      	add	r3, r1
 80168c2:	3314      	adds	r3, #20
 80168c4:	781b      	ldrb	r3, [r3, #0]
 80168c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80168c8:	78fb      	ldrb	r3, [r7, #3]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	f000 8086 	beq.w	80169dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80168d0:	4948      	ldr	r1, [pc, #288]	; (80169f4 <etharp_tmr+0x14c>)
 80168d2:	687a      	ldr	r2, [r7, #4]
 80168d4:	4613      	mov	r3, r2
 80168d6:	005b      	lsls	r3, r3, #1
 80168d8:	4413      	add	r3, r2
 80168da:	00db      	lsls	r3, r3, #3
 80168dc:	440b      	add	r3, r1
 80168de:	3312      	adds	r3, #18
 80168e0:	881b      	ldrh	r3, [r3, #0]
 80168e2:	3301      	adds	r3, #1
 80168e4:	b298      	uxth	r0, r3
 80168e6:	4943      	ldr	r1, [pc, #268]	; (80169f4 <etharp_tmr+0x14c>)
 80168e8:	687a      	ldr	r2, [r7, #4]
 80168ea:	4613      	mov	r3, r2
 80168ec:	005b      	lsls	r3, r3, #1
 80168ee:	4413      	add	r3, r2
 80168f0:	00db      	lsls	r3, r3, #3
 80168f2:	440b      	add	r3, r1
 80168f4:	3312      	adds	r3, #18
 80168f6:	4602      	mov	r2, r0
 80168f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80168fa:	493e      	ldr	r1, [pc, #248]	; (80169f4 <etharp_tmr+0x14c>)
 80168fc:	687a      	ldr	r2, [r7, #4]
 80168fe:	4613      	mov	r3, r2
 8016900:	005b      	lsls	r3, r3, #1
 8016902:	4413      	add	r3, r2
 8016904:	00db      	lsls	r3, r3, #3
 8016906:	440b      	add	r3, r1
 8016908:	3312      	adds	r3, #18
 801690a:	881b      	ldrh	r3, [r3, #0]
 801690c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016910:	d215      	bcs.n	801693e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016912:	4938      	ldr	r1, [pc, #224]	; (80169f4 <etharp_tmr+0x14c>)
 8016914:	687a      	ldr	r2, [r7, #4]
 8016916:	4613      	mov	r3, r2
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	4413      	add	r3, r2
 801691c:	00db      	lsls	r3, r3, #3
 801691e:	440b      	add	r3, r1
 8016920:	3314      	adds	r3, #20
 8016922:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016924:	2b01      	cmp	r3, #1
 8016926:	d10e      	bne.n	8016946 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016928:	4932      	ldr	r1, [pc, #200]	; (80169f4 <etharp_tmr+0x14c>)
 801692a:	687a      	ldr	r2, [r7, #4]
 801692c:	4613      	mov	r3, r2
 801692e:	005b      	lsls	r3, r3, #1
 8016930:	4413      	add	r3, r2
 8016932:	00db      	lsls	r3, r3, #3
 8016934:	440b      	add	r3, r1
 8016936:	3312      	adds	r3, #18
 8016938:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801693a:	2b04      	cmp	r3, #4
 801693c:	d903      	bls.n	8016946 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801693e:	6878      	ldr	r0, [r7, #4]
 8016940:	f7ff ff80 	bl	8016844 <etharp_free_entry>
 8016944:	e04a      	b.n	80169dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016946:	492b      	ldr	r1, [pc, #172]	; (80169f4 <etharp_tmr+0x14c>)
 8016948:	687a      	ldr	r2, [r7, #4]
 801694a:	4613      	mov	r3, r2
 801694c:	005b      	lsls	r3, r3, #1
 801694e:	4413      	add	r3, r2
 8016950:	00db      	lsls	r3, r3, #3
 8016952:	440b      	add	r3, r1
 8016954:	3314      	adds	r3, #20
 8016956:	781b      	ldrb	r3, [r3, #0]
 8016958:	2b03      	cmp	r3, #3
 801695a:	d10a      	bne.n	8016972 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801695c:	4925      	ldr	r1, [pc, #148]	; (80169f4 <etharp_tmr+0x14c>)
 801695e:	687a      	ldr	r2, [r7, #4]
 8016960:	4613      	mov	r3, r2
 8016962:	005b      	lsls	r3, r3, #1
 8016964:	4413      	add	r3, r2
 8016966:	00db      	lsls	r3, r3, #3
 8016968:	440b      	add	r3, r1
 801696a:	3314      	adds	r3, #20
 801696c:	2204      	movs	r2, #4
 801696e:	701a      	strb	r2, [r3, #0]
 8016970:	e034      	b.n	80169dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016972:	4920      	ldr	r1, [pc, #128]	; (80169f4 <etharp_tmr+0x14c>)
 8016974:	687a      	ldr	r2, [r7, #4]
 8016976:	4613      	mov	r3, r2
 8016978:	005b      	lsls	r3, r3, #1
 801697a:	4413      	add	r3, r2
 801697c:	00db      	lsls	r3, r3, #3
 801697e:	440b      	add	r3, r1
 8016980:	3314      	adds	r3, #20
 8016982:	781b      	ldrb	r3, [r3, #0]
 8016984:	2b04      	cmp	r3, #4
 8016986:	d10a      	bne.n	801699e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016988:	491a      	ldr	r1, [pc, #104]	; (80169f4 <etharp_tmr+0x14c>)
 801698a:	687a      	ldr	r2, [r7, #4]
 801698c:	4613      	mov	r3, r2
 801698e:	005b      	lsls	r3, r3, #1
 8016990:	4413      	add	r3, r2
 8016992:	00db      	lsls	r3, r3, #3
 8016994:	440b      	add	r3, r1
 8016996:	3314      	adds	r3, #20
 8016998:	2202      	movs	r2, #2
 801699a:	701a      	strb	r2, [r3, #0]
 801699c:	e01e      	b.n	80169dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801699e:	4915      	ldr	r1, [pc, #84]	; (80169f4 <etharp_tmr+0x14c>)
 80169a0:	687a      	ldr	r2, [r7, #4]
 80169a2:	4613      	mov	r3, r2
 80169a4:	005b      	lsls	r3, r3, #1
 80169a6:	4413      	add	r3, r2
 80169a8:	00db      	lsls	r3, r3, #3
 80169aa:	440b      	add	r3, r1
 80169ac:	3314      	adds	r3, #20
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	2b01      	cmp	r3, #1
 80169b2:	d113      	bne.n	80169dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80169b4:	490f      	ldr	r1, [pc, #60]	; (80169f4 <etharp_tmr+0x14c>)
 80169b6:	687a      	ldr	r2, [r7, #4]
 80169b8:	4613      	mov	r3, r2
 80169ba:	005b      	lsls	r3, r3, #1
 80169bc:	4413      	add	r3, r2
 80169be:	00db      	lsls	r3, r3, #3
 80169c0:	440b      	add	r3, r1
 80169c2:	3308      	adds	r3, #8
 80169c4:	6818      	ldr	r0, [r3, #0]
 80169c6:	687a      	ldr	r2, [r7, #4]
 80169c8:	4613      	mov	r3, r2
 80169ca:	005b      	lsls	r3, r3, #1
 80169cc:	4413      	add	r3, r2
 80169ce:	00db      	lsls	r3, r3, #3
 80169d0:	4a08      	ldr	r2, [pc, #32]	; (80169f4 <etharp_tmr+0x14c>)
 80169d2:	4413      	add	r3, r2
 80169d4:	3304      	adds	r3, #4
 80169d6:	4619      	mov	r1, r3
 80169d8:	f000 fe6e 	bl	80176b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	3301      	adds	r3, #1
 80169e0:	607b      	str	r3, [r7, #4]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	2b09      	cmp	r3, #9
 80169e6:	f77f af65 	ble.w	80168b4 <etharp_tmr+0xc>
      }
    }
  }
}
 80169ea:	bf00      	nop
 80169ec:	bf00      	nop
 80169ee:	3708      	adds	r7, #8
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}
 80169f4:	2004f024 	.word	0x2004f024

080169f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b08a      	sub	sp, #40	; 0x28
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	460b      	mov	r3, r1
 8016a02:	607a      	str	r2, [r7, #4]
 8016a04:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016a06:	230a      	movs	r3, #10
 8016a08:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016a0a:	230a      	movs	r3, #10
 8016a0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016a0e:	230a      	movs	r3, #10
 8016a10:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016a12:	2300      	movs	r3, #0
 8016a14:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016a16:	230a      	movs	r3, #10
 8016a18:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	83bb      	strh	r3, [r7, #28]
 8016a1e:	2300      	movs	r3, #0
 8016a20:	837b      	strh	r3, [r7, #26]
 8016a22:	2300      	movs	r3, #0
 8016a24:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a26:	2300      	movs	r3, #0
 8016a28:	843b      	strh	r3, [r7, #32]
 8016a2a:	e0ae      	b.n	8016b8a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016a2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a30:	49a6      	ldr	r1, [pc, #664]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016a32:	4613      	mov	r3, r2
 8016a34:	005b      	lsls	r3, r3, #1
 8016a36:	4413      	add	r3, r2
 8016a38:	00db      	lsls	r3, r3, #3
 8016a3a:	440b      	add	r3, r1
 8016a3c:	3314      	adds	r3, #20
 8016a3e:	781b      	ldrb	r3, [r3, #0]
 8016a40:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016a42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a46:	2b0a      	cmp	r3, #10
 8016a48:	d105      	bne.n	8016a56 <etharp_find_entry+0x5e>
 8016a4a:	7dfb      	ldrb	r3, [r7, #23]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d102      	bne.n	8016a56 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016a50:	8c3b      	ldrh	r3, [r7, #32]
 8016a52:	847b      	strh	r3, [r7, #34]	; 0x22
 8016a54:	e095      	b.n	8016b82 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016a56:	7dfb      	ldrb	r3, [r7, #23]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	f000 8092 	beq.w	8016b82 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016a5e:	7dfb      	ldrb	r3, [r7, #23]
 8016a60:	2b01      	cmp	r3, #1
 8016a62:	d009      	beq.n	8016a78 <etharp_find_entry+0x80>
 8016a64:	7dfb      	ldrb	r3, [r7, #23]
 8016a66:	2b01      	cmp	r3, #1
 8016a68:	d806      	bhi.n	8016a78 <etharp_find_entry+0x80>
 8016a6a:	4b99      	ldr	r3, [pc, #612]	; (8016cd0 <etharp_find_entry+0x2d8>)
 8016a6c:	f240 1223 	movw	r2, #291	; 0x123
 8016a70:	4998      	ldr	r1, [pc, #608]	; (8016cd4 <etharp_find_entry+0x2dc>)
 8016a72:	4899      	ldr	r0, [pc, #612]	; (8016cd8 <etharp_find_entry+0x2e0>)
 8016a74:	f002 fd0a 	bl	801948c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d020      	beq.n	8016ac0 <etharp_find_entry+0xc8>
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	6819      	ldr	r1, [r3, #0]
 8016a82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a86:	4891      	ldr	r0, [pc, #580]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016a88:	4613      	mov	r3, r2
 8016a8a:	005b      	lsls	r3, r3, #1
 8016a8c:	4413      	add	r3, r2
 8016a8e:	00db      	lsls	r3, r3, #3
 8016a90:	4403      	add	r3, r0
 8016a92:	3304      	adds	r3, #4
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	4299      	cmp	r1, r3
 8016a98:	d112      	bne.n	8016ac0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d00c      	beq.n	8016aba <etharp_find_entry+0xc2>
 8016aa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aa4:	4989      	ldr	r1, [pc, #548]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	005b      	lsls	r3, r3, #1
 8016aaa:	4413      	add	r3, r2
 8016aac:	00db      	lsls	r3, r3, #3
 8016aae:	440b      	add	r3, r1
 8016ab0:	3308      	adds	r3, #8
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	687a      	ldr	r2, [r7, #4]
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d102      	bne.n	8016ac0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016aba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016abe:	e100      	b.n	8016cc2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016ac0:	7dfb      	ldrb	r3, [r7, #23]
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d140      	bne.n	8016b48 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016ac6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aca:	4980      	ldr	r1, [pc, #512]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016acc:	4613      	mov	r3, r2
 8016ace:	005b      	lsls	r3, r3, #1
 8016ad0:	4413      	add	r3, r2
 8016ad2:	00db      	lsls	r3, r3, #3
 8016ad4:	440b      	add	r3, r1
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d01a      	beq.n	8016b12 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016adc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ae0:	497a      	ldr	r1, [pc, #488]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016ae2:	4613      	mov	r3, r2
 8016ae4:	005b      	lsls	r3, r3, #1
 8016ae6:	4413      	add	r3, r2
 8016ae8:	00db      	lsls	r3, r3, #3
 8016aea:	440b      	add	r3, r1
 8016aec:	3312      	adds	r3, #18
 8016aee:	881b      	ldrh	r3, [r3, #0]
 8016af0:	8bba      	ldrh	r2, [r7, #28]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d845      	bhi.n	8016b82 <etharp_find_entry+0x18a>
            old_queue = i;
 8016af6:	8c3b      	ldrh	r3, [r7, #32]
 8016af8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016afa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016afe:	4973      	ldr	r1, [pc, #460]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016b00:	4613      	mov	r3, r2
 8016b02:	005b      	lsls	r3, r3, #1
 8016b04:	4413      	add	r3, r2
 8016b06:	00db      	lsls	r3, r3, #3
 8016b08:	440b      	add	r3, r1
 8016b0a:	3312      	adds	r3, #18
 8016b0c:	881b      	ldrh	r3, [r3, #0]
 8016b0e:	83bb      	strh	r3, [r7, #28]
 8016b10:	e037      	b.n	8016b82 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016b12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b16:	496d      	ldr	r1, [pc, #436]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016b18:	4613      	mov	r3, r2
 8016b1a:	005b      	lsls	r3, r3, #1
 8016b1c:	4413      	add	r3, r2
 8016b1e:	00db      	lsls	r3, r3, #3
 8016b20:	440b      	add	r3, r1
 8016b22:	3312      	adds	r3, #18
 8016b24:	881b      	ldrh	r3, [r3, #0]
 8016b26:	8b7a      	ldrh	r2, [r7, #26]
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d82a      	bhi.n	8016b82 <etharp_find_entry+0x18a>
            old_pending = i;
 8016b2c:	8c3b      	ldrh	r3, [r7, #32]
 8016b2e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016b30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b34:	4965      	ldr	r1, [pc, #404]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016b36:	4613      	mov	r3, r2
 8016b38:	005b      	lsls	r3, r3, #1
 8016b3a:	4413      	add	r3, r2
 8016b3c:	00db      	lsls	r3, r3, #3
 8016b3e:	440b      	add	r3, r1
 8016b40:	3312      	adds	r3, #18
 8016b42:	881b      	ldrh	r3, [r3, #0]
 8016b44:	837b      	strh	r3, [r7, #26]
 8016b46:	e01c      	b.n	8016b82 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016b48:	7dfb      	ldrb	r3, [r7, #23]
 8016b4a:	2b01      	cmp	r3, #1
 8016b4c:	d919      	bls.n	8016b82 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016b4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b52:	495e      	ldr	r1, [pc, #376]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016b54:	4613      	mov	r3, r2
 8016b56:	005b      	lsls	r3, r3, #1
 8016b58:	4413      	add	r3, r2
 8016b5a:	00db      	lsls	r3, r3, #3
 8016b5c:	440b      	add	r3, r1
 8016b5e:	3312      	adds	r3, #18
 8016b60:	881b      	ldrh	r3, [r3, #0]
 8016b62:	8b3a      	ldrh	r2, [r7, #24]
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d80c      	bhi.n	8016b82 <etharp_find_entry+0x18a>
            old_stable = i;
 8016b68:	8c3b      	ldrh	r3, [r7, #32]
 8016b6a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016b6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b70:	4956      	ldr	r1, [pc, #344]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016b72:	4613      	mov	r3, r2
 8016b74:	005b      	lsls	r3, r3, #1
 8016b76:	4413      	add	r3, r2
 8016b78:	00db      	lsls	r3, r3, #3
 8016b7a:	440b      	add	r3, r1
 8016b7c:	3312      	adds	r3, #18
 8016b7e:	881b      	ldrh	r3, [r3, #0]
 8016b80:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b82:	8c3b      	ldrh	r3, [r7, #32]
 8016b84:	3301      	adds	r3, #1
 8016b86:	b29b      	uxth	r3, r3
 8016b88:	843b      	strh	r3, [r7, #32]
 8016b8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b8e:	2b09      	cmp	r3, #9
 8016b90:	f77f af4c 	ble.w	8016a2c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016b94:	7afb      	ldrb	r3, [r7, #11]
 8016b96:	f003 0302 	and.w	r3, r3, #2
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d108      	bne.n	8016bb0 <etharp_find_entry+0x1b8>
 8016b9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016ba2:	2b0a      	cmp	r3, #10
 8016ba4:	d107      	bne.n	8016bb6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016ba6:	7afb      	ldrb	r3, [r7, #11]
 8016ba8:	f003 0301 	and.w	r3, r3, #1
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d102      	bne.n	8016bb6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bb4:	e085      	b.n	8016cc2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016bb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016bba:	2b09      	cmp	r3, #9
 8016bbc:	dc02      	bgt.n	8016bc4 <etharp_find_entry+0x1cc>
    i = empty;
 8016bbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016bc0:	843b      	strh	r3, [r7, #32]
 8016bc2:	e039      	b.n	8016c38 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016bc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016bc8:	2b09      	cmp	r3, #9
 8016bca:	dc14      	bgt.n	8016bf6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016bd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bd4:	493d      	ldr	r1, [pc, #244]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016bd6:	4613      	mov	r3, r2
 8016bd8:	005b      	lsls	r3, r3, #1
 8016bda:	4413      	add	r3, r2
 8016bdc:	00db      	lsls	r3, r3, #3
 8016bde:	440b      	add	r3, r1
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d018      	beq.n	8016c18 <etharp_find_entry+0x220>
 8016be6:	4b3a      	ldr	r3, [pc, #232]	; (8016cd0 <etharp_find_entry+0x2d8>)
 8016be8:	f240 126d 	movw	r2, #365	; 0x16d
 8016bec:	493b      	ldr	r1, [pc, #236]	; (8016cdc <etharp_find_entry+0x2e4>)
 8016bee:	483a      	ldr	r0, [pc, #232]	; (8016cd8 <etharp_find_entry+0x2e0>)
 8016bf0:	f002 fc4c 	bl	801948c <iprintf>
 8016bf4:	e010      	b.n	8016c18 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016bf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016bfa:	2b09      	cmp	r3, #9
 8016bfc:	dc02      	bgt.n	8016c04 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016c00:	843b      	strh	r3, [r7, #32]
 8016c02:	e009      	b.n	8016c18 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016c04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016c08:	2b09      	cmp	r3, #9
 8016c0a:	dc02      	bgt.n	8016c12 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016c0c:	8bfb      	ldrh	r3, [r7, #30]
 8016c0e:	843b      	strh	r3, [r7, #32]
 8016c10:	e002      	b.n	8016c18 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c16:	e054      	b.n	8016cc2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c1c:	2b09      	cmp	r3, #9
 8016c1e:	dd06      	ble.n	8016c2e <etharp_find_entry+0x236>
 8016c20:	4b2b      	ldr	r3, [pc, #172]	; (8016cd0 <etharp_find_entry+0x2d8>)
 8016c22:	f240 127f 	movw	r2, #383	; 0x17f
 8016c26:	492e      	ldr	r1, [pc, #184]	; (8016ce0 <etharp_find_entry+0x2e8>)
 8016c28:	482b      	ldr	r0, [pc, #172]	; (8016cd8 <etharp_find_entry+0x2e0>)
 8016c2a:	f002 fc2f 	bl	801948c <iprintf>
    etharp_free_entry(i);
 8016c2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7ff fe06 	bl	8016844 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c3c:	2b09      	cmp	r3, #9
 8016c3e:	dd06      	ble.n	8016c4e <etharp_find_entry+0x256>
 8016c40:	4b23      	ldr	r3, [pc, #140]	; (8016cd0 <etharp_find_entry+0x2d8>)
 8016c42:	f240 1283 	movw	r2, #387	; 0x183
 8016c46:	4926      	ldr	r1, [pc, #152]	; (8016ce0 <etharp_find_entry+0x2e8>)
 8016c48:	4823      	ldr	r0, [pc, #140]	; (8016cd8 <etharp_find_entry+0x2e0>)
 8016c4a:	f002 fc1f 	bl	801948c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016c4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c52:	491e      	ldr	r1, [pc, #120]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016c54:	4613      	mov	r3, r2
 8016c56:	005b      	lsls	r3, r3, #1
 8016c58:	4413      	add	r3, r2
 8016c5a:	00db      	lsls	r3, r3, #3
 8016c5c:	440b      	add	r3, r1
 8016c5e:	3314      	adds	r3, #20
 8016c60:	781b      	ldrb	r3, [r3, #0]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d006      	beq.n	8016c74 <etharp_find_entry+0x27c>
 8016c66:	4b1a      	ldr	r3, [pc, #104]	; (8016cd0 <etharp_find_entry+0x2d8>)
 8016c68:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016c6c:	491d      	ldr	r1, [pc, #116]	; (8016ce4 <etharp_find_entry+0x2ec>)
 8016c6e:	481a      	ldr	r0, [pc, #104]	; (8016cd8 <etharp_find_entry+0x2e0>)
 8016c70:	f002 fc0c 	bl	801948c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d00b      	beq.n	8016c92 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016c7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	6819      	ldr	r1, [r3, #0]
 8016c82:	4812      	ldr	r0, [pc, #72]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016c84:	4613      	mov	r3, r2
 8016c86:	005b      	lsls	r3, r3, #1
 8016c88:	4413      	add	r3, r2
 8016c8a:	00db      	lsls	r3, r3, #3
 8016c8c:	4403      	add	r3, r0
 8016c8e:	3304      	adds	r3, #4
 8016c90:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016c92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c96:	490d      	ldr	r1, [pc, #52]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016c98:	4613      	mov	r3, r2
 8016c9a:	005b      	lsls	r3, r3, #1
 8016c9c:	4413      	add	r3, r2
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	440b      	add	r3, r1
 8016ca2:	3312      	adds	r3, #18
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016ca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cac:	4907      	ldr	r1, [pc, #28]	; (8016ccc <etharp_find_entry+0x2d4>)
 8016cae:	4613      	mov	r3, r2
 8016cb0:	005b      	lsls	r3, r3, #1
 8016cb2:	4413      	add	r3, r2
 8016cb4:	00db      	lsls	r3, r3, #3
 8016cb6:	440b      	add	r3, r1
 8016cb8:	3308      	adds	r3, #8
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016cbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3728      	adds	r7, #40	; 0x28
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	bd80      	pop	{r7, pc}
 8016cca:	bf00      	nop
 8016ccc:	2004f024 	.word	0x2004f024
 8016cd0:	0801d03c 	.word	0x0801d03c
 8016cd4:	0801d074 	.word	0x0801d074
 8016cd8:	0801d0b4 	.word	0x0801d0b4
 8016cdc:	0801d0dc 	.word	0x0801d0dc
 8016ce0:	0801d0f4 	.word	0x0801d0f4
 8016ce4:	0801d108 	.word	0x0801d108

08016ce8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b088      	sub	sp, #32
 8016cec:	af02      	add	r7, sp, #8
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	607a      	str	r2, [r7, #4]
 8016cf4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016cfc:	2b06      	cmp	r3, #6
 8016cfe:	d006      	beq.n	8016d0e <etharp_update_arp_entry+0x26>
 8016d00:	4b48      	ldr	r3, [pc, #288]	; (8016e24 <etharp_update_arp_entry+0x13c>)
 8016d02:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016d06:	4948      	ldr	r1, [pc, #288]	; (8016e28 <etharp_update_arp_entry+0x140>)
 8016d08:	4848      	ldr	r0, [pc, #288]	; (8016e2c <etharp_update_arp_entry+0x144>)
 8016d0a:	f002 fbbf 	bl	801948c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d012      	beq.n	8016d3a <etharp_update_arp_entry+0x52>
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d00e      	beq.n	8016d3a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	68f9      	ldr	r1, [r7, #12]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f001 f8fe 	bl	8017f24 <ip4_addr_isbroadcast_u32>
 8016d28:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d105      	bne.n	8016d3a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d36:	2be0      	cmp	r3, #224	; 0xe0
 8016d38:	d102      	bne.n	8016d40 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016d3a:	f06f 030f 	mvn.w	r3, #15
 8016d3e:	e06c      	b.n	8016e1a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016d40:	78fb      	ldrb	r3, [r7, #3]
 8016d42:	68fa      	ldr	r2, [r7, #12]
 8016d44:	4619      	mov	r1, r3
 8016d46:	68b8      	ldr	r0, [r7, #8]
 8016d48:	f7ff fe56 	bl	80169f8 <etharp_find_entry>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016d50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	da02      	bge.n	8016d5e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016d58:	8afb      	ldrh	r3, [r7, #22]
 8016d5a:	b25b      	sxtb	r3, r3
 8016d5c:	e05d      	b.n	8016e1a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016d5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d62:	4933      	ldr	r1, [pc, #204]	; (8016e30 <etharp_update_arp_entry+0x148>)
 8016d64:	4613      	mov	r3, r2
 8016d66:	005b      	lsls	r3, r3, #1
 8016d68:	4413      	add	r3, r2
 8016d6a:	00db      	lsls	r3, r3, #3
 8016d6c:	440b      	add	r3, r1
 8016d6e:	3314      	adds	r3, #20
 8016d70:	2202      	movs	r2, #2
 8016d72:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016d74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d78:	492d      	ldr	r1, [pc, #180]	; (8016e30 <etharp_update_arp_entry+0x148>)
 8016d7a:	4613      	mov	r3, r2
 8016d7c:	005b      	lsls	r3, r3, #1
 8016d7e:	4413      	add	r3, r2
 8016d80:	00db      	lsls	r3, r3, #3
 8016d82:	440b      	add	r3, r1
 8016d84:	3308      	adds	r3, #8
 8016d86:	68fa      	ldr	r2, [r7, #12]
 8016d88:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016d8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d8e:	4613      	mov	r3, r2
 8016d90:	005b      	lsls	r3, r3, #1
 8016d92:	4413      	add	r3, r2
 8016d94:	00db      	lsls	r3, r3, #3
 8016d96:	3308      	adds	r3, #8
 8016d98:	4a25      	ldr	r2, [pc, #148]	; (8016e30 <etharp_update_arp_entry+0x148>)
 8016d9a:	4413      	add	r3, r2
 8016d9c:	3304      	adds	r3, #4
 8016d9e:	2206      	movs	r2, #6
 8016da0:	6879      	ldr	r1, [r7, #4]
 8016da2:	4618      	mov	r0, r3
 8016da4:	f002 fac7 	bl	8019336 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016da8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dac:	4920      	ldr	r1, [pc, #128]	; (8016e30 <etharp_update_arp_entry+0x148>)
 8016dae:	4613      	mov	r3, r2
 8016db0:	005b      	lsls	r3, r3, #1
 8016db2:	4413      	add	r3, r2
 8016db4:	00db      	lsls	r3, r3, #3
 8016db6:	440b      	add	r3, r1
 8016db8:	3312      	adds	r3, #18
 8016dba:	2200      	movs	r2, #0
 8016dbc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016dbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dc2:	491b      	ldr	r1, [pc, #108]	; (8016e30 <etharp_update_arp_entry+0x148>)
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	005b      	lsls	r3, r3, #1
 8016dc8:	4413      	add	r3, r2
 8016dca:	00db      	lsls	r3, r3, #3
 8016dcc:	440b      	add	r3, r1
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d021      	beq.n	8016e18 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016dd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dd8:	4915      	ldr	r1, [pc, #84]	; (8016e30 <etharp_update_arp_entry+0x148>)
 8016dda:	4613      	mov	r3, r2
 8016ddc:	005b      	lsls	r3, r3, #1
 8016dde:	4413      	add	r3, r2
 8016de0:	00db      	lsls	r3, r3, #3
 8016de2:	440b      	add	r3, r1
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016de8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dec:	4910      	ldr	r1, [pc, #64]	; (8016e30 <etharp_update_arp_entry+0x148>)
 8016dee:	4613      	mov	r3, r2
 8016df0:	005b      	lsls	r3, r3, #1
 8016df2:	4413      	add	r3, r2
 8016df4:	00db      	lsls	r3, r3, #3
 8016df6:	440b      	add	r3, r1
 8016df8:	2200      	movs	r2, #0
 8016dfa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016e06:	9300      	str	r3, [sp, #0]
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	6939      	ldr	r1, [r7, #16]
 8016e0c:	68f8      	ldr	r0, [r7, #12]
 8016e0e:	f001 ff97 	bl	8018d40 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016e12:	6938      	ldr	r0, [r7, #16]
 8016e14:	f7f8 fdbe 	bl	800f994 <pbuf_free>
  }
  return ERR_OK;
 8016e18:	2300      	movs	r3, #0
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	3718      	adds	r7, #24
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	0801d03c 	.word	0x0801d03c
 8016e28:	0801d134 	.word	0x0801d134
 8016e2c:	0801d0b4 	.word	0x0801d0b4
 8016e30:	2004f024 	.word	0x2004f024

08016e34 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	60fb      	str	r3, [r7, #12]
 8016e40:	e01e      	b.n	8016e80 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016e42:	4913      	ldr	r1, [pc, #76]	; (8016e90 <etharp_cleanup_netif+0x5c>)
 8016e44:	68fa      	ldr	r2, [r7, #12]
 8016e46:	4613      	mov	r3, r2
 8016e48:	005b      	lsls	r3, r3, #1
 8016e4a:	4413      	add	r3, r2
 8016e4c:	00db      	lsls	r3, r3, #3
 8016e4e:	440b      	add	r3, r1
 8016e50:	3314      	adds	r3, #20
 8016e52:	781b      	ldrb	r3, [r3, #0]
 8016e54:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016e56:	7afb      	ldrb	r3, [r7, #11]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d00e      	beq.n	8016e7a <etharp_cleanup_netif+0x46>
 8016e5c:	490c      	ldr	r1, [pc, #48]	; (8016e90 <etharp_cleanup_netif+0x5c>)
 8016e5e:	68fa      	ldr	r2, [r7, #12]
 8016e60:	4613      	mov	r3, r2
 8016e62:	005b      	lsls	r3, r3, #1
 8016e64:	4413      	add	r3, r2
 8016e66:	00db      	lsls	r3, r3, #3
 8016e68:	440b      	add	r3, r1
 8016e6a:	3308      	adds	r3, #8
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	687a      	ldr	r2, [r7, #4]
 8016e70:	429a      	cmp	r2, r3
 8016e72:	d102      	bne.n	8016e7a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016e74:	68f8      	ldr	r0, [r7, #12]
 8016e76:	f7ff fce5 	bl	8016844 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	3301      	adds	r3, #1
 8016e7e:	60fb      	str	r3, [r7, #12]
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	2b09      	cmp	r3, #9
 8016e84:	dddd      	ble.n	8016e42 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016e86:	bf00      	nop
 8016e88:	bf00      	nop
 8016e8a:	3710      	adds	r7, #16
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}
 8016e90:	2004f024 	.word	0x2004f024

08016e94 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016e94:	b5b0      	push	{r4, r5, r7, lr}
 8016e96:	b08a      	sub	sp, #40	; 0x28
 8016e98:	af04      	add	r7, sp, #16
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016e9e:	683b      	ldr	r3, [r7, #0]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d107      	bne.n	8016eb4 <etharp_input+0x20>
 8016ea4:	4b3d      	ldr	r3, [pc, #244]	; (8016f9c <etharp_input+0x108>)
 8016ea6:	f240 228a 	movw	r2, #650	; 0x28a
 8016eaa:	493d      	ldr	r1, [pc, #244]	; (8016fa0 <etharp_input+0x10c>)
 8016eac:	483d      	ldr	r0, [pc, #244]	; (8016fa4 <etharp_input+0x110>)
 8016eae:	f002 faed 	bl	801948c <iprintf>
 8016eb2:	e06f      	b.n	8016f94 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	685b      	ldr	r3, [r3, #4]
 8016eb8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016eba:	693b      	ldr	r3, [r7, #16]
 8016ebc:	881b      	ldrh	r3, [r3, #0]
 8016ebe:	b29b      	uxth	r3, r3
 8016ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ec4:	d10c      	bne.n	8016ee0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016eca:	2b06      	cmp	r3, #6
 8016ecc:	d108      	bne.n	8016ee0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016ece:	693b      	ldr	r3, [r7, #16]
 8016ed0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016ed2:	2b04      	cmp	r3, #4
 8016ed4:	d104      	bne.n	8016ee0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	885b      	ldrh	r3, [r3, #2]
 8016eda:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016edc:	2b08      	cmp	r3, #8
 8016ede:	d003      	beq.n	8016ee8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016ee0:	6878      	ldr	r0, [r7, #4]
 8016ee2:	f7f8 fd57 	bl	800f994 <pbuf_free>
    return;
 8016ee6:	e055      	b.n	8016f94 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016ee8:	693b      	ldr	r3, [r7, #16]
 8016eea:	330e      	adds	r3, #14
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016ef0:	693b      	ldr	r3, [r7, #16]
 8016ef2:	3318      	adds	r3, #24
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	3304      	adds	r3, #4
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d102      	bne.n	8016f08 <etharp_input+0x74>
    for_us = 0;
 8016f02:	2300      	movs	r3, #0
 8016f04:	75fb      	strb	r3, [r7, #23]
 8016f06:	e009      	b.n	8016f1c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016f08:	68ba      	ldr	r2, [r7, #8]
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	3304      	adds	r3, #4
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	429a      	cmp	r2, r3
 8016f12:	bf0c      	ite	eq
 8016f14:	2301      	moveq	r3, #1
 8016f16:	2300      	movne	r3, #0
 8016f18:	b2db      	uxtb	r3, r3
 8016f1a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016f1c:	693b      	ldr	r3, [r7, #16]
 8016f1e:	f103 0208 	add.w	r2, r3, #8
 8016f22:	7dfb      	ldrb	r3, [r7, #23]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d001      	beq.n	8016f2c <etharp_input+0x98>
 8016f28:	2301      	movs	r3, #1
 8016f2a:	e000      	b.n	8016f2e <etharp_input+0x9a>
 8016f2c:	2302      	movs	r3, #2
 8016f2e:	f107 010c 	add.w	r1, r7, #12
 8016f32:	6838      	ldr	r0, [r7, #0]
 8016f34:	f7ff fed8 	bl	8016ce8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	88db      	ldrh	r3, [r3, #6]
 8016f3c:	b29b      	uxth	r3, r3
 8016f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f42:	d003      	beq.n	8016f4c <etharp_input+0xb8>
 8016f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f48:	d01e      	beq.n	8016f88 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016f4a:	e020      	b.n	8016f8e <etharp_input+0xfa>
      if (for_us) {
 8016f4c:	7dfb      	ldrb	r3, [r7, #23]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d01c      	beq.n	8016f8c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016f58:	693b      	ldr	r3, [r7, #16]
 8016f5a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016f5e:	683b      	ldr	r3, [r7, #0]
 8016f60:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016f68:	693a      	ldr	r2, [r7, #16]
 8016f6a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016f6c:	2102      	movs	r1, #2
 8016f6e:	9103      	str	r1, [sp, #12]
 8016f70:	f107 010c 	add.w	r1, r7, #12
 8016f74:	9102      	str	r1, [sp, #8]
 8016f76:	9201      	str	r2, [sp, #4]
 8016f78:	9300      	str	r3, [sp, #0]
 8016f7a:	462b      	mov	r3, r5
 8016f7c:	4622      	mov	r2, r4
 8016f7e:	4601      	mov	r1, r0
 8016f80:	6838      	ldr	r0, [r7, #0]
 8016f82:	f000 faeb 	bl	801755c <etharp_raw>
      break;
 8016f86:	e001      	b.n	8016f8c <etharp_input+0xf8>
      break;
 8016f88:	bf00      	nop
 8016f8a:	e000      	b.n	8016f8e <etharp_input+0xfa>
      break;
 8016f8c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016f8e:	6878      	ldr	r0, [r7, #4]
 8016f90:	f7f8 fd00 	bl	800f994 <pbuf_free>
}
 8016f94:	3718      	adds	r7, #24
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bdb0      	pop	{r4, r5, r7, pc}
 8016f9a:	bf00      	nop
 8016f9c:	0801d03c 	.word	0x0801d03c
 8016fa0:	0801d18c 	.word	0x0801d18c
 8016fa4:	0801d0b4 	.word	0x0801d0b4

08016fa8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b086      	sub	sp, #24
 8016fac:	af02      	add	r7, sp, #8
 8016fae:	60f8      	str	r0, [r7, #12]
 8016fb0:	60b9      	str	r1, [r7, #8]
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016fb6:	79fa      	ldrb	r2, [r7, #7]
 8016fb8:	4944      	ldr	r1, [pc, #272]	; (80170cc <etharp_output_to_arp_index+0x124>)
 8016fba:	4613      	mov	r3, r2
 8016fbc:	005b      	lsls	r3, r3, #1
 8016fbe:	4413      	add	r3, r2
 8016fc0:	00db      	lsls	r3, r3, #3
 8016fc2:	440b      	add	r3, r1
 8016fc4:	3314      	adds	r3, #20
 8016fc6:	781b      	ldrb	r3, [r3, #0]
 8016fc8:	2b01      	cmp	r3, #1
 8016fca:	d806      	bhi.n	8016fda <etharp_output_to_arp_index+0x32>
 8016fcc:	4b40      	ldr	r3, [pc, #256]	; (80170d0 <etharp_output_to_arp_index+0x128>)
 8016fce:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016fd2:	4940      	ldr	r1, [pc, #256]	; (80170d4 <etharp_output_to_arp_index+0x12c>)
 8016fd4:	4840      	ldr	r0, [pc, #256]	; (80170d8 <etharp_output_to_arp_index+0x130>)
 8016fd6:	f002 fa59 	bl	801948c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016fda:	79fa      	ldrb	r2, [r7, #7]
 8016fdc:	493b      	ldr	r1, [pc, #236]	; (80170cc <etharp_output_to_arp_index+0x124>)
 8016fde:	4613      	mov	r3, r2
 8016fe0:	005b      	lsls	r3, r3, #1
 8016fe2:	4413      	add	r3, r2
 8016fe4:	00db      	lsls	r3, r3, #3
 8016fe6:	440b      	add	r3, r1
 8016fe8:	3314      	adds	r3, #20
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	2b02      	cmp	r3, #2
 8016fee:	d153      	bne.n	8017098 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016ff0:	79fa      	ldrb	r2, [r7, #7]
 8016ff2:	4936      	ldr	r1, [pc, #216]	; (80170cc <etharp_output_to_arp_index+0x124>)
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	005b      	lsls	r3, r3, #1
 8016ff8:	4413      	add	r3, r2
 8016ffa:	00db      	lsls	r3, r3, #3
 8016ffc:	440b      	add	r3, r1
 8016ffe:	3312      	adds	r3, #18
 8017000:	881b      	ldrh	r3, [r3, #0]
 8017002:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017006:	d919      	bls.n	801703c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017008:	79fa      	ldrb	r2, [r7, #7]
 801700a:	4613      	mov	r3, r2
 801700c:	005b      	lsls	r3, r3, #1
 801700e:	4413      	add	r3, r2
 8017010:	00db      	lsls	r3, r3, #3
 8017012:	4a2e      	ldr	r2, [pc, #184]	; (80170cc <etharp_output_to_arp_index+0x124>)
 8017014:	4413      	add	r3, r2
 8017016:	3304      	adds	r3, #4
 8017018:	4619      	mov	r1, r3
 801701a:	68f8      	ldr	r0, [r7, #12]
 801701c:	f000 fb4c 	bl	80176b8 <etharp_request>
 8017020:	4603      	mov	r3, r0
 8017022:	2b00      	cmp	r3, #0
 8017024:	d138      	bne.n	8017098 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017026:	79fa      	ldrb	r2, [r7, #7]
 8017028:	4928      	ldr	r1, [pc, #160]	; (80170cc <etharp_output_to_arp_index+0x124>)
 801702a:	4613      	mov	r3, r2
 801702c:	005b      	lsls	r3, r3, #1
 801702e:	4413      	add	r3, r2
 8017030:	00db      	lsls	r3, r3, #3
 8017032:	440b      	add	r3, r1
 8017034:	3314      	adds	r3, #20
 8017036:	2203      	movs	r2, #3
 8017038:	701a      	strb	r2, [r3, #0]
 801703a:	e02d      	b.n	8017098 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801703c:	79fa      	ldrb	r2, [r7, #7]
 801703e:	4923      	ldr	r1, [pc, #140]	; (80170cc <etharp_output_to_arp_index+0x124>)
 8017040:	4613      	mov	r3, r2
 8017042:	005b      	lsls	r3, r3, #1
 8017044:	4413      	add	r3, r2
 8017046:	00db      	lsls	r3, r3, #3
 8017048:	440b      	add	r3, r1
 801704a:	3312      	adds	r3, #18
 801704c:	881b      	ldrh	r3, [r3, #0]
 801704e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017052:	d321      	bcc.n	8017098 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017054:	79fa      	ldrb	r2, [r7, #7]
 8017056:	4613      	mov	r3, r2
 8017058:	005b      	lsls	r3, r3, #1
 801705a:	4413      	add	r3, r2
 801705c:	00db      	lsls	r3, r3, #3
 801705e:	4a1b      	ldr	r2, [pc, #108]	; (80170cc <etharp_output_to_arp_index+0x124>)
 8017060:	4413      	add	r3, r2
 8017062:	1d19      	adds	r1, r3, #4
 8017064:	79fa      	ldrb	r2, [r7, #7]
 8017066:	4613      	mov	r3, r2
 8017068:	005b      	lsls	r3, r3, #1
 801706a:	4413      	add	r3, r2
 801706c:	00db      	lsls	r3, r3, #3
 801706e:	3308      	adds	r3, #8
 8017070:	4a16      	ldr	r2, [pc, #88]	; (80170cc <etharp_output_to_arp_index+0x124>)
 8017072:	4413      	add	r3, r2
 8017074:	3304      	adds	r3, #4
 8017076:	461a      	mov	r2, r3
 8017078:	68f8      	ldr	r0, [r7, #12]
 801707a:	f000 fafb 	bl	8017674 <etharp_request_dst>
 801707e:	4603      	mov	r3, r0
 8017080:	2b00      	cmp	r3, #0
 8017082:	d109      	bne.n	8017098 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017084:	79fa      	ldrb	r2, [r7, #7]
 8017086:	4911      	ldr	r1, [pc, #68]	; (80170cc <etharp_output_to_arp_index+0x124>)
 8017088:	4613      	mov	r3, r2
 801708a:	005b      	lsls	r3, r3, #1
 801708c:	4413      	add	r3, r2
 801708e:	00db      	lsls	r3, r3, #3
 8017090:	440b      	add	r3, r1
 8017092:	3314      	adds	r3, #20
 8017094:	2203      	movs	r2, #3
 8017096:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801709e:	79fa      	ldrb	r2, [r7, #7]
 80170a0:	4613      	mov	r3, r2
 80170a2:	005b      	lsls	r3, r3, #1
 80170a4:	4413      	add	r3, r2
 80170a6:	00db      	lsls	r3, r3, #3
 80170a8:	3308      	adds	r3, #8
 80170aa:	4a08      	ldr	r2, [pc, #32]	; (80170cc <etharp_output_to_arp_index+0x124>)
 80170ac:	4413      	add	r3, r2
 80170ae:	3304      	adds	r3, #4
 80170b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80170b4:	9200      	str	r2, [sp, #0]
 80170b6:	460a      	mov	r2, r1
 80170b8:	68b9      	ldr	r1, [r7, #8]
 80170ba:	68f8      	ldr	r0, [r7, #12]
 80170bc:	f001 fe40 	bl	8018d40 <ethernet_output>
 80170c0:	4603      	mov	r3, r0
}
 80170c2:	4618      	mov	r0, r3
 80170c4:	3710      	adds	r7, #16
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd80      	pop	{r7, pc}
 80170ca:	bf00      	nop
 80170cc:	2004f024 	.word	0x2004f024
 80170d0:	0801d03c 	.word	0x0801d03c
 80170d4:	0801d1ac 	.word	0x0801d1ac
 80170d8:	0801d0b4 	.word	0x0801d0b4

080170dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b08a      	sub	sp, #40	; 0x28
 80170e0:	af02      	add	r7, sp, #8
 80170e2:	60f8      	str	r0, [r7, #12]
 80170e4:	60b9      	str	r1, [r7, #8]
 80170e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d106      	bne.n	8017100 <etharp_output+0x24>
 80170f2:	4b73      	ldr	r3, [pc, #460]	; (80172c0 <etharp_output+0x1e4>)
 80170f4:	f240 321e 	movw	r2, #798	; 0x31e
 80170f8:	4972      	ldr	r1, [pc, #456]	; (80172c4 <etharp_output+0x1e8>)
 80170fa:	4873      	ldr	r0, [pc, #460]	; (80172c8 <etharp_output+0x1ec>)
 80170fc:	f002 f9c6 	bl	801948c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017100:	68bb      	ldr	r3, [r7, #8]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d106      	bne.n	8017114 <etharp_output+0x38>
 8017106:	4b6e      	ldr	r3, [pc, #440]	; (80172c0 <etharp_output+0x1e4>)
 8017108:	f240 321f 	movw	r2, #799	; 0x31f
 801710c:	496f      	ldr	r1, [pc, #444]	; (80172cc <etharp_output+0x1f0>)
 801710e:	486e      	ldr	r0, [pc, #440]	; (80172c8 <etharp_output+0x1ec>)
 8017110:	f002 f9bc 	bl	801948c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d106      	bne.n	8017128 <etharp_output+0x4c>
 801711a:	4b69      	ldr	r3, [pc, #420]	; (80172c0 <etharp_output+0x1e4>)
 801711c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017120:	496b      	ldr	r1, [pc, #428]	; (80172d0 <etharp_output+0x1f4>)
 8017122:	4869      	ldr	r0, [pc, #420]	; (80172c8 <etharp_output+0x1ec>)
 8017124:	f002 f9b2 	bl	801948c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	68f9      	ldr	r1, [r7, #12]
 801712e:	4618      	mov	r0, r3
 8017130:	f000 fef8 	bl	8017f24 <ip4_addr_isbroadcast_u32>
 8017134:	4603      	mov	r3, r0
 8017136:	2b00      	cmp	r3, #0
 8017138:	d002      	beq.n	8017140 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801713a:	4b66      	ldr	r3, [pc, #408]	; (80172d4 <etharp_output+0x1f8>)
 801713c:	61fb      	str	r3, [r7, #28]
 801713e:	e0af      	b.n	80172a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017148:	2be0      	cmp	r3, #224	; 0xe0
 801714a:	d118      	bne.n	801717e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801714c:	2301      	movs	r3, #1
 801714e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017150:	2300      	movs	r3, #0
 8017152:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017154:	235e      	movs	r3, #94	; 0x5e
 8017156:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	3301      	adds	r3, #1
 801715c:	781b      	ldrb	r3, [r3, #0]
 801715e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017162:	b2db      	uxtb	r3, r3
 8017164:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	3302      	adds	r3, #2
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	3303      	adds	r3, #3
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017176:	f107 0310 	add.w	r3, r7, #16
 801717a:	61fb      	str	r3, [r7, #28]
 801717c:	e090      	b.n	80172a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	681a      	ldr	r2, [r3, #0]
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	3304      	adds	r3, #4
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	405a      	eors	r2, r3
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	3308      	adds	r3, #8
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	4013      	ands	r3, r2
 8017192:	2b00      	cmp	r3, #0
 8017194:	d012      	beq.n	80171bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801719c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80171a0:	4293      	cmp	r3, r2
 80171a2:	d00b      	beq.n	80171bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	330c      	adds	r3, #12
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d003      	beq.n	80171b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	330c      	adds	r3, #12
 80171b2:	61bb      	str	r3, [r7, #24]
 80171b4:	e002      	b.n	80171bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80171b6:	f06f 0303 	mvn.w	r3, #3
 80171ba:	e07d      	b.n	80172b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80171bc:	4b46      	ldr	r3, [pc, #280]	; (80172d8 <etharp_output+0x1fc>)
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	4619      	mov	r1, r3
 80171c2:	4a46      	ldr	r2, [pc, #280]	; (80172dc <etharp_output+0x200>)
 80171c4:	460b      	mov	r3, r1
 80171c6:	005b      	lsls	r3, r3, #1
 80171c8:	440b      	add	r3, r1
 80171ca:	00db      	lsls	r3, r3, #3
 80171cc:	4413      	add	r3, r2
 80171ce:	3314      	adds	r3, #20
 80171d0:	781b      	ldrb	r3, [r3, #0]
 80171d2:	2b01      	cmp	r3, #1
 80171d4:	d925      	bls.n	8017222 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80171d6:	4b40      	ldr	r3, [pc, #256]	; (80172d8 <etharp_output+0x1fc>)
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	4619      	mov	r1, r3
 80171dc:	4a3f      	ldr	r2, [pc, #252]	; (80172dc <etharp_output+0x200>)
 80171de:	460b      	mov	r3, r1
 80171e0:	005b      	lsls	r3, r3, #1
 80171e2:	440b      	add	r3, r1
 80171e4:	00db      	lsls	r3, r3, #3
 80171e6:	4413      	add	r3, r2
 80171e8:	3308      	adds	r3, #8
 80171ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80171ec:	68fa      	ldr	r2, [r7, #12]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d117      	bne.n	8017222 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80171f2:	69bb      	ldr	r3, [r7, #24]
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	4b38      	ldr	r3, [pc, #224]	; (80172d8 <etharp_output+0x1fc>)
 80171f8:	781b      	ldrb	r3, [r3, #0]
 80171fa:	4618      	mov	r0, r3
 80171fc:	4937      	ldr	r1, [pc, #220]	; (80172dc <etharp_output+0x200>)
 80171fe:	4603      	mov	r3, r0
 8017200:	005b      	lsls	r3, r3, #1
 8017202:	4403      	add	r3, r0
 8017204:	00db      	lsls	r3, r3, #3
 8017206:	440b      	add	r3, r1
 8017208:	3304      	adds	r3, #4
 801720a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801720c:	429a      	cmp	r2, r3
 801720e:	d108      	bne.n	8017222 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017210:	4b31      	ldr	r3, [pc, #196]	; (80172d8 <etharp_output+0x1fc>)
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	461a      	mov	r2, r3
 8017216:	68b9      	ldr	r1, [r7, #8]
 8017218:	68f8      	ldr	r0, [r7, #12]
 801721a:	f7ff fec5 	bl	8016fa8 <etharp_output_to_arp_index>
 801721e:	4603      	mov	r3, r0
 8017220:	e04a      	b.n	80172b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017222:	2300      	movs	r3, #0
 8017224:	75fb      	strb	r3, [r7, #23]
 8017226:	e031      	b.n	801728c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017228:	7dfa      	ldrb	r2, [r7, #23]
 801722a:	492c      	ldr	r1, [pc, #176]	; (80172dc <etharp_output+0x200>)
 801722c:	4613      	mov	r3, r2
 801722e:	005b      	lsls	r3, r3, #1
 8017230:	4413      	add	r3, r2
 8017232:	00db      	lsls	r3, r3, #3
 8017234:	440b      	add	r3, r1
 8017236:	3314      	adds	r3, #20
 8017238:	781b      	ldrb	r3, [r3, #0]
 801723a:	2b01      	cmp	r3, #1
 801723c:	d923      	bls.n	8017286 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801723e:	7dfa      	ldrb	r2, [r7, #23]
 8017240:	4926      	ldr	r1, [pc, #152]	; (80172dc <etharp_output+0x200>)
 8017242:	4613      	mov	r3, r2
 8017244:	005b      	lsls	r3, r3, #1
 8017246:	4413      	add	r3, r2
 8017248:	00db      	lsls	r3, r3, #3
 801724a:	440b      	add	r3, r1
 801724c:	3308      	adds	r3, #8
 801724e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017250:	68fa      	ldr	r2, [r7, #12]
 8017252:	429a      	cmp	r2, r3
 8017254:	d117      	bne.n	8017286 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017256:	69bb      	ldr	r3, [r7, #24]
 8017258:	6819      	ldr	r1, [r3, #0]
 801725a:	7dfa      	ldrb	r2, [r7, #23]
 801725c:	481f      	ldr	r0, [pc, #124]	; (80172dc <etharp_output+0x200>)
 801725e:	4613      	mov	r3, r2
 8017260:	005b      	lsls	r3, r3, #1
 8017262:	4413      	add	r3, r2
 8017264:	00db      	lsls	r3, r3, #3
 8017266:	4403      	add	r3, r0
 8017268:	3304      	adds	r3, #4
 801726a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801726c:	4299      	cmp	r1, r3
 801726e:	d10a      	bne.n	8017286 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017270:	4a19      	ldr	r2, [pc, #100]	; (80172d8 <etharp_output+0x1fc>)
 8017272:	7dfb      	ldrb	r3, [r7, #23]
 8017274:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017276:	7dfb      	ldrb	r3, [r7, #23]
 8017278:	461a      	mov	r2, r3
 801727a:	68b9      	ldr	r1, [r7, #8]
 801727c:	68f8      	ldr	r0, [r7, #12]
 801727e:	f7ff fe93 	bl	8016fa8 <etharp_output_to_arp_index>
 8017282:	4603      	mov	r3, r0
 8017284:	e018      	b.n	80172b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017286:	7dfb      	ldrb	r3, [r7, #23]
 8017288:	3301      	adds	r3, #1
 801728a:	75fb      	strb	r3, [r7, #23]
 801728c:	7dfb      	ldrb	r3, [r7, #23]
 801728e:	2b09      	cmp	r3, #9
 8017290:	d9ca      	bls.n	8017228 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017292:	68ba      	ldr	r2, [r7, #8]
 8017294:	69b9      	ldr	r1, [r7, #24]
 8017296:	68f8      	ldr	r0, [r7, #12]
 8017298:	f000 f822 	bl	80172e0 <etharp_query>
 801729c:	4603      	mov	r3, r0
 801729e:	e00b      	b.n	80172b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80172a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80172aa:	9300      	str	r3, [sp, #0]
 80172ac:	69fb      	ldr	r3, [r7, #28]
 80172ae:	68b9      	ldr	r1, [r7, #8]
 80172b0:	68f8      	ldr	r0, [r7, #12]
 80172b2:	f001 fd45 	bl	8018d40 <ethernet_output>
 80172b6:	4603      	mov	r3, r0
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	3720      	adds	r7, #32
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}
 80172c0:	0801d03c 	.word	0x0801d03c
 80172c4:	0801d18c 	.word	0x0801d18c
 80172c8:	0801d0b4 	.word	0x0801d0b4
 80172cc:	0801d1dc 	.word	0x0801d1dc
 80172d0:	0801d17c 	.word	0x0801d17c
 80172d4:	0801d884 	.word	0x0801d884
 80172d8:	2004f114 	.word	0x2004f114
 80172dc:	2004f024 	.word	0x2004f024

080172e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b08c      	sub	sp, #48	; 0x30
 80172e4:	af02      	add	r7, sp, #8
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	3326      	adds	r3, #38	; 0x26
 80172f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80172f2:	23ff      	movs	r3, #255	; 0xff
 80172f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80172f8:	2300      	movs	r3, #0
 80172fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	68f9      	ldr	r1, [r7, #12]
 8017302:	4618      	mov	r0, r3
 8017304:	f000 fe0e 	bl	8017f24 <ip4_addr_isbroadcast_u32>
 8017308:	4603      	mov	r3, r0
 801730a:	2b00      	cmp	r3, #0
 801730c:	d10c      	bne.n	8017328 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801730e:	68bb      	ldr	r3, [r7, #8]
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017316:	2be0      	cmp	r3, #224	; 0xe0
 8017318:	d006      	beq.n	8017328 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801731a:	68bb      	ldr	r3, [r7, #8]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d003      	beq.n	8017328 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d102      	bne.n	801732e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017328:	f06f 030f 	mvn.w	r3, #15
 801732c:	e101      	b.n	8017532 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801732e:	68fa      	ldr	r2, [r7, #12]
 8017330:	2101      	movs	r1, #1
 8017332:	68b8      	ldr	r0, [r7, #8]
 8017334:	f7ff fb60 	bl	80169f8 <etharp_find_entry>
 8017338:	4603      	mov	r3, r0
 801733a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801733c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017340:	2b00      	cmp	r3, #0
 8017342:	da02      	bge.n	801734a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017344:	8a7b      	ldrh	r3, [r7, #18]
 8017346:	b25b      	sxtb	r3, r3
 8017348:	e0f3      	b.n	8017532 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801734a:	8a7b      	ldrh	r3, [r7, #18]
 801734c:	2b7e      	cmp	r3, #126	; 0x7e
 801734e:	d906      	bls.n	801735e <etharp_query+0x7e>
 8017350:	4b7a      	ldr	r3, [pc, #488]	; (801753c <etharp_query+0x25c>)
 8017352:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017356:	497a      	ldr	r1, [pc, #488]	; (8017540 <etharp_query+0x260>)
 8017358:	487a      	ldr	r0, [pc, #488]	; (8017544 <etharp_query+0x264>)
 801735a:	f002 f897 	bl	801948c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801735e:	8a7b      	ldrh	r3, [r7, #18]
 8017360:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017362:	7c7a      	ldrb	r2, [r7, #17]
 8017364:	4978      	ldr	r1, [pc, #480]	; (8017548 <etharp_query+0x268>)
 8017366:	4613      	mov	r3, r2
 8017368:	005b      	lsls	r3, r3, #1
 801736a:	4413      	add	r3, r2
 801736c:	00db      	lsls	r3, r3, #3
 801736e:	440b      	add	r3, r1
 8017370:	3314      	adds	r3, #20
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d115      	bne.n	80173a4 <etharp_query+0xc4>
    is_new_entry = 1;
 8017378:	2301      	movs	r3, #1
 801737a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801737c:	7c7a      	ldrb	r2, [r7, #17]
 801737e:	4972      	ldr	r1, [pc, #456]	; (8017548 <etharp_query+0x268>)
 8017380:	4613      	mov	r3, r2
 8017382:	005b      	lsls	r3, r3, #1
 8017384:	4413      	add	r3, r2
 8017386:	00db      	lsls	r3, r3, #3
 8017388:	440b      	add	r3, r1
 801738a:	3314      	adds	r3, #20
 801738c:	2201      	movs	r2, #1
 801738e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017390:	7c7a      	ldrb	r2, [r7, #17]
 8017392:	496d      	ldr	r1, [pc, #436]	; (8017548 <etharp_query+0x268>)
 8017394:	4613      	mov	r3, r2
 8017396:	005b      	lsls	r3, r3, #1
 8017398:	4413      	add	r3, r2
 801739a:	00db      	lsls	r3, r3, #3
 801739c:	440b      	add	r3, r1
 801739e:	3308      	adds	r3, #8
 80173a0:	68fa      	ldr	r2, [r7, #12]
 80173a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80173a4:	7c7a      	ldrb	r2, [r7, #17]
 80173a6:	4968      	ldr	r1, [pc, #416]	; (8017548 <etharp_query+0x268>)
 80173a8:	4613      	mov	r3, r2
 80173aa:	005b      	lsls	r3, r3, #1
 80173ac:	4413      	add	r3, r2
 80173ae:	00db      	lsls	r3, r3, #3
 80173b0:	440b      	add	r3, r1
 80173b2:	3314      	adds	r3, #20
 80173b4:	781b      	ldrb	r3, [r3, #0]
 80173b6:	2b01      	cmp	r3, #1
 80173b8:	d011      	beq.n	80173de <etharp_query+0xfe>
 80173ba:	7c7a      	ldrb	r2, [r7, #17]
 80173bc:	4962      	ldr	r1, [pc, #392]	; (8017548 <etharp_query+0x268>)
 80173be:	4613      	mov	r3, r2
 80173c0:	005b      	lsls	r3, r3, #1
 80173c2:	4413      	add	r3, r2
 80173c4:	00db      	lsls	r3, r3, #3
 80173c6:	440b      	add	r3, r1
 80173c8:	3314      	adds	r3, #20
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	2b01      	cmp	r3, #1
 80173ce:	d806      	bhi.n	80173de <etharp_query+0xfe>
 80173d0:	4b5a      	ldr	r3, [pc, #360]	; (801753c <etharp_query+0x25c>)
 80173d2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80173d6:	495d      	ldr	r1, [pc, #372]	; (801754c <etharp_query+0x26c>)
 80173d8:	485a      	ldr	r0, [pc, #360]	; (8017544 <etharp_query+0x264>)
 80173da:	f002 f857 	bl	801948c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80173de:	6a3b      	ldr	r3, [r7, #32]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d102      	bne.n	80173ea <etharp_query+0x10a>
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d10c      	bne.n	8017404 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80173ea:	68b9      	ldr	r1, [r7, #8]
 80173ec:	68f8      	ldr	r0, [r7, #12]
 80173ee:	f000 f963 	bl	80176b8 <etharp_request>
 80173f2:	4603      	mov	r3, r0
 80173f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d102      	bne.n	8017404 <etharp_query+0x124>
      return result;
 80173fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017402:	e096      	b.n	8017532 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d106      	bne.n	8017418 <etharp_query+0x138>
 801740a:	4b4c      	ldr	r3, [pc, #304]	; (801753c <etharp_query+0x25c>)
 801740c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017410:	494f      	ldr	r1, [pc, #316]	; (8017550 <etharp_query+0x270>)
 8017412:	484c      	ldr	r0, [pc, #304]	; (8017544 <etharp_query+0x264>)
 8017414:	f002 f83a 	bl	801948c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017418:	7c7a      	ldrb	r2, [r7, #17]
 801741a:	494b      	ldr	r1, [pc, #300]	; (8017548 <etharp_query+0x268>)
 801741c:	4613      	mov	r3, r2
 801741e:	005b      	lsls	r3, r3, #1
 8017420:	4413      	add	r3, r2
 8017422:	00db      	lsls	r3, r3, #3
 8017424:	440b      	add	r3, r1
 8017426:	3314      	adds	r3, #20
 8017428:	781b      	ldrb	r3, [r3, #0]
 801742a:	2b01      	cmp	r3, #1
 801742c:	d917      	bls.n	801745e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801742e:	4a49      	ldr	r2, [pc, #292]	; (8017554 <etharp_query+0x274>)
 8017430:	7c7b      	ldrb	r3, [r7, #17]
 8017432:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017434:	7c7a      	ldrb	r2, [r7, #17]
 8017436:	4613      	mov	r3, r2
 8017438:	005b      	lsls	r3, r3, #1
 801743a:	4413      	add	r3, r2
 801743c:	00db      	lsls	r3, r3, #3
 801743e:	3308      	adds	r3, #8
 8017440:	4a41      	ldr	r2, [pc, #260]	; (8017548 <etharp_query+0x268>)
 8017442:	4413      	add	r3, r2
 8017444:	3304      	adds	r3, #4
 8017446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801744a:	9200      	str	r2, [sp, #0]
 801744c:	697a      	ldr	r2, [r7, #20]
 801744e:	6879      	ldr	r1, [r7, #4]
 8017450:	68f8      	ldr	r0, [r7, #12]
 8017452:	f001 fc75 	bl	8018d40 <ethernet_output>
 8017456:	4603      	mov	r3, r0
 8017458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801745c:	e067      	b.n	801752e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801745e:	7c7a      	ldrb	r2, [r7, #17]
 8017460:	4939      	ldr	r1, [pc, #228]	; (8017548 <etharp_query+0x268>)
 8017462:	4613      	mov	r3, r2
 8017464:	005b      	lsls	r3, r3, #1
 8017466:	4413      	add	r3, r2
 8017468:	00db      	lsls	r3, r3, #3
 801746a:	440b      	add	r3, r1
 801746c:	3314      	adds	r3, #20
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	2b01      	cmp	r3, #1
 8017472:	d15c      	bne.n	801752e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017474:	2300      	movs	r3, #0
 8017476:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801747c:	e01c      	b.n	80174b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801747e:	69fb      	ldr	r3, [r7, #28]
 8017480:	895a      	ldrh	r2, [r3, #10]
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	891b      	ldrh	r3, [r3, #8]
 8017486:	429a      	cmp	r2, r3
 8017488:	d10a      	bne.n	80174a0 <etharp_query+0x1c0>
 801748a:	69fb      	ldr	r3, [r7, #28]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d006      	beq.n	80174a0 <etharp_query+0x1c0>
 8017492:	4b2a      	ldr	r3, [pc, #168]	; (801753c <etharp_query+0x25c>)
 8017494:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017498:	492f      	ldr	r1, [pc, #188]	; (8017558 <etharp_query+0x278>)
 801749a:	482a      	ldr	r0, [pc, #168]	; (8017544 <etharp_query+0x264>)
 801749c:	f001 fff6 	bl	801948c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80174a0:	69fb      	ldr	r3, [r7, #28]
 80174a2:	7b1b      	ldrb	r3, [r3, #12]
 80174a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d002      	beq.n	80174b2 <etharp_query+0x1d2>
        copy_needed = 1;
 80174ac:	2301      	movs	r3, #1
 80174ae:	61bb      	str	r3, [r7, #24]
        break;
 80174b0:	e005      	b.n	80174be <etharp_query+0x1de>
      }
      p = p->next;
 80174b2:	69fb      	ldr	r3, [r7, #28]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80174b8:	69fb      	ldr	r3, [r7, #28]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d1df      	bne.n	801747e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80174be:	69bb      	ldr	r3, [r7, #24]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d007      	beq.n	80174d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80174c4:	687a      	ldr	r2, [r7, #4]
 80174c6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80174ca:	200e      	movs	r0, #14
 80174cc:	f7f8 fcca 	bl	800fe64 <pbuf_clone>
 80174d0:	61f8      	str	r0, [r7, #28]
 80174d2:	e004      	b.n	80174de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80174d8:	69f8      	ldr	r0, [r7, #28]
 80174da:	f7f8 fb01 	bl	800fae0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80174de:	69fb      	ldr	r3, [r7, #28]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d021      	beq.n	8017528 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80174e4:	7c7a      	ldrb	r2, [r7, #17]
 80174e6:	4918      	ldr	r1, [pc, #96]	; (8017548 <etharp_query+0x268>)
 80174e8:	4613      	mov	r3, r2
 80174ea:	005b      	lsls	r3, r3, #1
 80174ec:	4413      	add	r3, r2
 80174ee:	00db      	lsls	r3, r3, #3
 80174f0:	440b      	add	r3, r1
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d00a      	beq.n	801750e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80174f8:	7c7a      	ldrb	r2, [r7, #17]
 80174fa:	4913      	ldr	r1, [pc, #76]	; (8017548 <etharp_query+0x268>)
 80174fc:	4613      	mov	r3, r2
 80174fe:	005b      	lsls	r3, r3, #1
 8017500:	4413      	add	r3, r2
 8017502:	00db      	lsls	r3, r3, #3
 8017504:	440b      	add	r3, r1
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	4618      	mov	r0, r3
 801750a:	f7f8 fa43 	bl	800f994 <pbuf_free>
      }
      arp_table[i].q = p;
 801750e:	7c7a      	ldrb	r2, [r7, #17]
 8017510:	490d      	ldr	r1, [pc, #52]	; (8017548 <etharp_query+0x268>)
 8017512:	4613      	mov	r3, r2
 8017514:	005b      	lsls	r3, r3, #1
 8017516:	4413      	add	r3, r2
 8017518:	00db      	lsls	r3, r3, #3
 801751a:	440b      	add	r3, r1
 801751c:	69fa      	ldr	r2, [r7, #28]
 801751e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017520:	2300      	movs	r3, #0
 8017522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017526:	e002      	b.n	801752e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017528:	23ff      	movs	r3, #255	; 0xff
 801752a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801752e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017532:	4618      	mov	r0, r3
 8017534:	3728      	adds	r7, #40	; 0x28
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}
 801753a:	bf00      	nop
 801753c:	0801d03c 	.word	0x0801d03c
 8017540:	0801d1e8 	.word	0x0801d1e8
 8017544:	0801d0b4 	.word	0x0801d0b4
 8017548:	2004f024 	.word	0x2004f024
 801754c:	0801d1f8 	.word	0x0801d1f8
 8017550:	0801d1dc 	.word	0x0801d1dc
 8017554:	2004f114 	.word	0x2004f114
 8017558:	0801d220 	.word	0x0801d220

0801755c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b08a      	sub	sp, #40	; 0x28
 8017560:	af02      	add	r7, sp, #8
 8017562:	60f8      	str	r0, [r7, #12]
 8017564:	60b9      	str	r1, [r7, #8]
 8017566:	607a      	str	r2, [r7, #4]
 8017568:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801756a:	2300      	movs	r3, #0
 801756c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d106      	bne.n	8017582 <etharp_raw+0x26>
 8017574:	4b3a      	ldr	r3, [pc, #232]	; (8017660 <etharp_raw+0x104>)
 8017576:	f240 4257 	movw	r2, #1111	; 0x457
 801757a:	493a      	ldr	r1, [pc, #232]	; (8017664 <etharp_raw+0x108>)
 801757c:	483a      	ldr	r0, [pc, #232]	; (8017668 <etharp_raw+0x10c>)
 801757e:	f001 ff85 	bl	801948c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017582:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017586:	211c      	movs	r1, #28
 8017588:	200e      	movs	r0, #14
 801758a:	f7f7 ff1f 	bl	800f3cc <pbuf_alloc>
 801758e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017590:	69bb      	ldr	r3, [r7, #24]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d102      	bne.n	801759c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801759a:	e05d      	b.n	8017658 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801759c:	69bb      	ldr	r3, [r7, #24]
 801759e:	895b      	ldrh	r3, [r3, #10]
 80175a0:	2b1b      	cmp	r3, #27
 80175a2:	d806      	bhi.n	80175b2 <etharp_raw+0x56>
 80175a4:	4b2e      	ldr	r3, [pc, #184]	; (8017660 <etharp_raw+0x104>)
 80175a6:	f240 4262 	movw	r2, #1122	; 0x462
 80175aa:	4930      	ldr	r1, [pc, #192]	; (801766c <etharp_raw+0x110>)
 80175ac:	482e      	ldr	r0, [pc, #184]	; (8017668 <etharp_raw+0x10c>)
 80175ae:	f001 ff6d 	bl	801948c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80175b2:	69bb      	ldr	r3, [r7, #24]
 80175b4:	685b      	ldr	r3, [r3, #4]
 80175b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80175b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7f6 fdf8 	bl	800e1b0 <lwip_htons>
 80175c0:	4603      	mov	r3, r0
 80175c2:	461a      	mov	r2, r3
 80175c4:	697b      	ldr	r3, [r7, #20]
 80175c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80175ce:	2b06      	cmp	r3, #6
 80175d0:	d006      	beq.n	80175e0 <etharp_raw+0x84>
 80175d2:	4b23      	ldr	r3, [pc, #140]	; (8017660 <etharp_raw+0x104>)
 80175d4:	f240 4269 	movw	r2, #1129	; 0x469
 80175d8:	4925      	ldr	r1, [pc, #148]	; (8017670 <etharp_raw+0x114>)
 80175da:	4823      	ldr	r0, [pc, #140]	; (8017668 <etharp_raw+0x10c>)
 80175dc:	f001 ff56 	bl	801948c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80175e0:	697b      	ldr	r3, [r7, #20]
 80175e2:	3308      	adds	r3, #8
 80175e4:	2206      	movs	r2, #6
 80175e6:	6839      	ldr	r1, [r7, #0]
 80175e8:	4618      	mov	r0, r3
 80175ea:	f001 fea4 	bl	8019336 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80175ee:	697b      	ldr	r3, [r7, #20]
 80175f0:	3312      	adds	r3, #18
 80175f2:	2206      	movs	r2, #6
 80175f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175f6:	4618      	mov	r0, r3
 80175f8:	f001 fe9d 	bl	8019336 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80175fc:	697b      	ldr	r3, [r7, #20]
 80175fe:	330e      	adds	r3, #14
 8017600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017602:	6812      	ldr	r2, [r2, #0]
 8017604:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	3318      	adds	r3, #24
 801760a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801760c:	6812      	ldr	r2, [r2, #0]
 801760e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	2200      	movs	r2, #0
 8017614:	701a      	strb	r2, [r3, #0]
 8017616:	2200      	movs	r2, #0
 8017618:	f042 0201 	orr.w	r2, r2, #1
 801761c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801761e:	697b      	ldr	r3, [r7, #20]
 8017620:	2200      	movs	r2, #0
 8017622:	f042 0208 	orr.w	r2, r2, #8
 8017626:	709a      	strb	r2, [r3, #2]
 8017628:	2200      	movs	r2, #0
 801762a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801762c:	697b      	ldr	r3, [r7, #20]
 801762e:	2206      	movs	r2, #6
 8017630:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017632:	697b      	ldr	r3, [r7, #20]
 8017634:	2204      	movs	r2, #4
 8017636:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017638:	f640 0306 	movw	r3, #2054	; 0x806
 801763c:	9300      	str	r3, [sp, #0]
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	68ba      	ldr	r2, [r7, #8]
 8017642:	69b9      	ldr	r1, [r7, #24]
 8017644:	68f8      	ldr	r0, [r7, #12]
 8017646:	f001 fb7b 	bl	8018d40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801764a:	69b8      	ldr	r0, [r7, #24]
 801764c:	f7f8 f9a2 	bl	800f994 <pbuf_free>
  p = NULL;
 8017650:	2300      	movs	r3, #0
 8017652:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017654:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017658:	4618      	mov	r0, r3
 801765a:	3720      	adds	r7, #32
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}
 8017660:	0801d03c 	.word	0x0801d03c
 8017664:	0801d18c 	.word	0x0801d18c
 8017668:	0801d0b4 	.word	0x0801d0b4
 801766c:	0801d23c 	.word	0x0801d23c
 8017670:	0801d270 	.word	0x0801d270

08017674 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b088      	sub	sp, #32
 8017678:	af04      	add	r7, sp, #16
 801767a:	60f8      	str	r0, [r7, #12]
 801767c:	60b9      	str	r1, [r7, #8]
 801767e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017690:	2201      	movs	r2, #1
 8017692:	9203      	str	r2, [sp, #12]
 8017694:	68ba      	ldr	r2, [r7, #8]
 8017696:	9202      	str	r2, [sp, #8]
 8017698:	4a06      	ldr	r2, [pc, #24]	; (80176b4 <etharp_request_dst+0x40>)
 801769a:	9201      	str	r2, [sp, #4]
 801769c:	9300      	str	r3, [sp, #0]
 801769e:	4603      	mov	r3, r0
 80176a0:	687a      	ldr	r2, [r7, #4]
 80176a2:	68f8      	ldr	r0, [r7, #12]
 80176a4:	f7ff ff5a 	bl	801755c <etharp_raw>
 80176a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3710      	adds	r7, #16
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	bf00      	nop
 80176b4:	0801d88c 	.word	0x0801d88c

080176b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b082      	sub	sp, #8
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
 80176c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80176c2:	4a05      	ldr	r2, [pc, #20]	; (80176d8 <etharp_request+0x20>)
 80176c4:	6839      	ldr	r1, [r7, #0]
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	f7ff ffd4 	bl	8017674 <etharp_request_dst>
 80176cc:	4603      	mov	r3, r0
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3708      	adds	r7, #8
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}
 80176d6:	bf00      	nop
 80176d8:	0801d884 	.word	0x0801d884

080176dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b08e      	sub	sp, #56	; 0x38
 80176e0:	af04      	add	r7, sp, #16
 80176e2:	6078      	str	r0, [r7, #4]
 80176e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80176e6:	4b79      	ldr	r3, [pc, #484]	; (80178cc <icmp_input+0x1f0>)
 80176e8:	689b      	ldr	r3, [r3, #8]
 80176ea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80176ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ee:	781b      	ldrb	r3, [r3, #0]
 80176f0:	f003 030f 	and.w	r3, r3, #15
 80176f4:	b2db      	uxtb	r3, r3
 80176f6:	009b      	lsls	r3, r3, #2
 80176f8:	b2db      	uxtb	r3, r3
 80176fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80176fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176fe:	2b13      	cmp	r3, #19
 8017700:	f240 80cd 	bls.w	801789e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	895b      	ldrh	r3, [r3, #10]
 8017708:	2b03      	cmp	r3, #3
 801770a:	f240 80ca 	bls.w	80178a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	685b      	ldr	r3, [r3, #4]
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017718:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801771c:	2b00      	cmp	r3, #0
 801771e:	f000 80b7 	beq.w	8017890 <icmp_input+0x1b4>
 8017722:	2b08      	cmp	r3, #8
 8017724:	f040 80b7 	bne.w	8017896 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017728:	4b69      	ldr	r3, [pc, #420]	; (80178d0 <icmp_input+0x1f4>)
 801772a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801772c:	4b67      	ldr	r3, [pc, #412]	; (80178cc <icmp_input+0x1f0>)
 801772e:	695b      	ldr	r3, [r3, #20]
 8017730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017734:	2be0      	cmp	r3, #224	; 0xe0
 8017736:	f000 80bb 	beq.w	80178b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801773a:	4b64      	ldr	r3, [pc, #400]	; (80178cc <icmp_input+0x1f0>)
 801773c:	695b      	ldr	r3, [r3, #20]
 801773e:	4a63      	ldr	r2, [pc, #396]	; (80178cc <icmp_input+0x1f0>)
 8017740:	6812      	ldr	r2, [r2, #0]
 8017742:	4611      	mov	r1, r2
 8017744:	4618      	mov	r0, r3
 8017746:	f000 fbed 	bl	8017f24 <ip4_addr_isbroadcast_u32>
 801774a:	4603      	mov	r3, r0
 801774c:	2b00      	cmp	r3, #0
 801774e:	f040 80b1 	bne.w	80178b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	891b      	ldrh	r3, [r3, #8]
 8017756:	2b07      	cmp	r3, #7
 8017758:	f240 80a5 	bls.w	80178a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801775c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801775e:	330e      	adds	r3, #14
 8017760:	4619      	mov	r1, r3
 8017762:	6878      	ldr	r0, [r7, #4]
 8017764:	f7f8 f880 	bl	800f868 <pbuf_add_header>
 8017768:	4603      	mov	r3, r0
 801776a:	2b00      	cmp	r3, #0
 801776c:	d04b      	beq.n	8017806 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	891a      	ldrh	r2, [r3, #8]
 8017772:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017774:	4413      	add	r3, r2
 8017776:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	891b      	ldrh	r3, [r3, #8]
 801777c:	8b7a      	ldrh	r2, [r7, #26]
 801777e:	429a      	cmp	r2, r3
 8017780:	f0c0 809a 	bcc.w	80178b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017784:	8b7b      	ldrh	r3, [r7, #26]
 8017786:	f44f 7220 	mov.w	r2, #640	; 0x280
 801778a:	4619      	mov	r1, r3
 801778c:	200e      	movs	r0, #14
 801778e:	f7f7 fe1d 	bl	800f3cc <pbuf_alloc>
 8017792:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017794:	697b      	ldr	r3, [r7, #20]
 8017796:	2b00      	cmp	r3, #0
 8017798:	f000 8090 	beq.w	80178bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801779c:	697b      	ldr	r3, [r7, #20]
 801779e:	895b      	ldrh	r3, [r3, #10]
 80177a0:	461a      	mov	r2, r3
 80177a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177a4:	3308      	adds	r3, #8
 80177a6:	429a      	cmp	r2, r3
 80177a8:	d203      	bcs.n	80177b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80177aa:	6978      	ldr	r0, [r7, #20]
 80177ac:	f7f8 f8f2 	bl	800f994 <pbuf_free>
          goto icmperr;
 80177b0:	e085      	b.n	80178be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80177b2:	697b      	ldr	r3, [r7, #20]
 80177b4:	685b      	ldr	r3, [r3, #4]
 80177b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80177b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80177ba:	4618      	mov	r0, r3
 80177bc:	f001 fdbb 	bl	8019336 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80177c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177c2:	4619      	mov	r1, r3
 80177c4:	6978      	ldr	r0, [r7, #20]
 80177c6:	f7f8 f85f 	bl	800f888 <pbuf_remove_header>
 80177ca:	4603      	mov	r3, r0
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d009      	beq.n	80177e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80177d0:	4b40      	ldr	r3, [pc, #256]	; (80178d4 <icmp_input+0x1f8>)
 80177d2:	22b6      	movs	r2, #182	; 0xb6
 80177d4:	4940      	ldr	r1, [pc, #256]	; (80178d8 <icmp_input+0x1fc>)
 80177d6:	4841      	ldr	r0, [pc, #260]	; (80178dc <icmp_input+0x200>)
 80177d8:	f001 fe58 	bl	801948c <iprintf>
          pbuf_free(r);
 80177dc:	6978      	ldr	r0, [r7, #20]
 80177de:	f7f8 f8d9 	bl	800f994 <pbuf_free>
          goto icmperr;
 80177e2:	e06c      	b.n	80178be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80177e4:	6879      	ldr	r1, [r7, #4]
 80177e6:	6978      	ldr	r0, [r7, #20]
 80177e8:	f7f8 f9f8 	bl	800fbdc <pbuf_copy>
 80177ec:	4603      	mov	r3, r0
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d003      	beq.n	80177fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80177f2:	6978      	ldr	r0, [r7, #20]
 80177f4:	f7f8 f8ce 	bl	800f994 <pbuf_free>
          goto icmperr;
 80177f8:	e061      	b.n	80178be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80177fa:	6878      	ldr	r0, [r7, #4]
 80177fc:	f7f8 f8ca 	bl	800f994 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	607b      	str	r3, [r7, #4]
 8017804:	e00f      	b.n	8017826 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017808:	330e      	adds	r3, #14
 801780a:	4619      	mov	r1, r3
 801780c:	6878      	ldr	r0, [r7, #4]
 801780e:	f7f8 f83b 	bl	800f888 <pbuf_remove_header>
 8017812:	4603      	mov	r3, r0
 8017814:	2b00      	cmp	r3, #0
 8017816:	d006      	beq.n	8017826 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017818:	4b2e      	ldr	r3, [pc, #184]	; (80178d4 <icmp_input+0x1f8>)
 801781a:	22c7      	movs	r2, #199	; 0xc7
 801781c:	4930      	ldr	r1, [pc, #192]	; (80178e0 <icmp_input+0x204>)
 801781e:	482f      	ldr	r0, [pc, #188]	; (80178dc <icmp_input+0x200>)
 8017820:	f001 fe34 	bl	801948c <iprintf>
          goto icmperr;
 8017824:	e04b      	b.n	80178be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	685b      	ldr	r3, [r3, #4]
 801782a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801782c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801782e:	4619      	mov	r1, r3
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f7f8 f819 	bl	800f868 <pbuf_add_header>
 8017836:	4603      	mov	r3, r0
 8017838:	2b00      	cmp	r3, #0
 801783a:	d12b      	bne.n	8017894 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	685b      	ldr	r3, [r3, #4]
 8017840:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017842:	69fb      	ldr	r3, [r7, #28]
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801784a:	4b20      	ldr	r3, [pc, #128]	; (80178cc <icmp_input+0x1f0>)
 801784c:	691a      	ldr	r2, [r3, #16]
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017852:	693b      	ldr	r3, [r7, #16]
 8017854:	2200      	movs	r2, #0
 8017856:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017858:	693b      	ldr	r3, [r7, #16]
 801785a:	2200      	movs	r2, #0
 801785c:	709a      	strb	r2, [r3, #2]
 801785e:	2200      	movs	r2, #0
 8017860:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	22ff      	movs	r2, #255	; 0xff
 8017866:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	2200      	movs	r2, #0
 801786c:	729a      	strb	r2, [r3, #10]
 801786e:	2200      	movs	r2, #0
 8017870:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017872:	683b      	ldr	r3, [r7, #0]
 8017874:	9302      	str	r3, [sp, #8]
 8017876:	2301      	movs	r3, #1
 8017878:	9301      	str	r3, [sp, #4]
 801787a:	2300      	movs	r3, #0
 801787c:	9300      	str	r3, [sp, #0]
 801787e:	23ff      	movs	r3, #255	; 0xff
 8017880:	2200      	movs	r2, #0
 8017882:	69f9      	ldr	r1, [r7, #28]
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	f000 fa75 	bl	8017d74 <ip4_output_if>
 801788a:	4603      	mov	r3, r0
 801788c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801788e:	e001      	b.n	8017894 <icmp_input+0x1b8>
      break;
 8017890:	bf00      	nop
 8017892:	e000      	b.n	8017896 <icmp_input+0x1ba>
      break;
 8017894:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017896:	6878      	ldr	r0, [r7, #4]
 8017898:	f7f8 f87c 	bl	800f994 <pbuf_free>
  return;
 801789c:	e013      	b.n	80178c6 <icmp_input+0x1ea>
    goto lenerr;
 801789e:	bf00      	nop
 80178a0:	e002      	b.n	80178a8 <icmp_input+0x1cc>
    goto lenerr;
 80178a2:	bf00      	nop
 80178a4:	e000      	b.n	80178a8 <icmp_input+0x1cc>
        goto lenerr;
 80178a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f7f8 f873 	bl	800f994 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178ae:	e00a      	b.n	80178c6 <icmp_input+0x1ea>
        goto icmperr;
 80178b0:	bf00      	nop
 80178b2:	e004      	b.n	80178be <icmp_input+0x1e2>
        goto icmperr;
 80178b4:	bf00      	nop
 80178b6:	e002      	b.n	80178be <icmp_input+0x1e2>
          goto icmperr;
 80178b8:	bf00      	nop
 80178ba:	e000      	b.n	80178be <icmp_input+0x1e2>
          goto icmperr;
 80178bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f7f8 f868 	bl	800f994 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80178c6:	3728      	adds	r7, #40	; 0x28
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd80      	pop	{r7, pc}
 80178cc:	2004aeb0 	.word	0x2004aeb0
 80178d0:	2004aec4 	.word	0x2004aec4
 80178d4:	0801d2b4 	.word	0x0801d2b4
 80178d8:	0801d2ec 	.word	0x0801d2ec
 80178dc:	0801d324 	.word	0x0801d324
 80178e0:	0801d34c 	.word	0x0801d34c

080178e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b082      	sub	sp, #8
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	460b      	mov	r3, r1
 80178ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80178f0:	78fb      	ldrb	r3, [r7, #3]
 80178f2:	461a      	mov	r2, r3
 80178f4:	2103      	movs	r1, #3
 80178f6:	6878      	ldr	r0, [r7, #4]
 80178f8:	f000 f814 	bl	8017924 <icmp_send_response>
}
 80178fc:	bf00      	nop
 80178fe:	3708      	adds	r7, #8
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}

08017904 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b082      	sub	sp, #8
 8017908:	af00      	add	r7, sp, #0
 801790a:	6078      	str	r0, [r7, #4]
 801790c:	460b      	mov	r3, r1
 801790e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017910:	78fb      	ldrb	r3, [r7, #3]
 8017912:	461a      	mov	r2, r3
 8017914:	210b      	movs	r1, #11
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f000 f804 	bl	8017924 <icmp_send_response>
}
 801791c:	bf00      	nop
 801791e:	3708      	adds	r7, #8
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}

08017924 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b08c      	sub	sp, #48	; 0x30
 8017928:	af04      	add	r7, sp, #16
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	460b      	mov	r3, r1
 801792e:	70fb      	strb	r3, [r7, #3]
 8017930:	4613      	mov	r3, r2
 8017932:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017934:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017938:	2124      	movs	r1, #36	; 0x24
 801793a:	2022      	movs	r0, #34	; 0x22
 801793c:	f7f7 fd46 	bl	800f3cc <pbuf_alloc>
 8017940:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017942:	69fb      	ldr	r3, [r7, #28]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d04c      	beq.n	80179e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017948:	69fb      	ldr	r3, [r7, #28]
 801794a:	895b      	ldrh	r3, [r3, #10]
 801794c:	2b23      	cmp	r3, #35	; 0x23
 801794e:	d806      	bhi.n	801795e <icmp_send_response+0x3a>
 8017950:	4b26      	ldr	r3, [pc, #152]	; (80179ec <icmp_send_response+0xc8>)
 8017952:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017956:	4926      	ldr	r1, [pc, #152]	; (80179f0 <icmp_send_response+0xcc>)
 8017958:	4826      	ldr	r0, [pc, #152]	; (80179f4 <icmp_send_response+0xd0>)
 801795a:	f001 fd97 	bl	801948c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	685b      	ldr	r3, [r3, #4]
 8017962:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017964:	69fb      	ldr	r3, [r7, #28]
 8017966:	685b      	ldr	r3, [r3, #4]
 8017968:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801796a:	697b      	ldr	r3, [r7, #20]
 801796c:	78fa      	ldrb	r2, [r7, #3]
 801796e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017970:	697b      	ldr	r3, [r7, #20]
 8017972:	78ba      	ldrb	r2, [r7, #2]
 8017974:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017976:	697b      	ldr	r3, [r7, #20]
 8017978:	2200      	movs	r2, #0
 801797a:	711a      	strb	r2, [r3, #4]
 801797c:	2200      	movs	r2, #0
 801797e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017980:	697b      	ldr	r3, [r7, #20]
 8017982:	2200      	movs	r2, #0
 8017984:	719a      	strb	r2, [r3, #6]
 8017986:	2200      	movs	r2, #0
 8017988:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801798a:	69fb      	ldr	r3, [r7, #28]
 801798c:	685b      	ldr	r3, [r3, #4]
 801798e:	f103 0008 	add.w	r0, r3, #8
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	685b      	ldr	r3, [r3, #4]
 8017996:	221c      	movs	r2, #28
 8017998:	4619      	mov	r1, r3
 801799a:	f001 fccc 	bl	8019336 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801799e:	69bb      	ldr	r3, [r7, #24]
 80179a0:	68db      	ldr	r3, [r3, #12]
 80179a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80179a4:	f107 030c 	add.w	r3, r7, #12
 80179a8:	4618      	mov	r0, r3
 80179aa:	f000 f825 	bl	80179f8 <ip4_route>
 80179ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80179b0:	693b      	ldr	r3, [r7, #16]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d011      	beq.n	80179da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80179b6:	697b      	ldr	r3, [r7, #20]
 80179b8:	2200      	movs	r2, #0
 80179ba:	709a      	strb	r2, [r3, #2]
 80179bc:	2200      	movs	r2, #0
 80179be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80179c0:	f107 020c 	add.w	r2, r7, #12
 80179c4:	693b      	ldr	r3, [r7, #16]
 80179c6:	9302      	str	r3, [sp, #8]
 80179c8:	2301      	movs	r3, #1
 80179ca:	9301      	str	r3, [sp, #4]
 80179cc:	2300      	movs	r3, #0
 80179ce:	9300      	str	r3, [sp, #0]
 80179d0:	23ff      	movs	r3, #255	; 0xff
 80179d2:	2100      	movs	r1, #0
 80179d4:	69f8      	ldr	r0, [r7, #28]
 80179d6:	f000 f9cd 	bl	8017d74 <ip4_output_if>
  }
  pbuf_free(q);
 80179da:	69f8      	ldr	r0, [r7, #28]
 80179dc:	f7f7 ffda 	bl	800f994 <pbuf_free>
 80179e0:	e000      	b.n	80179e4 <icmp_send_response+0xc0>
    return;
 80179e2:	bf00      	nop
}
 80179e4:	3720      	adds	r7, #32
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}
 80179ea:	bf00      	nop
 80179ec:	0801d2b4 	.word	0x0801d2b4
 80179f0:	0801d380 	.word	0x0801d380
 80179f4:	0801d324 	.word	0x0801d324

080179f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80179f8:	b480      	push	{r7}
 80179fa:	b085      	sub	sp, #20
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017a00:	4b33      	ldr	r3, [pc, #204]	; (8017ad0 <ip4_route+0xd8>)
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	60fb      	str	r3, [r7, #12]
 8017a06:	e036      	b.n	8017a76 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a0e:	f003 0301 	and.w	r3, r3, #1
 8017a12:	b2db      	uxtb	r3, r3
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d02b      	beq.n	8017a70 <ip4_route+0x78>
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a1e:	089b      	lsrs	r3, r3, #2
 8017a20:	f003 0301 	and.w	r3, r3, #1
 8017a24:	b2db      	uxtb	r3, r3
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d022      	beq.n	8017a70 <ip4_route+0x78>
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	3304      	adds	r3, #4
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d01d      	beq.n	8017a70 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681a      	ldr	r2, [r3, #0]
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	3304      	adds	r3, #4
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	405a      	eors	r2, r3
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	3308      	adds	r3, #8
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	4013      	ands	r3, r2
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d101      	bne.n	8017a50 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	e038      	b.n	8017ac2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a56:	f003 0302 	and.w	r3, r3, #2
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d108      	bne.n	8017a70 <ip4_route+0x78>
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681a      	ldr	r2, [r3, #0]
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	330c      	adds	r3, #12
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	d101      	bne.n	8017a70 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	e028      	b.n	8017ac2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	60fb      	str	r3, [r7, #12]
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d1c5      	bne.n	8017a08 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017a7c:	4b15      	ldr	r3, [pc, #84]	; (8017ad4 <ip4_route+0xdc>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d01a      	beq.n	8017aba <ip4_route+0xc2>
 8017a84:	4b13      	ldr	r3, [pc, #76]	; (8017ad4 <ip4_route+0xdc>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a8c:	f003 0301 	and.w	r3, r3, #1
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d012      	beq.n	8017aba <ip4_route+0xc2>
 8017a94:	4b0f      	ldr	r3, [pc, #60]	; (8017ad4 <ip4_route+0xdc>)
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a9c:	f003 0304 	and.w	r3, r3, #4
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d00a      	beq.n	8017aba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017aa4:	4b0b      	ldr	r3, [pc, #44]	; (8017ad4 <ip4_route+0xdc>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	3304      	adds	r3, #4
 8017aaa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d004      	beq.n	8017aba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	b2db      	uxtb	r3, r3
 8017ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8017ab8:	d101      	bne.n	8017abe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017aba:	2300      	movs	r3, #0
 8017abc:	e001      	b.n	8017ac2 <ip4_route+0xca>
  }

  return netif_default;
 8017abe:	4b05      	ldr	r3, [pc, #20]	; (8017ad4 <ip4_route+0xdc>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
}
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	3714      	adds	r7, #20
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017acc:	4770      	bx	lr
 8017ace:	bf00      	nop
 8017ad0:	2004efb8 	.word	0x2004efb8
 8017ad4:	2004efbc 	.word	0x2004efbc

08017ad8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ae6:	f003 0301 	and.w	r3, r3, #1
 8017aea:	b2db      	uxtb	r3, r3
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d016      	beq.n	8017b1e <ip4_input_accept+0x46>
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	3304      	adds	r3, #4
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d011      	beq.n	8017b1e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017afa:	4b0b      	ldr	r3, [pc, #44]	; (8017b28 <ip4_input_accept+0x50>)
 8017afc:	695a      	ldr	r2, [r3, #20]
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	3304      	adds	r3, #4
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d008      	beq.n	8017b1a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017b08:	4b07      	ldr	r3, [pc, #28]	; (8017b28 <ip4_input_accept+0x50>)
 8017b0a:	695b      	ldr	r3, [r3, #20]
 8017b0c:	6879      	ldr	r1, [r7, #4]
 8017b0e:	4618      	mov	r0, r3
 8017b10:	f000 fa08 	bl	8017f24 <ip4_addr_isbroadcast_u32>
 8017b14:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d001      	beq.n	8017b1e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017b1a:	2301      	movs	r3, #1
 8017b1c:	e000      	b.n	8017b20 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017b1e:	2300      	movs	r3, #0
}
 8017b20:	4618      	mov	r0, r3
 8017b22:	3708      	adds	r7, #8
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}
 8017b28:	2004aeb0 	.word	0x2004aeb0

08017b2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b086      	sub	sp, #24
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	685b      	ldr	r3, [r3, #4]
 8017b3a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017b3c:	697b      	ldr	r3, [r7, #20]
 8017b3e:	781b      	ldrb	r3, [r3, #0]
 8017b40:	091b      	lsrs	r3, r3, #4
 8017b42:	b2db      	uxtb	r3, r3
 8017b44:	2b04      	cmp	r3, #4
 8017b46:	d004      	beq.n	8017b52 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017b48:	6878      	ldr	r0, [r7, #4]
 8017b4a:	f7f7 ff23 	bl	800f994 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	e107      	b.n	8017d62 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017b52:	697b      	ldr	r3, [r7, #20]
 8017b54:	781b      	ldrb	r3, [r3, #0]
 8017b56:	f003 030f 	and.w	r3, r3, #15
 8017b5a:	b2db      	uxtb	r3, r3
 8017b5c:	009b      	lsls	r3, r3, #2
 8017b5e:	b2db      	uxtb	r3, r3
 8017b60:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	885b      	ldrh	r3, [r3, #2]
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7f6 fb21 	bl	800e1b0 <lwip_htons>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	891b      	ldrh	r3, [r3, #8]
 8017b76:	89ba      	ldrh	r2, [r7, #12]
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d204      	bcs.n	8017b86 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017b7c:	89bb      	ldrh	r3, [r7, #12]
 8017b7e:	4619      	mov	r1, r3
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f7f7 fd81 	bl	800f688 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	895b      	ldrh	r3, [r3, #10]
 8017b8a:	89fa      	ldrh	r2, [r7, #14]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d807      	bhi.n	8017ba0 <ip4_input+0x74>
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	891b      	ldrh	r3, [r3, #8]
 8017b94:	89ba      	ldrh	r2, [r7, #12]
 8017b96:	429a      	cmp	r2, r3
 8017b98:	d802      	bhi.n	8017ba0 <ip4_input+0x74>
 8017b9a:	89fb      	ldrh	r3, [r7, #14]
 8017b9c:	2b13      	cmp	r3, #19
 8017b9e:	d804      	bhi.n	8017baa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017ba0:	6878      	ldr	r0, [r7, #4]
 8017ba2:	f7f7 fef7 	bl	800f994 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	e0db      	b.n	8017d62 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017baa:	697b      	ldr	r3, [r7, #20]
 8017bac:	691b      	ldr	r3, [r3, #16]
 8017bae:	4a6f      	ldr	r2, [pc, #444]	; (8017d6c <ip4_input+0x240>)
 8017bb0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017bb2:	697b      	ldr	r3, [r7, #20]
 8017bb4:	68db      	ldr	r3, [r3, #12]
 8017bb6:	4a6d      	ldr	r2, [pc, #436]	; (8017d6c <ip4_input+0x240>)
 8017bb8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017bba:	4b6c      	ldr	r3, [pc, #432]	; (8017d6c <ip4_input+0x240>)
 8017bbc:	695b      	ldr	r3, [r3, #20]
 8017bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017bc2:	2be0      	cmp	r3, #224	; 0xe0
 8017bc4:	d112      	bne.n	8017bec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bcc:	f003 0301 	and.w	r3, r3, #1
 8017bd0:	b2db      	uxtb	r3, r3
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d007      	beq.n	8017be6 <ip4_input+0xba>
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	3304      	adds	r3, #4
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d002      	beq.n	8017be6 <ip4_input+0xba>
      netif = inp;
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	613b      	str	r3, [r7, #16]
 8017be4:	e02a      	b.n	8017c3c <ip4_input+0x110>
    } else {
      netif = NULL;
 8017be6:	2300      	movs	r3, #0
 8017be8:	613b      	str	r3, [r7, #16]
 8017bea:	e027      	b.n	8017c3c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017bec:	6838      	ldr	r0, [r7, #0]
 8017bee:	f7ff ff73 	bl	8017ad8 <ip4_input_accept>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d002      	beq.n	8017bfe <ip4_input+0xd2>
      netif = inp;
 8017bf8:	683b      	ldr	r3, [r7, #0]
 8017bfa:	613b      	str	r3, [r7, #16]
 8017bfc:	e01e      	b.n	8017c3c <ip4_input+0x110>
    } else {
      netif = NULL;
 8017bfe:	2300      	movs	r3, #0
 8017c00:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017c02:	4b5a      	ldr	r3, [pc, #360]	; (8017d6c <ip4_input+0x240>)
 8017c04:	695b      	ldr	r3, [r3, #20]
 8017c06:	b2db      	uxtb	r3, r3
 8017c08:	2b7f      	cmp	r3, #127	; 0x7f
 8017c0a:	d017      	beq.n	8017c3c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017c0c:	4b58      	ldr	r3, [pc, #352]	; (8017d70 <ip4_input+0x244>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	613b      	str	r3, [r7, #16]
 8017c12:	e00e      	b.n	8017c32 <ip4_input+0x106>
          if (netif == inp) {
 8017c14:	693a      	ldr	r2, [r7, #16]
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	d006      	beq.n	8017c2a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017c1c:	6938      	ldr	r0, [r7, #16]
 8017c1e:	f7ff ff5b 	bl	8017ad8 <ip4_input_accept>
 8017c22:	4603      	mov	r3, r0
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d108      	bne.n	8017c3a <ip4_input+0x10e>
 8017c28:	e000      	b.n	8017c2c <ip4_input+0x100>
            continue;
 8017c2a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017c2c:	693b      	ldr	r3, [r7, #16]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	613b      	str	r3, [r7, #16]
 8017c32:	693b      	ldr	r3, [r7, #16]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d1ed      	bne.n	8017c14 <ip4_input+0xe8>
 8017c38:	e000      	b.n	8017c3c <ip4_input+0x110>
            break;
 8017c3a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c3c:	4b4b      	ldr	r3, [pc, #300]	; (8017d6c <ip4_input+0x240>)
 8017c3e:	691b      	ldr	r3, [r3, #16]
 8017c40:	6839      	ldr	r1, [r7, #0]
 8017c42:	4618      	mov	r0, r3
 8017c44:	f000 f96e 	bl	8017f24 <ip4_addr_isbroadcast_u32>
 8017c48:	4603      	mov	r3, r0
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d105      	bne.n	8017c5a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017c4e:	4b47      	ldr	r3, [pc, #284]	; (8017d6c <ip4_input+0x240>)
 8017c50:	691b      	ldr	r3, [r3, #16]
 8017c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c56:	2be0      	cmp	r3, #224	; 0xe0
 8017c58:	d104      	bne.n	8017c64 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f7f7 fe9a 	bl	800f994 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017c60:	2300      	movs	r3, #0
 8017c62:	e07e      	b.n	8017d62 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017c64:	693b      	ldr	r3, [r7, #16]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d104      	bne.n	8017c74 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017c6a:	6878      	ldr	r0, [r7, #4]
 8017c6c:	f7f7 fe92 	bl	800f994 <pbuf_free>
    return ERR_OK;
 8017c70:	2300      	movs	r3, #0
 8017c72:	e076      	b.n	8017d62 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	88db      	ldrh	r3, [r3, #6]
 8017c78:	b29b      	uxth	r3, r3
 8017c7a:	461a      	mov	r2, r3
 8017c7c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017c80:	4013      	ands	r3, r2
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d00b      	beq.n	8017c9e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017c86:	6878      	ldr	r0, [r7, #4]
 8017c88:	f000 fc92 	bl	80185b0 <ip4_reass>
 8017c8c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d101      	bne.n	8017c98 <ip4_input+0x16c>
      return ERR_OK;
 8017c94:	2300      	movs	r3, #0
 8017c96:	e064      	b.n	8017d62 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	685b      	ldr	r3, [r3, #4]
 8017c9c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017c9e:	4a33      	ldr	r2, [pc, #204]	; (8017d6c <ip4_input+0x240>)
 8017ca0:	693b      	ldr	r3, [r7, #16]
 8017ca2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017ca4:	4a31      	ldr	r2, [pc, #196]	; (8017d6c <ip4_input+0x240>)
 8017ca6:	683b      	ldr	r3, [r7, #0]
 8017ca8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017caa:	4a30      	ldr	r2, [pc, #192]	; (8017d6c <ip4_input+0x240>)
 8017cac:	697b      	ldr	r3, [r7, #20]
 8017cae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017cb0:	697b      	ldr	r3, [r7, #20]
 8017cb2:	781b      	ldrb	r3, [r3, #0]
 8017cb4:	f003 030f 	and.w	r3, r3, #15
 8017cb8:	b2db      	uxtb	r3, r3
 8017cba:	009b      	lsls	r3, r3, #2
 8017cbc:	b2db      	uxtb	r3, r3
 8017cbe:	b29a      	uxth	r2, r3
 8017cc0:	4b2a      	ldr	r3, [pc, #168]	; (8017d6c <ip4_input+0x240>)
 8017cc2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017cc4:	89fb      	ldrh	r3, [r7, #14]
 8017cc6:	4619      	mov	r1, r3
 8017cc8:	6878      	ldr	r0, [r7, #4]
 8017cca:	f7f7 fddd 	bl	800f888 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017cce:	697b      	ldr	r3, [r7, #20]
 8017cd0:	7a5b      	ldrb	r3, [r3, #9]
 8017cd2:	2b11      	cmp	r3, #17
 8017cd4:	d006      	beq.n	8017ce4 <ip4_input+0x1b8>
 8017cd6:	2b11      	cmp	r3, #17
 8017cd8:	dc13      	bgt.n	8017d02 <ip4_input+0x1d6>
 8017cda:	2b01      	cmp	r3, #1
 8017cdc:	d00c      	beq.n	8017cf8 <ip4_input+0x1cc>
 8017cde:	2b06      	cmp	r3, #6
 8017ce0:	d005      	beq.n	8017cee <ip4_input+0x1c2>
 8017ce2:	e00e      	b.n	8017d02 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017ce4:	6839      	ldr	r1, [r7, #0]
 8017ce6:	6878      	ldr	r0, [r7, #4]
 8017ce8:	f7fe fb9c 	bl	8016424 <udp_input>
        break;
 8017cec:	e026      	b.n	8017d3c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017cee:	6839      	ldr	r1, [r7, #0]
 8017cf0:	6878      	ldr	r0, [r7, #4]
 8017cf2:	f7f9 ff55 	bl	8011ba0 <tcp_input>
        break;
 8017cf6:	e021      	b.n	8017d3c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017cf8:	6839      	ldr	r1, [r7, #0]
 8017cfa:	6878      	ldr	r0, [r7, #4]
 8017cfc:	f7ff fcee 	bl	80176dc <icmp_input>
        break;
 8017d00:	e01c      	b.n	8017d3c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d02:	4b1a      	ldr	r3, [pc, #104]	; (8017d6c <ip4_input+0x240>)
 8017d04:	695b      	ldr	r3, [r3, #20]
 8017d06:	6939      	ldr	r1, [r7, #16]
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f000 f90b 	bl	8017f24 <ip4_addr_isbroadcast_u32>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d10f      	bne.n	8017d34 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d14:	4b15      	ldr	r3, [pc, #84]	; (8017d6c <ip4_input+0x240>)
 8017d16:	695b      	ldr	r3, [r3, #20]
 8017d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d1c:	2be0      	cmp	r3, #224	; 0xe0
 8017d1e:	d009      	beq.n	8017d34 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017d20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017d24:	4619      	mov	r1, r3
 8017d26:	6878      	ldr	r0, [r7, #4]
 8017d28:	f7f7 fe21 	bl	800f96e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017d2c:	2102      	movs	r1, #2
 8017d2e:	6878      	ldr	r0, [r7, #4]
 8017d30:	f7ff fdd8 	bl	80178e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017d34:	6878      	ldr	r0, [r7, #4]
 8017d36:	f7f7 fe2d 	bl	800f994 <pbuf_free>
        break;
 8017d3a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017d3c:	4b0b      	ldr	r3, [pc, #44]	; (8017d6c <ip4_input+0x240>)
 8017d3e:	2200      	movs	r2, #0
 8017d40:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017d42:	4b0a      	ldr	r3, [pc, #40]	; (8017d6c <ip4_input+0x240>)
 8017d44:	2200      	movs	r2, #0
 8017d46:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017d48:	4b08      	ldr	r3, [pc, #32]	; (8017d6c <ip4_input+0x240>)
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017d4e:	4b07      	ldr	r3, [pc, #28]	; (8017d6c <ip4_input+0x240>)
 8017d50:	2200      	movs	r2, #0
 8017d52:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017d54:	4b05      	ldr	r3, [pc, #20]	; (8017d6c <ip4_input+0x240>)
 8017d56:	2200      	movs	r2, #0
 8017d58:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017d5a:	4b04      	ldr	r3, [pc, #16]	; (8017d6c <ip4_input+0x240>)
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017d60:	2300      	movs	r3, #0
}
 8017d62:	4618      	mov	r0, r3
 8017d64:	3718      	adds	r7, #24
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}
 8017d6a:	bf00      	nop
 8017d6c:	2004aeb0 	.word	0x2004aeb0
 8017d70:	2004efb8 	.word	0x2004efb8

08017d74 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b08a      	sub	sp, #40	; 0x28
 8017d78:	af04      	add	r7, sp, #16
 8017d7a:	60f8      	str	r0, [r7, #12]
 8017d7c:	60b9      	str	r1, [r7, #8]
 8017d7e:	607a      	str	r2, [r7, #4]
 8017d80:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d009      	beq.n	8017da0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d003      	beq.n	8017d9a <ip4_output_if+0x26>
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d102      	bne.n	8017da0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d9c:	3304      	adds	r3, #4
 8017d9e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017da0:	78fa      	ldrb	r2, [r7, #3]
 8017da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da4:	9302      	str	r3, [sp, #8]
 8017da6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017daa:	9301      	str	r3, [sp, #4]
 8017dac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017db0:	9300      	str	r3, [sp, #0]
 8017db2:	4613      	mov	r3, r2
 8017db4:	687a      	ldr	r2, [r7, #4]
 8017db6:	6979      	ldr	r1, [r7, #20]
 8017db8:	68f8      	ldr	r0, [r7, #12]
 8017dba:	f000 f805 	bl	8017dc8 <ip4_output_if_src>
 8017dbe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	3718      	adds	r7, #24
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	bd80      	pop	{r7, pc}

08017dc8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b088      	sub	sp, #32
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	60f8      	str	r0, [r7, #12]
 8017dd0:	60b9      	str	r1, [r7, #8]
 8017dd2:	607a      	str	r2, [r7, #4]
 8017dd4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	7b9b      	ldrb	r3, [r3, #14]
 8017dda:	2b01      	cmp	r3, #1
 8017ddc:	d006      	beq.n	8017dec <ip4_output_if_src+0x24>
 8017dde:	4b4b      	ldr	r3, [pc, #300]	; (8017f0c <ip4_output_if_src+0x144>)
 8017de0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017de4:	494a      	ldr	r1, [pc, #296]	; (8017f10 <ip4_output_if_src+0x148>)
 8017de6:	484b      	ldr	r0, [pc, #300]	; (8017f14 <ip4_output_if_src+0x14c>)
 8017de8:	f001 fb50 	bl	801948c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d060      	beq.n	8017eb4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017df2:	2314      	movs	r3, #20
 8017df4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017df6:	2114      	movs	r1, #20
 8017df8:	68f8      	ldr	r0, [r7, #12]
 8017dfa:	f7f7 fd35 	bl	800f868 <pbuf_add_header>
 8017dfe:	4603      	mov	r3, r0
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d002      	beq.n	8017e0a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017e04:	f06f 0301 	mvn.w	r3, #1
 8017e08:	e07c      	b.n	8017f04 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	685b      	ldr	r3, [r3, #4]
 8017e0e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	895b      	ldrh	r3, [r3, #10]
 8017e14:	2b13      	cmp	r3, #19
 8017e16:	d806      	bhi.n	8017e26 <ip4_output_if_src+0x5e>
 8017e18:	4b3c      	ldr	r3, [pc, #240]	; (8017f0c <ip4_output_if_src+0x144>)
 8017e1a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017e1e:	493e      	ldr	r1, [pc, #248]	; (8017f18 <ip4_output_if_src+0x150>)
 8017e20:	483c      	ldr	r0, [pc, #240]	; (8017f14 <ip4_output_if_src+0x14c>)
 8017e22:	f001 fb33 	bl	801948c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017e26:	69fb      	ldr	r3, [r7, #28]
 8017e28:	78fa      	ldrb	r2, [r7, #3]
 8017e2a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017e2c:	69fb      	ldr	r3, [r7, #28]
 8017e2e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017e32:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	681a      	ldr	r2, [r3, #0]
 8017e38:	69fb      	ldr	r3, [r7, #28]
 8017e3a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017e3c:	8b7b      	ldrh	r3, [r7, #26]
 8017e3e:	089b      	lsrs	r3, r3, #2
 8017e40:	b29b      	uxth	r3, r3
 8017e42:	b2db      	uxtb	r3, r3
 8017e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e48:	b2da      	uxtb	r2, r3
 8017e4a:	69fb      	ldr	r3, [r7, #28]
 8017e4c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017e4e:	69fb      	ldr	r3, [r7, #28]
 8017e50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017e54:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	891b      	ldrh	r3, [r3, #8]
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f7f6 f9a8 	bl	800e1b0 <lwip_htons>
 8017e60:	4603      	mov	r3, r0
 8017e62:	461a      	mov	r2, r3
 8017e64:	69fb      	ldr	r3, [r7, #28]
 8017e66:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017e68:	69fb      	ldr	r3, [r7, #28]
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	719a      	strb	r2, [r3, #6]
 8017e6e:	2200      	movs	r2, #0
 8017e70:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017e72:	4b2a      	ldr	r3, [pc, #168]	; (8017f1c <ip4_output_if_src+0x154>)
 8017e74:	881b      	ldrh	r3, [r3, #0]
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7f6 f99a 	bl	800e1b0 <lwip_htons>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	461a      	mov	r2, r3
 8017e80:	69fb      	ldr	r3, [r7, #28]
 8017e82:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017e84:	4b25      	ldr	r3, [pc, #148]	; (8017f1c <ip4_output_if_src+0x154>)
 8017e86:	881b      	ldrh	r3, [r3, #0]
 8017e88:	3301      	adds	r3, #1
 8017e8a:	b29a      	uxth	r2, r3
 8017e8c:	4b23      	ldr	r3, [pc, #140]	; (8017f1c <ip4_output_if_src+0x154>)
 8017e8e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017e90:	68bb      	ldr	r3, [r7, #8]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d104      	bne.n	8017ea0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017e96:	4b22      	ldr	r3, [pc, #136]	; (8017f20 <ip4_output_if_src+0x158>)
 8017e98:	681a      	ldr	r2, [r3, #0]
 8017e9a:	69fb      	ldr	r3, [r7, #28]
 8017e9c:	60da      	str	r2, [r3, #12]
 8017e9e:	e003      	b.n	8017ea8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	681a      	ldr	r2, [r3, #0]
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017ea8:	69fb      	ldr	r3, [r7, #28]
 8017eaa:	2200      	movs	r2, #0
 8017eac:	729a      	strb	r2, [r3, #10]
 8017eae:	2200      	movs	r2, #0
 8017eb0:	72da      	strb	r2, [r3, #11]
 8017eb2:	e00f      	b.n	8017ed4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	895b      	ldrh	r3, [r3, #10]
 8017eb8:	2b13      	cmp	r3, #19
 8017eba:	d802      	bhi.n	8017ec2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017ebc:	f06f 0301 	mvn.w	r3, #1
 8017ec0:	e020      	b.n	8017f04 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	685b      	ldr	r3, [r3, #4]
 8017ec6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017ec8:	69fb      	ldr	r3, [r7, #28]
 8017eca:	691b      	ldr	r3, [r3, #16]
 8017ecc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017ece:	f107 0314 	add.w	r3, r7, #20
 8017ed2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d00c      	beq.n	8017ef6 <ip4_output_if_src+0x12e>
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	891a      	ldrh	r2, [r3, #8]
 8017ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	d906      	bls.n	8017ef6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017ee8:	687a      	ldr	r2, [r7, #4]
 8017eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017eec:	68f8      	ldr	r0, [r7, #12]
 8017eee:	f000 fd53 	bl	8018998 <ip4_frag>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	e006      	b.n	8017f04 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef8:	695b      	ldr	r3, [r3, #20]
 8017efa:	687a      	ldr	r2, [r7, #4]
 8017efc:	68f9      	ldr	r1, [r7, #12]
 8017efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f00:	4798      	blx	r3
 8017f02:	4603      	mov	r3, r0
}
 8017f04:	4618      	mov	r0, r3
 8017f06:	3720      	adds	r7, #32
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}
 8017f0c:	0801d3ac 	.word	0x0801d3ac
 8017f10:	0801d3e0 	.word	0x0801d3e0
 8017f14:	0801d3ec 	.word	0x0801d3ec
 8017f18:	0801d414 	.word	0x0801d414
 8017f1c:	2004f116 	.word	0x2004f116
 8017f20:	0801d880 	.word	0x0801d880

08017f24 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017f24:	b480      	push	{r7}
 8017f26:	b085      	sub	sp, #20
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f38:	d002      	beq.n	8017f40 <ip4_addr_isbroadcast_u32+0x1c>
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d101      	bne.n	8017f44 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017f40:	2301      	movs	r3, #1
 8017f42:	e02a      	b.n	8017f9a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f4a:	f003 0302 	and.w	r3, r3, #2
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d101      	bne.n	8017f56 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017f52:	2300      	movs	r3, #0
 8017f54:	e021      	b.n	8017f9a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017f56:	683b      	ldr	r3, [r7, #0]
 8017f58:	3304      	adds	r3, #4
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	687a      	ldr	r2, [r7, #4]
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d101      	bne.n	8017f66 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017f62:	2300      	movs	r3, #0
 8017f64:	e019      	b.n	8017f9a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017f66:	68fa      	ldr	r2, [r7, #12]
 8017f68:	683b      	ldr	r3, [r7, #0]
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	405a      	eors	r2, r3
 8017f70:	683b      	ldr	r3, [r7, #0]
 8017f72:	3308      	adds	r3, #8
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	4013      	ands	r3, r2
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d10d      	bne.n	8017f98 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	3308      	adds	r3, #8
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	43da      	mvns	r2, r3
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	3308      	adds	r3, #8
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017f90:	429a      	cmp	r2, r3
 8017f92:	d101      	bne.n	8017f98 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017f94:	2301      	movs	r3, #1
 8017f96:	e000      	b.n	8017f9a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017f98:	2300      	movs	r3, #0
  }
}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	3714      	adds	r7, #20
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa4:	4770      	bx	lr
	...

08017fa8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b084      	sub	sp, #16
 8017fac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017fae:	2300      	movs	r3, #0
 8017fb0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017fb2:	4b12      	ldr	r3, [pc, #72]	; (8017ffc <ip_reass_tmr+0x54>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017fb8:	e018      	b.n	8017fec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	7fdb      	ldrb	r3, [r3, #31]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d00b      	beq.n	8017fda <ip_reass_tmr+0x32>
      r->timer--;
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	7fdb      	ldrb	r3, [r3, #31]
 8017fc6:	3b01      	subs	r3, #1
 8017fc8:	b2da      	uxtb	r2, r3
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	60fb      	str	r3, [r7, #12]
 8017fd8:	e008      	b.n	8017fec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017fe4:	68b9      	ldr	r1, [r7, #8]
 8017fe6:	6878      	ldr	r0, [r7, #4]
 8017fe8:	f000 f80a 	bl	8018000 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d1e3      	bne.n	8017fba <ip_reass_tmr+0x12>
    }
  }
}
 8017ff2:	bf00      	nop
 8017ff4:	bf00      	nop
 8017ff6:	3710      	adds	r7, #16
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}
 8017ffc:	2004f118 	.word	0x2004f118

08018000 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b088      	sub	sp, #32
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
 8018008:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801800a:	2300      	movs	r3, #0
 801800c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801800e:	683a      	ldr	r2, [r7, #0]
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	429a      	cmp	r2, r3
 8018014:	d105      	bne.n	8018022 <ip_reass_free_complete_datagram+0x22>
 8018016:	4b45      	ldr	r3, [pc, #276]	; (801812c <ip_reass_free_complete_datagram+0x12c>)
 8018018:	22ab      	movs	r2, #171	; 0xab
 801801a:	4945      	ldr	r1, [pc, #276]	; (8018130 <ip_reass_free_complete_datagram+0x130>)
 801801c:	4845      	ldr	r0, [pc, #276]	; (8018134 <ip_reass_free_complete_datagram+0x134>)
 801801e:	f001 fa35 	bl	801948c <iprintf>
  if (prev != NULL) {
 8018022:	683b      	ldr	r3, [r7, #0]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d00a      	beq.n	801803e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	687a      	ldr	r2, [r7, #4]
 801802e:	429a      	cmp	r2, r3
 8018030:	d005      	beq.n	801803e <ip_reass_free_complete_datagram+0x3e>
 8018032:	4b3e      	ldr	r3, [pc, #248]	; (801812c <ip_reass_free_complete_datagram+0x12c>)
 8018034:	22ad      	movs	r2, #173	; 0xad
 8018036:	4940      	ldr	r1, [pc, #256]	; (8018138 <ip_reass_free_complete_datagram+0x138>)
 8018038:	483e      	ldr	r0, [pc, #248]	; (8018134 <ip_reass_free_complete_datagram+0x134>)
 801803a:	f001 fa27 	bl	801948c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	685b      	ldr	r3, [r3, #4]
 8018042:	685b      	ldr	r3, [r3, #4]
 8018044:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	889b      	ldrh	r3, [r3, #4]
 801804a:	b29b      	uxth	r3, r3
 801804c:	2b00      	cmp	r3, #0
 801804e:	d12a      	bne.n	80180a6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	685b      	ldr	r3, [r3, #4]
 8018054:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	681a      	ldr	r2, [r3, #0]
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801805e:	69bb      	ldr	r3, [r7, #24]
 8018060:	6858      	ldr	r0, [r3, #4]
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	3308      	adds	r3, #8
 8018066:	2214      	movs	r2, #20
 8018068:	4619      	mov	r1, r3
 801806a:	f001 f964 	bl	8019336 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801806e:	2101      	movs	r1, #1
 8018070:	69b8      	ldr	r0, [r7, #24]
 8018072:	f7ff fc47 	bl	8017904 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018076:	69b8      	ldr	r0, [r7, #24]
 8018078:	f7f7 fd1a 	bl	800fab0 <pbuf_clen>
 801807c:	4603      	mov	r3, r0
 801807e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018080:	8bfa      	ldrh	r2, [r7, #30]
 8018082:	8a7b      	ldrh	r3, [r7, #18]
 8018084:	4413      	add	r3, r2
 8018086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801808a:	db05      	blt.n	8018098 <ip_reass_free_complete_datagram+0x98>
 801808c:	4b27      	ldr	r3, [pc, #156]	; (801812c <ip_reass_free_complete_datagram+0x12c>)
 801808e:	22bc      	movs	r2, #188	; 0xbc
 8018090:	492a      	ldr	r1, [pc, #168]	; (801813c <ip_reass_free_complete_datagram+0x13c>)
 8018092:	4828      	ldr	r0, [pc, #160]	; (8018134 <ip_reass_free_complete_datagram+0x134>)
 8018094:	f001 f9fa 	bl	801948c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018098:	8bfa      	ldrh	r2, [r7, #30]
 801809a:	8a7b      	ldrh	r3, [r7, #18]
 801809c:	4413      	add	r3, r2
 801809e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80180a0:	69b8      	ldr	r0, [r7, #24]
 80180a2:	f7f7 fc77 	bl	800f994 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	685b      	ldr	r3, [r3, #4]
 80180aa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80180ac:	e01f      	b.n	80180ee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80180ae:	69bb      	ldr	r3, [r7, #24]
 80180b0:	685b      	ldr	r3, [r3, #4]
 80180b2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80180b4:	69bb      	ldr	r3, [r7, #24]
 80180b6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80180be:	68f8      	ldr	r0, [r7, #12]
 80180c0:	f7f7 fcf6 	bl	800fab0 <pbuf_clen>
 80180c4:	4603      	mov	r3, r0
 80180c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80180c8:	8bfa      	ldrh	r2, [r7, #30]
 80180ca:	8a7b      	ldrh	r3, [r7, #18]
 80180cc:	4413      	add	r3, r2
 80180ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180d2:	db05      	blt.n	80180e0 <ip_reass_free_complete_datagram+0xe0>
 80180d4:	4b15      	ldr	r3, [pc, #84]	; (801812c <ip_reass_free_complete_datagram+0x12c>)
 80180d6:	22cc      	movs	r2, #204	; 0xcc
 80180d8:	4918      	ldr	r1, [pc, #96]	; (801813c <ip_reass_free_complete_datagram+0x13c>)
 80180da:	4816      	ldr	r0, [pc, #88]	; (8018134 <ip_reass_free_complete_datagram+0x134>)
 80180dc:	f001 f9d6 	bl	801948c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80180e0:	8bfa      	ldrh	r2, [r7, #30]
 80180e2:	8a7b      	ldrh	r3, [r7, #18]
 80180e4:	4413      	add	r3, r2
 80180e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80180e8:	68f8      	ldr	r0, [r7, #12]
 80180ea:	f7f7 fc53 	bl	800f994 <pbuf_free>
  while (p != NULL) {
 80180ee:	69bb      	ldr	r3, [r7, #24]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d1dc      	bne.n	80180ae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80180f4:	6839      	ldr	r1, [r7, #0]
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	f000 f8c2 	bl	8018280 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80180fc:	4b10      	ldr	r3, [pc, #64]	; (8018140 <ip_reass_free_complete_datagram+0x140>)
 80180fe:	881b      	ldrh	r3, [r3, #0]
 8018100:	8bfa      	ldrh	r2, [r7, #30]
 8018102:	429a      	cmp	r2, r3
 8018104:	d905      	bls.n	8018112 <ip_reass_free_complete_datagram+0x112>
 8018106:	4b09      	ldr	r3, [pc, #36]	; (801812c <ip_reass_free_complete_datagram+0x12c>)
 8018108:	22d2      	movs	r2, #210	; 0xd2
 801810a:	490e      	ldr	r1, [pc, #56]	; (8018144 <ip_reass_free_complete_datagram+0x144>)
 801810c:	4809      	ldr	r0, [pc, #36]	; (8018134 <ip_reass_free_complete_datagram+0x134>)
 801810e:	f001 f9bd 	bl	801948c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018112:	4b0b      	ldr	r3, [pc, #44]	; (8018140 <ip_reass_free_complete_datagram+0x140>)
 8018114:	881a      	ldrh	r2, [r3, #0]
 8018116:	8bfb      	ldrh	r3, [r7, #30]
 8018118:	1ad3      	subs	r3, r2, r3
 801811a:	b29a      	uxth	r2, r3
 801811c:	4b08      	ldr	r3, [pc, #32]	; (8018140 <ip_reass_free_complete_datagram+0x140>)
 801811e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018120:	8bfb      	ldrh	r3, [r7, #30]
}
 8018122:	4618      	mov	r0, r3
 8018124:	3720      	adds	r7, #32
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	0801d444 	.word	0x0801d444
 8018130:	0801d480 	.word	0x0801d480
 8018134:	0801d48c 	.word	0x0801d48c
 8018138:	0801d4b4 	.word	0x0801d4b4
 801813c:	0801d4c8 	.word	0x0801d4c8
 8018140:	2004f11c 	.word	0x2004f11c
 8018144:	0801d4e8 	.word	0x0801d4e8

08018148 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b08a      	sub	sp, #40	; 0x28
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
 8018150:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018152:	2300      	movs	r3, #0
 8018154:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018156:	2300      	movs	r3, #0
 8018158:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801815a:	2300      	movs	r3, #0
 801815c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801815e:	2300      	movs	r3, #0
 8018160:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018162:	2300      	movs	r3, #0
 8018164:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018166:	4b28      	ldr	r3, [pc, #160]	; (8018208 <ip_reass_remove_oldest_datagram+0xc0>)
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801816c:	e030      	b.n	80181d0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018170:	695a      	ldr	r2, [r3, #20]
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	68db      	ldr	r3, [r3, #12]
 8018176:	429a      	cmp	r2, r3
 8018178:	d10c      	bne.n	8018194 <ip_reass_remove_oldest_datagram+0x4c>
 801817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801817c:	699a      	ldr	r2, [r3, #24]
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	691b      	ldr	r3, [r3, #16]
 8018182:	429a      	cmp	r2, r3
 8018184:	d106      	bne.n	8018194 <ip_reass_remove_oldest_datagram+0x4c>
 8018186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018188:	899a      	ldrh	r2, [r3, #12]
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	889b      	ldrh	r3, [r3, #4]
 801818e:	b29b      	uxth	r3, r3
 8018190:	429a      	cmp	r2, r3
 8018192:	d014      	beq.n	80181be <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018194:	693b      	ldr	r3, [r7, #16]
 8018196:	3301      	adds	r3, #1
 8018198:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801819a:	6a3b      	ldr	r3, [r7, #32]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d104      	bne.n	80181aa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80181a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181a4:	69fb      	ldr	r3, [r7, #28]
 80181a6:	61bb      	str	r3, [r7, #24]
 80181a8:	e009      	b.n	80181be <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80181aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ac:	7fda      	ldrb	r2, [r3, #31]
 80181ae:	6a3b      	ldr	r3, [r7, #32]
 80181b0:	7fdb      	ldrb	r3, [r3, #31]
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d803      	bhi.n	80181be <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80181b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181ba:	69fb      	ldr	r3, [r7, #28]
 80181bc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80181be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d001      	beq.n	80181ca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80181c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80181ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80181d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d1cb      	bne.n	801816e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80181d6:	6a3b      	ldr	r3, [r7, #32]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d008      	beq.n	80181ee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80181dc:	69b9      	ldr	r1, [r7, #24]
 80181de:	6a38      	ldr	r0, [r7, #32]
 80181e0:	f7ff ff0e 	bl	8018000 <ip_reass_free_complete_datagram>
 80181e4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80181e6:	697a      	ldr	r2, [r7, #20]
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	4413      	add	r3, r2
 80181ec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80181ee:	697a      	ldr	r2, [r7, #20]
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	da02      	bge.n	80181fc <ip_reass_remove_oldest_datagram+0xb4>
 80181f6:	693b      	ldr	r3, [r7, #16]
 80181f8:	2b01      	cmp	r3, #1
 80181fa:	dcac      	bgt.n	8018156 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80181fc:	697b      	ldr	r3, [r7, #20]
}
 80181fe:	4618      	mov	r0, r3
 8018200:	3728      	adds	r7, #40	; 0x28
 8018202:	46bd      	mov	sp, r7
 8018204:	bd80      	pop	{r7, pc}
 8018206:	bf00      	nop
 8018208:	2004f118 	.word	0x2004f118

0801820c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b084      	sub	sp, #16
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
 8018214:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018216:	2004      	movs	r0, #4
 8018218:	f7f6 fca2 	bl	800eb60 <memp_malloc>
 801821c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d110      	bne.n	8018246 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018224:	6839      	ldr	r1, [r7, #0]
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	f7ff ff8e 	bl	8018148 <ip_reass_remove_oldest_datagram>
 801822c:	4602      	mov	r2, r0
 801822e:	683b      	ldr	r3, [r7, #0]
 8018230:	4293      	cmp	r3, r2
 8018232:	dc03      	bgt.n	801823c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018234:	2004      	movs	r0, #4
 8018236:	f7f6 fc93 	bl	800eb60 <memp_malloc>
 801823a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d101      	bne.n	8018246 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018242:	2300      	movs	r3, #0
 8018244:	e016      	b.n	8018274 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018246:	2220      	movs	r2, #32
 8018248:	2100      	movs	r1, #0
 801824a:	68f8      	ldr	r0, [r7, #12]
 801824c:	f001 f881 	bl	8019352 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	220f      	movs	r2, #15
 8018254:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018256:	4b09      	ldr	r3, [pc, #36]	; (801827c <ip_reass_enqueue_new_datagram+0x70>)
 8018258:	681a      	ldr	r2, [r3, #0]
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801825e:	4a07      	ldr	r2, [pc, #28]	; (801827c <ip_reass_enqueue_new_datagram+0x70>)
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	3308      	adds	r3, #8
 8018268:	2214      	movs	r2, #20
 801826a:	6879      	ldr	r1, [r7, #4]
 801826c:	4618      	mov	r0, r3
 801826e:	f001 f862 	bl	8019336 <memcpy>
  return ipr;
 8018272:	68fb      	ldr	r3, [r7, #12]
}
 8018274:	4618      	mov	r0, r3
 8018276:	3710      	adds	r7, #16
 8018278:	46bd      	mov	sp, r7
 801827a:	bd80      	pop	{r7, pc}
 801827c:	2004f118 	.word	0x2004f118

08018280 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b082      	sub	sp, #8
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
 8018288:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801828a:	4b10      	ldr	r3, [pc, #64]	; (80182cc <ip_reass_dequeue_datagram+0x4c>)
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	687a      	ldr	r2, [r7, #4]
 8018290:	429a      	cmp	r2, r3
 8018292:	d104      	bne.n	801829e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	4a0c      	ldr	r2, [pc, #48]	; (80182cc <ip_reass_dequeue_datagram+0x4c>)
 801829a:	6013      	str	r3, [r2, #0]
 801829c:	e00d      	b.n	80182ba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d106      	bne.n	80182b2 <ip_reass_dequeue_datagram+0x32>
 80182a4:	4b0a      	ldr	r3, [pc, #40]	; (80182d0 <ip_reass_dequeue_datagram+0x50>)
 80182a6:	f240 1245 	movw	r2, #325	; 0x145
 80182aa:	490a      	ldr	r1, [pc, #40]	; (80182d4 <ip_reass_dequeue_datagram+0x54>)
 80182ac:	480a      	ldr	r0, [pc, #40]	; (80182d8 <ip_reass_dequeue_datagram+0x58>)
 80182ae:	f001 f8ed 	bl	801948c <iprintf>
    prev->next = ipr->next;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681a      	ldr	r2, [r3, #0]
 80182b6:	683b      	ldr	r3, [r7, #0]
 80182b8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80182ba:	6879      	ldr	r1, [r7, #4]
 80182bc:	2004      	movs	r0, #4
 80182be:	f7f6 fcc5 	bl	800ec4c <memp_free>
}
 80182c2:	bf00      	nop
 80182c4:	3708      	adds	r7, #8
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bd80      	pop	{r7, pc}
 80182ca:	bf00      	nop
 80182cc:	2004f118 	.word	0x2004f118
 80182d0:	0801d444 	.word	0x0801d444
 80182d4:	0801d50c 	.word	0x0801d50c
 80182d8:	0801d48c 	.word	0x0801d48c

080182dc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b08c      	sub	sp, #48	; 0x30
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	60f8      	str	r0, [r7, #12]
 80182e4:	60b9      	str	r1, [r7, #8]
 80182e6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80182e8:	2300      	movs	r3, #0
 80182ea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80182ec:	2301      	movs	r3, #1
 80182ee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80182f0:	68bb      	ldr	r3, [r7, #8]
 80182f2:	685b      	ldr	r3, [r3, #4]
 80182f4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80182f6:	69fb      	ldr	r3, [r7, #28]
 80182f8:	885b      	ldrh	r3, [r3, #2]
 80182fa:	b29b      	uxth	r3, r3
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7f5 ff57 	bl	800e1b0 <lwip_htons>
 8018302:	4603      	mov	r3, r0
 8018304:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018306:	69fb      	ldr	r3, [r7, #28]
 8018308:	781b      	ldrb	r3, [r3, #0]
 801830a:	f003 030f 	and.w	r3, r3, #15
 801830e:	b2db      	uxtb	r3, r3
 8018310:	009b      	lsls	r3, r3, #2
 8018312:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018314:	7e7b      	ldrb	r3, [r7, #25]
 8018316:	b29b      	uxth	r3, r3
 8018318:	8b7a      	ldrh	r2, [r7, #26]
 801831a:	429a      	cmp	r2, r3
 801831c:	d202      	bcs.n	8018324 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801831e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018322:	e135      	b.n	8018590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018324:	7e7b      	ldrb	r3, [r7, #25]
 8018326:	b29b      	uxth	r3, r3
 8018328:	8b7a      	ldrh	r2, [r7, #26]
 801832a:	1ad3      	subs	r3, r2, r3
 801832c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801832e:	69fb      	ldr	r3, [r7, #28]
 8018330:	88db      	ldrh	r3, [r3, #6]
 8018332:	b29b      	uxth	r3, r3
 8018334:	4618      	mov	r0, r3
 8018336:	f7f5 ff3b 	bl	800e1b0 <lwip_htons>
 801833a:	4603      	mov	r3, r0
 801833c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018340:	b29b      	uxth	r3, r3
 8018342:	00db      	lsls	r3, r3, #3
 8018344:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	685b      	ldr	r3, [r3, #4]
 801834a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801834e:	2200      	movs	r2, #0
 8018350:	701a      	strb	r2, [r3, #0]
 8018352:	2200      	movs	r2, #0
 8018354:	705a      	strb	r2, [r3, #1]
 8018356:	2200      	movs	r2, #0
 8018358:	709a      	strb	r2, [r3, #2]
 801835a:	2200      	movs	r2, #0
 801835c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018360:	8afa      	ldrh	r2, [r7, #22]
 8018362:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018364:	8afa      	ldrh	r2, [r7, #22]
 8018366:	8b7b      	ldrh	r3, [r7, #26]
 8018368:	4413      	add	r3, r2
 801836a:	b29a      	uxth	r2, r3
 801836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801836e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018372:	88db      	ldrh	r3, [r3, #6]
 8018374:	b29b      	uxth	r3, r3
 8018376:	8afa      	ldrh	r2, [r7, #22]
 8018378:	429a      	cmp	r2, r3
 801837a:	d902      	bls.n	8018382 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801837c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018380:	e106      	b.n	8018590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	627b      	str	r3, [r7, #36]	; 0x24
 8018388:	e068      	b.n	801845c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801838c:	685b      	ldr	r3, [r3, #4]
 801838e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018392:	889b      	ldrh	r3, [r3, #4]
 8018394:	b29a      	uxth	r2, r3
 8018396:	693b      	ldr	r3, [r7, #16]
 8018398:	889b      	ldrh	r3, [r3, #4]
 801839a:	b29b      	uxth	r3, r3
 801839c:	429a      	cmp	r2, r3
 801839e:	d235      	bcs.n	801840c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80183a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80183a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d020      	beq.n	80183ee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80183ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ae:	889b      	ldrh	r3, [r3, #4]
 80183b0:	b29a      	uxth	r2, r3
 80183b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183b4:	88db      	ldrh	r3, [r3, #6]
 80183b6:	b29b      	uxth	r3, r3
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d307      	bcc.n	80183cc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80183bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183be:	88db      	ldrh	r3, [r3, #6]
 80183c0:	b29a      	uxth	r2, r3
 80183c2:	693b      	ldr	r3, [r7, #16]
 80183c4:	889b      	ldrh	r3, [r3, #4]
 80183c6:	b29b      	uxth	r3, r3
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d902      	bls.n	80183d2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183d0:	e0de      	b.n	8018590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80183d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d4:	68ba      	ldr	r2, [r7, #8]
 80183d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80183d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183da:	88db      	ldrh	r3, [r3, #6]
 80183dc:	b29a      	uxth	r2, r3
 80183de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183e0:	889b      	ldrh	r3, [r3, #4]
 80183e2:	b29b      	uxth	r3, r3
 80183e4:	429a      	cmp	r2, r3
 80183e6:	d03d      	beq.n	8018464 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80183e8:	2300      	movs	r3, #0
 80183ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80183ec:	e03a      	b.n	8018464 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80183ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183f0:	88db      	ldrh	r3, [r3, #6]
 80183f2:	b29a      	uxth	r2, r3
 80183f4:	693b      	ldr	r3, [r7, #16]
 80183f6:	889b      	ldrh	r3, [r3, #4]
 80183f8:	b29b      	uxth	r3, r3
 80183fa:	429a      	cmp	r2, r3
 80183fc:	d902      	bls.n	8018404 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018402:	e0c5      	b.n	8018590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	68ba      	ldr	r2, [r7, #8]
 8018408:	605a      	str	r2, [r3, #4]
      break;
 801840a:	e02b      	b.n	8018464 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840e:	889b      	ldrh	r3, [r3, #4]
 8018410:	b29a      	uxth	r2, r3
 8018412:	693b      	ldr	r3, [r7, #16]
 8018414:	889b      	ldrh	r3, [r3, #4]
 8018416:	b29b      	uxth	r3, r3
 8018418:	429a      	cmp	r2, r3
 801841a:	d102      	bne.n	8018422 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801841c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018420:	e0b6      	b.n	8018590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018424:	889b      	ldrh	r3, [r3, #4]
 8018426:	b29a      	uxth	r2, r3
 8018428:	693b      	ldr	r3, [r7, #16]
 801842a:	88db      	ldrh	r3, [r3, #6]
 801842c:	b29b      	uxth	r3, r3
 801842e:	429a      	cmp	r2, r3
 8018430:	d202      	bcs.n	8018438 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018436:	e0ab      	b.n	8018590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801843a:	2b00      	cmp	r3, #0
 801843c:	d009      	beq.n	8018452 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018440:	88db      	ldrh	r3, [r3, #6]
 8018442:	b29a      	uxth	r2, r3
 8018444:	693b      	ldr	r3, [r7, #16]
 8018446:	889b      	ldrh	r3, [r3, #4]
 8018448:	b29b      	uxth	r3, r3
 801844a:	429a      	cmp	r2, r3
 801844c:	d001      	beq.n	8018452 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801844e:	2300      	movs	r3, #0
 8018450:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018452:	693b      	ldr	r3, [r7, #16]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018458:	693b      	ldr	r3, [r7, #16]
 801845a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801845e:	2b00      	cmp	r3, #0
 8018460:	d193      	bne.n	801838a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018462:	e000      	b.n	8018466 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018464:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018468:	2b00      	cmp	r3, #0
 801846a:	d12d      	bne.n	80184c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801846e:	2b00      	cmp	r3, #0
 8018470:	d01c      	beq.n	80184ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018474:	88db      	ldrh	r3, [r3, #6]
 8018476:	b29a      	uxth	r2, r3
 8018478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801847a:	889b      	ldrh	r3, [r3, #4]
 801847c:	b29b      	uxth	r3, r3
 801847e:	429a      	cmp	r2, r3
 8018480:	d906      	bls.n	8018490 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018482:	4b45      	ldr	r3, [pc, #276]	; (8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018484:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018488:	4944      	ldr	r1, [pc, #272]	; (801859c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801848a:	4845      	ldr	r0, [pc, #276]	; (80185a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801848c:	f000 fffe 	bl	801948c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018492:	68ba      	ldr	r2, [r7, #8]
 8018494:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018498:	88db      	ldrh	r3, [r3, #6]
 801849a:	b29a      	uxth	r2, r3
 801849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801849e:	889b      	ldrh	r3, [r3, #4]
 80184a0:	b29b      	uxth	r3, r3
 80184a2:	429a      	cmp	r2, r3
 80184a4:	d010      	beq.n	80184c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80184a6:	2300      	movs	r3, #0
 80184a8:	623b      	str	r3, [r7, #32]
 80184aa:	e00d      	b.n	80184c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	685b      	ldr	r3, [r3, #4]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d006      	beq.n	80184c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80184b4:	4b38      	ldr	r3, [pc, #224]	; (8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184b6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80184ba:	493a      	ldr	r1, [pc, #232]	; (80185a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80184bc:	4838      	ldr	r0, [pc, #224]	; (80185a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184be:	f000 ffe5 	bl	801948c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	68ba      	ldr	r2, [r7, #8]
 80184c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d105      	bne.n	80184da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	7f9b      	ldrb	r3, [r3, #30]
 80184d2:	f003 0301 	and.w	r3, r3, #1
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d059      	beq.n	801858e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80184da:	6a3b      	ldr	r3, [r7, #32]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d04f      	beq.n	8018580 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	685b      	ldr	r3, [r3, #4]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d006      	beq.n	80184f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	685b      	ldr	r3, [r3, #4]
 80184ee:	889b      	ldrh	r3, [r3, #4]
 80184f0:	b29b      	uxth	r3, r3
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d002      	beq.n	80184fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80184f6:	2300      	movs	r3, #0
 80184f8:	623b      	str	r3, [r7, #32]
 80184fa:	e041      	b.n	8018580 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80184fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184fe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018506:	e012      	b.n	801852e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801850a:	685b      	ldr	r3, [r3, #4]
 801850c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018510:	88db      	ldrh	r3, [r3, #6]
 8018512:	b29a      	uxth	r2, r3
 8018514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018516:	889b      	ldrh	r3, [r3, #4]
 8018518:	b29b      	uxth	r3, r3
 801851a:	429a      	cmp	r2, r3
 801851c:	d002      	beq.n	8018524 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801851e:	2300      	movs	r3, #0
 8018520:	623b      	str	r3, [r7, #32]
            break;
 8018522:	e007      	b.n	8018534 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018526:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018530:	2b00      	cmp	r3, #0
 8018532:	d1e9      	bne.n	8018508 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018534:	6a3b      	ldr	r3, [r7, #32]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d022      	beq.n	8018580 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	685b      	ldr	r3, [r3, #4]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d106      	bne.n	8018550 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018542:	4b15      	ldr	r3, [pc, #84]	; (8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018544:	f240 12df 	movw	r2, #479	; 0x1df
 8018548:	4917      	ldr	r1, [pc, #92]	; (80185a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801854a:	4815      	ldr	r0, [pc, #84]	; (80185a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801854c:	f000 ff9e 	bl	801948c <iprintf>
          LWIP_ASSERT("sanity check",
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	685b      	ldr	r3, [r3, #4]
 8018554:	685b      	ldr	r3, [r3, #4]
 8018556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018558:	429a      	cmp	r2, r3
 801855a:	d106      	bne.n	801856a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801855c:	4b0e      	ldr	r3, [pc, #56]	; (8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801855e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018562:	4911      	ldr	r1, [pc, #68]	; (80185a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018564:	480e      	ldr	r0, [pc, #56]	; (80185a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018566:	f000 ff91 	bl	801948c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d006      	beq.n	8018580 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018572:	4b09      	ldr	r3, [pc, #36]	; (8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018574:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018578:	490c      	ldr	r1, [pc, #48]	; (80185ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801857a:	4809      	ldr	r0, [pc, #36]	; (80185a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801857c:	f000 ff86 	bl	801948c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018580:	6a3b      	ldr	r3, [r7, #32]
 8018582:	2b00      	cmp	r3, #0
 8018584:	bf14      	ite	ne
 8018586:	2301      	movne	r3, #1
 8018588:	2300      	moveq	r3, #0
 801858a:	b2db      	uxtb	r3, r3
 801858c:	e000      	b.n	8018590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801858e:	2300      	movs	r3, #0
}
 8018590:	4618      	mov	r0, r3
 8018592:	3730      	adds	r7, #48	; 0x30
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}
 8018598:	0801d444 	.word	0x0801d444
 801859c:	0801d528 	.word	0x0801d528
 80185a0:	0801d48c 	.word	0x0801d48c
 80185a4:	0801d548 	.word	0x0801d548
 80185a8:	0801d580 	.word	0x0801d580
 80185ac:	0801d590 	.word	0x0801d590

080185b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b08e      	sub	sp, #56	; 0x38
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	685b      	ldr	r3, [r3, #4]
 80185bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80185be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185c0:	781b      	ldrb	r3, [r3, #0]
 80185c2:	f003 030f 	and.w	r3, r3, #15
 80185c6:	b2db      	uxtb	r3, r3
 80185c8:	009b      	lsls	r3, r3, #2
 80185ca:	b2db      	uxtb	r3, r3
 80185cc:	2b14      	cmp	r3, #20
 80185ce:	f040 8171 	bne.w	80188b4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80185d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d4:	88db      	ldrh	r3, [r3, #6]
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	4618      	mov	r0, r3
 80185da:	f7f5 fde9 	bl	800e1b0 <lwip_htons>
 80185de:	4603      	mov	r3, r0
 80185e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80185e4:	b29b      	uxth	r3, r3
 80185e6:	00db      	lsls	r3, r3, #3
 80185e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80185ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ec:	885b      	ldrh	r3, [r3, #2]
 80185ee:	b29b      	uxth	r3, r3
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7f5 fddd 	bl	800e1b0 <lwip_htons>
 80185f6:	4603      	mov	r3, r0
 80185f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80185fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	f003 030f 	and.w	r3, r3, #15
 8018602:	b2db      	uxtb	r3, r3
 8018604:	009b      	lsls	r3, r3, #2
 8018606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801860a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801860e:	b29b      	uxth	r3, r3
 8018610:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018612:	429a      	cmp	r2, r3
 8018614:	f0c0 8150 	bcc.w	80188b8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801861c:	b29b      	uxth	r3, r3
 801861e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018620:	1ad3      	subs	r3, r2, r3
 8018622:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018624:	6878      	ldr	r0, [r7, #4]
 8018626:	f7f7 fa43 	bl	800fab0 <pbuf_clen>
 801862a:	4603      	mov	r3, r0
 801862c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801862e:	4b8c      	ldr	r3, [pc, #560]	; (8018860 <ip4_reass+0x2b0>)
 8018630:	881b      	ldrh	r3, [r3, #0]
 8018632:	461a      	mov	r2, r3
 8018634:	8c3b      	ldrh	r3, [r7, #32]
 8018636:	4413      	add	r3, r2
 8018638:	2b0a      	cmp	r3, #10
 801863a:	dd10      	ble.n	801865e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801863c:	8c3b      	ldrh	r3, [r7, #32]
 801863e:	4619      	mov	r1, r3
 8018640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018642:	f7ff fd81 	bl	8018148 <ip_reass_remove_oldest_datagram>
 8018646:	4603      	mov	r3, r0
 8018648:	2b00      	cmp	r3, #0
 801864a:	f000 8137 	beq.w	80188bc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801864e:	4b84      	ldr	r3, [pc, #528]	; (8018860 <ip4_reass+0x2b0>)
 8018650:	881b      	ldrh	r3, [r3, #0]
 8018652:	461a      	mov	r2, r3
 8018654:	8c3b      	ldrh	r3, [r7, #32]
 8018656:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018658:	2b0a      	cmp	r3, #10
 801865a:	f300 812f 	bgt.w	80188bc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801865e:	4b81      	ldr	r3, [pc, #516]	; (8018864 <ip4_reass+0x2b4>)
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	633b      	str	r3, [r7, #48]	; 0x30
 8018664:	e015      	b.n	8018692 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018668:	695a      	ldr	r2, [r3, #20]
 801866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801866c:	68db      	ldr	r3, [r3, #12]
 801866e:	429a      	cmp	r2, r3
 8018670:	d10c      	bne.n	801868c <ip4_reass+0xdc>
 8018672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018674:	699a      	ldr	r2, [r3, #24]
 8018676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018678:	691b      	ldr	r3, [r3, #16]
 801867a:	429a      	cmp	r2, r3
 801867c:	d106      	bne.n	801868c <ip4_reass+0xdc>
 801867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018680:	899a      	ldrh	r2, [r3, #12]
 8018682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018684:	889b      	ldrh	r3, [r3, #4]
 8018686:	b29b      	uxth	r3, r3
 8018688:	429a      	cmp	r2, r3
 801868a:	d006      	beq.n	801869a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	633b      	str	r3, [r7, #48]	; 0x30
 8018692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018694:	2b00      	cmp	r3, #0
 8018696:	d1e6      	bne.n	8018666 <ip4_reass+0xb6>
 8018698:	e000      	b.n	801869c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801869a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d109      	bne.n	80186b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80186a2:	8c3b      	ldrh	r3, [r7, #32]
 80186a4:	4619      	mov	r1, r3
 80186a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80186a8:	f7ff fdb0 	bl	801820c <ip_reass_enqueue_new_datagram>
 80186ac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80186ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d11c      	bne.n	80186ee <ip4_reass+0x13e>
      goto nullreturn;
 80186b4:	e105      	b.n	80188c2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80186b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b8:	88db      	ldrh	r3, [r3, #6]
 80186ba:	b29b      	uxth	r3, r3
 80186bc:	4618      	mov	r0, r3
 80186be:	f7f5 fd77 	bl	800e1b0 <lwip_htons>
 80186c2:	4603      	mov	r3, r0
 80186c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d110      	bne.n	80186ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80186cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ce:	89db      	ldrh	r3, [r3, #14]
 80186d0:	4618      	mov	r0, r3
 80186d2:	f7f5 fd6d 	bl	800e1b0 <lwip_htons>
 80186d6:	4603      	mov	r3, r0
 80186d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d006      	beq.n	80186ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80186e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186e2:	3308      	adds	r3, #8
 80186e4:	2214      	movs	r2, #20
 80186e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80186e8:	4618      	mov	r0, r3
 80186ea:	f000 fe24 	bl	8019336 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80186ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f0:	88db      	ldrh	r3, [r3, #6]
 80186f2:	b29b      	uxth	r3, r3
 80186f4:	f003 0320 	and.w	r3, r3, #32
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	bf0c      	ite	eq
 80186fc:	2301      	moveq	r3, #1
 80186fe:	2300      	movne	r3, #0
 8018700:	b2db      	uxtb	r3, r3
 8018702:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018704:	69fb      	ldr	r3, [r7, #28]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d00e      	beq.n	8018728 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801870a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801870c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801870e:	4413      	add	r3, r2
 8018710:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018712:	8b7a      	ldrh	r2, [r7, #26]
 8018714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018716:	429a      	cmp	r2, r3
 8018718:	f0c0 80a0 	bcc.w	801885c <ip4_reass+0x2ac>
 801871c:	8b7b      	ldrh	r3, [r7, #26]
 801871e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018722:	4293      	cmp	r3, r2
 8018724:	f200 809a 	bhi.w	801885c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018728:	69fa      	ldr	r2, [r7, #28]
 801872a:	6879      	ldr	r1, [r7, #4]
 801872c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801872e:	f7ff fdd5 	bl	80182dc <ip_reass_chain_frag_into_datagram_and_validate>
 8018732:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018734:	697b      	ldr	r3, [r7, #20]
 8018736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801873a:	f000 809b 	beq.w	8018874 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801873e:	4b48      	ldr	r3, [pc, #288]	; (8018860 <ip4_reass+0x2b0>)
 8018740:	881a      	ldrh	r2, [r3, #0]
 8018742:	8c3b      	ldrh	r3, [r7, #32]
 8018744:	4413      	add	r3, r2
 8018746:	b29a      	uxth	r2, r3
 8018748:	4b45      	ldr	r3, [pc, #276]	; (8018860 <ip4_reass+0x2b0>)
 801874a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801874c:	69fb      	ldr	r3, [r7, #28]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d00d      	beq.n	801876e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018752:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018756:	4413      	add	r3, r2
 8018758:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801875c:	8a7a      	ldrh	r2, [r7, #18]
 801875e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018762:	7f9b      	ldrb	r3, [r3, #30]
 8018764:	f043 0301 	orr.w	r3, r3, #1
 8018768:	b2da      	uxtb	r2, r3
 801876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801876c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801876e:	697b      	ldr	r3, [r7, #20]
 8018770:	2b01      	cmp	r3, #1
 8018772:	d171      	bne.n	8018858 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018776:	8b9b      	ldrh	r3, [r3, #28]
 8018778:	3314      	adds	r3, #20
 801877a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801877e:	685b      	ldr	r3, [r3, #4]
 8018780:	685b      	ldr	r3, [r3, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018788:	685b      	ldr	r3, [r3, #4]
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018790:	3308      	adds	r3, #8
 8018792:	2214      	movs	r2, #20
 8018794:	4619      	mov	r1, r3
 8018796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018798:	f000 fdcd 	bl	8019336 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801879c:	8a3b      	ldrh	r3, [r7, #16]
 801879e:	4618      	mov	r0, r3
 80187a0:	f7f5 fd06 	bl	800e1b0 <lwip_htons>
 80187a4:	4603      	mov	r3, r0
 80187a6:	461a      	mov	r2, r3
 80187a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80187ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ae:	2200      	movs	r2, #0
 80187b0:	719a      	strb	r2, [r3, #6]
 80187b2:	2200      	movs	r2, #0
 80187b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80187b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b8:	2200      	movs	r2, #0
 80187ba:	729a      	strb	r2, [r3, #10]
 80187bc:	2200      	movs	r2, #0
 80187be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80187c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c2:	685b      	ldr	r3, [r3, #4]
 80187c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80187c6:	e00d      	b.n	80187e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80187c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187ca:	685b      	ldr	r3, [r3, #4]
 80187cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80187ce:	2114      	movs	r1, #20
 80187d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80187d2:	f7f7 f859 	bl	800f888 <pbuf_remove_header>
      pbuf_cat(p, r);
 80187d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80187d8:	6878      	ldr	r0, [r7, #4]
 80187da:	f7f7 f9a9 	bl	800fb30 <pbuf_cat>
      r = iprh->next_pbuf;
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80187e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d1ee      	bne.n	80187c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80187ea:	4b1e      	ldr	r3, [pc, #120]	; (8018864 <ip4_reass+0x2b4>)
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d102      	bne.n	80187fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80187f4:	2300      	movs	r3, #0
 80187f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80187f8:	e010      	b.n	801881c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80187fa:	4b1a      	ldr	r3, [pc, #104]	; (8018864 <ip4_reass+0x2b4>)
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018800:	e007      	b.n	8018812 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018808:	429a      	cmp	r2, r3
 801880a:	d006      	beq.n	801881a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018814:	2b00      	cmp	r3, #0
 8018816:	d1f4      	bne.n	8018802 <ip4_reass+0x252>
 8018818:	e000      	b.n	801881c <ip4_reass+0x26c>
          break;
 801881a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801881c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801881e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018820:	f7ff fd2e 	bl	8018280 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f7f7 f943 	bl	800fab0 <pbuf_clen>
 801882a:	4603      	mov	r3, r0
 801882c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801882e:	4b0c      	ldr	r3, [pc, #48]	; (8018860 <ip4_reass+0x2b0>)
 8018830:	881b      	ldrh	r3, [r3, #0]
 8018832:	8c3a      	ldrh	r2, [r7, #32]
 8018834:	429a      	cmp	r2, r3
 8018836:	d906      	bls.n	8018846 <ip4_reass+0x296>
 8018838:	4b0b      	ldr	r3, [pc, #44]	; (8018868 <ip4_reass+0x2b8>)
 801883a:	f240 229b 	movw	r2, #667	; 0x29b
 801883e:	490b      	ldr	r1, [pc, #44]	; (801886c <ip4_reass+0x2bc>)
 8018840:	480b      	ldr	r0, [pc, #44]	; (8018870 <ip4_reass+0x2c0>)
 8018842:	f000 fe23 	bl	801948c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018846:	4b06      	ldr	r3, [pc, #24]	; (8018860 <ip4_reass+0x2b0>)
 8018848:	881a      	ldrh	r2, [r3, #0]
 801884a:	8c3b      	ldrh	r3, [r7, #32]
 801884c:	1ad3      	subs	r3, r2, r3
 801884e:	b29a      	uxth	r2, r3
 8018850:	4b03      	ldr	r3, [pc, #12]	; (8018860 <ip4_reass+0x2b0>)
 8018852:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	e038      	b.n	80188ca <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018858:	2300      	movs	r3, #0
 801885a:	e036      	b.n	80188ca <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801885c:	bf00      	nop
 801885e:	e00a      	b.n	8018876 <ip4_reass+0x2c6>
 8018860:	2004f11c 	.word	0x2004f11c
 8018864:	2004f118 	.word	0x2004f118
 8018868:	0801d444 	.word	0x0801d444
 801886c:	0801d5b4 	.word	0x0801d5b4
 8018870:	0801d48c 	.word	0x0801d48c
    goto nullreturn_ipr;
 8018874:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018878:	2b00      	cmp	r3, #0
 801887a:	d106      	bne.n	801888a <ip4_reass+0x2da>
 801887c:	4b15      	ldr	r3, [pc, #84]	; (80188d4 <ip4_reass+0x324>)
 801887e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018882:	4915      	ldr	r1, [pc, #84]	; (80188d8 <ip4_reass+0x328>)
 8018884:	4815      	ldr	r0, [pc, #84]	; (80188dc <ip4_reass+0x32c>)
 8018886:	f000 fe01 	bl	801948c <iprintf>
  if (ipr->p == NULL) {
 801888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801888c:	685b      	ldr	r3, [r3, #4]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d116      	bne.n	80188c0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018892:	4b13      	ldr	r3, [pc, #76]	; (80188e0 <ip4_reass+0x330>)
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018898:	429a      	cmp	r2, r3
 801889a:	d006      	beq.n	80188aa <ip4_reass+0x2fa>
 801889c:	4b0d      	ldr	r3, [pc, #52]	; (80188d4 <ip4_reass+0x324>)
 801889e:	f240 22ab 	movw	r2, #683	; 0x2ab
 80188a2:	4910      	ldr	r1, [pc, #64]	; (80188e4 <ip4_reass+0x334>)
 80188a4:	480d      	ldr	r0, [pc, #52]	; (80188dc <ip4_reass+0x32c>)
 80188a6:	f000 fdf1 	bl	801948c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80188aa:	2100      	movs	r1, #0
 80188ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80188ae:	f7ff fce7 	bl	8018280 <ip_reass_dequeue_datagram>
 80188b2:	e006      	b.n	80188c2 <ip4_reass+0x312>
    goto nullreturn;
 80188b4:	bf00      	nop
 80188b6:	e004      	b.n	80188c2 <ip4_reass+0x312>
    goto nullreturn;
 80188b8:	bf00      	nop
 80188ba:	e002      	b.n	80188c2 <ip4_reass+0x312>
      goto nullreturn;
 80188bc:	bf00      	nop
 80188be:	e000      	b.n	80188c2 <ip4_reass+0x312>
  }

nullreturn:
 80188c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80188c2:	6878      	ldr	r0, [r7, #4]
 80188c4:	f7f7 f866 	bl	800f994 <pbuf_free>
  return NULL;
 80188c8:	2300      	movs	r3, #0
}
 80188ca:	4618      	mov	r0, r3
 80188cc:	3738      	adds	r7, #56	; 0x38
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bd80      	pop	{r7, pc}
 80188d2:	bf00      	nop
 80188d4:	0801d444 	.word	0x0801d444
 80188d8:	0801d5d0 	.word	0x0801d5d0
 80188dc:	0801d48c 	.word	0x0801d48c
 80188e0:	2004f118 	.word	0x2004f118
 80188e4:	0801d5dc 	.word	0x0801d5dc

080188e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80188ec:	2005      	movs	r0, #5
 80188ee:	f7f6 f937 	bl	800eb60 <memp_malloc>
 80188f2:	4603      	mov	r3, r0
}
 80188f4:	4618      	mov	r0, r3
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b082      	sub	sp, #8
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d106      	bne.n	8018914 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018906:	4b07      	ldr	r3, [pc, #28]	; (8018924 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018908:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801890c:	4906      	ldr	r1, [pc, #24]	; (8018928 <ip_frag_free_pbuf_custom_ref+0x30>)
 801890e:	4807      	ldr	r0, [pc, #28]	; (801892c <ip_frag_free_pbuf_custom_ref+0x34>)
 8018910:	f000 fdbc 	bl	801948c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018914:	6879      	ldr	r1, [r7, #4]
 8018916:	2005      	movs	r0, #5
 8018918:	f7f6 f998 	bl	800ec4c <memp_free>
}
 801891c:	bf00      	nop
 801891e:	3708      	adds	r7, #8
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}
 8018924:	0801d444 	.word	0x0801d444
 8018928:	0801d5fc 	.word	0x0801d5fc
 801892c:	0801d48c 	.word	0x0801d48c

08018930 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b084      	sub	sp, #16
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d106      	bne.n	8018950 <ipfrag_free_pbuf_custom+0x20>
 8018942:	4b11      	ldr	r3, [pc, #68]	; (8018988 <ipfrag_free_pbuf_custom+0x58>)
 8018944:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018948:	4910      	ldr	r1, [pc, #64]	; (801898c <ipfrag_free_pbuf_custom+0x5c>)
 801894a:	4811      	ldr	r0, [pc, #68]	; (8018990 <ipfrag_free_pbuf_custom+0x60>)
 801894c:	f000 fd9e 	bl	801948c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018950:	68fa      	ldr	r2, [r7, #12]
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	429a      	cmp	r2, r3
 8018956:	d006      	beq.n	8018966 <ipfrag_free_pbuf_custom+0x36>
 8018958:	4b0b      	ldr	r3, [pc, #44]	; (8018988 <ipfrag_free_pbuf_custom+0x58>)
 801895a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801895e:	490d      	ldr	r1, [pc, #52]	; (8018994 <ipfrag_free_pbuf_custom+0x64>)
 8018960:	480b      	ldr	r0, [pc, #44]	; (8018990 <ipfrag_free_pbuf_custom+0x60>)
 8018962:	f000 fd93 	bl	801948c <iprintf>
  if (pcr->original != NULL) {
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	695b      	ldr	r3, [r3, #20]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d004      	beq.n	8018978 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	695b      	ldr	r3, [r3, #20]
 8018972:	4618      	mov	r0, r3
 8018974:	f7f7 f80e 	bl	800f994 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018978:	68f8      	ldr	r0, [r7, #12]
 801897a:	f7ff ffbd 	bl	80188f8 <ip_frag_free_pbuf_custom_ref>
}
 801897e:	bf00      	nop
 8018980:	3710      	adds	r7, #16
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}
 8018986:	bf00      	nop
 8018988:	0801d444 	.word	0x0801d444
 801898c:	0801d608 	.word	0x0801d608
 8018990:	0801d48c 	.word	0x0801d48c
 8018994:	0801d614 	.word	0x0801d614

08018998 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b094      	sub	sp, #80	; 0x50
 801899c:	af02      	add	r7, sp, #8
 801899e:	60f8      	str	r0, [r7, #12]
 80189a0:	60b9      	str	r1, [r7, #8]
 80189a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80189a4:	2300      	movs	r3, #0
 80189a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80189aa:	68bb      	ldr	r3, [r7, #8]
 80189ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80189ae:	3b14      	subs	r3, #20
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	da00      	bge.n	80189b6 <ip4_frag+0x1e>
 80189b4:	3307      	adds	r3, #7
 80189b6:	10db      	asrs	r3, r3, #3
 80189b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80189ba:	2314      	movs	r3, #20
 80189bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	685b      	ldr	r3, [r3, #4]
 80189c2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80189c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80189c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ca:	781b      	ldrb	r3, [r3, #0]
 80189cc:	f003 030f 	and.w	r3, r3, #15
 80189d0:	b2db      	uxtb	r3, r3
 80189d2:	009b      	lsls	r3, r3, #2
 80189d4:	b2db      	uxtb	r3, r3
 80189d6:	2b14      	cmp	r3, #20
 80189d8:	d002      	beq.n	80189e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80189da:	f06f 0305 	mvn.w	r3, #5
 80189de:	e110      	b.n	8018c02 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	895b      	ldrh	r3, [r3, #10]
 80189e4:	2b13      	cmp	r3, #19
 80189e6:	d809      	bhi.n	80189fc <ip4_frag+0x64>
 80189e8:	4b88      	ldr	r3, [pc, #544]	; (8018c0c <ip4_frag+0x274>)
 80189ea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80189ee:	4988      	ldr	r1, [pc, #544]	; (8018c10 <ip4_frag+0x278>)
 80189f0:	4888      	ldr	r0, [pc, #544]	; (8018c14 <ip4_frag+0x27c>)
 80189f2:	f000 fd4b 	bl	801948c <iprintf>
 80189f6:	f06f 0305 	mvn.w	r3, #5
 80189fa:	e102      	b.n	8018c02 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80189fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189fe:	88db      	ldrh	r3, [r3, #6]
 8018a00:	b29b      	uxth	r3, r3
 8018a02:	4618      	mov	r0, r3
 8018a04:	f7f5 fbd4 	bl	800e1b0 <lwip_htons>
 8018a08:	4603      	mov	r3, r0
 8018a0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018a0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018a16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018a1c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	891b      	ldrh	r3, [r3, #8]
 8018a22:	3b14      	subs	r3, #20
 8018a24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018a28:	e0e1      	b.n	8018bee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018a2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a2c:	00db      	lsls	r3, r3, #3
 8018a2e:	b29b      	uxth	r3, r3
 8018a30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a34:	4293      	cmp	r3, r2
 8018a36:	bf28      	it	cs
 8018a38:	4613      	movcs	r3, r2
 8018a3a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018a3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a40:	2114      	movs	r1, #20
 8018a42:	200e      	movs	r0, #14
 8018a44:	f7f6 fcc2 	bl	800f3cc <pbuf_alloc>
 8018a48:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	f000 80d5 	beq.w	8018bfc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a54:	895b      	ldrh	r3, [r3, #10]
 8018a56:	2b13      	cmp	r3, #19
 8018a58:	d806      	bhi.n	8018a68 <ip4_frag+0xd0>
 8018a5a:	4b6c      	ldr	r3, [pc, #432]	; (8018c0c <ip4_frag+0x274>)
 8018a5c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018a60:	496d      	ldr	r1, [pc, #436]	; (8018c18 <ip4_frag+0x280>)
 8018a62:	486c      	ldr	r0, [pc, #432]	; (8018c14 <ip4_frag+0x27c>)
 8018a64:	f000 fd12 	bl	801948c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a6a:	685b      	ldr	r3, [r3, #4]
 8018a6c:	2214      	movs	r2, #20
 8018a6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018a70:	4618      	mov	r0, r3
 8018a72:	f000 fc60 	bl	8019336 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a78:	685b      	ldr	r3, [r3, #4]
 8018a7a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018a7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018a7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018a82:	e064      	b.n	8018b4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	895a      	ldrh	r2, [r3, #10]
 8018a88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018a8a:	1ad3      	subs	r3, r2, r3
 8018a8c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	895b      	ldrh	r3, [r3, #10]
 8018a92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018a94:	429a      	cmp	r2, r3
 8018a96:	d906      	bls.n	8018aa6 <ip4_frag+0x10e>
 8018a98:	4b5c      	ldr	r3, [pc, #368]	; (8018c0c <ip4_frag+0x274>)
 8018a9a:	f240 322d 	movw	r2, #813	; 0x32d
 8018a9e:	495f      	ldr	r1, [pc, #380]	; (8018c1c <ip4_frag+0x284>)
 8018aa0:	485c      	ldr	r0, [pc, #368]	; (8018c14 <ip4_frag+0x27c>)
 8018aa2:	f000 fcf3 	bl	801948c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018aa6:	8bfa      	ldrh	r2, [r7, #30]
 8018aa8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018aac:	4293      	cmp	r3, r2
 8018aae:	bf28      	it	cs
 8018ab0:	4613      	movcs	r3, r2
 8018ab2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018ab6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d105      	bne.n	8018aca <ip4_frag+0x132>
        poff = 0;
 8018abe:	2300      	movs	r3, #0
 8018ac0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	60fb      	str	r3, [r7, #12]
        continue;
 8018ac8:	e041      	b.n	8018b4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018aca:	f7ff ff0d 	bl	80188e8 <ip_frag_alloc_pbuf_custom_ref>
 8018ace:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018ad0:	69bb      	ldr	r3, [r7, #24]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d103      	bne.n	8018ade <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ad8:	f7f6 ff5c 	bl	800f994 <pbuf_free>
        goto memerr;
 8018adc:	e08f      	b.n	8018bfe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018ade:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018ae4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ae6:	4413      	add	r3, r2
 8018ae8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018aec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018af0:	9201      	str	r2, [sp, #4]
 8018af2:	9300      	str	r3, [sp, #0]
 8018af4:	4603      	mov	r3, r0
 8018af6:	2241      	movs	r2, #65	; 0x41
 8018af8:	2000      	movs	r0, #0
 8018afa:	f7f6 fd91 	bl	800f620 <pbuf_alloced_custom>
 8018afe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d106      	bne.n	8018b14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018b06:	69b8      	ldr	r0, [r7, #24]
 8018b08:	f7ff fef6 	bl	80188f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b0e:	f7f6 ff41 	bl	800f994 <pbuf_free>
        goto memerr;
 8018b12:	e074      	b.n	8018bfe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018b14:	68f8      	ldr	r0, [r7, #12]
 8018b16:	f7f6 ffe3 	bl	800fae0 <pbuf_ref>
      pcr->original = p;
 8018b1a:	69bb      	ldr	r3, [r7, #24]
 8018b1c:	68fa      	ldr	r2, [r7, #12]
 8018b1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018b20:	69bb      	ldr	r3, [r7, #24]
 8018b22:	4a3f      	ldr	r2, [pc, #252]	; (8018c20 <ip4_frag+0x288>)
 8018b24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018b26:	6979      	ldr	r1, [r7, #20]
 8018b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b2a:	f7f7 f801 	bl	800fb30 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018b2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018b32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b36:	1ad3      	subs	r3, r2, r3
 8018b38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018b3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d004      	beq.n	8018b4e <ip4_frag+0x1b6>
        poff = 0;
 8018b44:	2300      	movs	r3, #0
 8018b46:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018b4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d196      	bne.n	8018a84 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018b56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018b58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b5c:	4413      	add	r3, r2
 8018b5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018b60:	68bb      	ldr	r3, [r7, #8]
 8018b62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018b64:	f1a3 0213 	sub.w	r2, r3, #19
 8018b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018b6c:	429a      	cmp	r2, r3
 8018b6e:	bfcc      	ite	gt
 8018b70:	2301      	movgt	r3, #1
 8018b72:	2300      	movle	r3, #0
 8018b74:	b2db      	uxtb	r3, r3
 8018b76:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018b78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018b80:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018b82:	6a3b      	ldr	r3, [r7, #32]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d002      	beq.n	8018b8e <ip4_frag+0x1f6>
 8018b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d003      	beq.n	8018b96 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018b8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018b90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018b94:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018b96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f7f5 fb09 	bl	800e1b0 <lwip_htons>
 8018b9e:	4603      	mov	r3, r0
 8018ba0:	461a      	mov	r2, r3
 8018ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ba4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018ba6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018ba8:	3314      	adds	r3, #20
 8018baa:	b29b      	uxth	r3, r3
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7f5 faff 	bl	800e1b0 <lwip_htons>
 8018bb2:	4603      	mov	r3, r0
 8018bb4:	461a      	mov	r2, r3
 8018bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bb8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	729a      	strb	r2, [r3, #10]
 8018bc0:	2200      	movs	r2, #0
 8018bc2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	695b      	ldr	r3, [r3, #20]
 8018bc8:	687a      	ldr	r2, [r7, #4]
 8018bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018bcc:	68b8      	ldr	r0, [r7, #8]
 8018bce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018bd2:	f7f6 fedf 	bl	800f994 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018bd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018bda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018bdc:	1ad3      	subs	r3, r2, r3
 8018bde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018be2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018be6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018be8:	4413      	add	r3, r2
 8018bea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018bee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	f47f af19 	bne.w	8018a2a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	e002      	b.n	8018c02 <ip4_frag+0x26a>
      goto memerr;
 8018bfc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018c02:	4618      	mov	r0, r3
 8018c04:	3748      	adds	r7, #72	; 0x48
 8018c06:	46bd      	mov	sp, r7
 8018c08:	bd80      	pop	{r7, pc}
 8018c0a:	bf00      	nop
 8018c0c:	0801d444 	.word	0x0801d444
 8018c10:	0801d620 	.word	0x0801d620
 8018c14:	0801d48c 	.word	0x0801d48c
 8018c18:	0801d63c 	.word	0x0801d63c
 8018c1c:	0801d65c 	.word	0x0801d65c
 8018c20:	08018931 	.word	0x08018931

08018c24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b086      	sub	sp, #24
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018c2e:	230e      	movs	r3, #14
 8018c30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	895b      	ldrh	r3, [r3, #10]
 8018c36:	2b0e      	cmp	r3, #14
 8018c38:	d96e      	bls.n	8018d18 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	7bdb      	ldrb	r3, [r3, #15]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d106      	bne.n	8018c50 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018c42:	683b      	ldr	r3, [r7, #0]
 8018c44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018c48:	3301      	adds	r3, #1
 8018c4a:	b2da      	uxtb	r2, r3
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	685b      	ldr	r3, [r3, #4]
 8018c54:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018c56:	693b      	ldr	r3, [r7, #16]
 8018c58:	7b1a      	ldrb	r2, [r3, #12]
 8018c5a:	7b5b      	ldrb	r3, [r3, #13]
 8018c5c:	021b      	lsls	r3, r3, #8
 8018c5e:	4313      	orrs	r3, r2
 8018c60:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018c62:	693b      	ldr	r3, [r7, #16]
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	f003 0301 	and.w	r3, r3, #1
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d023      	beq.n	8018cb6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018c6e:	693b      	ldr	r3, [r7, #16]
 8018c70:	781b      	ldrb	r3, [r3, #0]
 8018c72:	2b01      	cmp	r3, #1
 8018c74:	d10f      	bne.n	8018c96 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018c76:	693b      	ldr	r3, [r7, #16]
 8018c78:	785b      	ldrb	r3, [r3, #1]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d11b      	bne.n	8018cb6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018c7e:	693b      	ldr	r3, [r7, #16]
 8018c80:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018c82:	2b5e      	cmp	r3, #94	; 0x5e
 8018c84:	d117      	bne.n	8018cb6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	7b5b      	ldrb	r3, [r3, #13]
 8018c8a:	f043 0310 	orr.w	r3, r3, #16
 8018c8e:	b2da      	uxtb	r2, r3
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	735a      	strb	r2, [r3, #13]
 8018c94:	e00f      	b.n	8018cb6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018c96:	693b      	ldr	r3, [r7, #16]
 8018c98:	2206      	movs	r2, #6
 8018c9a:	4928      	ldr	r1, [pc, #160]	; (8018d3c <ethernet_input+0x118>)
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	f000 fb3a 	bl	8019316 <memcmp>
 8018ca2:	4603      	mov	r3, r0
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d106      	bne.n	8018cb6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	7b5b      	ldrb	r3, [r3, #13]
 8018cac:	f043 0308 	orr.w	r3, r3, #8
 8018cb0:	b2da      	uxtb	r2, r3
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018cb6:	89fb      	ldrh	r3, [r7, #14]
 8018cb8:	2b08      	cmp	r3, #8
 8018cba:	d003      	beq.n	8018cc4 <ethernet_input+0xa0>
 8018cbc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018cc0:	d014      	beq.n	8018cec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018cc2:	e032      	b.n	8018d2a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018cca:	f003 0308 	and.w	r3, r3, #8
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d024      	beq.n	8018d1c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018cd2:	8afb      	ldrh	r3, [r7, #22]
 8018cd4:	4619      	mov	r1, r3
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f7f6 fdd6 	bl	800f888 <pbuf_remove_header>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d11e      	bne.n	8018d20 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018ce2:	6839      	ldr	r1, [r7, #0]
 8018ce4:	6878      	ldr	r0, [r7, #4]
 8018ce6:	f7fe ff21 	bl	8017b2c <ip4_input>
      break;
 8018cea:	e013      	b.n	8018d14 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018cec:	683b      	ldr	r3, [r7, #0]
 8018cee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018cf2:	f003 0308 	and.w	r3, r3, #8
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d014      	beq.n	8018d24 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018cfa:	8afb      	ldrh	r3, [r7, #22]
 8018cfc:	4619      	mov	r1, r3
 8018cfe:	6878      	ldr	r0, [r7, #4]
 8018d00:	f7f6 fdc2 	bl	800f888 <pbuf_remove_header>
 8018d04:	4603      	mov	r3, r0
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d10e      	bne.n	8018d28 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018d0a:	6839      	ldr	r1, [r7, #0]
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f7fe f8c1 	bl	8016e94 <etharp_input>
      break;
 8018d12:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018d14:	2300      	movs	r3, #0
 8018d16:	e00c      	b.n	8018d32 <ethernet_input+0x10e>
    goto free_and_return;
 8018d18:	bf00      	nop
 8018d1a:	e006      	b.n	8018d2a <ethernet_input+0x106>
        goto free_and_return;
 8018d1c:	bf00      	nop
 8018d1e:	e004      	b.n	8018d2a <ethernet_input+0x106>
        goto free_and_return;
 8018d20:	bf00      	nop
 8018d22:	e002      	b.n	8018d2a <ethernet_input+0x106>
        goto free_and_return;
 8018d24:	bf00      	nop
 8018d26:	e000      	b.n	8018d2a <ethernet_input+0x106>
        goto free_and_return;
 8018d28:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018d2a:	6878      	ldr	r0, [r7, #4]
 8018d2c:	f7f6 fe32 	bl	800f994 <pbuf_free>
  return ERR_OK;
 8018d30:	2300      	movs	r3, #0
}
 8018d32:	4618      	mov	r0, r3
 8018d34:	3718      	adds	r7, #24
 8018d36:	46bd      	mov	sp, r7
 8018d38:	bd80      	pop	{r7, pc}
 8018d3a:	bf00      	nop
 8018d3c:	0801d884 	.word	0x0801d884

08018d40 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b086      	sub	sp, #24
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	60f8      	str	r0, [r7, #12]
 8018d48:	60b9      	str	r1, [r7, #8]
 8018d4a:	607a      	str	r2, [r7, #4]
 8018d4c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018d4e:	8c3b      	ldrh	r3, [r7, #32]
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7f5 fa2d 	bl	800e1b0 <lwip_htons>
 8018d56:	4603      	mov	r3, r0
 8018d58:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018d5a:	210e      	movs	r1, #14
 8018d5c:	68b8      	ldr	r0, [r7, #8]
 8018d5e:	f7f6 fd83 	bl	800f868 <pbuf_add_header>
 8018d62:	4603      	mov	r3, r0
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d125      	bne.n	8018db4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018d68:	68bb      	ldr	r3, [r7, #8]
 8018d6a:	685b      	ldr	r3, [r3, #4]
 8018d6c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018d6e:	693b      	ldr	r3, [r7, #16]
 8018d70:	8afa      	ldrh	r2, [r7, #22]
 8018d72:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018d74:	693b      	ldr	r3, [r7, #16]
 8018d76:	2206      	movs	r2, #6
 8018d78:	6839      	ldr	r1, [r7, #0]
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f000 fadb 	bl	8019336 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018d80:	693b      	ldr	r3, [r7, #16]
 8018d82:	3306      	adds	r3, #6
 8018d84:	2206      	movs	r2, #6
 8018d86:	6879      	ldr	r1, [r7, #4]
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f000 fad4 	bl	8019336 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018d94:	2b06      	cmp	r3, #6
 8018d96:	d006      	beq.n	8018da6 <ethernet_output+0x66>
 8018d98:	4b0a      	ldr	r3, [pc, #40]	; (8018dc4 <ethernet_output+0x84>)
 8018d9a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018d9e:	490a      	ldr	r1, [pc, #40]	; (8018dc8 <ethernet_output+0x88>)
 8018da0:	480a      	ldr	r0, [pc, #40]	; (8018dcc <ethernet_output+0x8c>)
 8018da2:	f000 fb73 	bl	801948c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	699b      	ldr	r3, [r3, #24]
 8018daa:	68b9      	ldr	r1, [r7, #8]
 8018dac:	68f8      	ldr	r0, [r7, #12]
 8018dae:	4798      	blx	r3
 8018db0:	4603      	mov	r3, r0
 8018db2:	e002      	b.n	8018dba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018db4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018db6:	f06f 0301 	mvn.w	r3, #1
}
 8018dba:	4618      	mov	r0, r3
 8018dbc:	3718      	adds	r7, #24
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}
 8018dc2:	bf00      	nop
 8018dc4:	0801d66c 	.word	0x0801d66c
 8018dc8:	0801d6a4 	.word	0x0801d6a4
 8018dcc:	0801d6d8 	.word	0x0801d6d8

08018dd0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b082      	sub	sp, #8
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
 8018dd8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018dda:	683b      	ldr	r3, [r7, #0]
 8018ddc:	2200      	movs	r2, #0
 8018dde:	2104      	movs	r1, #4
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7f0 f94f 	bl	8009084 <osMessageQueueNew>
 8018de6:	4602      	mov	r2, r0
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d102      	bne.n	8018dfa <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018df8:	e000      	b.n	8018dfc <sys_mbox_new+0x2c>

  return ERR_OK;
 8018dfa:	2300      	movs	r3, #0
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	3708      	adds	r7, #8
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bd80      	pop	{r7, pc}

08018e04 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b082      	sub	sp, #8
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	4618      	mov	r0, r3
 8018e12:	f7f0 faa3 	bl	800935c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	f7f0 fad0 	bl	80093c0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018e20:	bf00      	nop
 8018e22:	3708      	adds	r7, #8
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}

08018e28 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b084      	sub	sp, #16
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
 8018e30:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6818      	ldr	r0, [r3, #0]
 8018e36:	4639      	mov	r1, r7
 8018e38:	2300      	movs	r3, #0
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	f7f0 f9a8 	bl	8009190 <osMessageQueuePut>
 8018e40:	4603      	mov	r3, r0
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d102      	bne.n	8018e4c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018e46:	2300      	movs	r3, #0
 8018e48:	73fb      	strb	r3, [r7, #15]
 8018e4a:	e001      	b.n	8018e50 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018e4c:	23ff      	movs	r3, #255	; 0xff
 8018e4e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018e54:	4618      	mov	r0, r3
 8018e56:	3710      	adds	r7, #16
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}

08018e5c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b086      	sub	sp, #24
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	60f8      	str	r0, [r7, #12]
 8018e64:	60b9      	str	r1, [r7, #8]
 8018e66:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018e68:	f7ef fd38 	bl	80088dc <osKernelGetTickCount>
 8018e6c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d013      	beq.n	8018e9c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	6818      	ldr	r0, [r3, #0]
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	68b9      	ldr	r1, [r7, #8]
 8018e7e:	f7f0 f9fb 	bl	8009278 <osMessageQueueGet>
 8018e82:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d105      	bne.n	8018e96 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018e8a:	f7ef fd27 	bl	80088dc <osKernelGetTickCount>
 8018e8e:	4602      	mov	r2, r0
 8018e90:	697b      	ldr	r3, [r7, #20]
 8018e92:	1ad3      	subs	r3, r2, r3
 8018e94:	e00f      	b.n	8018eb6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e9a:	e00c      	b.n	8018eb6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	6818      	ldr	r0, [r3, #0]
 8018ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	68b9      	ldr	r1, [r7, #8]
 8018ea8:	f7f0 f9e6 	bl	8009278 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018eac:	f7ef fd16 	bl	80088dc <osKernelGetTickCount>
 8018eb0:	4602      	mov	r2, r0
 8018eb2:	697b      	ldr	r3, [r7, #20]
 8018eb4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	3718      	adds	r7, #24
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd80      	pop	{r7, pc}

08018ebe <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018ebe:	b580      	push	{r7, lr}
 8018ec0:	b082      	sub	sp, #8
 8018ec2:	af00      	add	r7, sp, #0
 8018ec4:	6078      	str	r0, [r7, #4]
 8018ec6:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6818      	ldr	r0, [r3, #0]
 8018ecc:	2300      	movs	r3, #0
 8018ece:	2200      	movs	r2, #0
 8018ed0:	6839      	ldr	r1, [r7, #0]
 8018ed2:	f7f0 f9d1 	bl	8009278 <osMessageQueueGet>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d101      	bne.n	8018ee0 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018edc:	2300      	movs	r3, #0
 8018ede:	e001      	b.n	8018ee4 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	3708      	adds	r7, #8
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}

08018eec <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018eec:	b480      	push	{r7}
 8018eee:	b083      	sub	sp, #12
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d101      	bne.n	8018f00 <sys_mbox_valid+0x14>
    return 0;
 8018efc:	2300      	movs	r3, #0
 8018efe:	e000      	b.n	8018f02 <sys_mbox_valid+0x16>
  else
    return 1;
 8018f00:	2301      	movs	r3, #1
}
 8018f02:	4618      	mov	r0, r3
 8018f04:	370c      	adds	r7, #12
 8018f06:	46bd      	mov	sp, r7
 8018f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0c:	4770      	bx	lr

08018f0e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018f0e:	b480      	push	{r7}
 8018f10:	b083      	sub	sp, #12
 8018f12:	af00      	add	r7, sp, #0
 8018f14:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	2200      	movs	r2, #0
 8018f1a:	601a      	str	r2, [r3, #0]
}
 8018f1c:	bf00      	nop
 8018f1e:	370c      	adds	r7, #12
 8018f20:	46bd      	mov	sp, r7
 8018f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f26:	4770      	bx	lr

08018f28 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b082      	sub	sp, #8
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
 8018f30:	460b      	mov	r3, r1
 8018f32:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8018f34:	78fb      	ldrb	r3, [r7, #3]
 8018f36:	2200      	movs	r2, #0
 8018f38:	4619      	mov	r1, r3
 8018f3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018f3e:	f7ef ff11 	bl	8008d64 <osSemaphoreNew>
 8018f42:	4602      	mov	r2, r0
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d102      	bne.n	8018f56 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f54:	e009      	b.n	8018f6a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8018f56:	78fb      	ldrb	r3, [r7, #3]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d105      	bne.n	8018f68 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	2100      	movs	r1, #0
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7ef ff9a 	bl	8008e9c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018f68:	2300      	movs	r3, #0
}
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	3708      	adds	r7, #8
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bd80      	pop	{r7, pc}

08018f72 <sys_sem_signal>:
}

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018f72:	b580      	push	{r7, lr}
 8018f74:	b082      	sub	sp, #8
 8018f76:	af00      	add	r7, sp, #0
 8018f78:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f7ef fff2 	bl	8008f68 <osSemaphoreRelease>
}
 8018f84:	bf00      	nop
 8018f86:	3708      	adds	r7, #8
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b082      	sub	sp, #8
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7f0 f83d 	bl	8009018 <osSemaphoreDelete>
}
 8018f9e:	bf00      	nop
 8018fa0:	3708      	adds	r7, #8
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	bd80      	pop	{r7, pc}

08018fa6 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018fa6:	b480      	push	{r7}
 8018fa8:	b083      	sub	sp, #12
 8018faa:	af00      	add	r7, sp, #0
 8018fac:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d101      	bne.n	8018fba <sys_sem_valid+0x14>
    return 0;
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	e000      	b.n	8018fbc <sys_sem_valid+0x16>
  else
    return 1;
 8018fba:	2301      	movs	r3, #1
}
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	370c      	adds	r7, #12
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc6:	4770      	bx	lr

08018fc8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018fc8:	b480      	push	{r7}
 8018fca:	b083      	sub	sp, #12
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	601a      	str	r2, [r3, #0]
}
 8018fd6:	bf00      	nop
 8018fd8:	370c      	adds	r7, #12
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe0:	4770      	bx	lr
	...

08018fe4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018fe8:	2000      	movs	r0, #0
 8018fea:	f7ef fd73 	bl	8008ad4 <osMutexNew>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	4a01      	ldr	r2, [pc, #4]	; (8018ff8 <sys_init+0x14>)
 8018ff2:	6013      	str	r3, [r2, #0]
#endif
}
 8018ff4:	bf00      	nop
 8018ff6:	bd80      	pop	{r7, pc}
 8018ff8:	2004f120 	.word	0x2004f120

08018ffc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b082      	sub	sp, #8
 8019000:	af00      	add	r7, sp, #0
 8019002:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019004:	2000      	movs	r0, #0
 8019006:	f7ef fd65 	bl	8008ad4 <osMutexNew>
 801900a:	4602      	mov	r2, r0
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d102      	bne.n	801901e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801901c:	e000      	b.n	8019020 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801901e:	2300      	movs	r3, #0
}
 8019020:	4618      	mov	r0, r3
 8019022:	3708      	adds	r7, #8
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}

08019028 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b082      	sub	sp, #8
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019038:	4618      	mov	r0, r3
 801903a:	f7ef fde5 	bl	8008c08 <osMutexAcquire>
#endif
}
 801903e:	bf00      	nop
 8019040:	3708      	adds	r7, #8
 8019042:	46bd      	mov	sp, r7
 8019044:	bd80      	pop	{r7, pc}

08019046 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019046:	b580      	push	{r7, lr}
 8019048:	b082      	sub	sp, #8
 801904a:	af00      	add	r7, sp, #0
 801904c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	4618      	mov	r0, r3
 8019054:	f7ef fe36 	bl	8008cc4 <osMutexRelease>
}
 8019058:	bf00      	nop
 801905a:	3708      	adds	r7, #8
 801905c:	46bd      	mov	sp, r7
 801905e:	bd80      	pop	{r7, pc}

08019060 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b08e      	sub	sp, #56	; 0x38
 8019064:	af00      	add	r7, sp, #0
 8019066:	60f8      	str	r0, [r7, #12]
 8019068:	60b9      	str	r1, [r7, #8]
 801906a:	607a      	str	r2, [r7, #4]
 801906c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801906e:	f107 0314 	add.w	r3, r7, #20
 8019072:	2224      	movs	r2, #36	; 0x24
 8019074:	2100      	movs	r1, #0
 8019076:	4618      	mov	r0, r3
 8019078:	f000 f96b 	bl	8019352 <memset>
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	617b      	str	r3, [r7, #20]
 8019080:	683b      	ldr	r3, [r7, #0]
 8019082:	62bb      	str	r3, [r7, #40]	; 0x28
 8019084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019086:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019088:	f107 0314 	add.w	r3, r7, #20
 801908c:	461a      	mov	r2, r3
 801908e:	6879      	ldr	r1, [r7, #4]
 8019090:	68b8      	ldr	r0, [r7, #8]
 8019092:	f7ef fc4b 	bl	800892c <osThreadNew>
 8019096:	4603      	mov	r3, r0
#endif
}
 8019098:	4618      	mov	r0, r3
 801909a:	3738      	adds	r7, #56	; 0x38
 801909c:	46bd      	mov	sp, r7
 801909e:	bd80      	pop	{r7, pc}

080190a0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80190a4:	4b04      	ldr	r3, [pc, #16]	; (80190b8 <sys_arch_protect+0x18>)
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7ef fdab 	bl	8008c08 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80190b2:	2301      	movs	r3, #1
}
 80190b4:	4618      	mov	r0, r3
 80190b6:	bd80      	pop	{r7, pc}
 80190b8:	2004f120 	.word	0x2004f120

080190bc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b082      	sub	sp, #8
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80190c4:	4b04      	ldr	r3, [pc, #16]	; (80190d8 <sys_arch_unprotect+0x1c>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	4618      	mov	r0, r3
 80190ca:	f7ef fdfb 	bl	8008cc4 <osMutexRelease>
}
 80190ce:	bf00      	nop
 80190d0:	3708      	adds	r7, #8
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}
 80190d6:	bf00      	nop
 80190d8:	2004f120 	.word	0x2004f120

080190dc <std>:
 80190dc:	2300      	movs	r3, #0
 80190de:	b510      	push	{r4, lr}
 80190e0:	4604      	mov	r4, r0
 80190e2:	e9c0 3300 	strd	r3, r3, [r0]
 80190e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80190ea:	6083      	str	r3, [r0, #8]
 80190ec:	8181      	strh	r1, [r0, #12]
 80190ee:	6643      	str	r3, [r0, #100]	; 0x64
 80190f0:	81c2      	strh	r2, [r0, #14]
 80190f2:	6183      	str	r3, [r0, #24]
 80190f4:	4619      	mov	r1, r3
 80190f6:	2208      	movs	r2, #8
 80190f8:	305c      	adds	r0, #92	; 0x5c
 80190fa:	f000 f92a 	bl	8019352 <memset>
 80190fe:	4b05      	ldr	r3, [pc, #20]	; (8019114 <std+0x38>)
 8019100:	6263      	str	r3, [r4, #36]	; 0x24
 8019102:	4b05      	ldr	r3, [pc, #20]	; (8019118 <std+0x3c>)
 8019104:	62a3      	str	r3, [r4, #40]	; 0x28
 8019106:	4b05      	ldr	r3, [pc, #20]	; (801911c <std+0x40>)
 8019108:	62e3      	str	r3, [r4, #44]	; 0x2c
 801910a:	4b05      	ldr	r3, [pc, #20]	; (8019120 <std+0x44>)
 801910c:	6224      	str	r4, [r4, #32]
 801910e:	6323      	str	r3, [r4, #48]	; 0x30
 8019110:	bd10      	pop	{r4, pc}
 8019112:	bf00      	nop
 8019114:	0801962d 	.word	0x0801962d
 8019118:	0801964f 	.word	0x0801964f
 801911c:	08019687 	.word	0x08019687
 8019120:	080196ab 	.word	0x080196ab

08019124 <_cleanup_r>:
 8019124:	4901      	ldr	r1, [pc, #4]	; (801912c <_cleanup_r+0x8>)
 8019126:	f000 b8af 	b.w	8019288 <_fwalk_reent>
 801912a:	bf00      	nop
 801912c:	08019841 	.word	0x08019841

08019130 <__sfmoreglue>:
 8019130:	b570      	push	{r4, r5, r6, lr}
 8019132:	2268      	movs	r2, #104	; 0x68
 8019134:	1e4d      	subs	r5, r1, #1
 8019136:	4355      	muls	r5, r2
 8019138:	460e      	mov	r6, r1
 801913a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801913e:	f000 f931 	bl	80193a4 <_malloc_r>
 8019142:	4604      	mov	r4, r0
 8019144:	b140      	cbz	r0, 8019158 <__sfmoreglue+0x28>
 8019146:	2100      	movs	r1, #0
 8019148:	e9c0 1600 	strd	r1, r6, [r0]
 801914c:	300c      	adds	r0, #12
 801914e:	60a0      	str	r0, [r4, #8]
 8019150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019154:	f000 f8fd 	bl	8019352 <memset>
 8019158:	4620      	mov	r0, r4
 801915a:	bd70      	pop	{r4, r5, r6, pc}

0801915c <__sfp_lock_acquire>:
 801915c:	4801      	ldr	r0, [pc, #4]	; (8019164 <__sfp_lock_acquire+0x8>)
 801915e:	f000 b8d8 	b.w	8019312 <__retarget_lock_acquire_recursive>
 8019162:	bf00      	nop
 8019164:	2004f125 	.word	0x2004f125

08019168 <__sfp_lock_release>:
 8019168:	4801      	ldr	r0, [pc, #4]	; (8019170 <__sfp_lock_release+0x8>)
 801916a:	f000 b8d3 	b.w	8019314 <__retarget_lock_release_recursive>
 801916e:	bf00      	nop
 8019170:	2004f125 	.word	0x2004f125

08019174 <__sinit_lock_acquire>:
 8019174:	4801      	ldr	r0, [pc, #4]	; (801917c <__sinit_lock_acquire+0x8>)
 8019176:	f000 b8cc 	b.w	8019312 <__retarget_lock_acquire_recursive>
 801917a:	bf00      	nop
 801917c:	2004f126 	.word	0x2004f126

08019180 <__sinit_lock_release>:
 8019180:	4801      	ldr	r0, [pc, #4]	; (8019188 <__sinit_lock_release+0x8>)
 8019182:	f000 b8c7 	b.w	8019314 <__retarget_lock_release_recursive>
 8019186:	bf00      	nop
 8019188:	2004f126 	.word	0x2004f126

0801918c <__sinit>:
 801918c:	b510      	push	{r4, lr}
 801918e:	4604      	mov	r4, r0
 8019190:	f7ff fff0 	bl	8019174 <__sinit_lock_acquire>
 8019194:	69a3      	ldr	r3, [r4, #24]
 8019196:	b11b      	cbz	r3, 80191a0 <__sinit+0x14>
 8019198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801919c:	f7ff bff0 	b.w	8019180 <__sinit_lock_release>
 80191a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80191a4:	6523      	str	r3, [r4, #80]	; 0x50
 80191a6:	4b13      	ldr	r3, [pc, #76]	; (80191f4 <__sinit+0x68>)
 80191a8:	4a13      	ldr	r2, [pc, #76]	; (80191f8 <__sinit+0x6c>)
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80191ae:	42a3      	cmp	r3, r4
 80191b0:	bf04      	itt	eq
 80191b2:	2301      	moveq	r3, #1
 80191b4:	61a3      	streq	r3, [r4, #24]
 80191b6:	4620      	mov	r0, r4
 80191b8:	f000 f820 	bl	80191fc <__sfp>
 80191bc:	6060      	str	r0, [r4, #4]
 80191be:	4620      	mov	r0, r4
 80191c0:	f000 f81c 	bl	80191fc <__sfp>
 80191c4:	60a0      	str	r0, [r4, #8]
 80191c6:	4620      	mov	r0, r4
 80191c8:	f000 f818 	bl	80191fc <__sfp>
 80191cc:	2200      	movs	r2, #0
 80191ce:	60e0      	str	r0, [r4, #12]
 80191d0:	2104      	movs	r1, #4
 80191d2:	6860      	ldr	r0, [r4, #4]
 80191d4:	f7ff ff82 	bl	80190dc <std>
 80191d8:	68a0      	ldr	r0, [r4, #8]
 80191da:	2201      	movs	r2, #1
 80191dc:	2109      	movs	r1, #9
 80191de:	f7ff ff7d 	bl	80190dc <std>
 80191e2:	68e0      	ldr	r0, [r4, #12]
 80191e4:	2202      	movs	r2, #2
 80191e6:	2112      	movs	r1, #18
 80191e8:	f7ff ff78 	bl	80190dc <std>
 80191ec:	2301      	movs	r3, #1
 80191ee:	61a3      	str	r3, [r4, #24]
 80191f0:	e7d2      	b.n	8019198 <__sinit+0xc>
 80191f2:	bf00      	nop
 80191f4:	0801d8f4 	.word	0x0801d8f4
 80191f8:	08019125 	.word	0x08019125

080191fc <__sfp>:
 80191fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191fe:	4607      	mov	r7, r0
 8019200:	f7ff ffac 	bl	801915c <__sfp_lock_acquire>
 8019204:	4b1e      	ldr	r3, [pc, #120]	; (8019280 <__sfp+0x84>)
 8019206:	681e      	ldr	r6, [r3, #0]
 8019208:	69b3      	ldr	r3, [r6, #24]
 801920a:	b913      	cbnz	r3, 8019212 <__sfp+0x16>
 801920c:	4630      	mov	r0, r6
 801920e:	f7ff ffbd 	bl	801918c <__sinit>
 8019212:	3648      	adds	r6, #72	; 0x48
 8019214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019218:	3b01      	subs	r3, #1
 801921a:	d503      	bpl.n	8019224 <__sfp+0x28>
 801921c:	6833      	ldr	r3, [r6, #0]
 801921e:	b30b      	cbz	r3, 8019264 <__sfp+0x68>
 8019220:	6836      	ldr	r6, [r6, #0]
 8019222:	e7f7      	b.n	8019214 <__sfp+0x18>
 8019224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019228:	b9d5      	cbnz	r5, 8019260 <__sfp+0x64>
 801922a:	4b16      	ldr	r3, [pc, #88]	; (8019284 <__sfp+0x88>)
 801922c:	60e3      	str	r3, [r4, #12]
 801922e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019232:	6665      	str	r5, [r4, #100]	; 0x64
 8019234:	f000 f86c 	bl	8019310 <__retarget_lock_init_recursive>
 8019238:	f7ff ff96 	bl	8019168 <__sfp_lock_release>
 801923c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019244:	6025      	str	r5, [r4, #0]
 8019246:	61a5      	str	r5, [r4, #24]
 8019248:	2208      	movs	r2, #8
 801924a:	4629      	mov	r1, r5
 801924c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019250:	f000 f87f 	bl	8019352 <memset>
 8019254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801925c:	4620      	mov	r0, r4
 801925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019260:	3468      	adds	r4, #104	; 0x68
 8019262:	e7d9      	b.n	8019218 <__sfp+0x1c>
 8019264:	2104      	movs	r1, #4
 8019266:	4638      	mov	r0, r7
 8019268:	f7ff ff62 	bl	8019130 <__sfmoreglue>
 801926c:	4604      	mov	r4, r0
 801926e:	6030      	str	r0, [r6, #0]
 8019270:	2800      	cmp	r0, #0
 8019272:	d1d5      	bne.n	8019220 <__sfp+0x24>
 8019274:	f7ff ff78 	bl	8019168 <__sfp_lock_release>
 8019278:	230c      	movs	r3, #12
 801927a:	603b      	str	r3, [r7, #0]
 801927c:	e7ee      	b.n	801925c <__sfp+0x60>
 801927e:	bf00      	nop
 8019280:	0801d8f4 	.word	0x0801d8f4
 8019284:	ffff0001 	.word	0xffff0001

08019288 <_fwalk_reent>:
 8019288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801928c:	4606      	mov	r6, r0
 801928e:	4688      	mov	r8, r1
 8019290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019294:	2700      	movs	r7, #0
 8019296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801929a:	f1b9 0901 	subs.w	r9, r9, #1
 801929e:	d505      	bpl.n	80192ac <_fwalk_reent+0x24>
 80192a0:	6824      	ldr	r4, [r4, #0]
 80192a2:	2c00      	cmp	r4, #0
 80192a4:	d1f7      	bne.n	8019296 <_fwalk_reent+0xe>
 80192a6:	4638      	mov	r0, r7
 80192a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192ac:	89ab      	ldrh	r3, [r5, #12]
 80192ae:	2b01      	cmp	r3, #1
 80192b0:	d907      	bls.n	80192c2 <_fwalk_reent+0x3a>
 80192b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80192b6:	3301      	adds	r3, #1
 80192b8:	d003      	beq.n	80192c2 <_fwalk_reent+0x3a>
 80192ba:	4629      	mov	r1, r5
 80192bc:	4630      	mov	r0, r6
 80192be:	47c0      	blx	r8
 80192c0:	4307      	orrs	r7, r0
 80192c2:	3568      	adds	r5, #104	; 0x68
 80192c4:	e7e9      	b.n	801929a <_fwalk_reent+0x12>
	...

080192c8 <__libc_init_array>:
 80192c8:	b570      	push	{r4, r5, r6, lr}
 80192ca:	4d0d      	ldr	r5, [pc, #52]	; (8019300 <__libc_init_array+0x38>)
 80192cc:	4c0d      	ldr	r4, [pc, #52]	; (8019304 <__libc_init_array+0x3c>)
 80192ce:	1b64      	subs	r4, r4, r5
 80192d0:	10a4      	asrs	r4, r4, #2
 80192d2:	2600      	movs	r6, #0
 80192d4:	42a6      	cmp	r6, r4
 80192d6:	d109      	bne.n	80192ec <__libc_init_array+0x24>
 80192d8:	4d0b      	ldr	r5, [pc, #44]	; (8019308 <__libc_init_array+0x40>)
 80192da:	4c0c      	ldr	r4, [pc, #48]	; (801930c <__libc_init_array+0x44>)
 80192dc:	f001 f802 	bl	801a2e4 <_init>
 80192e0:	1b64      	subs	r4, r4, r5
 80192e2:	10a4      	asrs	r4, r4, #2
 80192e4:	2600      	movs	r6, #0
 80192e6:	42a6      	cmp	r6, r4
 80192e8:	d105      	bne.n	80192f6 <__libc_init_array+0x2e>
 80192ea:	bd70      	pop	{r4, r5, r6, pc}
 80192ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80192f0:	4798      	blx	r3
 80192f2:	3601      	adds	r6, #1
 80192f4:	e7ee      	b.n	80192d4 <__libc_init_array+0xc>
 80192f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80192fa:	4798      	blx	r3
 80192fc:	3601      	adds	r6, #1
 80192fe:	e7f2      	b.n	80192e6 <__libc_init_array+0x1e>
 8019300:	0801d9e4 	.word	0x0801d9e4
 8019304:	0801d9e4 	.word	0x0801d9e4
 8019308:	0801d9e4 	.word	0x0801d9e4
 801930c:	0801d9e8 	.word	0x0801d9e8

08019310 <__retarget_lock_init_recursive>:
 8019310:	4770      	bx	lr

08019312 <__retarget_lock_acquire_recursive>:
 8019312:	4770      	bx	lr

08019314 <__retarget_lock_release_recursive>:
 8019314:	4770      	bx	lr

08019316 <memcmp>:
 8019316:	b510      	push	{r4, lr}
 8019318:	3901      	subs	r1, #1
 801931a:	4402      	add	r2, r0
 801931c:	4290      	cmp	r0, r2
 801931e:	d101      	bne.n	8019324 <memcmp+0xe>
 8019320:	2000      	movs	r0, #0
 8019322:	e005      	b.n	8019330 <memcmp+0x1a>
 8019324:	7803      	ldrb	r3, [r0, #0]
 8019326:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801932a:	42a3      	cmp	r3, r4
 801932c:	d001      	beq.n	8019332 <memcmp+0x1c>
 801932e:	1b18      	subs	r0, r3, r4
 8019330:	bd10      	pop	{r4, pc}
 8019332:	3001      	adds	r0, #1
 8019334:	e7f2      	b.n	801931c <memcmp+0x6>

08019336 <memcpy>:
 8019336:	440a      	add	r2, r1
 8019338:	4291      	cmp	r1, r2
 801933a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801933e:	d100      	bne.n	8019342 <memcpy+0xc>
 8019340:	4770      	bx	lr
 8019342:	b510      	push	{r4, lr}
 8019344:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019348:	f803 4f01 	strb.w	r4, [r3, #1]!
 801934c:	4291      	cmp	r1, r2
 801934e:	d1f9      	bne.n	8019344 <memcpy+0xe>
 8019350:	bd10      	pop	{r4, pc}

08019352 <memset>:
 8019352:	4402      	add	r2, r0
 8019354:	4603      	mov	r3, r0
 8019356:	4293      	cmp	r3, r2
 8019358:	d100      	bne.n	801935c <memset+0xa>
 801935a:	4770      	bx	lr
 801935c:	f803 1b01 	strb.w	r1, [r3], #1
 8019360:	e7f9      	b.n	8019356 <memset+0x4>
	...

08019364 <sbrk_aligned>:
 8019364:	b570      	push	{r4, r5, r6, lr}
 8019366:	4e0e      	ldr	r6, [pc, #56]	; (80193a0 <sbrk_aligned+0x3c>)
 8019368:	460c      	mov	r4, r1
 801936a:	6831      	ldr	r1, [r6, #0]
 801936c:	4605      	mov	r5, r0
 801936e:	b911      	cbnz	r1, 8019376 <sbrk_aligned+0x12>
 8019370:	f000 f94c 	bl	801960c <_sbrk_r>
 8019374:	6030      	str	r0, [r6, #0]
 8019376:	4621      	mov	r1, r4
 8019378:	4628      	mov	r0, r5
 801937a:	f000 f947 	bl	801960c <_sbrk_r>
 801937e:	1c43      	adds	r3, r0, #1
 8019380:	d00a      	beq.n	8019398 <sbrk_aligned+0x34>
 8019382:	1cc4      	adds	r4, r0, #3
 8019384:	f024 0403 	bic.w	r4, r4, #3
 8019388:	42a0      	cmp	r0, r4
 801938a:	d007      	beq.n	801939c <sbrk_aligned+0x38>
 801938c:	1a21      	subs	r1, r4, r0
 801938e:	4628      	mov	r0, r5
 8019390:	f000 f93c 	bl	801960c <_sbrk_r>
 8019394:	3001      	adds	r0, #1
 8019396:	d101      	bne.n	801939c <sbrk_aligned+0x38>
 8019398:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801939c:	4620      	mov	r0, r4
 801939e:	bd70      	pop	{r4, r5, r6, pc}
 80193a0:	2004f12c 	.word	0x2004f12c

080193a4 <_malloc_r>:
 80193a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193a8:	1ccd      	adds	r5, r1, #3
 80193aa:	f025 0503 	bic.w	r5, r5, #3
 80193ae:	3508      	adds	r5, #8
 80193b0:	2d0c      	cmp	r5, #12
 80193b2:	bf38      	it	cc
 80193b4:	250c      	movcc	r5, #12
 80193b6:	2d00      	cmp	r5, #0
 80193b8:	4607      	mov	r7, r0
 80193ba:	db01      	blt.n	80193c0 <_malloc_r+0x1c>
 80193bc:	42a9      	cmp	r1, r5
 80193be:	d905      	bls.n	80193cc <_malloc_r+0x28>
 80193c0:	230c      	movs	r3, #12
 80193c2:	603b      	str	r3, [r7, #0]
 80193c4:	2600      	movs	r6, #0
 80193c6:	4630      	mov	r0, r6
 80193c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193cc:	4e2e      	ldr	r6, [pc, #184]	; (8019488 <_malloc_r+0xe4>)
 80193ce:	f000 fa9f 	bl	8019910 <__malloc_lock>
 80193d2:	6833      	ldr	r3, [r6, #0]
 80193d4:	461c      	mov	r4, r3
 80193d6:	bb34      	cbnz	r4, 8019426 <_malloc_r+0x82>
 80193d8:	4629      	mov	r1, r5
 80193da:	4638      	mov	r0, r7
 80193dc:	f7ff ffc2 	bl	8019364 <sbrk_aligned>
 80193e0:	1c43      	adds	r3, r0, #1
 80193e2:	4604      	mov	r4, r0
 80193e4:	d14d      	bne.n	8019482 <_malloc_r+0xde>
 80193e6:	6834      	ldr	r4, [r6, #0]
 80193e8:	4626      	mov	r6, r4
 80193ea:	2e00      	cmp	r6, #0
 80193ec:	d140      	bne.n	8019470 <_malloc_r+0xcc>
 80193ee:	6823      	ldr	r3, [r4, #0]
 80193f0:	4631      	mov	r1, r6
 80193f2:	4638      	mov	r0, r7
 80193f4:	eb04 0803 	add.w	r8, r4, r3
 80193f8:	f000 f908 	bl	801960c <_sbrk_r>
 80193fc:	4580      	cmp	r8, r0
 80193fe:	d13a      	bne.n	8019476 <_malloc_r+0xd2>
 8019400:	6821      	ldr	r1, [r4, #0]
 8019402:	3503      	adds	r5, #3
 8019404:	1a6d      	subs	r5, r5, r1
 8019406:	f025 0503 	bic.w	r5, r5, #3
 801940a:	3508      	adds	r5, #8
 801940c:	2d0c      	cmp	r5, #12
 801940e:	bf38      	it	cc
 8019410:	250c      	movcc	r5, #12
 8019412:	4629      	mov	r1, r5
 8019414:	4638      	mov	r0, r7
 8019416:	f7ff ffa5 	bl	8019364 <sbrk_aligned>
 801941a:	3001      	adds	r0, #1
 801941c:	d02b      	beq.n	8019476 <_malloc_r+0xd2>
 801941e:	6823      	ldr	r3, [r4, #0]
 8019420:	442b      	add	r3, r5
 8019422:	6023      	str	r3, [r4, #0]
 8019424:	e00e      	b.n	8019444 <_malloc_r+0xa0>
 8019426:	6822      	ldr	r2, [r4, #0]
 8019428:	1b52      	subs	r2, r2, r5
 801942a:	d41e      	bmi.n	801946a <_malloc_r+0xc6>
 801942c:	2a0b      	cmp	r2, #11
 801942e:	d916      	bls.n	801945e <_malloc_r+0xba>
 8019430:	1961      	adds	r1, r4, r5
 8019432:	42a3      	cmp	r3, r4
 8019434:	6025      	str	r5, [r4, #0]
 8019436:	bf18      	it	ne
 8019438:	6059      	strne	r1, [r3, #4]
 801943a:	6863      	ldr	r3, [r4, #4]
 801943c:	bf08      	it	eq
 801943e:	6031      	streq	r1, [r6, #0]
 8019440:	5162      	str	r2, [r4, r5]
 8019442:	604b      	str	r3, [r1, #4]
 8019444:	4638      	mov	r0, r7
 8019446:	f104 060b 	add.w	r6, r4, #11
 801944a:	f000 fa67 	bl	801991c <__malloc_unlock>
 801944e:	f026 0607 	bic.w	r6, r6, #7
 8019452:	1d23      	adds	r3, r4, #4
 8019454:	1af2      	subs	r2, r6, r3
 8019456:	d0b6      	beq.n	80193c6 <_malloc_r+0x22>
 8019458:	1b9b      	subs	r3, r3, r6
 801945a:	50a3      	str	r3, [r4, r2]
 801945c:	e7b3      	b.n	80193c6 <_malloc_r+0x22>
 801945e:	6862      	ldr	r2, [r4, #4]
 8019460:	42a3      	cmp	r3, r4
 8019462:	bf0c      	ite	eq
 8019464:	6032      	streq	r2, [r6, #0]
 8019466:	605a      	strne	r2, [r3, #4]
 8019468:	e7ec      	b.n	8019444 <_malloc_r+0xa0>
 801946a:	4623      	mov	r3, r4
 801946c:	6864      	ldr	r4, [r4, #4]
 801946e:	e7b2      	b.n	80193d6 <_malloc_r+0x32>
 8019470:	4634      	mov	r4, r6
 8019472:	6876      	ldr	r6, [r6, #4]
 8019474:	e7b9      	b.n	80193ea <_malloc_r+0x46>
 8019476:	230c      	movs	r3, #12
 8019478:	603b      	str	r3, [r7, #0]
 801947a:	4638      	mov	r0, r7
 801947c:	f000 fa4e 	bl	801991c <__malloc_unlock>
 8019480:	e7a1      	b.n	80193c6 <_malloc_r+0x22>
 8019482:	6025      	str	r5, [r4, #0]
 8019484:	e7de      	b.n	8019444 <_malloc_r+0xa0>
 8019486:	bf00      	nop
 8019488:	2004f128 	.word	0x2004f128

0801948c <iprintf>:
 801948c:	b40f      	push	{r0, r1, r2, r3}
 801948e:	4b0a      	ldr	r3, [pc, #40]	; (80194b8 <iprintf+0x2c>)
 8019490:	b513      	push	{r0, r1, r4, lr}
 8019492:	681c      	ldr	r4, [r3, #0]
 8019494:	b124      	cbz	r4, 80194a0 <iprintf+0x14>
 8019496:	69a3      	ldr	r3, [r4, #24]
 8019498:	b913      	cbnz	r3, 80194a0 <iprintf+0x14>
 801949a:	4620      	mov	r0, r4
 801949c:	f7ff fe76 	bl	801918c <__sinit>
 80194a0:	ab05      	add	r3, sp, #20
 80194a2:	9a04      	ldr	r2, [sp, #16]
 80194a4:	68a1      	ldr	r1, [r4, #8]
 80194a6:	9301      	str	r3, [sp, #4]
 80194a8:	4620      	mov	r0, r4
 80194aa:	f000 fab3 	bl	8019a14 <_vfiprintf_r>
 80194ae:	b002      	add	sp, #8
 80194b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194b4:	b004      	add	sp, #16
 80194b6:	4770      	bx	lr
 80194b8:	20001a5c 	.word	0x20001a5c

080194bc <rand>:
 80194bc:	4b16      	ldr	r3, [pc, #88]	; (8019518 <rand+0x5c>)
 80194be:	b510      	push	{r4, lr}
 80194c0:	681c      	ldr	r4, [r3, #0]
 80194c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80194c4:	b9b3      	cbnz	r3, 80194f4 <rand+0x38>
 80194c6:	2018      	movs	r0, #24
 80194c8:	f000 fa1a 	bl	8019900 <malloc>
 80194cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80194ce:	b928      	cbnz	r0, 80194dc <rand+0x20>
 80194d0:	4602      	mov	r2, r0
 80194d2:	4b12      	ldr	r3, [pc, #72]	; (801951c <rand+0x60>)
 80194d4:	4812      	ldr	r0, [pc, #72]	; (8019520 <rand+0x64>)
 80194d6:	214e      	movs	r1, #78	; 0x4e
 80194d8:	f000 f8fe 	bl	80196d8 <__assert_func>
 80194dc:	4a11      	ldr	r2, [pc, #68]	; (8019524 <rand+0x68>)
 80194de:	4b12      	ldr	r3, [pc, #72]	; (8019528 <rand+0x6c>)
 80194e0:	e9c0 2300 	strd	r2, r3, [r0]
 80194e4:	4b11      	ldr	r3, [pc, #68]	; (801952c <rand+0x70>)
 80194e6:	6083      	str	r3, [r0, #8]
 80194e8:	230b      	movs	r3, #11
 80194ea:	8183      	strh	r3, [r0, #12]
 80194ec:	2201      	movs	r2, #1
 80194ee:	2300      	movs	r3, #0
 80194f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80194f4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80194f6:	4a0e      	ldr	r2, [pc, #56]	; (8019530 <rand+0x74>)
 80194f8:	6920      	ldr	r0, [r4, #16]
 80194fa:	6963      	ldr	r3, [r4, #20]
 80194fc:	490d      	ldr	r1, [pc, #52]	; (8019534 <rand+0x78>)
 80194fe:	4342      	muls	r2, r0
 8019500:	fb01 2203 	mla	r2, r1, r3, r2
 8019504:	fba0 0101 	umull	r0, r1, r0, r1
 8019508:	1c43      	adds	r3, r0, #1
 801950a:	eb42 0001 	adc.w	r0, r2, r1
 801950e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8019512:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019516:	bd10      	pop	{r4, pc}
 8019518:	20001a5c 	.word	0x20001a5c
 801951c:	0801d8f8 	.word	0x0801d8f8
 8019520:	0801d90f 	.word	0x0801d90f
 8019524:	abcd330e 	.word	0xabcd330e
 8019528:	e66d1234 	.word	0xe66d1234
 801952c:	0005deec 	.word	0x0005deec
 8019530:	5851f42d 	.word	0x5851f42d
 8019534:	4c957f2d 	.word	0x4c957f2d

08019538 <cleanup_glue>:
 8019538:	b538      	push	{r3, r4, r5, lr}
 801953a:	460c      	mov	r4, r1
 801953c:	6809      	ldr	r1, [r1, #0]
 801953e:	4605      	mov	r5, r0
 8019540:	b109      	cbz	r1, 8019546 <cleanup_glue+0xe>
 8019542:	f7ff fff9 	bl	8019538 <cleanup_glue>
 8019546:	4621      	mov	r1, r4
 8019548:	4628      	mov	r0, r5
 801954a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801954e:	f000 b9eb 	b.w	8019928 <_free_r>
	...

08019554 <_reclaim_reent>:
 8019554:	4b2c      	ldr	r3, [pc, #176]	; (8019608 <_reclaim_reent+0xb4>)
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	4283      	cmp	r3, r0
 801955a:	b570      	push	{r4, r5, r6, lr}
 801955c:	4604      	mov	r4, r0
 801955e:	d051      	beq.n	8019604 <_reclaim_reent+0xb0>
 8019560:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019562:	b143      	cbz	r3, 8019576 <_reclaim_reent+0x22>
 8019564:	68db      	ldr	r3, [r3, #12]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d14a      	bne.n	8019600 <_reclaim_reent+0xac>
 801956a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801956c:	6819      	ldr	r1, [r3, #0]
 801956e:	b111      	cbz	r1, 8019576 <_reclaim_reent+0x22>
 8019570:	4620      	mov	r0, r4
 8019572:	f000 f9d9 	bl	8019928 <_free_r>
 8019576:	6961      	ldr	r1, [r4, #20]
 8019578:	b111      	cbz	r1, 8019580 <_reclaim_reent+0x2c>
 801957a:	4620      	mov	r0, r4
 801957c:	f000 f9d4 	bl	8019928 <_free_r>
 8019580:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019582:	b111      	cbz	r1, 801958a <_reclaim_reent+0x36>
 8019584:	4620      	mov	r0, r4
 8019586:	f000 f9cf 	bl	8019928 <_free_r>
 801958a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801958c:	b111      	cbz	r1, 8019594 <_reclaim_reent+0x40>
 801958e:	4620      	mov	r0, r4
 8019590:	f000 f9ca 	bl	8019928 <_free_r>
 8019594:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019596:	b111      	cbz	r1, 801959e <_reclaim_reent+0x4a>
 8019598:	4620      	mov	r0, r4
 801959a:	f000 f9c5 	bl	8019928 <_free_r>
 801959e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80195a0:	b111      	cbz	r1, 80195a8 <_reclaim_reent+0x54>
 80195a2:	4620      	mov	r0, r4
 80195a4:	f000 f9c0 	bl	8019928 <_free_r>
 80195a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80195aa:	b111      	cbz	r1, 80195b2 <_reclaim_reent+0x5e>
 80195ac:	4620      	mov	r0, r4
 80195ae:	f000 f9bb 	bl	8019928 <_free_r>
 80195b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80195b4:	b111      	cbz	r1, 80195bc <_reclaim_reent+0x68>
 80195b6:	4620      	mov	r0, r4
 80195b8:	f000 f9b6 	bl	8019928 <_free_r>
 80195bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195be:	b111      	cbz	r1, 80195c6 <_reclaim_reent+0x72>
 80195c0:	4620      	mov	r0, r4
 80195c2:	f000 f9b1 	bl	8019928 <_free_r>
 80195c6:	69a3      	ldr	r3, [r4, #24]
 80195c8:	b1e3      	cbz	r3, 8019604 <_reclaim_reent+0xb0>
 80195ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80195cc:	4620      	mov	r0, r4
 80195ce:	4798      	blx	r3
 80195d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80195d2:	b1b9      	cbz	r1, 8019604 <_reclaim_reent+0xb0>
 80195d4:	4620      	mov	r0, r4
 80195d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195da:	f7ff bfad 	b.w	8019538 <cleanup_glue>
 80195de:	5949      	ldr	r1, [r1, r5]
 80195e0:	b941      	cbnz	r1, 80195f4 <_reclaim_reent+0xa0>
 80195e2:	3504      	adds	r5, #4
 80195e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80195e6:	2d80      	cmp	r5, #128	; 0x80
 80195e8:	68d9      	ldr	r1, [r3, #12]
 80195ea:	d1f8      	bne.n	80195de <_reclaim_reent+0x8a>
 80195ec:	4620      	mov	r0, r4
 80195ee:	f000 f99b 	bl	8019928 <_free_r>
 80195f2:	e7ba      	b.n	801956a <_reclaim_reent+0x16>
 80195f4:	680e      	ldr	r6, [r1, #0]
 80195f6:	4620      	mov	r0, r4
 80195f8:	f000 f996 	bl	8019928 <_free_r>
 80195fc:	4631      	mov	r1, r6
 80195fe:	e7ef      	b.n	80195e0 <_reclaim_reent+0x8c>
 8019600:	2500      	movs	r5, #0
 8019602:	e7ef      	b.n	80195e4 <_reclaim_reent+0x90>
 8019604:	bd70      	pop	{r4, r5, r6, pc}
 8019606:	bf00      	nop
 8019608:	20001a5c 	.word	0x20001a5c

0801960c <_sbrk_r>:
 801960c:	b538      	push	{r3, r4, r5, lr}
 801960e:	4d06      	ldr	r5, [pc, #24]	; (8019628 <_sbrk_r+0x1c>)
 8019610:	2300      	movs	r3, #0
 8019612:	4604      	mov	r4, r0
 8019614:	4608      	mov	r0, r1
 8019616:	602b      	str	r3, [r5, #0]
 8019618:	f7ea fc9e 	bl	8003f58 <_sbrk>
 801961c:	1c43      	adds	r3, r0, #1
 801961e:	d102      	bne.n	8019626 <_sbrk_r+0x1a>
 8019620:	682b      	ldr	r3, [r5, #0]
 8019622:	b103      	cbz	r3, 8019626 <_sbrk_r+0x1a>
 8019624:	6023      	str	r3, [r4, #0]
 8019626:	bd38      	pop	{r3, r4, r5, pc}
 8019628:	2004f130 	.word	0x2004f130

0801962c <__sread>:
 801962c:	b510      	push	{r4, lr}
 801962e:	460c      	mov	r4, r1
 8019630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019634:	f000 fcb2 	bl	8019f9c <_read_r>
 8019638:	2800      	cmp	r0, #0
 801963a:	bfab      	itete	ge
 801963c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801963e:	89a3      	ldrhlt	r3, [r4, #12]
 8019640:	181b      	addge	r3, r3, r0
 8019642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019646:	bfac      	ite	ge
 8019648:	6563      	strge	r3, [r4, #84]	; 0x54
 801964a:	81a3      	strhlt	r3, [r4, #12]
 801964c:	bd10      	pop	{r4, pc}

0801964e <__swrite>:
 801964e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019652:	461f      	mov	r7, r3
 8019654:	898b      	ldrh	r3, [r1, #12]
 8019656:	05db      	lsls	r3, r3, #23
 8019658:	4605      	mov	r5, r0
 801965a:	460c      	mov	r4, r1
 801965c:	4616      	mov	r6, r2
 801965e:	d505      	bpl.n	801966c <__swrite+0x1e>
 8019660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019664:	2302      	movs	r3, #2
 8019666:	2200      	movs	r2, #0
 8019668:	f000 f938 	bl	80198dc <_lseek_r>
 801966c:	89a3      	ldrh	r3, [r4, #12]
 801966e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019676:	81a3      	strh	r3, [r4, #12]
 8019678:	4632      	mov	r2, r6
 801967a:	463b      	mov	r3, r7
 801967c:	4628      	mov	r0, r5
 801967e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019682:	f000 b817 	b.w	80196b4 <_write_r>

08019686 <__sseek>:
 8019686:	b510      	push	{r4, lr}
 8019688:	460c      	mov	r4, r1
 801968a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801968e:	f000 f925 	bl	80198dc <_lseek_r>
 8019692:	1c43      	adds	r3, r0, #1
 8019694:	89a3      	ldrh	r3, [r4, #12]
 8019696:	bf15      	itete	ne
 8019698:	6560      	strne	r0, [r4, #84]	; 0x54
 801969a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801969e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80196a2:	81a3      	strheq	r3, [r4, #12]
 80196a4:	bf18      	it	ne
 80196a6:	81a3      	strhne	r3, [r4, #12]
 80196a8:	bd10      	pop	{r4, pc}

080196aa <__sclose>:
 80196aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196ae:	f000 b831 	b.w	8019714 <_close_r>
	...

080196b4 <_write_r>:
 80196b4:	b538      	push	{r3, r4, r5, lr}
 80196b6:	4d07      	ldr	r5, [pc, #28]	; (80196d4 <_write_r+0x20>)
 80196b8:	4604      	mov	r4, r0
 80196ba:	4608      	mov	r0, r1
 80196bc:	4611      	mov	r1, r2
 80196be:	2200      	movs	r2, #0
 80196c0:	602a      	str	r2, [r5, #0]
 80196c2:	461a      	mov	r2, r3
 80196c4:	f7ea fbf7 	bl	8003eb6 <_write>
 80196c8:	1c43      	adds	r3, r0, #1
 80196ca:	d102      	bne.n	80196d2 <_write_r+0x1e>
 80196cc:	682b      	ldr	r3, [r5, #0]
 80196ce:	b103      	cbz	r3, 80196d2 <_write_r+0x1e>
 80196d0:	6023      	str	r3, [r4, #0]
 80196d2:	bd38      	pop	{r3, r4, r5, pc}
 80196d4:	2004f130 	.word	0x2004f130

080196d8 <__assert_func>:
 80196d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80196da:	4614      	mov	r4, r2
 80196dc:	461a      	mov	r2, r3
 80196de:	4b09      	ldr	r3, [pc, #36]	; (8019704 <__assert_func+0x2c>)
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	4605      	mov	r5, r0
 80196e4:	68d8      	ldr	r0, [r3, #12]
 80196e6:	b14c      	cbz	r4, 80196fc <__assert_func+0x24>
 80196e8:	4b07      	ldr	r3, [pc, #28]	; (8019708 <__assert_func+0x30>)
 80196ea:	9100      	str	r1, [sp, #0]
 80196ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80196f0:	4906      	ldr	r1, [pc, #24]	; (801970c <__assert_func+0x34>)
 80196f2:	462b      	mov	r3, r5
 80196f4:	f000 f8e0 	bl	80198b8 <fiprintf>
 80196f8:	f000 fd22 	bl	801a140 <abort>
 80196fc:	4b04      	ldr	r3, [pc, #16]	; (8019710 <__assert_func+0x38>)
 80196fe:	461c      	mov	r4, r3
 8019700:	e7f3      	b.n	80196ea <__assert_func+0x12>
 8019702:	bf00      	nop
 8019704:	20001a5c 	.word	0x20001a5c
 8019708:	0801d96a 	.word	0x0801d96a
 801970c:	0801d977 	.word	0x0801d977
 8019710:	0801d9a5 	.word	0x0801d9a5

08019714 <_close_r>:
 8019714:	b538      	push	{r3, r4, r5, lr}
 8019716:	4d06      	ldr	r5, [pc, #24]	; (8019730 <_close_r+0x1c>)
 8019718:	2300      	movs	r3, #0
 801971a:	4604      	mov	r4, r0
 801971c:	4608      	mov	r0, r1
 801971e:	602b      	str	r3, [r5, #0]
 8019720:	f7ea fbe5 	bl	8003eee <_close>
 8019724:	1c43      	adds	r3, r0, #1
 8019726:	d102      	bne.n	801972e <_close_r+0x1a>
 8019728:	682b      	ldr	r3, [r5, #0]
 801972a:	b103      	cbz	r3, 801972e <_close_r+0x1a>
 801972c:	6023      	str	r3, [r4, #0]
 801972e:	bd38      	pop	{r3, r4, r5, pc}
 8019730:	2004f130 	.word	0x2004f130

08019734 <__sflush_r>:
 8019734:	898a      	ldrh	r2, [r1, #12]
 8019736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801973a:	4605      	mov	r5, r0
 801973c:	0710      	lsls	r0, r2, #28
 801973e:	460c      	mov	r4, r1
 8019740:	d458      	bmi.n	80197f4 <__sflush_r+0xc0>
 8019742:	684b      	ldr	r3, [r1, #4]
 8019744:	2b00      	cmp	r3, #0
 8019746:	dc05      	bgt.n	8019754 <__sflush_r+0x20>
 8019748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801974a:	2b00      	cmp	r3, #0
 801974c:	dc02      	bgt.n	8019754 <__sflush_r+0x20>
 801974e:	2000      	movs	r0, #0
 8019750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019756:	2e00      	cmp	r6, #0
 8019758:	d0f9      	beq.n	801974e <__sflush_r+0x1a>
 801975a:	2300      	movs	r3, #0
 801975c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019760:	682f      	ldr	r7, [r5, #0]
 8019762:	602b      	str	r3, [r5, #0]
 8019764:	d032      	beq.n	80197cc <__sflush_r+0x98>
 8019766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019768:	89a3      	ldrh	r3, [r4, #12]
 801976a:	075a      	lsls	r2, r3, #29
 801976c:	d505      	bpl.n	801977a <__sflush_r+0x46>
 801976e:	6863      	ldr	r3, [r4, #4]
 8019770:	1ac0      	subs	r0, r0, r3
 8019772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019774:	b10b      	cbz	r3, 801977a <__sflush_r+0x46>
 8019776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019778:	1ac0      	subs	r0, r0, r3
 801977a:	2300      	movs	r3, #0
 801977c:	4602      	mov	r2, r0
 801977e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019780:	6a21      	ldr	r1, [r4, #32]
 8019782:	4628      	mov	r0, r5
 8019784:	47b0      	blx	r6
 8019786:	1c43      	adds	r3, r0, #1
 8019788:	89a3      	ldrh	r3, [r4, #12]
 801978a:	d106      	bne.n	801979a <__sflush_r+0x66>
 801978c:	6829      	ldr	r1, [r5, #0]
 801978e:	291d      	cmp	r1, #29
 8019790:	d82c      	bhi.n	80197ec <__sflush_r+0xb8>
 8019792:	4a2a      	ldr	r2, [pc, #168]	; (801983c <__sflush_r+0x108>)
 8019794:	40ca      	lsrs	r2, r1
 8019796:	07d6      	lsls	r6, r2, #31
 8019798:	d528      	bpl.n	80197ec <__sflush_r+0xb8>
 801979a:	2200      	movs	r2, #0
 801979c:	6062      	str	r2, [r4, #4]
 801979e:	04d9      	lsls	r1, r3, #19
 80197a0:	6922      	ldr	r2, [r4, #16]
 80197a2:	6022      	str	r2, [r4, #0]
 80197a4:	d504      	bpl.n	80197b0 <__sflush_r+0x7c>
 80197a6:	1c42      	adds	r2, r0, #1
 80197a8:	d101      	bne.n	80197ae <__sflush_r+0x7a>
 80197aa:	682b      	ldr	r3, [r5, #0]
 80197ac:	b903      	cbnz	r3, 80197b0 <__sflush_r+0x7c>
 80197ae:	6560      	str	r0, [r4, #84]	; 0x54
 80197b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80197b2:	602f      	str	r7, [r5, #0]
 80197b4:	2900      	cmp	r1, #0
 80197b6:	d0ca      	beq.n	801974e <__sflush_r+0x1a>
 80197b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197bc:	4299      	cmp	r1, r3
 80197be:	d002      	beq.n	80197c6 <__sflush_r+0x92>
 80197c0:	4628      	mov	r0, r5
 80197c2:	f000 f8b1 	bl	8019928 <_free_r>
 80197c6:	2000      	movs	r0, #0
 80197c8:	6360      	str	r0, [r4, #52]	; 0x34
 80197ca:	e7c1      	b.n	8019750 <__sflush_r+0x1c>
 80197cc:	6a21      	ldr	r1, [r4, #32]
 80197ce:	2301      	movs	r3, #1
 80197d0:	4628      	mov	r0, r5
 80197d2:	47b0      	blx	r6
 80197d4:	1c41      	adds	r1, r0, #1
 80197d6:	d1c7      	bne.n	8019768 <__sflush_r+0x34>
 80197d8:	682b      	ldr	r3, [r5, #0]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d0c4      	beq.n	8019768 <__sflush_r+0x34>
 80197de:	2b1d      	cmp	r3, #29
 80197e0:	d001      	beq.n	80197e6 <__sflush_r+0xb2>
 80197e2:	2b16      	cmp	r3, #22
 80197e4:	d101      	bne.n	80197ea <__sflush_r+0xb6>
 80197e6:	602f      	str	r7, [r5, #0]
 80197e8:	e7b1      	b.n	801974e <__sflush_r+0x1a>
 80197ea:	89a3      	ldrh	r3, [r4, #12]
 80197ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197f0:	81a3      	strh	r3, [r4, #12]
 80197f2:	e7ad      	b.n	8019750 <__sflush_r+0x1c>
 80197f4:	690f      	ldr	r7, [r1, #16]
 80197f6:	2f00      	cmp	r7, #0
 80197f8:	d0a9      	beq.n	801974e <__sflush_r+0x1a>
 80197fa:	0793      	lsls	r3, r2, #30
 80197fc:	680e      	ldr	r6, [r1, #0]
 80197fe:	bf08      	it	eq
 8019800:	694b      	ldreq	r3, [r1, #20]
 8019802:	600f      	str	r7, [r1, #0]
 8019804:	bf18      	it	ne
 8019806:	2300      	movne	r3, #0
 8019808:	eba6 0807 	sub.w	r8, r6, r7
 801980c:	608b      	str	r3, [r1, #8]
 801980e:	f1b8 0f00 	cmp.w	r8, #0
 8019812:	dd9c      	ble.n	801974e <__sflush_r+0x1a>
 8019814:	6a21      	ldr	r1, [r4, #32]
 8019816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019818:	4643      	mov	r3, r8
 801981a:	463a      	mov	r2, r7
 801981c:	4628      	mov	r0, r5
 801981e:	47b0      	blx	r6
 8019820:	2800      	cmp	r0, #0
 8019822:	dc06      	bgt.n	8019832 <__sflush_r+0xfe>
 8019824:	89a3      	ldrh	r3, [r4, #12]
 8019826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801982a:	81a3      	strh	r3, [r4, #12]
 801982c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019830:	e78e      	b.n	8019750 <__sflush_r+0x1c>
 8019832:	4407      	add	r7, r0
 8019834:	eba8 0800 	sub.w	r8, r8, r0
 8019838:	e7e9      	b.n	801980e <__sflush_r+0xda>
 801983a:	bf00      	nop
 801983c:	20400001 	.word	0x20400001

08019840 <_fflush_r>:
 8019840:	b538      	push	{r3, r4, r5, lr}
 8019842:	690b      	ldr	r3, [r1, #16]
 8019844:	4605      	mov	r5, r0
 8019846:	460c      	mov	r4, r1
 8019848:	b913      	cbnz	r3, 8019850 <_fflush_r+0x10>
 801984a:	2500      	movs	r5, #0
 801984c:	4628      	mov	r0, r5
 801984e:	bd38      	pop	{r3, r4, r5, pc}
 8019850:	b118      	cbz	r0, 801985a <_fflush_r+0x1a>
 8019852:	6983      	ldr	r3, [r0, #24]
 8019854:	b90b      	cbnz	r3, 801985a <_fflush_r+0x1a>
 8019856:	f7ff fc99 	bl	801918c <__sinit>
 801985a:	4b14      	ldr	r3, [pc, #80]	; (80198ac <_fflush_r+0x6c>)
 801985c:	429c      	cmp	r4, r3
 801985e:	d11b      	bne.n	8019898 <_fflush_r+0x58>
 8019860:	686c      	ldr	r4, [r5, #4]
 8019862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d0ef      	beq.n	801984a <_fflush_r+0xa>
 801986a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801986c:	07d0      	lsls	r0, r2, #31
 801986e:	d404      	bmi.n	801987a <_fflush_r+0x3a>
 8019870:	0599      	lsls	r1, r3, #22
 8019872:	d402      	bmi.n	801987a <_fflush_r+0x3a>
 8019874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019876:	f7ff fd4c 	bl	8019312 <__retarget_lock_acquire_recursive>
 801987a:	4628      	mov	r0, r5
 801987c:	4621      	mov	r1, r4
 801987e:	f7ff ff59 	bl	8019734 <__sflush_r>
 8019882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019884:	07da      	lsls	r2, r3, #31
 8019886:	4605      	mov	r5, r0
 8019888:	d4e0      	bmi.n	801984c <_fflush_r+0xc>
 801988a:	89a3      	ldrh	r3, [r4, #12]
 801988c:	059b      	lsls	r3, r3, #22
 801988e:	d4dd      	bmi.n	801984c <_fflush_r+0xc>
 8019890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019892:	f7ff fd3f 	bl	8019314 <__retarget_lock_release_recursive>
 8019896:	e7d9      	b.n	801984c <_fflush_r+0xc>
 8019898:	4b05      	ldr	r3, [pc, #20]	; (80198b0 <_fflush_r+0x70>)
 801989a:	429c      	cmp	r4, r3
 801989c:	d101      	bne.n	80198a2 <_fflush_r+0x62>
 801989e:	68ac      	ldr	r4, [r5, #8]
 80198a0:	e7df      	b.n	8019862 <_fflush_r+0x22>
 80198a2:	4b04      	ldr	r3, [pc, #16]	; (80198b4 <_fflush_r+0x74>)
 80198a4:	429c      	cmp	r4, r3
 80198a6:	bf08      	it	eq
 80198a8:	68ec      	ldreq	r4, [r5, #12]
 80198aa:	e7da      	b.n	8019862 <_fflush_r+0x22>
 80198ac:	0801d8b4 	.word	0x0801d8b4
 80198b0:	0801d8d4 	.word	0x0801d8d4
 80198b4:	0801d894 	.word	0x0801d894

080198b8 <fiprintf>:
 80198b8:	b40e      	push	{r1, r2, r3}
 80198ba:	b503      	push	{r0, r1, lr}
 80198bc:	4601      	mov	r1, r0
 80198be:	ab03      	add	r3, sp, #12
 80198c0:	4805      	ldr	r0, [pc, #20]	; (80198d8 <fiprintf+0x20>)
 80198c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80198c6:	6800      	ldr	r0, [r0, #0]
 80198c8:	9301      	str	r3, [sp, #4]
 80198ca:	f000 f8a3 	bl	8019a14 <_vfiprintf_r>
 80198ce:	b002      	add	sp, #8
 80198d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80198d4:	b003      	add	sp, #12
 80198d6:	4770      	bx	lr
 80198d8:	20001a5c 	.word	0x20001a5c

080198dc <_lseek_r>:
 80198dc:	b538      	push	{r3, r4, r5, lr}
 80198de:	4d07      	ldr	r5, [pc, #28]	; (80198fc <_lseek_r+0x20>)
 80198e0:	4604      	mov	r4, r0
 80198e2:	4608      	mov	r0, r1
 80198e4:	4611      	mov	r1, r2
 80198e6:	2200      	movs	r2, #0
 80198e8:	602a      	str	r2, [r5, #0]
 80198ea:	461a      	mov	r2, r3
 80198ec:	f7ea fb26 	bl	8003f3c <_lseek>
 80198f0:	1c43      	adds	r3, r0, #1
 80198f2:	d102      	bne.n	80198fa <_lseek_r+0x1e>
 80198f4:	682b      	ldr	r3, [r5, #0]
 80198f6:	b103      	cbz	r3, 80198fa <_lseek_r+0x1e>
 80198f8:	6023      	str	r3, [r4, #0]
 80198fa:	bd38      	pop	{r3, r4, r5, pc}
 80198fc:	2004f130 	.word	0x2004f130

08019900 <malloc>:
 8019900:	4b02      	ldr	r3, [pc, #8]	; (801990c <malloc+0xc>)
 8019902:	4601      	mov	r1, r0
 8019904:	6818      	ldr	r0, [r3, #0]
 8019906:	f7ff bd4d 	b.w	80193a4 <_malloc_r>
 801990a:	bf00      	nop
 801990c:	20001a5c 	.word	0x20001a5c

08019910 <__malloc_lock>:
 8019910:	4801      	ldr	r0, [pc, #4]	; (8019918 <__malloc_lock+0x8>)
 8019912:	f7ff bcfe 	b.w	8019312 <__retarget_lock_acquire_recursive>
 8019916:	bf00      	nop
 8019918:	2004f124 	.word	0x2004f124

0801991c <__malloc_unlock>:
 801991c:	4801      	ldr	r0, [pc, #4]	; (8019924 <__malloc_unlock+0x8>)
 801991e:	f7ff bcf9 	b.w	8019314 <__retarget_lock_release_recursive>
 8019922:	bf00      	nop
 8019924:	2004f124 	.word	0x2004f124

08019928 <_free_r>:
 8019928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801992a:	2900      	cmp	r1, #0
 801992c:	d044      	beq.n	80199b8 <_free_r+0x90>
 801992e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019932:	9001      	str	r0, [sp, #4]
 8019934:	2b00      	cmp	r3, #0
 8019936:	f1a1 0404 	sub.w	r4, r1, #4
 801993a:	bfb8      	it	lt
 801993c:	18e4      	addlt	r4, r4, r3
 801993e:	f7ff ffe7 	bl	8019910 <__malloc_lock>
 8019942:	4a1e      	ldr	r2, [pc, #120]	; (80199bc <_free_r+0x94>)
 8019944:	9801      	ldr	r0, [sp, #4]
 8019946:	6813      	ldr	r3, [r2, #0]
 8019948:	b933      	cbnz	r3, 8019958 <_free_r+0x30>
 801994a:	6063      	str	r3, [r4, #4]
 801994c:	6014      	str	r4, [r2, #0]
 801994e:	b003      	add	sp, #12
 8019950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019954:	f7ff bfe2 	b.w	801991c <__malloc_unlock>
 8019958:	42a3      	cmp	r3, r4
 801995a:	d908      	bls.n	801996e <_free_r+0x46>
 801995c:	6825      	ldr	r5, [r4, #0]
 801995e:	1961      	adds	r1, r4, r5
 8019960:	428b      	cmp	r3, r1
 8019962:	bf01      	itttt	eq
 8019964:	6819      	ldreq	r1, [r3, #0]
 8019966:	685b      	ldreq	r3, [r3, #4]
 8019968:	1949      	addeq	r1, r1, r5
 801996a:	6021      	streq	r1, [r4, #0]
 801996c:	e7ed      	b.n	801994a <_free_r+0x22>
 801996e:	461a      	mov	r2, r3
 8019970:	685b      	ldr	r3, [r3, #4]
 8019972:	b10b      	cbz	r3, 8019978 <_free_r+0x50>
 8019974:	42a3      	cmp	r3, r4
 8019976:	d9fa      	bls.n	801996e <_free_r+0x46>
 8019978:	6811      	ldr	r1, [r2, #0]
 801997a:	1855      	adds	r5, r2, r1
 801997c:	42a5      	cmp	r5, r4
 801997e:	d10b      	bne.n	8019998 <_free_r+0x70>
 8019980:	6824      	ldr	r4, [r4, #0]
 8019982:	4421      	add	r1, r4
 8019984:	1854      	adds	r4, r2, r1
 8019986:	42a3      	cmp	r3, r4
 8019988:	6011      	str	r1, [r2, #0]
 801998a:	d1e0      	bne.n	801994e <_free_r+0x26>
 801998c:	681c      	ldr	r4, [r3, #0]
 801998e:	685b      	ldr	r3, [r3, #4]
 8019990:	6053      	str	r3, [r2, #4]
 8019992:	4421      	add	r1, r4
 8019994:	6011      	str	r1, [r2, #0]
 8019996:	e7da      	b.n	801994e <_free_r+0x26>
 8019998:	d902      	bls.n	80199a0 <_free_r+0x78>
 801999a:	230c      	movs	r3, #12
 801999c:	6003      	str	r3, [r0, #0]
 801999e:	e7d6      	b.n	801994e <_free_r+0x26>
 80199a0:	6825      	ldr	r5, [r4, #0]
 80199a2:	1961      	adds	r1, r4, r5
 80199a4:	428b      	cmp	r3, r1
 80199a6:	bf04      	itt	eq
 80199a8:	6819      	ldreq	r1, [r3, #0]
 80199aa:	685b      	ldreq	r3, [r3, #4]
 80199ac:	6063      	str	r3, [r4, #4]
 80199ae:	bf04      	itt	eq
 80199b0:	1949      	addeq	r1, r1, r5
 80199b2:	6021      	streq	r1, [r4, #0]
 80199b4:	6054      	str	r4, [r2, #4]
 80199b6:	e7ca      	b.n	801994e <_free_r+0x26>
 80199b8:	b003      	add	sp, #12
 80199ba:	bd30      	pop	{r4, r5, pc}
 80199bc:	2004f128 	.word	0x2004f128

080199c0 <__sfputc_r>:
 80199c0:	6893      	ldr	r3, [r2, #8]
 80199c2:	3b01      	subs	r3, #1
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	b410      	push	{r4}
 80199c8:	6093      	str	r3, [r2, #8]
 80199ca:	da08      	bge.n	80199de <__sfputc_r+0x1e>
 80199cc:	6994      	ldr	r4, [r2, #24]
 80199ce:	42a3      	cmp	r3, r4
 80199d0:	db01      	blt.n	80199d6 <__sfputc_r+0x16>
 80199d2:	290a      	cmp	r1, #10
 80199d4:	d103      	bne.n	80199de <__sfputc_r+0x1e>
 80199d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199da:	f000 baf1 	b.w	8019fc0 <__swbuf_r>
 80199de:	6813      	ldr	r3, [r2, #0]
 80199e0:	1c58      	adds	r0, r3, #1
 80199e2:	6010      	str	r0, [r2, #0]
 80199e4:	7019      	strb	r1, [r3, #0]
 80199e6:	4608      	mov	r0, r1
 80199e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199ec:	4770      	bx	lr

080199ee <__sfputs_r>:
 80199ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199f0:	4606      	mov	r6, r0
 80199f2:	460f      	mov	r7, r1
 80199f4:	4614      	mov	r4, r2
 80199f6:	18d5      	adds	r5, r2, r3
 80199f8:	42ac      	cmp	r4, r5
 80199fa:	d101      	bne.n	8019a00 <__sfputs_r+0x12>
 80199fc:	2000      	movs	r0, #0
 80199fe:	e007      	b.n	8019a10 <__sfputs_r+0x22>
 8019a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a04:	463a      	mov	r2, r7
 8019a06:	4630      	mov	r0, r6
 8019a08:	f7ff ffda 	bl	80199c0 <__sfputc_r>
 8019a0c:	1c43      	adds	r3, r0, #1
 8019a0e:	d1f3      	bne.n	80199f8 <__sfputs_r+0xa>
 8019a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019a14 <_vfiprintf_r>:
 8019a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a18:	460d      	mov	r5, r1
 8019a1a:	b09d      	sub	sp, #116	; 0x74
 8019a1c:	4614      	mov	r4, r2
 8019a1e:	4698      	mov	r8, r3
 8019a20:	4606      	mov	r6, r0
 8019a22:	b118      	cbz	r0, 8019a2c <_vfiprintf_r+0x18>
 8019a24:	6983      	ldr	r3, [r0, #24]
 8019a26:	b90b      	cbnz	r3, 8019a2c <_vfiprintf_r+0x18>
 8019a28:	f7ff fbb0 	bl	801918c <__sinit>
 8019a2c:	4b89      	ldr	r3, [pc, #548]	; (8019c54 <_vfiprintf_r+0x240>)
 8019a2e:	429d      	cmp	r5, r3
 8019a30:	d11b      	bne.n	8019a6a <_vfiprintf_r+0x56>
 8019a32:	6875      	ldr	r5, [r6, #4]
 8019a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019a36:	07d9      	lsls	r1, r3, #31
 8019a38:	d405      	bmi.n	8019a46 <_vfiprintf_r+0x32>
 8019a3a:	89ab      	ldrh	r3, [r5, #12]
 8019a3c:	059a      	lsls	r2, r3, #22
 8019a3e:	d402      	bmi.n	8019a46 <_vfiprintf_r+0x32>
 8019a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a42:	f7ff fc66 	bl	8019312 <__retarget_lock_acquire_recursive>
 8019a46:	89ab      	ldrh	r3, [r5, #12]
 8019a48:	071b      	lsls	r3, r3, #28
 8019a4a:	d501      	bpl.n	8019a50 <_vfiprintf_r+0x3c>
 8019a4c:	692b      	ldr	r3, [r5, #16]
 8019a4e:	b9eb      	cbnz	r3, 8019a8c <_vfiprintf_r+0x78>
 8019a50:	4629      	mov	r1, r5
 8019a52:	4630      	mov	r0, r6
 8019a54:	f000 fb06 	bl	801a064 <__swsetup_r>
 8019a58:	b1c0      	cbz	r0, 8019a8c <_vfiprintf_r+0x78>
 8019a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019a5c:	07dc      	lsls	r4, r3, #31
 8019a5e:	d50e      	bpl.n	8019a7e <_vfiprintf_r+0x6a>
 8019a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a64:	b01d      	add	sp, #116	; 0x74
 8019a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a6a:	4b7b      	ldr	r3, [pc, #492]	; (8019c58 <_vfiprintf_r+0x244>)
 8019a6c:	429d      	cmp	r5, r3
 8019a6e:	d101      	bne.n	8019a74 <_vfiprintf_r+0x60>
 8019a70:	68b5      	ldr	r5, [r6, #8]
 8019a72:	e7df      	b.n	8019a34 <_vfiprintf_r+0x20>
 8019a74:	4b79      	ldr	r3, [pc, #484]	; (8019c5c <_vfiprintf_r+0x248>)
 8019a76:	429d      	cmp	r5, r3
 8019a78:	bf08      	it	eq
 8019a7a:	68f5      	ldreq	r5, [r6, #12]
 8019a7c:	e7da      	b.n	8019a34 <_vfiprintf_r+0x20>
 8019a7e:	89ab      	ldrh	r3, [r5, #12]
 8019a80:	0598      	lsls	r0, r3, #22
 8019a82:	d4ed      	bmi.n	8019a60 <_vfiprintf_r+0x4c>
 8019a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a86:	f7ff fc45 	bl	8019314 <__retarget_lock_release_recursive>
 8019a8a:	e7e9      	b.n	8019a60 <_vfiprintf_r+0x4c>
 8019a8c:	2300      	movs	r3, #0
 8019a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8019a90:	2320      	movs	r3, #32
 8019a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a9a:	2330      	movs	r3, #48	; 0x30
 8019a9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019c60 <_vfiprintf_r+0x24c>
 8019aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019aa4:	f04f 0901 	mov.w	r9, #1
 8019aa8:	4623      	mov	r3, r4
 8019aaa:	469a      	mov	sl, r3
 8019aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ab0:	b10a      	cbz	r2, 8019ab6 <_vfiprintf_r+0xa2>
 8019ab2:	2a25      	cmp	r2, #37	; 0x25
 8019ab4:	d1f9      	bne.n	8019aaa <_vfiprintf_r+0x96>
 8019ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8019aba:	d00b      	beq.n	8019ad4 <_vfiprintf_r+0xc0>
 8019abc:	465b      	mov	r3, fp
 8019abe:	4622      	mov	r2, r4
 8019ac0:	4629      	mov	r1, r5
 8019ac2:	4630      	mov	r0, r6
 8019ac4:	f7ff ff93 	bl	80199ee <__sfputs_r>
 8019ac8:	3001      	adds	r0, #1
 8019aca:	f000 80aa 	beq.w	8019c22 <_vfiprintf_r+0x20e>
 8019ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ad0:	445a      	add	r2, fp
 8019ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8019ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	f000 80a2 	beq.w	8019c22 <_vfiprintf_r+0x20e>
 8019ade:	2300      	movs	r3, #0
 8019ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ae8:	f10a 0a01 	add.w	sl, sl, #1
 8019aec:	9304      	str	r3, [sp, #16]
 8019aee:	9307      	str	r3, [sp, #28]
 8019af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019af4:	931a      	str	r3, [sp, #104]	; 0x68
 8019af6:	4654      	mov	r4, sl
 8019af8:	2205      	movs	r2, #5
 8019afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019afe:	4858      	ldr	r0, [pc, #352]	; (8019c60 <_vfiprintf_r+0x24c>)
 8019b00:	f7e6 fb8e 	bl	8000220 <memchr>
 8019b04:	9a04      	ldr	r2, [sp, #16]
 8019b06:	b9d8      	cbnz	r0, 8019b40 <_vfiprintf_r+0x12c>
 8019b08:	06d1      	lsls	r1, r2, #27
 8019b0a:	bf44      	itt	mi
 8019b0c:	2320      	movmi	r3, #32
 8019b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b12:	0713      	lsls	r3, r2, #28
 8019b14:	bf44      	itt	mi
 8019b16:	232b      	movmi	r3, #43	; 0x2b
 8019b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8019b20:	2b2a      	cmp	r3, #42	; 0x2a
 8019b22:	d015      	beq.n	8019b50 <_vfiprintf_r+0x13c>
 8019b24:	9a07      	ldr	r2, [sp, #28]
 8019b26:	4654      	mov	r4, sl
 8019b28:	2000      	movs	r0, #0
 8019b2a:	f04f 0c0a 	mov.w	ip, #10
 8019b2e:	4621      	mov	r1, r4
 8019b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b34:	3b30      	subs	r3, #48	; 0x30
 8019b36:	2b09      	cmp	r3, #9
 8019b38:	d94e      	bls.n	8019bd8 <_vfiprintf_r+0x1c4>
 8019b3a:	b1b0      	cbz	r0, 8019b6a <_vfiprintf_r+0x156>
 8019b3c:	9207      	str	r2, [sp, #28]
 8019b3e:	e014      	b.n	8019b6a <_vfiprintf_r+0x156>
 8019b40:	eba0 0308 	sub.w	r3, r0, r8
 8019b44:	fa09 f303 	lsl.w	r3, r9, r3
 8019b48:	4313      	orrs	r3, r2
 8019b4a:	9304      	str	r3, [sp, #16]
 8019b4c:	46a2      	mov	sl, r4
 8019b4e:	e7d2      	b.n	8019af6 <_vfiprintf_r+0xe2>
 8019b50:	9b03      	ldr	r3, [sp, #12]
 8019b52:	1d19      	adds	r1, r3, #4
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	9103      	str	r1, [sp, #12]
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	bfbb      	ittet	lt
 8019b5c:	425b      	neglt	r3, r3
 8019b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8019b62:	9307      	strge	r3, [sp, #28]
 8019b64:	9307      	strlt	r3, [sp, #28]
 8019b66:	bfb8      	it	lt
 8019b68:	9204      	strlt	r2, [sp, #16]
 8019b6a:	7823      	ldrb	r3, [r4, #0]
 8019b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8019b6e:	d10c      	bne.n	8019b8a <_vfiprintf_r+0x176>
 8019b70:	7863      	ldrb	r3, [r4, #1]
 8019b72:	2b2a      	cmp	r3, #42	; 0x2a
 8019b74:	d135      	bne.n	8019be2 <_vfiprintf_r+0x1ce>
 8019b76:	9b03      	ldr	r3, [sp, #12]
 8019b78:	1d1a      	adds	r2, r3, #4
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	9203      	str	r2, [sp, #12]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	bfb8      	it	lt
 8019b82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019b86:	3402      	adds	r4, #2
 8019b88:	9305      	str	r3, [sp, #20]
 8019b8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019c70 <_vfiprintf_r+0x25c>
 8019b8e:	7821      	ldrb	r1, [r4, #0]
 8019b90:	2203      	movs	r2, #3
 8019b92:	4650      	mov	r0, sl
 8019b94:	f7e6 fb44 	bl	8000220 <memchr>
 8019b98:	b140      	cbz	r0, 8019bac <_vfiprintf_r+0x198>
 8019b9a:	2340      	movs	r3, #64	; 0x40
 8019b9c:	eba0 000a 	sub.w	r0, r0, sl
 8019ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8019ba4:	9b04      	ldr	r3, [sp, #16]
 8019ba6:	4303      	orrs	r3, r0
 8019ba8:	3401      	adds	r4, #1
 8019baa:	9304      	str	r3, [sp, #16]
 8019bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bb0:	482c      	ldr	r0, [pc, #176]	; (8019c64 <_vfiprintf_r+0x250>)
 8019bb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019bb6:	2206      	movs	r2, #6
 8019bb8:	f7e6 fb32 	bl	8000220 <memchr>
 8019bbc:	2800      	cmp	r0, #0
 8019bbe:	d03f      	beq.n	8019c40 <_vfiprintf_r+0x22c>
 8019bc0:	4b29      	ldr	r3, [pc, #164]	; (8019c68 <_vfiprintf_r+0x254>)
 8019bc2:	bb1b      	cbnz	r3, 8019c0c <_vfiprintf_r+0x1f8>
 8019bc4:	9b03      	ldr	r3, [sp, #12]
 8019bc6:	3307      	adds	r3, #7
 8019bc8:	f023 0307 	bic.w	r3, r3, #7
 8019bcc:	3308      	adds	r3, #8
 8019bce:	9303      	str	r3, [sp, #12]
 8019bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019bd2:	443b      	add	r3, r7
 8019bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8019bd6:	e767      	b.n	8019aa8 <_vfiprintf_r+0x94>
 8019bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8019bdc:	460c      	mov	r4, r1
 8019bde:	2001      	movs	r0, #1
 8019be0:	e7a5      	b.n	8019b2e <_vfiprintf_r+0x11a>
 8019be2:	2300      	movs	r3, #0
 8019be4:	3401      	adds	r4, #1
 8019be6:	9305      	str	r3, [sp, #20]
 8019be8:	4619      	mov	r1, r3
 8019bea:	f04f 0c0a 	mov.w	ip, #10
 8019bee:	4620      	mov	r0, r4
 8019bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019bf4:	3a30      	subs	r2, #48	; 0x30
 8019bf6:	2a09      	cmp	r2, #9
 8019bf8:	d903      	bls.n	8019c02 <_vfiprintf_r+0x1ee>
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d0c5      	beq.n	8019b8a <_vfiprintf_r+0x176>
 8019bfe:	9105      	str	r1, [sp, #20]
 8019c00:	e7c3      	b.n	8019b8a <_vfiprintf_r+0x176>
 8019c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c06:	4604      	mov	r4, r0
 8019c08:	2301      	movs	r3, #1
 8019c0a:	e7f0      	b.n	8019bee <_vfiprintf_r+0x1da>
 8019c0c:	ab03      	add	r3, sp, #12
 8019c0e:	9300      	str	r3, [sp, #0]
 8019c10:	462a      	mov	r2, r5
 8019c12:	4b16      	ldr	r3, [pc, #88]	; (8019c6c <_vfiprintf_r+0x258>)
 8019c14:	a904      	add	r1, sp, #16
 8019c16:	4630      	mov	r0, r6
 8019c18:	f3af 8000 	nop.w
 8019c1c:	4607      	mov	r7, r0
 8019c1e:	1c78      	adds	r0, r7, #1
 8019c20:	d1d6      	bne.n	8019bd0 <_vfiprintf_r+0x1bc>
 8019c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019c24:	07d9      	lsls	r1, r3, #31
 8019c26:	d405      	bmi.n	8019c34 <_vfiprintf_r+0x220>
 8019c28:	89ab      	ldrh	r3, [r5, #12]
 8019c2a:	059a      	lsls	r2, r3, #22
 8019c2c:	d402      	bmi.n	8019c34 <_vfiprintf_r+0x220>
 8019c2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019c30:	f7ff fb70 	bl	8019314 <__retarget_lock_release_recursive>
 8019c34:	89ab      	ldrh	r3, [r5, #12]
 8019c36:	065b      	lsls	r3, r3, #25
 8019c38:	f53f af12 	bmi.w	8019a60 <_vfiprintf_r+0x4c>
 8019c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c3e:	e711      	b.n	8019a64 <_vfiprintf_r+0x50>
 8019c40:	ab03      	add	r3, sp, #12
 8019c42:	9300      	str	r3, [sp, #0]
 8019c44:	462a      	mov	r2, r5
 8019c46:	4b09      	ldr	r3, [pc, #36]	; (8019c6c <_vfiprintf_r+0x258>)
 8019c48:	a904      	add	r1, sp, #16
 8019c4a:	4630      	mov	r0, r6
 8019c4c:	f000 f880 	bl	8019d50 <_printf_i>
 8019c50:	e7e4      	b.n	8019c1c <_vfiprintf_r+0x208>
 8019c52:	bf00      	nop
 8019c54:	0801d8b4 	.word	0x0801d8b4
 8019c58:	0801d8d4 	.word	0x0801d8d4
 8019c5c:	0801d894 	.word	0x0801d894
 8019c60:	0801d9a6 	.word	0x0801d9a6
 8019c64:	0801d9b0 	.word	0x0801d9b0
 8019c68:	00000000 	.word	0x00000000
 8019c6c:	080199ef 	.word	0x080199ef
 8019c70:	0801d9ac 	.word	0x0801d9ac

08019c74 <_printf_common>:
 8019c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c78:	4616      	mov	r6, r2
 8019c7a:	4699      	mov	r9, r3
 8019c7c:	688a      	ldr	r2, [r1, #8]
 8019c7e:	690b      	ldr	r3, [r1, #16]
 8019c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019c84:	4293      	cmp	r3, r2
 8019c86:	bfb8      	it	lt
 8019c88:	4613      	movlt	r3, r2
 8019c8a:	6033      	str	r3, [r6, #0]
 8019c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019c90:	4607      	mov	r7, r0
 8019c92:	460c      	mov	r4, r1
 8019c94:	b10a      	cbz	r2, 8019c9a <_printf_common+0x26>
 8019c96:	3301      	adds	r3, #1
 8019c98:	6033      	str	r3, [r6, #0]
 8019c9a:	6823      	ldr	r3, [r4, #0]
 8019c9c:	0699      	lsls	r1, r3, #26
 8019c9e:	bf42      	ittt	mi
 8019ca0:	6833      	ldrmi	r3, [r6, #0]
 8019ca2:	3302      	addmi	r3, #2
 8019ca4:	6033      	strmi	r3, [r6, #0]
 8019ca6:	6825      	ldr	r5, [r4, #0]
 8019ca8:	f015 0506 	ands.w	r5, r5, #6
 8019cac:	d106      	bne.n	8019cbc <_printf_common+0x48>
 8019cae:	f104 0a19 	add.w	sl, r4, #25
 8019cb2:	68e3      	ldr	r3, [r4, #12]
 8019cb4:	6832      	ldr	r2, [r6, #0]
 8019cb6:	1a9b      	subs	r3, r3, r2
 8019cb8:	42ab      	cmp	r3, r5
 8019cba:	dc26      	bgt.n	8019d0a <_printf_common+0x96>
 8019cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019cc0:	1e13      	subs	r3, r2, #0
 8019cc2:	6822      	ldr	r2, [r4, #0]
 8019cc4:	bf18      	it	ne
 8019cc6:	2301      	movne	r3, #1
 8019cc8:	0692      	lsls	r2, r2, #26
 8019cca:	d42b      	bmi.n	8019d24 <_printf_common+0xb0>
 8019ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019cd0:	4649      	mov	r1, r9
 8019cd2:	4638      	mov	r0, r7
 8019cd4:	47c0      	blx	r8
 8019cd6:	3001      	adds	r0, #1
 8019cd8:	d01e      	beq.n	8019d18 <_printf_common+0xa4>
 8019cda:	6823      	ldr	r3, [r4, #0]
 8019cdc:	68e5      	ldr	r5, [r4, #12]
 8019cde:	6832      	ldr	r2, [r6, #0]
 8019ce0:	f003 0306 	and.w	r3, r3, #6
 8019ce4:	2b04      	cmp	r3, #4
 8019ce6:	bf08      	it	eq
 8019ce8:	1aad      	subeq	r5, r5, r2
 8019cea:	68a3      	ldr	r3, [r4, #8]
 8019cec:	6922      	ldr	r2, [r4, #16]
 8019cee:	bf0c      	ite	eq
 8019cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019cf4:	2500      	movne	r5, #0
 8019cf6:	4293      	cmp	r3, r2
 8019cf8:	bfc4      	itt	gt
 8019cfa:	1a9b      	subgt	r3, r3, r2
 8019cfc:	18ed      	addgt	r5, r5, r3
 8019cfe:	2600      	movs	r6, #0
 8019d00:	341a      	adds	r4, #26
 8019d02:	42b5      	cmp	r5, r6
 8019d04:	d11a      	bne.n	8019d3c <_printf_common+0xc8>
 8019d06:	2000      	movs	r0, #0
 8019d08:	e008      	b.n	8019d1c <_printf_common+0xa8>
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	4652      	mov	r2, sl
 8019d0e:	4649      	mov	r1, r9
 8019d10:	4638      	mov	r0, r7
 8019d12:	47c0      	blx	r8
 8019d14:	3001      	adds	r0, #1
 8019d16:	d103      	bne.n	8019d20 <_printf_common+0xac>
 8019d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d20:	3501      	adds	r5, #1
 8019d22:	e7c6      	b.n	8019cb2 <_printf_common+0x3e>
 8019d24:	18e1      	adds	r1, r4, r3
 8019d26:	1c5a      	adds	r2, r3, #1
 8019d28:	2030      	movs	r0, #48	; 0x30
 8019d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019d2e:	4422      	add	r2, r4
 8019d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019d38:	3302      	adds	r3, #2
 8019d3a:	e7c7      	b.n	8019ccc <_printf_common+0x58>
 8019d3c:	2301      	movs	r3, #1
 8019d3e:	4622      	mov	r2, r4
 8019d40:	4649      	mov	r1, r9
 8019d42:	4638      	mov	r0, r7
 8019d44:	47c0      	blx	r8
 8019d46:	3001      	adds	r0, #1
 8019d48:	d0e6      	beq.n	8019d18 <_printf_common+0xa4>
 8019d4a:	3601      	adds	r6, #1
 8019d4c:	e7d9      	b.n	8019d02 <_printf_common+0x8e>
	...

08019d50 <_printf_i>:
 8019d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d54:	7e0f      	ldrb	r7, [r1, #24]
 8019d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019d58:	2f78      	cmp	r7, #120	; 0x78
 8019d5a:	4691      	mov	r9, r2
 8019d5c:	4680      	mov	r8, r0
 8019d5e:	460c      	mov	r4, r1
 8019d60:	469a      	mov	sl, r3
 8019d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019d66:	d807      	bhi.n	8019d78 <_printf_i+0x28>
 8019d68:	2f62      	cmp	r7, #98	; 0x62
 8019d6a:	d80a      	bhi.n	8019d82 <_printf_i+0x32>
 8019d6c:	2f00      	cmp	r7, #0
 8019d6e:	f000 80d8 	beq.w	8019f22 <_printf_i+0x1d2>
 8019d72:	2f58      	cmp	r7, #88	; 0x58
 8019d74:	f000 80a3 	beq.w	8019ebe <_printf_i+0x16e>
 8019d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019d80:	e03a      	b.n	8019df8 <_printf_i+0xa8>
 8019d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019d86:	2b15      	cmp	r3, #21
 8019d88:	d8f6      	bhi.n	8019d78 <_printf_i+0x28>
 8019d8a:	a101      	add	r1, pc, #4	; (adr r1, 8019d90 <_printf_i+0x40>)
 8019d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019d90:	08019de9 	.word	0x08019de9
 8019d94:	08019dfd 	.word	0x08019dfd
 8019d98:	08019d79 	.word	0x08019d79
 8019d9c:	08019d79 	.word	0x08019d79
 8019da0:	08019d79 	.word	0x08019d79
 8019da4:	08019d79 	.word	0x08019d79
 8019da8:	08019dfd 	.word	0x08019dfd
 8019dac:	08019d79 	.word	0x08019d79
 8019db0:	08019d79 	.word	0x08019d79
 8019db4:	08019d79 	.word	0x08019d79
 8019db8:	08019d79 	.word	0x08019d79
 8019dbc:	08019f09 	.word	0x08019f09
 8019dc0:	08019e2d 	.word	0x08019e2d
 8019dc4:	08019eeb 	.word	0x08019eeb
 8019dc8:	08019d79 	.word	0x08019d79
 8019dcc:	08019d79 	.word	0x08019d79
 8019dd0:	08019f2b 	.word	0x08019f2b
 8019dd4:	08019d79 	.word	0x08019d79
 8019dd8:	08019e2d 	.word	0x08019e2d
 8019ddc:	08019d79 	.word	0x08019d79
 8019de0:	08019d79 	.word	0x08019d79
 8019de4:	08019ef3 	.word	0x08019ef3
 8019de8:	682b      	ldr	r3, [r5, #0]
 8019dea:	1d1a      	adds	r2, r3, #4
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	602a      	str	r2, [r5, #0]
 8019df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019df8:	2301      	movs	r3, #1
 8019dfa:	e0a3      	b.n	8019f44 <_printf_i+0x1f4>
 8019dfc:	6820      	ldr	r0, [r4, #0]
 8019dfe:	6829      	ldr	r1, [r5, #0]
 8019e00:	0606      	lsls	r6, r0, #24
 8019e02:	f101 0304 	add.w	r3, r1, #4
 8019e06:	d50a      	bpl.n	8019e1e <_printf_i+0xce>
 8019e08:	680e      	ldr	r6, [r1, #0]
 8019e0a:	602b      	str	r3, [r5, #0]
 8019e0c:	2e00      	cmp	r6, #0
 8019e0e:	da03      	bge.n	8019e18 <_printf_i+0xc8>
 8019e10:	232d      	movs	r3, #45	; 0x2d
 8019e12:	4276      	negs	r6, r6
 8019e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e18:	485e      	ldr	r0, [pc, #376]	; (8019f94 <_printf_i+0x244>)
 8019e1a:	230a      	movs	r3, #10
 8019e1c:	e019      	b.n	8019e52 <_printf_i+0x102>
 8019e1e:	680e      	ldr	r6, [r1, #0]
 8019e20:	602b      	str	r3, [r5, #0]
 8019e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019e26:	bf18      	it	ne
 8019e28:	b236      	sxthne	r6, r6
 8019e2a:	e7ef      	b.n	8019e0c <_printf_i+0xbc>
 8019e2c:	682b      	ldr	r3, [r5, #0]
 8019e2e:	6820      	ldr	r0, [r4, #0]
 8019e30:	1d19      	adds	r1, r3, #4
 8019e32:	6029      	str	r1, [r5, #0]
 8019e34:	0601      	lsls	r1, r0, #24
 8019e36:	d501      	bpl.n	8019e3c <_printf_i+0xec>
 8019e38:	681e      	ldr	r6, [r3, #0]
 8019e3a:	e002      	b.n	8019e42 <_printf_i+0xf2>
 8019e3c:	0646      	lsls	r6, r0, #25
 8019e3e:	d5fb      	bpl.n	8019e38 <_printf_i+0xe8>
 8019e40:	881e      	ldrh	r6, [r3, #0]
 8019e42:	4854      	ldr	r0, [pc, #336]	; (8019f94 <_printf_i+0x244>)
 8019e44:	2f6f      	cmp	r7, #111	; 0x6f
 8019e46:	bf0c      	ite	eq
 8019e48:	2308      	moveq	r3, #8
 8019e4a:	230a      	movne	r3, #10
 8019e4c:	2100      	movs	r1, #0
 8019e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019e52:	6865      	ldr	r5, [r4, #4]
 8019e54:	60a5      	str	r5, [r4, #8]
 8019e56:	2d00      	cmp	r5, #0
 8019e58:	bfa2      	ittt	ge
 8019e5a:	6821      	ldrge	r1, [r4, #0]
 8019e5c:	f021 0104 	bicge.w	r1, r1, #4
 8019e60:	6021      	strge	r1, [r4, #0]
 8019e62:	b90e      	cbnz	r6, 8019e68 <_printf_i+0x118>
 8019e64:	2d00      	cmp	r5, #0
 8019e66:	d04d      	beq.n	8019f04 <_printf_i+0x1b4>
 8019e68:	4615      	mov	r5, r2
 8019e6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8019e6e:	fb03 6711 	mls	r7, r3, r1, r6
 8019e72:	5dc7      	ldrb	r7, [r0, r7]
 8019e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019e78:	4637      	mov	r7, r6
 8019e7a:	42bb      	cmp	r3, r7
 8019e7c:	460e      	mov	r6, r1
 8019e7e:	d9f4      	bls.n	8019e6a <_printf_i+0x11a>
 8019e80:	2b08      	cmp	r3, #8
 8019e82:	d10b      	bne.n	8019e9c <_printf_i+0x14c>
 8019e84:	6823      	ldr	r3, [r4, #0]
 8019e86:	07de      	lsls	r6, r3, #31
 8019e88:	d508      	bpl.n	8019e9c <_printf_i+0x14c>
 8019e8a:	6923      	ldr	r3, [r4, #16]
 8019e8c:	6861      	ldr	r1, [r4, #4]
 8019e8e:	4299      	cmp	r1, r3
 8019e90:	bfde      	ittt	le
 8019e92:	2330      	movle	r3, #48	; 0x30
 8019e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019e98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019e9c:	1b52      	subs	r2, r2, r5
 8019e9e:	6122      	str	r2, [r4, #16]
 8019ea0:	f8cd a000 	str.w	sl, [sp]
 8019ea4:	464b      	mov	r3, r9
 8019ea6:	aa03      	add	r2, sp, #12
 8019ea8:	4621      	mov	r1, r4
 8019eaa:	4640      	mov	r0, r8
 8019eac:	f7ff fee2 	bl	8019c74 <_printf_common>
 8019eb0:	3001      	adds	r0, #1
 8019eb2:	d14c      	bne.n	8019f4e <_printf_i+0x1fe>
 8019eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019eb8:	b004      	add	sp, #16
 8019eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ebe:	4835      	ldr	r0, [pc, #212]	; (8019f94 <_printf_i+0x244>)
 8019ec0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019ec4:	6829      	ldr	r1, [r5, #0]
 8019ec6:	6823      	ldr	r3, [r4, #0]
 8019ec8:	f851 6b04 	ldr.w	r6, [r1], #4
 8019ecc:	6029      	str	r1, [r5, #0]
 8019ece:	061d      	lsls	r5, r3, #24
 8019ed0:	d514      	bpl.n	8019efc <_printf_i+0x1ac>
 8019ed2:	07df      	lsls	r7, r3, #31
 8019ed4:	bf44      	itt	mi
 8019ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8019eda:	6023      	strmi	r3, [r4, #0]
 8019edc:	b91e      	cbnz	r6, 8019ee6 <_printf_i+0x196>
 8019ede:	6823      	ldr	r3, [r4, #0]
 8019ee0:	f023 0320 	bic.w	r3, r3, #32
 8019ee4:	6023      	str	r3, [r4, #0]
 8019ee6:	2310      	movs	r3, #16
 8019ee8:	e7b0      	b.n	8019e4c <_printf_i+0xfc>
 8019eea:	6823      	ldr	r3, [r4, #0]
 8019eec:	f043 0320 	orr.w	r3, r3, #32
 8019ef0:	6023      	str	r3, [r4, #0]
 8019ef2:	2378      	movs	r3, #120	; 0x78
 8019ef4:	4828      	ldr	r0, [pc, #160]	; (8019f98 <_printf_i+0x248>)
 8019ef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019efa:	e7e3      	b.n	8019ec4 <_printf_i+0x174>
 8019efc:	0659      	lsls	r1, r3, #25
 8019efe:	bf48      	it	mi
 8019f00:	b2b6      	uxthmi	r6, r6
 8019f02:	e7e6      	b.n	8019ed2 <_printf_i+0x182>
 8019f04:	4615      	mov	r5, r2
 8019f06:	e7bb      	b.n	8019e80 <_printf_i+0x130>
 8019f08:	682b      	ldr	r3, [r5, #0]
 8019f0a:	6826      	ldr	r6, [r4, #0]
 8019f0c:	6961      	ldr	r1, [r4, #20]
 8019f0e:	1d18      	adds	r0, r3, #4
 8019f10:	6028      	str	r0, [r5, #0]
 8019f12:	0635      	lsls	r5, r6, #24
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	d501      	bpl.n	8019f1c <_printf_i+0x1cc>
 8019f18:	6019      	str	r1, [r3, #0]
 8019f1a:	e002      	b.n	8019f22 <_printf_i+0x1d2>
 8019f1c:	0670      	lsls	r0, r6, #25
 8019f1e:	d5fb      	bpl.n	8019f18 <_printf_i+0x1c8>
 8019f20:	8019      	strh	r1, [r3, #0]
 8019f22:	2300      	movs	r3, #0
 8019f24:	6123      	str	r3, [r4, #16]
 8019f26:	4615      	mov	r5, r2
 8019f28:	e7ba      	b.n	8019ea0 <_printf_i+0x150>
 8019f2a:	682b      	ldr	r3, [r5, #0]
 8019f2c:	1d1a      	adds	r2, r3, #4
 8019f2e:	602a      	str	r2, [r5, #0]
 8019f30:	681d      	ldr	r5, [r3, #0]
 8019f32:	6862      	ldr	r2, [r4, #4]
 8019f34:	2100      	movs	r1, #0
 8019f36:	4628      	mov	r0, r5
 8019f38:	f7e6 f972 	bl	8000220 <memchr>
 8019f3c:	b108      	cbz	r0, 8019f42 <_printf_i+0x1f2>
 8019f3e:	1b40      	subs	r0, r0, r5
 8019f40:	6060      	str	r0, [r4, #4]
 8019f42:	6863      	ldr	r3, [r4, #4]
 8019f44:	6123      	str	r3, [r4, #16]
 8019f46:	2300      	movs	r3, #0
 8019f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f4c:	e7a8      	b.n	8019ea0 <_printf_i+0x150>
 8019f4e:	6923      	ldr	r3, [r4, #16]
 8019f50:	462a      	mov	r2, r5
 8019f52:	4649      	mov	r1, r9
 8019f54:	4640      	mov	r0, r8
 8019f56:	47d0      	blx	sl
 8019f58:	3001      	adds	r0, #1
 8019f5a:	d0ab      	beq.n	8019eb4 <_printf_i+0x164>
 8019f5c:	6823      	ldr	r3, [r4, #0]
 8019f5e:	079b      	lsls	r3, r3, #30
 8019f60:	d413      	bmi.n	8019f8a <_printf_i+0x23a>
 8019f62:	68e0      	ldr	r0, [r4, #12]
 8019f64:	9b03      	ldr	r3, [sp, #12]
 8019f66:	4298      	cmp	r0, r3
 8019f68:	bfb8      	it	lt
 8019f6a:	4618      	movlt	r0, r3
 8019f6c:	e7a4      	b.n	8019eb8 <_printf_i+0x168>
 8019f6e:	2301      	movs	r3, #1
 8019f70:	4632      	mov	r2, r6
 8019f72:	4649      	mov	r1, r9
 8019f74:	4640      	mov	r0, r8
 8019f76:	47d0      	blx	sl
 8019f78:	3001      	adds	r0, #1
 8019f7a:	d09b      	beq.n	8019eb4 <_printf_i+0x164>
 8019f7c:	3501      	adds	r5, #1
 8019f7e:	68e3      	ldr	r3, [r4, #12]
 8019f80:	9903      	ldr	r1, [sp, #12]
 8019f82:	1a5b      	subs	r3, r3, r1
 8019f84:	42ab      	cmp	r3, r5
 8019f86:	dcf2      	bgt.n	8019f6e <_printf_i+0x21e>
 8019f88:	e7eb      	b.n	8019f62 <_printf_i+0x212>
 8019f8a:	2500      	movs	r5, #0
 8019f8c:	f104 0619 	add.w	r6, r4, #25
 8019f90:	e7f5      	b.n	8019f7e <_printf_i+0x22e>
 8019f92:	bf00      	nop
 8019f94:	0801d9b7 	.word	0x0801d9b7
 8019f98:	0801d9c8 	.word	0x0801d9c8

08019f9c <_read_r>:
 8019f9c:	b538      	push	{r3, r4, r5, lr}
 8019f9e:	4d07      	ldr	r5, [pc, #28]	; (8019fbc <_read_r+0x20>)
 8019fa0:	4604      	mov	r4, r0
 8019fa2:	4608      	mov	r0, r1
 8019fa4:	4611      	mov	r1, r2
 8019fa6:	2200      	movs	r2, #0
 8019fa8:	602a      	str	r2, [r5, #0]
 8019faa:	461a      	mov	r2, r3
 8019fac:	f7e9 ff66 	bl	8003e7c <_read>
 8019fb0:	1c43      	adds	r3, r0, #1
 8019fb2:	d102      	bne.n	8019fba <_read_r+0x1e>
 8019fb4:	682b      	ldr	r3, [r5, #0]
 8019fb6:	b103      	cbz	r3, 8019fba <_read_r+0x1e>
 8019fb8:	6023      	str	r3, [r4, #0]
 8019fba:	bd38      	pop	{r3, r4, r5, pc}
 8019fbc:	2004f130 	.word	0x2004f130

08019fc0 <__swbuf_r>:
 8019fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fc2:	460e      	mov	r6, r1
 8019fc4:	4614      	mov	r4, r2
 8019fc6:	4605      	mov	r5, r0
 8019fc8:	b118      	cbz	r0, 8019fd2 <__swbuf_r+0x12>
 8019fca:	6983      	ldr	r3, [r0, #24]
 8019fcc:	b90b      	cbnz	r3, 8019fd2 <__swbuf_r+0x12>
 8019fce:	f7ff f8dd 	bl	801918c <__sinit>
 8019fd2:	4b21      	ldr	r3, [pc, #132]	; (801a058 <__swbuf_r+0x98>)
 8019fd4:	429c      	cmp	r4, r3
 8019fd6:	d12b      	bne.n	801a030 <__swbuf_r+0x70>
 8019fd8:	686c      	ldr	r4, [r5, #4]
 8019fda:	69a3      	ldr	r3, [r4, #24]
 8019fdc:	60a3      	str	r3, [r4, #8]
 8019fde:	89a3      	ldrh	r3, [r4, #12]
 8019fe0:	071a      	lsls	r2, r3, #28
 8019fe2:	d52f      	bpl.n	801a044 <__swbuf_r+0x84>
 8019fe4:	6923      	ldr	r3, [r4, #16]
 8019fe6:	b36b      	cbz	r3, 801a044 <__swbuf_r+0x84>
 8019fe8:	6923      	ldr	r3, [r4, #16]
 8019fea:	6820      	ldr	r0, [r4, #0]
 8019fec:	1ac0      	subs	r0, r0, r3
 8019fee:	6963      	ldr	r3, [r4, #20]
 8019ff0:	b2f6      	uxtb	r6, r6
 8019ff2:	4283      	cmp	r3, r0
 8019ff4:	4637      	mov	r7, r6
 8019ff6:	dc04      	bgt.n	801a002 <__swbuf_r+0x42>
 8019ff8:	4621      	mov	r1, r4
 8019ffa:	4628      	mov	r0, r5
 8019ffc:	f7ff fc20 	bl	8019840 <_fflush_r>
 801a000:	bb30      	cbnz	r0, 801a050 <__swbuf_r+0x90>
 801a002:	68a3      	ldr	r3, [r4, #8]
 801a004:	3b01      	subs	r3, #1
 801a006:	60a3      	str	r3, [r4, #8]
 801a008:	6823      	ldr	r3, [r4, #0]
 801a00a:	1c5a      	adds	r2, r3, #1
 801a00c:	6022      	str	r2, [r4, #0]
 801a00e:	701e      	strb	r6, [r3, #0]
 801a010:	6963      	ldr	r3, [r4, #20]
 801a012:	3001      	adds	r0, #1
 801a014:	4283      	cmp	r3, r0
 801a016:	d004      	beq.n	801a022 <__swbuf_r+0x62>
 801a018:	89a3      	ldrh	r3, [r4, #12]
 801a01a:	07db      	lsls	r3, r3, #31
 801a01c:	d506      	bpl.n	801a02c <__swbuf_r+0x6c>
 801a01e:	2e0a      	cmp	r6, #10
 801a020:	d104      	bne.n	801a02c <__swbuf_r+0x6c>
 801a022:	4621      	mov	r1, r4
 801a024:	4628      	mov	r0, r5
 801a026:	f7ff fc0b 	bl	8019840 <_fflush_r>
 801a02a:	b988      	cbnz	r0, 801a050 <__swbuf_r+0x90>
 801a02c:	4638      	mov	r0, r7
 801a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a030:	4b0a      	ldr	r3, [pc, #40]	; (801a05c <__swbuf_r+0x9c>)
 801a032:	429c      	cmp	r4, r3
 801a034:	d101      	bne.n	801a03a <__swbuf_r+0x7a>
 801a036:	68ac      	ldr	r4, [r5, #8]
 801a038:	e7cf      	b.n	8019fda <__swbuf_r+0x1a>
 801a03a:	4b09      	ldr	r3, [pc, #36]	; (801a060 <__swbuf_r+0xa0>)
 801a03c:	429c      	cmp	r4, r3
 801a03e:	bf08      	it	eq
 801a040:	68ec      	ldreq	r4, [r5, #12]
 801a042:	e7ca      	b.n	8019fda <__swbuf_r+0x1a>
 801a044:	4621      	mov	r1, r4
 801a046:	4628      	mov	r0, r5
 801a048:	f000 f80c 	bl	801a064 <__swsetup_r>
 801a04c:	2800      	cmp	r0, #0
 801a04e:	d0cb      	beq.n	8019fe8 <__swbuf_r+0x28>
 801a050:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a054:	e7ea      	b.n	801a02c <__swbuf_r+0x6c>
 801a056:	bf00      	nop
 801a058:	0801d8b4 	.word	0x0801d8b4
 801a05c:	0801d8d4 	.word	0x0801d8d4
 801a060:	0801d894 	.word	0x0801d894

0801a064 <__swsetup_r>:
 801a064:	4b32      	ldr	r3, [pc, #200]	; (801a130 <__swsetup_r+0xcc>)
 801a066:	b570      	push	{r4, r5, r6, lr}
 801a068:	681d      	ldr	r5, [r3, #0]
 801a06a:	4606      	mov	r6, r0
 801a06c:	460c      	mov	r4, r1
 801a06e:	b125      	cbz	r5, 801a07a <__swsetup_r+0x16>
 801a070:	69ab      	ldr	r3, [r5, #24]
 801a072:	b913      	cbnz	r3, 801a07a <__swsetup_r+0x16>
 801a074:	4628      	mov	r0, r5
 801a076:	f7ff f889 	bl	801918c <__sinit>
 801a07a:	4b2e      	ldr	r3, [pc, #184]	; (801a134 <__swsetup_r+0xd0>)
 801a07c:	429c      	cmp	r4, r3
 801a07e:	d10f      	bne.n	801a0a0 <__swsetup_r+0x3c>
 801a080:	686c      	ldr	r4, [r5, #4]
 801a082:	89a3      	ldrh	r3, [r4, #12]
 801a084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a088:	0719      	lsls	r1, r3, #28
 801a08a:	d42c      	bmi.n	801a0e6 <__swsetup_r+0x82>
 801a08c:	06dd      	lsls	r5, r3, #27
 801a08e:	d411      	bmi.n	801a0b4 <__swsetup_r+0x50>
 801a090:	2309      	movs	r3, #9
 801a092:	6033      	str	r3, [r6, #0]
 801a094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a098:	81a3      	strh	r3, [r4, #12]
 801a09a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a09e:	e03e      	b.n	801a11e <__swsetup_r+0xba>
 801a0a0:	4b25      	ldr	r3, [pc, #148]	; (801a138 <__swsetup_r+0xd4>)
 801a0a2:	429c      	cmp	r4, r3
 801a0a4:	d101      	bne.n	801a0aa <__swsetup_r+0x46>
 801a0a6:	68ac      	ldr	r4, [r5, #8]
 801a0a8:	e7eb      	b.n	801a082 <__swsetup_r+0x1e>
 801a0aa:	4b24      	ldr	r3, [pc, #144]	; (801a13c <__swsetup_r+0xd8>)
 801a0ac:	429c      	cmp	r4, r3
 801a0ae:	bf08      	it	eq
 801a0b0:	68ec      	ldreq	r4, [r5, #12]
 801a0b2:	e7e6      	b.n	801a082 <__swsetup_r+0x1e>
 801a0b4:	0758      	lsls	r0, r3, #29
 801a0b6:	d512      	bpl.n	801a0de <__swsetup_r+0x7a>
 801a0b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a0ba:	b141      	cbz	r1, 801a0ce <__swsetup_r+0x6a>
 801a0bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a0c0:	4299      	cmp	r1, r3
 801a0c2:	d002      	beq.n	801a0ca <__swsetup_r+0x66>
 801a0c4:	4630      	mov	r0, r6
 801a0c6:	f7ff fc2f 	bl	8019928 <_free_r>
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	6363      	str	r3, [r4, #52]	; 0x34
 801a0ce:	89a3      	ldrh	r3, [r4, #12]
 801a0d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a0d4:	81a3      	strh	r3, [r4, #12]
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	6063      	str	r3, [r4, #4]
 801a0da:	6923      	ldr	r3, [r4, #16]
 801a0dc:	6023      	str	r3, [r4, #0]
 801a0de:	89a3      	ldrh	r3, [r4, #12]
 801a0e0:	f043 0308 	orr.w	r3, r3, #8
 801a0e4:	81a3      	strh	r3, [r4, #12]
 801a0e6:	6923      	ldr	r3, [r4, #16]
 801a0e8:	b94b      	cbnz	r3, 801a0fe <__swsetup_r+0x9a>
 801a0ea:	89a3      	ldrh	r3, [r4, #12]
 801a0ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a0f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0f4:	d003      	beq.n	801a0fe <__swsetup_r+0x9a>
 801a0f6:	4621      	mov	r1, r4
 801a0f8:	4630      	mov	r0, r6
 801a0fa:	f000 f84d 	bl	801a198 <__smakebuf_r>
 801a0fe:	89a0      	ldrh	r0, [r4, #12]
 801a100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a104:	f010 0301 	ands.w	r3, r0, #1
 801a108:	d00a      	beq.n	801a120 <__swsetup_r+0xbc>
 801a10a:	2300      	movs	r3, #0
 801a10c:	60a3      	str	r3, [r4, #8]
 801a10e:	6963      	ldr	r3, [r4, #20]
 801a110:	425b      	negs	r3, r3
 801a112:	61a3      	str	r3, [r4, #24]
 801a114:	6923      	ldr	r3, [r4, #16]
 801a116:	b943      	cbnz	r3, 801a12a <__swsetup_r+0xc6>
 801a118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a11c:	d1ba      	bne.n	801a094 <__swsetup_r+0x30>
 801a11e:	bd70      	pop	{r4, r5, r6, pc}
 801a120:	0781      	lsls	r1, r0, #30
 801a122:	bf58      	it	pl
 801a124:	6963      	ldrpl	r3, [r4, #20]
 801a126:	60a3      	str	r3, [r4, #8]
 801a128:	e7f4      	b.n	801a114 <__swsetup_r+0xb0>
 801a12a:	2000      	movs	r0, #0
 801a12c:	e7f7      	b.n	801a11e <__swsetup_r+0xba>
 801a12e:	bf00      	nop
 801a130:	20001a5c 	.word	0x20001a5c
 801a134:	0801d8b4 	.word	0x0801d8b4
 801a138:	0801d8d4 	.word	0x0801d8d4
 801a13c:	0801d894 	.word	0x0801d894

0801a140 <abort>:
 801a140:	b508      	push	{r3, lr}
 801a142:	2006      	movs	r0, #6
 801a144:	f000 f890 	bl	801a268 <raise>
 801a148:	2001      	movs	r0, #1
 801a14a:	f7e9 fe8d 	bl	8003e68 <_exit>

0801a14e <__swhatbuf_r>:
 801a14e:	b570      	push	{r4, r5, r6, lr}
 801a150:	460e      	mov	r6, r1
 801a152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a156:	2900      	cmp	r1, #0
 801a158:	b096      	sub	sp, #88	; 0x58
 801a15a:	4614      	mov	r4, r2
 801a15c:	461d      	mov	r5, r3
 801a15e:	da08      	bge.n	801a172 <__swhatbuf_r+0x24>
 801a160:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a164:	2200      	movs	r2, #0
 801a166:	602a      	str	r2, [r5, #0]
 801a168:	061a      	lsls	r2, r3, #24
 801a16a:	d410      	bmi.n	801a18e <__swhatbuf_r+0x40>
 801a16c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a170:	e00e      	b.n	801a190 <__swhatbuf_r+0x42>
 801a172:	466a      	mov	r2, sp
 801a174:	f000 f894 	bl	801a2a0 <_fstat_r>
 801a178:	2800      	cmp	r0, #0
 801a17a:	dbf1      	blt.n	801a160 <__swhatbuf_r+0x12>
 801a17c:	9a01      	ldr	r2, [sp, #4]
 801a17e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a182:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a186:	425a      	negs	r2, r3
 801a188:	415a      	adcs	r2, r3
 801a18a:	602a      	str	r2, [r5, #0]
 801a18c:	e7ee      	b.n	801a16c <__swhatbuf_r+0x1e>
 801a18e:	2340      	movs	r3, #64	; 0x40
 801a190:	2000      	movs	r0, #0
 801a192:	6023      	str	r3, [r4, #0]
 801a194:	b016      	add	sp, #88	; 0x58
 801a196:	bd70      	pop	{r4, r5, r6, pc}

0801a198 <__smakebuf_r>:
 801a198:	898b      	ldrh	r3, [r1, #12]
 801a19a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a19c:	079d      	lsls	r5, r3, #30
 801a19e:	4606      	mov	r6, r0
 801a1a0:	460c      	mov	r4, r1
 801a1a2:	d507      	bpl.n	801a1b4 <__smakebuf_r+0x1c>
 801a1a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a1a8:	6023      	str	r3, [r4, #0]
 801a1aa:	6123      	str	r3, [r4, #16]
 801a1ac:	2301      	movs	r3, #1
 801a1ae:	6163      	str	r3, [r4, #20]
 801a1b0:	b002      	add	sp, #8
 801a1b2:	bd70      	pop	{r4, r5, r6, pc}
 801a1b4:	ab01      	add	r3, sp, #4
 801a1b6:	466a      	mov	r2, sp
 801a1b8:	f7ff ffc9 	bl	801a14e <__swhatbuf_r>
 801a1bc:	9900      	ldr	r1, [sp, #0]
 801a1be:	4605      	mov	r5, r0
 801a1c0:	4630      	mov	r0, r6
 801a1c2:	f7ff f8ef 	bl	80193a4 <_malloc_r>
 801a1c6:	b948      	cbnz	r0, 801a1dc <__smakebuf_r+0x44>
 801a1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1cc:	059a      	lsls	r2, r3, #22
 801a1ce:	d4ef      	bmi.n	801a1b0 <__smakebuf_r+0x18>
 801a1d0:	f023 0303 	bic.w	r3, r3, #3
 801a1d4:	f043 0302 	orr.w	r3, r3, #2
 801a1d8:	81a3      	strh	r3, [r4, #12]
 801a1da:	e7e3      	b.n	801a1a4 <__smakebuf_r+0xc>
 801a1dc:	4b0d      	ldr	r3, [pc, #52]	; (801a214 <__smakebuf_r+0x7c>)
 801a1de:	62b3      	str	r3, [r6, #40]	; 0x28
 801a1e0:	89a3      	ldrh	r3, [r4, #12]
 801a1e2:	6020      	str	r0, [r4, #0]
 801a1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1e8:	81a3      	strh	r3, [r4, #12]
 801a1ea:	9b00      	ldr	r3, [sp, #0]
 801a1ec:	6163      	str	r3, [r4, #20]
 801a1ee:	9b01      	ldr	r3, [sp, #4]
 801a1f0:	6120      	str	r0, [r4, #16]
 801a1f2:	b15b      	cbz	r3, 801a20c <__smakebuf_r+0x74>
 801a1f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1f8:	4630      	mov	r0, r6
 801a1fa:	f000 f863 	bl	801a2c4 <_isatty_r>
 801a1fe:	b128      	cbz	r0, 801a20c <__smakebuf_r+0x74>
 801a200:	89a3      	ldrh	r3, [r4, #12]
 801a202:	f023 0303 	bic.w	r3, r3, #3
 801a206:	f043 0301 	orr.w	r3, r3, #1
 801a20a:	81a3      	strh	r3, [r4, #12]
 801a20c:	89a0      	ldrh	r0, [r4, #12]
 801a20e:	4305      	orrs	r5, r0
 801a210:	81a5      	strh	r5, [r4, #12]
 801a212:	e7cd      	b.n	801a1b0 <__smakebuf_r+0x18>
 801a214:	08019125 	.word	0x08019125

0801a218 <_raise_r>:
 801a218:	291f      	cmp	r1, #31
 801a21a:	b538      	push	{r3, r4, r5, lr}
 801a21c:	4604      	mov	r4, r0
 801a21e:	460d      	mov	r5, r1
 801a220:	d904      	bls.n	801a22c <_raise_r+0x14>
 801a222:	2316      	movs	r3, #22
 801a224:	6003      	str	r3, [r0, #0]
 801a226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a22a:	bd38      	pop	{r3, r4, r5, pc}
 801a22c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a22e:	b112      	cbz	r2, 801a236 <_raise_r+0x1e>
 801a230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a234:	b94b      	cbnz	r3, 801a24a <_raise_r+0x32>
 801a236:	4620      	mov	r0, r4
 801a238:	f000 f830 	bl	801a29c <_getpid_r>
 801a23c:	462a      	mov	r2, r5
 801a23e:	4601      	mov	r1, r0
 801a240:	4620      	mov	r0, r4
 801a242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a246:	f000 b817 	b.w	801a278 <_kill_r>
 801a24a:	2b01      	cmp	r3, #1
 801a24c:	d00a      	beq.n	801a264 <_raise_r+0x4c>
 801a24e:	1c59      	adds	r1, r3, #1
 801a250:	d103      	bne.n	801a25a <_raise_r+0x42>
 801a252:	2316      	movs	r3, #22
 801a254:	6003      	str	r3, [r0, #0]
 801a256:	2001      	movs	r0, #1
 801a258:	e7e7      	b.n	801a22a <_raise_r+0x12>
 801a25a:	2400      	movs	r4, #0
 801a25c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a260:	4628      	mov	r0, r5
 801a262:	4798      	blx	r3
 801a264:	2000      	movs	r0, #0
 801a266:	e7e0      	b.n	801a22a <_raise_r+0x12>

0801a268 <raise>:
 801a268:	4b02      	ldr	r3, [pc, #8]	; (801a274 <raise+0xc>)
 801a26a:	4601      	mov	r1, r0
 801a26c:	6818      	ldr	r0, [r3, #0]
 801a26e:	f7ff bfd3 	b.w	801a218 <_raise_r>
 801a272:	bf00      	nop
 801a274:	20001a5c 	.word	0x20001a5c

0801a278 <_kill_r>:
 801a278:	b538      	push	{r3, r4, r5, lr}
 801a27a:	4d07      	ldr	r5, [pc, #28]	; (801a298 <_kill_r+0x20>)
 801a27c:	2300      	movs	r3, #0
 801a27e:	4604      	mov	r4, r0
 801a280:	4608      	mov	r0, r1
 801a282:	4611      	mov	r1, r2
 801a284:	602b      	str	r3, [r5, #0]
 801a286:	f7e9 fddd 	bl	8003e44 <_kill>
 801a28a:	1c43      	adds	r3, r0, #1
 801a28c:	d102      	bne.n	801a294 <_kill_r+0x1c>
 801a28e:	682b      	ldr	r3, [r5, #0]
 801a290:	b103      	cbz	r3, 801a294 <_kill_r+0x1c>
 801a292:	6023      	str	r3, [r4, #0]
 801a294:	bd38      	pop	{r3, r4, r5, pc}
 801a296:	bf00      	nop
 801a298:	2004f130 	.word	0x2004f130

0801a29c <_getpid_r>:
 801a29c:	f7e9 bdca 	b.w	8003e34 <_getpid>

0801a2a0 <_fstat_r>:
 801a2a0:	b538      	push	{r3, r4, r5, lr}
 801a2a2:	4d07      	ldr	r5, [pc, #28]	; (801a2c0 <_fstat_r+0x20>)
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	4604      	mov	r4, r0
 801a2a8:	4608      	mov	r0, r1
 801a2aa:	4611      	mov	r1, r2
 801a2ac:	602b      	str	r3, [r5, #0]
 801a2ae:	f7e9 fe2a 	bl	8003f06 <_fstat>
 801a2b2:	1c43      	adds	r3, r0, #1
 801a2b4:	d102      	bne.n	801a2bc <_fstat_r+0x1c>
 801a2b6:	682b      	ldr	r3, [r5, #0]
 801a2b8:	b103      	cbz	r3, 801a2bc <_fstat_r+0x1c>
 801a2ba:	6023      	str	r3, [r4, #0]
 801a2bc:	bd38      	pop	{r3, r4, r5, pc}
 801a2be:	bf00      	nop
 801a2c0:	2004f130 	.word	0x2004f130

0801a2c4 <_isatty_r>:
 801a2c4:	b538      	push	{r3, r4, r5, lr}
 801a2c6:	4d06      	ldr	r5, [pc, #24]	; (801a2e0 <_isatty_r+0x1c>)
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	4604      	mov	r4, r0
 801a2cc:	4608      	mov	r0, r1
 801a2ce:	602b      	str	r3, [r5, #0]
 801a2d0:	f7e9 fe29 	bl	8003f26 <_isatty>
 801a2d4:	1c43      	adds	r3, r0, #1
 801a2d6:	d102      	bne.n	801a2de <_isatty_r+0x1a>
 801a2d8:	682b      	ldr	r3, [r5, #0]
 801a2da:	b103      	cbz	r3, 801a2de <_isatty_r+0x1a>
 801a2dc:	6023      	str	r3, [r4, #0]
 801a2de:	bd38      	pop	{r3, r4, r5, pc}
 801a2e0:	2004f130 	.word	0x2004f130

0801a2e4 <_init>:
 801a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2e6:	bf00      	nop
 801a2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2ea:	bc08      	pop	{r3}
 801a2ec:	469e      	mov	lr, r3
 801a2ee:	4770      	bx	lr

0801a2f0 <_fini>:
 801a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2f2:	bf00      	nop
 801a2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2f6:	bc08      	pop	{r3}
 801a2f8:	469e      	mov	lr, r3
 801a2fa:	4770      	bx	lr
